var $M.0: [ref]i8;

var $M.5: [ref]i8;

var $M.6: ref;

var $M.7: i32;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.18: i32;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: ref;

var $M.25: i32;

var $M.26: ref;

var $M.27: i32;

var $M.28: ref;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: ref;

var $M.40: [ref]i8;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]i24;

var $M.46: [ref]i8;

var $M.47: i32;

var $M.48: i32;

var $M.49: [ref]ref;

var $M.50: ref;

var $M.51: [ref]i32;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: i32;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: [ref]ref;

var $M.60: [ref]i8;

var $M.61: ref;

var $M.62: ref;

var $M.63: i32;

var $M.64: ref;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.69: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.76: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.112: ref;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.131: [ref]i32;

var $M.132: [ref]i32;

var $M.133: [ref]i32;

var $M.134: [ref]i32;

var $M.135: [ref]i32;

var $M.136: [ref]i32;

var $M.137: [ref]i64;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]ref;

var $M.141: [ref]ref;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: [ref]ref;

var $M.147: [ref]ref;

var $M.148: [ref]ref;

var $M.149: [ref]ref;

var $M.150: [ref]ref;

var $M.151: [ref]ref;

var $M.152: [ref]ref;

var $M.153: [ref]ref;

var $M.154: [ref]ref;

var $M.155: [ref]ref;

var $M.156: [ref]ref;

var $M.157: [ref]ref;

var $M.158: [ref]ref;

var $M.159: [ref]ref;

var $M.160: [ref]ref;

var $M.161: [ref]ref;

var $M.162: [ref]ref;

var $M.163: [ref]ref;

var $M.164: [ref]ref;

var $M.165: [ref]ref;

var $M.166: [ref]ref;

var $M.167: [ref]ref;

var $M.168: [ref]i8;

var $M.169: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 777849);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2056);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 3084);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 4112);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 5140);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 6168);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 7200);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 8228);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 9260);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 10288);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 11320);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 12348);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 13380);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 14408);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 15436);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 16464);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 17492);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 18524);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 19556);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 20588);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 21620);

const debugfs_stats_fops_group1: ref;

axiom debugfs_stats_fops_group1 == $sub.ref(0, 22652);

const debugfs_stats_fops_group2: ref;

axiom debugfs_stats_fops_group2 == $sub.ref(0, 23684);

const rsxx_err_handler_group0: ref;

axiom rsxx_err_handler_group0 == $sub.ref(0, 24716);

const debugfs_cram_fops_group1: ref;

axiom debugfs_cram_fops_group1 == $sub.ref(0, 25748);

const debugfs_cram_fops_group2: ref;

axiom debugfs_cram_fops_group2 == $sub.ref(0, 26780);

const rsxx_pci_driver_group1: ref;

axiom rsxx_pci_driver_group1 == $sub.ref(0, 27812);

const debugfs_pci_regs_fops_group1: ref;

axiom debugfs_pci_regs_fops_group1 == $sub.ref(0, 28844);

const debugfs_pci_regs_fops_group2: ref;

axiom debugfs_pci_regs_fops_group2 == $sub.ref(0, 29876);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 30904);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 31932);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 32960);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 33988);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 35016);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 36044);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 37072);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 38100);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 39128);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 40156);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 41184);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 42212);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 43240);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 44268);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 45296);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 46324);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 47352);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 48380);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 49408);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 50436);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 51464);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 52492);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 53520);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 54548);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 55576);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 56604);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 57632);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 58660);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 59688);

const ldv_timer_6_0: ref;

axiom ldv_timer_6_0 == $sub.ref(0, 60716);

const ldv_timer_list_6_0: ref;

axiom ldv_timer_list_6_0 == $sub.ref(0, 61748);

const ldv_timer_6_1: ref;

axiom ldv_timer_6_1 == $sub.ref(0, 62776);

const ldv_timer_list_6_1: ref;

axiom ldv_timer_list_6_1 == $sub.ref(0, 63808);

const ldv_timer_6_2: ref;

axiom ldv_timer_6_2 == $sub.ref(0, 64836);

const ldv_timer_list_6_2: ref;

axiom ldv_timer_list_6_2 == $sub.ref(0, 65868);

const ldv_timer_6_3: ref;

axiom ldv_timer_6_3 == $sub.ref(0, 66896);

const ldv_timer_list_6_3: ref;

axiom ldv_timer_list_6_3 == $sub.ref(0, 67928);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 68960);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 69992);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 71024);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 72056);

const rsxx_fops_group0: ref;

axiom rsxx_fops_group0 == $sub.ref(0, 73088);

const ldv_work_5_0: ref;

axiom ldv_work_5_0 == $sub.ref(0, 74116);

const ldv_work_struct_5_0: ref;

axiom ldv_work_struct_5_0 == $sub.ref(0, 75148);

const ldv_work_5_1: ref;

axiom ldv_work_5_1 == $sub.ref(0, 76176);

const ldv_work_struct_5_1: ref;

axiom ldv_work_struct_5_1 == $sub.ref(0, 77208);

const ldv_work_5_2: ref;

axiom ldv_work_5_2 == $sub.ref(0, 78236);

const ldv_work_struct_5_2: ref;

axiom ldv_work_struct_5_2 == $sub.ref(0, 79268);

const ldv_work_5_3: ref;

axiom ldv_work_5_3 == $sub.ref(0, 80296);

const ldv_work_struct_5_3: ref;

axiom ldv_work_struct_5_3 == $sub.ref(0, 81328);

const ldv_work_4_0: ref;

axiom ldv_work_4_0 == $sub.ref(0, 82356);

const ldv_work_struct_4_0: ref;

axiom ldv_work_struct_4_0 == $sub.ref(0, 83388);

const ldv_work_4_1: ref;

axiom ldv_work_4_1 == $sub.ref(0, 84416);

const ldv_work_struct_4_1: ref;

axiom ldv_work_struct_4_1 == $sub.ref(0, 85448);

const ldv_work_4_2: ref;

axiom ldv_work_4_2 == $sub.ref(0, 86476);

const ldv_work_struct_4_2: ref;

axiom ldv_work_struct_4_2 == $sub.ref(0, 87508);

const ldv_work_4_3: ref;

axiom ldv_work_4_3 == $sub.ref(0, 88536);

const ldv_work_struct_4_3: ref;

axiom ldv_work_struct_4_3 == $sub.ref(0, 89568);

const ldv_timer_7_0: ref;

axiom ldv_timer_7_0 == $sub.ref(0, 90596);

const ldv_timer_list_7_0: ref;

axiom ldv_timer_list_7_0 == $sub.ref(0, 91628);

const ldv_timer_7_1: ref;

axiom ldv_timer_7_1 == $sub.ref(0, 92656);

const ldv_timer_list_7_1: ref;

axiom ldv_timer_list_7_1 == $sub.ref(0, 93688);

const ldv_timer_7_2: ref;

axiom ldv_timer_7_2 == $sub.ref(0, 94716);

const ldv_timer_list_7_2: ref;

axiom ldv_timer_list_7_2 == $sub.ref(0, 95748);

const ldv_timer_7_3: ref;

axiom ldv_timer_7_3 == $sub.ref(0, 96776);

const ldv_timer_list_7_3: ref;

axiom ldv_timer_list_7_3 == $sub.ref(0, 97808);

const {:count 3} __mod_pci__rsxx_pci_ids_device_table: ref;

axiom __mod_pci__rsxx_pci_ids_device_table == $sub.ref(0, 98928);

const ldv_mutex_work_lock_of_rsxx_dma_ctrl: ref;

axiom ldv_mutex_work_lock_of_rsxx_dma_ctrl == $sub.ref(0, 99956);

const ldv_mutex_reset_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_mutex_reset_lock_of_NOT_ARG_SIGN == $sub.ref(0, 100984);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 102012);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 103040);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 104068);

const ldv_mutex_dev_lock_of_rsxx_cardinfo: ref;

axiom ldv_mutex_dev_lock_of_rsxx_cardinfo == $sub.ref(0, 105096);

const rsxx_fops: ref;

axiom rsxx_fops == $sub.ref(0, 106224);

const blkdev_max_hw_sectors: ref;

axiom blkdev_max_hw_sectors == $sub.ref(0, 107252);

const blkdev_minors: ref;

axiom blkdev_minors == $sub.ref(0, 108280);

const enable_blkdev: ref;

axiom enable_blkdev == $sub.ref(0, 109308);

const rsxx_err_handler: ref;

axiom rsxx_err_handler == $sub.ref(0, 110380);

const {:count 3} rsxx_pci_ids: ref;

axiom rsxx_pci_ids == $sub.ref(0, 111500);

const rsxx_pci_driver: ref;

axiom rsxx_pci_driver == $sub.ref(0, 112836);

const debugfs_cram_fops: ref;

axiom debugfs_cram_fops == $sub.ref(0, 114084);

const debugfs_pci_regs_fops: ref;

axiom debugfs_pci_regs_fops == $sub.ref(0, 115332);

const debugfs_stats_fops: ref;

axiom debugfs_stats_fops == $sub.ref(0, 116580);

const sync_start: ref;

axiom sync_start == $sub.ref(0, 117608);

const force_legacy: ref;

axiom force_legacy == $sub.ref(0, 118636);

const rsxx_ida_lock: ref;

axiom rsxx_ida_lock == $sub.ref(0, 119732);

const rsxx_disk_ida: ref;

axiom rsxx_disk_ida == $sub.ref(0, 120876);

const rsxx_dma_pool: ref;

axiom rsxx_dma_pool == $sub.ref(0, 121908);

const bio_meta_pool: ref;

axiom bio_meta_pool == $sub.ref(0, 122940);

const creg_cmd_pool: ref;

axiom creg_cmd_pool == $sub.ref(0, 123972);

const {:count 25} .str.103: ref;

axiom .str.103 == $sub.ref(0, 125021);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 126059);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 25} .str.111: ref;

axiom .str.111 == $sub.ref(0, 127108);

const {:count 26} .str.112: ref;

axiom .str.112 == $sub.ref(0, 128158);

const {:count 26} .str.113: ref;

axiom .str.113 == $sub.ref(0, 129208);

const {:count 28} .str.114: ref;

axiom .str.114 == $sub.ref(0, 130260);

const {:count 28} .str.115: ref;

axiom .str.115 == $sub.ref(0, 131312);

const {:count 27} .str.116: ref;

axiom .str.116 == $sub.ref(0, 132363);

const {:count 27} .str.117: ref;

axiom .str.117 == $sub.ref(0, 133414);

const {:count 28} .str.118: ref;

axiom .str.118 == $sub.ref(0, 134466);

const {:count 30} .str.119: ref;

axiom .str.119 == $sub.ref(0, 135520);

const {:count 30} .str.120: ref;

axiom .str.120 == $sub.ref(0, 136574);

const {:count 28} .str.121: ref;

axiom .str.121 == $sub.ref(0, 137626);

const {:count 28} .str.122: ref;

axiom .str.122 == $sub.ref(0, 138678);

const {:count 29} .str.123: ref;

axiom .str.123 == $sub.ref(0, 139731);

const {:count 29} .str.124: ref;

axiom .str.124 == $sub.ref(0, 140784);

const {:count 29} .str.125: ref;

axiom .str.125 == $sub.ref(0, 141837);

const {:count 14} .str.55: ref;

axiom .str.55 == $sub.ref(0, 142875);

const {:count 17} .str.56: ref;

axiom .str.56 == $sub.ref(0, 143916);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 144953);

const {:count 13} .str.58: ref;

axiom .str.58 == $sub.ref(0, 145990);

const {:count 18} .str.59: ref;

axiom .str.59 == $sub.ref(0, 147032);

const {:count 18} .str.60: ref;

axiom .str.60 == $sub.ref(0, 148074);

const {:count 18} .str.61: ref;

axiom .str.61 == $sub.ref(0, 149116);

const {:count 18} .str.62: ref;

axiom .str.62 == $sub.ref(0, 150158);

const {:count 19} .str.63: ref;

axiom .str.63 == $sub.ref(0, 151201);

const {:count 19} .str.64: ref;

axiom .str.64 == $sub.ref(0, 152244);

const {:count 19} .str.65: ref;

axiom .str.65 == $sub.ref(0, 153287);

const {:count 19} .str.66: ref;

axiom .str.66 == $sub.ref(0, 154330);

const {:count 19} .str.67: ref;

axiom .str.67 == $sub.ref(0, 155373);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 156416);

const {:count 19} .str.69: ref;

axiom .str.69 == $sub.ref(0, 157459);

const {:count 19} .str.70: ref;

axiom .str.70 == $sub.ref(0, 158502);

const {:count 18} .str.71: ref;

axiom .str.71 == $sub.ref(0, 159544);

const {:count 18} .str.72: ref;

axiom .str.72 == $sub.ref(0, 160586);

const {:count 16} .str.73: ref;

axiom .str.73 == $sub.ref(0, 161626);

const {:count 16} .str.74: ref;

axiom .str.74 == $sub.ref(0, 162666);

const {:count 16} .str.75: ref;

axiom .str.75 == $sub.ref(0, 163706);

const {:count 16} .str.76: ref;

axiom .str.76 == $sub.ref(0, 164746);

const {:count 16} .str.77: ref;

axiom .str.77 == $sub.ref(0, 165786);

const {:count 16} .str.78: ref;

axiom .str.78 == $sub.ref(0, 166826);

const {:count 16} .str.79: ref;

axiom .str.79 == $sub.ref(0, 167866);

const {:count 16} .str.80: ref;

axiom .str.80 == $sub.ref(0, 168906);

const {:count 18} .str.81: ref;

axiom .str.81 == $sub.ref(0, 169948);

const {:count 20} .str.133: ref;

axiom .str.133 == $sub.ref(0, 170992);

const {:count 31} .str.134: ref;

axiom .str.134 == $sub.ref(0, 172047);

const {:count 39} .str.136: ref;

axiom .str.136 == $sub.ref(0, 173110);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 206} .str.18: ref;

axiom .str.18 == $sub.ref(0, 174340);

const {:count 9} .str.135: ref;

axiom .str.135 == $sub.ref(0, 175373);

const {:count 33} .str.139: ref;

axiom .str.139 == $sub.ref(0, 176430);

const {:count 5} .str.5: ref;

axiom .str.5 == $sub.ref(0, 177459);

const {:count 30} .str.108: ref;

axiom .str.108 == $sub.ref(0, 178513);

const {:count 25} .str.109: ref;

axiom .str.109 == $sub.ref(0, 179562);

const {:count 18} .str.110: ref;

axiom .str.110 == $sub.ref(0, 180604);

const {:count 33} .str.25: ref;

axiom .str.25 == $sub.ref(0, 181661);

const {:count 30} .str.26: ref;

axiom .str.26 == $sub.ref(0, 182715);

const {:count 41} .str.172: ref;

axiom .str.172 == $sub.ref(0, 183780);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 26} .str.140: ref;

axiom .str.140 == $sub.ref(0, 184830);

const {:count 32} .str.141: ref;

axiom .str.141 == $sub.ref(0, 185886);

const {:count 28} .str.142: ref;

axiom .str.142 == $sub.ref(0, 186938);

const {:count 16} .str.143: ref;

axiom .str.143 == $sub.ref(0, 187978);

const {:count 26} .str.82: ref;

axiom .str.82 == $sub.ref(0, 189028);

const {:count 38} .str.83: ref;

axiom .str.83 == $sub.ref(0, 190090);

const {:count 33} .str.84: ref;

axiom .str.84 == $sub.ref(0, 191147);

const {:count 20} .str.85: ref;

axiom .str.85 == $sub.ref(0, 192191);

const {:count 20} .str.86: ref;

axiom .str.86 == $sub.ref(0, 193235);

const {:count 26} .str.87: ref;

axiom .str.87 == $sub.ref(0, 194285);

const {:count 22} .str.88: ref;

axiom .str.88 == $sub.ref(0, 195331);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 196380);

const {:count 33} .str.90: ref;

axiom .str.90 == $sub.ref(0, 197437);

const {:count 57} .str.91: ref;

axiom .str.91 == $sub.ref(0, 198518);

const {:count 28} .str.92: ref;

axiom .str.92 == $sub.ref(0, 199570);

const {:count 42} .str.93: ref;

axiom .str.93 == $sub.ref(0, 200636);

const {:count 28} .str.94: ref;

axiom .str.94 == $sub.ref(0, 201688);

const {:count 19} .str.95: ref;

axiom .str.95 == $sub.ref(0, 202731);

const {:count 3} .str.20: ref;

axiom .str.20 == $sub.ref(0, 203758);

const {:count 11} .str.96: ref;

axiom .str.96 == $sub.ref(0, 204793);

const {:count 26} .str.97: ref;

axiom .str.97 == $sub.ref(0, 205843);

const {:count 20} .str.98: ref;

axiom .str.98 == $sub.ref(0, 206887);

const {:count 16} .str.99: ref;

axiom .str.99 == $sub.ref(0, 207927);

const {:count 29} .str.100: ref;

axiom .str.100 == $sub.ref(0, 208980);

const {:count 29} .str.101: ref;

axiom .str.101 == $sub.ref(0, 210033);

const {:count 24} .str.102: ref;

axiom .str.102 == $sub.ref(0, 211081);

const {:count 6} .str.105: ref;

axiom .str.105 == $sub.ref(0, 212111);

const {:count 9} .str.106: ref;

axiom .str.106 == $sub.ref(0, 213144);

const {:count 5} .str.107: ref;

axiom .str.107 == $sub.ref(0, 214173);

const {:count 8} .str.45: ref;

axiom .str.45 == $sub.ref(0, 215205);

const {:count 9} .str.46: ref;

axiom .str.46 == $sub.ref(0, 216238);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 217271);

const {:count 11} .str.48: ref;

axiom .str.48 == $sub.ref(0, 218306);

const {:count 14} .str.49: ref;

axiom .str.49 == $sub.ref(0, 219344);

const {:count 5} .str.50: ref;

axiom .str.50 == $sub.ref(0, 220373);

const {:count 14} .str.51: ref;

axiom .str.51 == $sub.ref(0, 221411);

const {:count 6} .str.52: ref;

axiom .str.52 == $sub.ref(0, 222441);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 223481);

const {:count 10} .str.54: ref;

axiom .str.54 == $sub.ref(0, 224515);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 225555);

const {:count 28} .str.29: ref;

axiom .str.29 == $sub.ref(0, 226607);

const {:count 20} .str.30: ref;

axiom .str.30 == $sub.ref(0, 227651);

const {:count 19} .str.31: ref;

axiom .str.31 == $sub.ref(0, 228694);

const {:count 7} .str.32: ref;

axiom .str.32 == $sub.ref(0, 229725);

const {:count 204} .str.145: ref;

axiom .str.145 == $sub.ref(0, 230953);

const {:count 16} .str.146: ref;

axiom .str.146 == $sub.ref(0, 231993);

const {:count 18} .str.147: ref;

axiom .str.147 == $sub.ref(0, 233035);

const {:count 41} .str.148: ref;

axiom .str.148 == $sub.ref(0, 234100);

const {:count 20} .str.154: ref;

axiom .str.154 == $sub.ref(0, 235144);

const {:count 44} .str.155: ref;

axiom .str.155 == $sub.ref(0, 236212);

const {:count 15} .str.152: ref;

axiom .str.152 == $sub.ref(0, 237251);

const {:count 204} .str.150: ref;

axiom .str.150 == $sub.ref(0, 238479);

const {:count 54} .str.153: ref;

axiom .str.153 == $sub.ref(0, 239557);

const {:count 19} .str.149: ref;

axiom .str.149 == $sub.ref(0, 240600);

const {:count 21} .str.151: ref;

axiom .str.151 == $sub.ref(0, 241645);

const {:count 35} .str.40: ref;

axiom .str.40 == $sub.ref(0, 242704);

const {:count 25} .str.17: ref;

axiom .str.17 == $sub.ref(0, 243753);

const {:count 9} .str.137: ref;

axiom .str.137 == $sub.ref(0, 244786);

const {:count 11} .str.138: ref;

axiom .str.138 == $sub.ref(0, 245821);

const {:count 39} .str.41: ref;

axiom .str.41 == $sub.ref(0, 246884);

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 247946);

const {:count 30} .str.43: ref;

axiom .str.43 == $sub.ref(0, 249000);

const {:count 26} .str.44: ref;

axiom .str.44 == $sub.ref(0, 250050);

const {:count 29} .str.36: ref;

axiom .str.36 == $sub.ref(0, 251103);

const {:count 34} .str.156: ref;

axiom .str.156 == $sub.ref(0, 252161);

const {:count 22} .str.157: ref;

axiom .str.157 == $sub.ref(0, 253207);

const {:count 33} .str.158: ref;

axiom .str.158 == $sub.ref(0, 254264);

const {:count 33} .str.159: ref;

axiom .str.159 == $sub.ref(0, 255321);

const {:count 33} .str.160: ref;

axiom .str.160 == $sub.ref(0, 256378);

const {:count 33} .str.161: ref;

axiom .str.161 == $sub.ref(0, 257435);

const {:count 33} .str.162: ref;

axiom .str.162 == $sub.ref(0, 258492);

const {:count 32} .str.163: ref;

axiom .str.163 == $sub.ref(0, 259548);

const {:count 28} .str.164: ref;

axiom .str.164 == $sub.ref(0, 260600);

const {:count 17} .str.165: ref;

axiom .str.165 == $sub.ref(0, 261641);

const {:count 15} .str.166: ref;

axiom .str.166 == $sub.ref(0, 262680);

const {:count 11} .str.167: ref;

axiom .str.167 == $sub.ref(0, 263715);

const {:count 14} .str.168: ref;

axiom .str.168 == $sub.ref(0, 264753);

const {:count 10} .str.169: ref;

axiom .str.169 == $sub.ref(0, 265787);

const {:count 24} .str.170: ref;

axiom .str.170 == $sub.ref(0, 266835);

const {:count 23} .str.171: ref;

axiom .str.171 == $sub.ref(0, 267882);

const {:count 31} .str.34: ref;

axiom .str.34 == $sub.ref(0, 268937);

const {:count 28} .str.35: ref;

axiom .str.35 == $sub.ref(0, 269989);

const {:count 38} .str.177: ref;

axiom .str.177 == $sub.ref(0, 271051);

const {:count 14} .str.178: ref;

axiom .str.178 == $sub.ref(0, 272089);

const {:count 68} .str.179: ref;

axiom .str.179 == $sub.ref(0, 273181);

const {:count 22} .str.180: ref;

axiom .str.180 == $sub.ref(0, 274227);

const {:count 53} .str.181: ref;

axiom .str.181 == $sub.ref(0, 275304);

const {:count 58} .str.182: ref;

axiom .str.182 == $sub.ref(0, 276386);

const {:count 16} .str.175: ref;

axiom .str.175 == $sub.ref(0, 277426);

const {:count 40} .str.176: ref;

axiom .str.176 == $sub.ref(0, 278490);

const {:count 44} .str.144: ref;

axiom .str.144 == $sub.ref(0, 279558);

const {:count 42} .str.173: ref;

axiom .str.173 == $sub.ref(0, 280624);

const {:count 49} .str.174: ref;

axiom .str.174 == $sub.ref(0, 281697);

const {:count 36} .str.130: ref;

axiom .str.130 == $sub.ref(0, 282757);

const .str: ref;

axiom .str == $sub.ref(0, 283810);

const {:count 29} .str.1: ref;

axiom .str.1 == $sub.ref(0, 284863);

const {:count 25} .str.2: ref;

axiom .str.2 == $sub.ref(0, 285912);

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 286964);

const {:count 34} .str.4: ref;

axiom .str.4 == $sub.ref(0, 288022);

const {:count 17} .str.6: ref;

axiom .str.6 == $sub.ref(0, 289063);

const {:count 207} .str.7: ref;

axiom .str.7 == $sub.ref(0, 290294);

const {:count 20} .str.8: ref;

axiom .str.8 == $sub.ref(0, 291338);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 292382);

const {:count 20} .str.10: ref;

axiom .str.10 == $sub.ref(0, 293426);

const {:count 20} .str.11: ref;

axiom .str.11 == $sub.ref(0, 294470);

const {:count 20} .str.12: ref;

axiom .str.12 == $sub.ref(0, 295514);

const {:count 20} .str.13: ref;

axiom .str.13 == $sub.ref(0, 296558);

const {:count 20} .str.14: ref;

axiom .str.14 == $sub.ref(0, 297602);

const {:count 20} .str.15: ref;

axiom .str.15 == $sub.ref(0, 298646);

const {:count 20} .str.16: ref;

axiom .str.16 == $sub.ref(0, 299690);

const {:count 44} .str.38: ref;

axiom .str.38 == $sub.ref(0, 300758);

const {:count 18} .str.19: ref;

axiom .str.19 == $sub.ref(0, 301800);

const {:count 10} .str.21: ref;

axiom .str.21 == $sub.ref(0, 302834);

const {:count 29} .str.22: ref;

axiom .str.22 == $sub.ref(0, 303887);

const {:count 28} .str.23: ref;

axiom .str.23 == $sub.ref(0, 304939);

const {:count 32} .str.24: ref;

axiom .str.24 == $sub.ref(0, 305995);

const {:count 34} .str.39: ref;

axiom .str.39 == $sub.ref(0, 307053);

const {:count 52} .str.126: ref;

axiom .str.126 == $sub.ref(0, 308129);

const {:count 43} .str.127: ref;

axiom .str.127 == $sub.ref(0, 309196);

const {:count 47} .str.129: ref;

axiom .str.129 == $sub.ref(0, 310267);

const {:count 30} .str.128: ref;

axiom .str.128 == $sub.ref(0, 311321);

const {:count 25} .str.131: ref;

axiom .str.131 == $sub.ref(0, 312370);

const {:count 50} .str.132: ref;

axiom .str.132 == $sub.ref(0, 313444);

const {:count 9} .str.27: ref;

axiom .str.27 == $sub.ref(0, 314477);

const {:count 9} .str.37: ref;

axiom .str.37 == $sub.ref(0, 315510);

const {:count 14} .str.33: ref;

axiom .str.33 == $sub.ref(0, 316548);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 317580);

const {:count 3} .str.1.380: ref;

axiom .str.1.380 == $sub.ref(0, 318607);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 319645);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 320673);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 321705);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 322737);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 323769);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 324801);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 7} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 8} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 1} true;
    call {:si_unique_call 9} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 10} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 325833);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 11} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 1} true;
    call {:si_unique_call 12} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 13} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rsxx_attr_stats_open: ref;

axiom rsxx_attr_stats_open == $sub.ref(0, 326865);

procedure rsxx_attr_stats_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rsxx_attr_stats_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(992, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i4 := single_open($p1, rsxx_attr_stats_show, $p3);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 327897);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 1} true;
    call {:si_unique_call 16} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 17} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rsxx_attr_stats_show: ref;

axiom rsxx_attr_stats_show == $sub.ref(0, 328929);

procedure rsxx_attr_stats_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 329961);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 1} true;
    call {:si_unique_call 18} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 19} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 330993);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 332025);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rsxx_attr_pci_regs_open: ref;

axiom rsxx_attr_pci_regs_open == $sub.ref(0, 333057);

procedure rsxx_attr_pci_regs_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rsxx_attr_pci_regs_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(992, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i4 := single_open($p1, rsxx_attr_pci_regs_show, $p3);
    call {:si_unique_call 21} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rsxx_attr_pci_regs_show: ref;

axiom rsxx_attr_pci_regs_show == $sub.ref(0, 334089);

procedure rsxx_attr_pci_regs_show($p0: ref, $p1: ref) returns ($r: i32);



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 335121);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 1} true;
    call {:si_unique_call 22} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 23} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rsxx_cram_read: ref;

axiom rsxx_cram_read == $sub.ref(0, 336153);

procedure rsxx_cram_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_cram_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "rsxx_cram_read:arg:cnt"} boogie_si_record_i64($i2);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p4 := file_inode($p0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1000)), $mul.ref(992, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.5, $p5);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p8 := kzalloc($i2, 208);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p3);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $sub.i32(0, 1610612736));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i2);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i16 := rsxx_creg_read($p7, $i14, $i15, $p8, 1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 28} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    call {:si_unique_call 29} {:cexpr "st"} boogie_si_record_i64($i17);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} kfree($p8);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p3);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i2);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i23);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i19 := copy_to_user($p1, $p8, $i2);
    call {:si_unique_call 31} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;
}



const rsxx_cram_write: ref;

axiom rsxx_cram_write == $sub.ref(0, 337185);

procedure rsxx_cram_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_cram_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} {:cexpr "rsxx_cram_write:arg:cnt"} boogie_si_record_i64($i2);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p4 := file_inode($p0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1000)), $mul.ref(992, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.5, $p5);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p8 := kzalloc($i2, 208);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i12 := copy_from_user($p8, $p1, $i2);
    call {:si_unique_call 37} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} kfree($p8);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p3);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i2);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i23);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p3);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $sub.i32(0, 1610612736));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i18 := rsxx_creg_write($p7, $i16, $i17, $p8, 1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 39} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    call {:si_unique_call 40} {:cexpr "st"} boogie_si_record_i64($i19);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 338217);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(32, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 339249);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 43} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 340281);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 48} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} __might_fault(.str.139, 697);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 51} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 53} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const rsxx_creg_write: ref;

axiom rsxx_creg_write == $sub.ref(0, 341313);

procedure rsxx_creg_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_creg_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "rsxx_creg_write:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 56} {:cexpr "rsxx_creg_write:arg:size8"} boogie_si_record_i32($i2);
    call {:si_unique_call 57} {:cexpr "rsxx_creg_write:arg:byte_stream"} boogie_si_record_i32($i4);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i5 := issue_creg_rw($p0, $i1, $i2, $p3, $i4, 0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 59} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 342345);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} free_($p0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 343377);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 61} $free($p0);
    return;
}



const issue_creg_rw: ref;

axiom issue_creg_rw == $sub.ref(0, 344409);

procedure issue_creg_rw($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation issue_creg_rw($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 63} {:cexpr "issue_creg_rw:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 64} {:cexpr "issue_creg_rw:arg:size8"} boogie_si_record_i32($i2);
    call {:si_unique_call 65} {:cexpr "issue_creg_rw:arg:stream"} boogie_si_record_i32($i4);
    call {:si_unique_call 66} {:cexpr "issue_creg_rw:arg:read"} boogie_si_record_i32($i5);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i5, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 224 else 192);
    call {:si_unique_call 67} {:cexpr "op"} boogie_si_record_i32($i8);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i9, $i10, $p11 := $i2, $i1, $p3;
    goto $bb1;

  $bb1:
    call $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i18, $p19, $i20, $i21, $i22 := issue_creg_rw_loop_$bb1($p0, $i4, $p6, $i8, $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i18, $p19, $i20, $i21, $i22);
    goto $bb1_last;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i9, 32);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i13 := 32;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i14 := __issue_creg_rw($p0, $i8, $i10, $i13, $p11, $i4, $p6);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 69} {:cexpr "st"} boogie_si_record_i32($i14);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i13);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p11, $mul.ref($i18, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i10, $i13);
    call {:si_unique_call 70} {:cexpr "addr"} boogie_si_record_i32($i20);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i9, $i13);
    call {:si_unique_call 71} {:cexpr "size8"} boogie_si_record_i32($i21);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10, $p11 := $i21, $i20, $p19;
    goto $bb9_dummy;

  $bb5:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i12 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    goto $bb4;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_156;
}



const __issue_creg_rw: ref;

axiom __issue_creg_rw == $sub.ref(0, 345441);

procedure __issue_creg_rw($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation __issue_creg_rw($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i17: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p7 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 74} {:cexpr "__issue_creg_rw:arg:op"} boogie_si_record_i32($i1);
    call {:si_unique_call 75} {:cexpr "__issue_creg_rw:arg:addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 76} {:cexpr "__issue_creg_rw:arg:cnt8"} boogie_si_record_i32($i3);
    call {:si_unique_call 77} {:cexpr "__issue_creg_rw:arg:stream"} boogie_si_record_i32($i5);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} init_completion($p7);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 79} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p9, $p10, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p7);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p8);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i15 := creg_queue_cmd($p0, $i1, $i2, $i3, $p4, $i5, creg_cmd_done_cb, $p14);
    call {:si_unique_call 81} {:cexpr "st"} boogie_si_record_i32($i15);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 10000);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 20000);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i23 := msecs_to_jiffies($i22);
    call {:si_unique_call 83} {:cexpr "timeout"} boogie_si_record_i64($i23);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i26 := wait_for_completion_timeout($p25, $i23);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 86} {:cexpr "st"} boogie_si_record_i32($i27);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i33);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(4, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_34 := ioread32($p39);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} dev_warn.ref.ref.i32.i32($p43, .str.134, $i45, $i2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i17 := $i47;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} dev_crit.ref.ref($p31, .str.133);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} creg_reset($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 346473);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __init_waitqueue_head($p3, .str.135, $p1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 347505);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const creg_cmd_done_cb: ref;

axiom creg_cmd_done_cb == $sub.ref(0, 348537);

procedure creg_cmd_done_cb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation creg_cmd_done_cb($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "creg_cmd_done_cb:arg:st"} boogie_si_record_i32($i2);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i2);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} complete_($p17);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 96} devirtbounce(0, .str.18, 378, 12);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call creg_cmd_done_cb_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const creg_queue_cmd: ref;

axiom creg_queue_cmd == $sub.ref(0, 349569);

procedure creg_queue_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation creg_queue_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p45: ref;
  var $p47: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "creg_queue_cmd:arg:op"} boogie_si_record_i32($i1);
    call {:si_unique_call 99} {:cexpr "creg_queue_cmd:arg:addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 100} {:cexpr "creg_queue_cmd:arg:cnt8"} boogie_si_record_i32($i3);
    call {:si_unique_call 101} {:cexpr "creg_queue_cmd:arg:stream"} boogie_si_record_i32($i5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(496, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i3, 32);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $M.6;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p22 := kmem_cache_alloc($p21, 208);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} INIT_LIST_HEAD($p26);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i2);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i3);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p4);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i5);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p6);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p7);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} spin_lock_bh($p36);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} list_add_tail($p37, $p39);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 1);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} creg_kick_queue($p0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} spin_unlock_bh($p47);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 11);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 350601);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 112} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 351633);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_crit: ref;

axiom dev_crit == $sub.ref(0, 352665);

procedure dev_crit.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_crit.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_crit.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_crit.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_crit.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_crit.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    return;
}



const creg_reset: ref;

axiom creg_reset == $sub.ref(0, 353697);

procedure creg_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, assertsPassed, $CurrAddr, $M.9, $M.11, $M.13, $M.15;



implementation creg_reset($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p31: ref;
  var $p32: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p88: ref;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(336, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i3 := ldv_mutex_trylock_91($p2);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 117} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(496, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p8 := spinlock_check($p7);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 120} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} rsxx_disable_ier_and_isr($p0, 10);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} spin_unlock_irqrestore($p10, $i9);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} dev_warn.ref.ref($p13, .str.136);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} spin_lock_bh($p15);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i26, $i29);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p57);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} spin_unlock_bh($p80);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(496, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p84 := spinlock_check($p83);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i85 := _raw_spin_lock_irqsave($p84);
    call {:si_unique_call 136} {:cexpr "flags"} boogie_si_record_i64($i85);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} rsxx_enable_ier_and_isr($p0, 10);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} spin_unlock_irqrestore($p86, $i85);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(336, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_mutex_unlock_93($p88);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i61 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i64 := timer_pending($p63);
    call {:si_unique_call 129} {:cexpr "tmp___2"} boogie_si_record_i32($i64);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p57, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $M.6;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p57);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} kmem_cache_free($p75, $p76);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(72, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p57, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    call {:si_unique_call 131} devirtbounce.1($p74, $p0, $p57, $sub.i32(0, 125));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_35 := ldv_del_timer_sync_92($p67);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p31, $p32 := $p19, $p23;
    goto $bb8;

  $bb8:
    call $p33, $p35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p49, $p50, $p52, $i53, $i54, $p31, $p32 := creg_reset_loop_$bb8($p0, $i29, $p33, $p35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p49, $p50, $p52, $i53, $i54, $p31, $p32);
    goto $bb8_last;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} list_del($p33);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i36, 1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p46 := $M.6;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p31);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} kmem_cache_free($p46, $p47);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p32, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i29);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i54 == 1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p31, $p32 := $p32, $p50;
    goto $bb13_dummy;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    call {:si_unique_call 126} devirtbounce.1($p45, $p0, $p31, $sub.i32(0, 125));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_374;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 354729);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure dev_warn.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_trylock_91: ref;

axiom ldv_mutex_trylock_91 == $sub.ref(0, 355761);

procedure ldv_mutex_trylock_91($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_trylock_91($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i1 := mutex_trylock($p0);
    call {:si_unique_call 141} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i2 := ldv_mutex_trylock_reset_lock_of_NOT_ARG_SIGN($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 143} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 356793);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 357825);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 145} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rsxx_disable_ier_and_isr: ref;

axiom rsxx_disable_ier_and_isr == $sub.ref(0, 358857);

procedure rsxx_disable_ier_and_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_disable_ier_and_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "rsxx_disable_ier_and_isr:arg:intr"} boogie_si_record_i32($i1);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 148} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(96, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __disable_intr($p9, $i1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __disable_intr($p10, $i1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(20, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} iowrite32($i12, $p15);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 359889);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 360921);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} _raw_spin_lock_bh($p2);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 361953);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 362985);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    return;
}



const timer_pending: ref;

axiom timer_pending == $sub.ref(0, 364017);

procedure timer_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timer_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_del_timer_sync_92: ref;

axiom ldv_del_timer_sync_92 == $sub.ref(0, 365049);

procedure ldv_del_timer_sync_92($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_del_timer_sync_92($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i1 := del_timer_sync($p0);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} disable_suitable_timer_6($p0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 366081);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} _raw_spin_unlock_bh($p2);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_enable_ier_and_isr: ref;

axiom rsxx_enable_ier_and_isr == $sub.ref(0, 367113);

procedure rsxx_enable_ier_and_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_enable_ier_and_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "rsxx_enable_ier_and_isr:arg:intr"} boogie_si_record_i32($i1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 161} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 163} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(96, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} __enable_intr($p16, $i1);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __enable_intr($p17, $i1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(20, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} iowrite32($i19, $p22);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_93: ref;

axiom ldv_mutex_unlock_93 == $sub.ref(0, 368145);

procedure ldv_mutex_unlock_93($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_unlock_93($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_mutex_unlock_reset_lock_of_NOT_ARG_SIGN($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} mutex_unlock($p0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_reset_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_mutex_unlock_reset_lock_of_NOT_ARG_SIGN == $sub.ref(0, 369177);

procedure ldv_mutex_unlock_reset_lock_of_NOT_ARG_SIGN($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_unlock_reset_lock_of_NOT_ARG_SIGN($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 170} {:cexpr "ldv_mutex_reset_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 370209);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 371241);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} __VERIFIER_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 372273);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 173} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __enable_intr: ref;

axiom __enable_intr == $sub.ref(0, 373305);

procedure __enable_intr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __enable_intr($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "__enable_intr:arg:intr"} boogie_si_record_i32($i1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $i1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i3);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 374337);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 375369);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 376401);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_6: ref;

axiom disable_suitable_timer_6 == $sub.ref(0, 377433);

procedure disable_suitable_timer_6($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation disable_suitable_timer_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.10;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.12;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p22 := $M.15;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 181} {:cexpr "ldv_timer_6_3"} boogie_si_record_i32(0);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p16 := $M.13;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 180} {:cexpr "ldv_timer_6_2"} boogie_si_record_i32(0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p10 := $M.11;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 179} {:cexpr "ldv_timer_6_1"} boogie_si_record_i32(0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 178} {:cexpr "ldv_timer_6_0"} boogie_si_record_i32(0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 378465);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 379497);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    return;
}



const __disable_intr: ref;

axiom __disable_intr == $sub.ref(0, 380529);

procedure __disable_intr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __disable_intr($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "__disable_intr:arg:intr"} boogie_si_record_i32($i1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, $i3);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i4);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    return;
}



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 381561);

procedure mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_reset_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_mutex_trylock_reset_lock_of_NOT_ARG_SIGN == $sub.ref(0, 382593);

procedure ldv_mutex_trylock_reset_lock_of_NOT_ARG_SIGN($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_mutex_trylock_reset_lock_of_NOT_ARG_SIGN($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i3 := ldv_undef_int();
    call {:si_unique_call 188} {:cexpr "is_mutex_held_by_another_thread"} boogie_si_record_i32($i3);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 189} {:cexpr "ldv_mutex_reset_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 383625);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 190} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 384657);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 195} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmem_cache_alloc: ref;

axiom kmem_cache_alloc == $sub.ref(0, 385689);

procedure kmem_cache_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "kmem_cache_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p2 := external_alloc();
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 386721);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 387753);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} __list_add($p0, $p3, $p1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    return;
}



const creg_kick_queue: ref;

axiom creg_kick_queue == $sub.ref(0, 388785);

procedure creg_kick_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation creg_kick_queue($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p35: ref;
  var $p36: ref;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(72, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i7 := list_empty($p6);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(72, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p14);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} list_del($p21);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i24, 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i28 := msecs_to_jiffies(10000);
    call {:si_unique_call 203} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, jiffies);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i28, $i31);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_36 := ldv_mod_timer_89($p30, $i32);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} creg_issue_cmd($p0, $p36);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 389817);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mod_timer_89: ref;

axiom ldv_mod_timer_89 == $sub.ref(0, 390849);

procedure ldv_mod_timer_89($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation ldv_mod_timer_89($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "ldv_mod_timer_89:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} activate_pending_timer_6($p0, $i1, 1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const creg_issue_cmd: ref;

axiom creg_issue_cmd == $sub.ref(0, 391881);

procedure creg_issue_cmd($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation creg_issue_cmd($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 211} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(68, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} iowrite32($i10, $p13);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(72, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} iowrite32($i15, $p18);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 192);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 217} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(64, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} iowrite32($i42, $p45);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i32 := copy_to_creg_data($p0, $i27, $p29, $i31);
    call {:si_unique_call 215} {:cexpr "st"} boogie_si_record_i32($i32);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const copy_to_creg_data: ref;

axiom copy_to_creg_data == $sub.ref(0, 392913);

procedure copy_to_creg_data($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_creg_data($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i14: i32;
  var $i15: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "copy_to_creg_data:arg:cnt8"} boogie_si_record_i32($i1);
    call {:si_unique_call 220} {:cexpr "copy_to_creg_data:arg:stream"} boogie_si_record_i32($i3);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i1, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i14, $i15 := 0, $i1;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $p19, $i20, $p21, $p22, $i23, $p24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i14, $i15 := copy_to_creg_data_loop_$bb8($p0, $i3, $p4, $i16, $i17, $i18, $p19, $i20, $p21, $p22, $i23, $p24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i14, $i15);
    goto $bb8_last;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i3, 0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i25 := CREG_DATA($i14);
    call {:si_unique_call 227} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i14);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p4, $mul.ref($i26, 4));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i25);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} iowrite32($i28, $p32);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i14, 1);
    call {:si_unique_call 229} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i15, $sub.i32(0, 4));
    call {:si_unique_call 230} {:cexpr "cnt8"} boogie_si_record_i32($i34);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i33, $i34;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i17 := CREG_DATA($i14);
    call {:si_unique_call 224} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p4, $mul.ref($i18, 4));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i17);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p22, $mul.ref($i23, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} iowrite32be($i20, $p24);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_813;
}



const CREG_DATA: ref;

axiom CREG_DATA == $sub.ref(0, 393945);

procedure CREG_DATA($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation CREG_DATA($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "CREG_DATA:arg:N"} boogie_si_record_i32($i0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 2);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 80);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iowrite32be: ref;

axiom iowrite32be == $sub.ref(0, 394977);

procedure iowrite32be($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32be($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "iowrite32be:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 396009);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_6: ref;

axiom activate_pending_timer_6 == $sub.ref(0, 397041);

procedure activate_pending_timer_6($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation activate_pending_timer_6($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "activate_pending_timer_6:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 237} {:cexpr "activate_pending_timer_6:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p3 := $M.9;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.11;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.13;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.15;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} activate_suitable_timer_6($p0, $i1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i34 := $M.14;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p37 := $M.15;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 241} {:cexpr "ldv_timer_6_3"} boogie_si_record_i32(1);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i25 := $M.12;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p28 := $M.13;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 240} {:cexpr "ldv_timer_6_2"} boogie_si_record_i32(1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p19 := $M.11;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 239} {:cexpr "ldv_timer_6_1"} boogie_si_record_i32(1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p10 := $M.9;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 238} {:cexpr "ldv_timer_6_0"} boogie_si_record_i32(1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_6: ref;

axiom activate_suitable_timer_6 == $sub.ref(0, 398073);

procedure activate_suitable_timer_6($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation activate_suitable_timer_6($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} {:cexpr "activate_suitable_timer_6:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i2 := $M.8;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i10 := $M.10;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.12;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.14;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i22 := $M.14;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p24 := $M.15;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 247} {:cexpr "ldv_timer_6_3"} boogie_si_record_i32(1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p18 := $M.13;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 246} {:cexpr "ldv_timer_6_2"} boogie_si_record_i32(1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p12 := $M.11;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 245} {:cexpr "ldv_timer_6_1"} boogie_si_record_i32(1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p6 := $M.9;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 244} {:cexpr "ldv_timer_6_0"} boogie_si_record_i32(1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 399105);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 400137);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 249} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 401169);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 402201);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 403233);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 404265);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 405297);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 251} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 253} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 406329);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 407361);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 255} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 408393);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 258} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p2 := ldv_malloc($i0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rsxx_creg_read: ref;

axiom rsxx_creg_read == $sub.ref(0, 409425);

procedure rsxx_creg_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_creg_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} {:cexpr "rsxx_creg_read:arg:addr"} boogie_si_record_i32($i1);
    call {:si_unique_call 261} {:cexpr "rsxx_creg_read:arg:size8"} boogie_si_record_i32($i2);
    call {:si_unique_call 262} {:cexpr "rsxx_creg_read:arg:byte_stream"} boogie_si_record_i32($i4);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i5 := issue_creg_rw($p0, $i1, $i2, $p3, $i4, 1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 410457);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 267} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 268} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __might_fault(.str.139, 732);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 271} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 273} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 411489);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 275} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 276} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 277} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 412521);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_pci_probe: ref;

axiom rsxx_pci_probe == $sub.ref(0, 413553);

procedure rsxx_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.33, $M.35, $M.37, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.20, $M.49, $CurrAddr, $M.32, $M.55, $M.34, $M.56, $M.36, $M.57, $M.38, $M.58, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.23, $M.25, $M.27, $M.29, $M.21, assertsPassed, $M.7, $M.51, $M.52, $M.24, $M.26, $M.28, $M.30;



implementation rsxx_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p47: ref;
  var $i48: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p56: ref;
  var $i57: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i155: i32;
  var $i140: i32;
  var $i117: i32;
  var $p233: ref;
  var $p234: ref;
  var $p236: ref;
  var $i109: i32;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $p241: ref;
  var $i242: i32;
  var $i243: i1;
  var $i103: i32;
  var $p244: ref;
  var $p245: ref;
  var $i67: i32;
  var $i39: i32;
  var $i33: i32;
  var $i26: i32;
  var $p246: ref;
  var $i247: i32;
  var $i18: i32;
  var $p248: ref;
  var $i11: i32;
  var $i250: i32;
  var $i251: i1;
  var $i253: i32;
  var $i254: i1;
  var $i256: i32;
  var $i257: i1;
  var $i259: i32;
  var $i260: i1;
  var $i262: i32;
  var $i263: i1;
  var $i265: i32;
  var $i266: i1;
  var $i268: i32;
  var $i269: i1;
  var $i271: i32;
  var $i272: i1;
  var $i274: i32;
  var $i275: i1;
  var $i277: i32;
  var $i278: i1;
  var $i280: i32;
  var $i281: i1;
  var $i283: i32;
  var $i284: i1;
  var $i286: i32;
  var $i287: i1;
  var $i289: i32;
  var $i290: i1;
  var $i292: i32;
  var $i293: i1;
  var $i295: i32;
  var $i296: i1;
  var $i298: i32;
  var $i299: i1;
  var $i301: i32;
  var $i302: i1;
  var $i304: i32;
  var $i305: i1;
  var $i307: i32;
  var $i308: i1;
  var $i310: i32;
  var $i311: i1;
  var $i313: i32;
  var $i314: i1;
  var $i316: i32;
  var $i317: i1;
  var $i319: i32;
  var $i320: i1;
  var $i322: i32;
  var $i323: i1;
  var $i325: i32;
  var $i326: i1;
  var $i328: i32;
  var $i329: i1;
  var $i331: i32;
  var $i332: i1;
  var $i334: i32;
  var $i335: i1;
  var $i337: i32;
  var $i338: i1;
  var $i340: i32;
  var $i341: i1;
  var $i343: i32;
  var $i344: i1;
  var $i346: i32;
  var $i347: i1;
  var $i349: i32;
  var $i350: i1;
  var $i352: i32;
  var $i353: i1;
  var $i355: i32;
  var $i356: i1;
  var $i358: i32;
  var $i359: i1;
  var $i361: i32;
  var $i362: i1;
  var $i364: i32;
  var $i365: i1;
  var $i367: i32;
  var $i368: i1;
  var $i370: i32;
  var $i371: i1;
  var $i373: i32;
  var $i374: i1;
  var $i376: i32;
  var $i377: i1;
  var $i379: i32;
  var $i380: i1;
  var $i382: i32;
  var $i383: i1;
  var $i385: i32;
  var $i386: i1;
  var $i388: i32;
  var $i389: i1;
  var $i391: i32;
  var $i392: i1;
  var $i394: i32;
  var $i395: i1;
  var $i397: i32;
  var $i398: i1;
  var $i400: i32;
  var $i401: i1;
  var $i403: i32;
  var $i404: i1;
  var $i406: i32;
  var $i407: i1;
  var $i409: i32;
  var $i410: i1;
  var $i412: i32;
  var $i413: i1;
  var $i415: i32;
  var $i416: i1;
  var $i418: i32;
  var $i419: i1;
  var $i421: i32;
  var $i422: i1;
  var $i424: i32;
  var $i425: i1;
  var $i427: i32;
  var $i428: i1;
  var $i430: i32;
  var $i431: i1;
  var $i433: i32;
  var $i434: i1;
  var $i436: i32;
  var $i437: i1;
  var $i439: i32;
  var $i440: i1;
  var $i442: i32;
  var $i443: i1;
  var $i445: i32;
  var $i446: i1;
  var $i448: i32;
  var $i449: i1;
  var $i451: i32;
  var $i452: i1;
  var $i454: i32;
  var $i455: i1;
  var $i457: i32;
  var $i458: i1;
  var $i460: i32;
  var $i461: i1;
  var $i463: i32;
  var $i464: i1;
  var $i466: i32;
  var $i467: i1;
  var $i469: i32;
  var $i470: i1;
  var $i472: i32;
  var $i473: i1;
  var $i475: i32;
  var $i476: i1;
  var $i478: i32;
  var $i479: i1;
  var $i481: i32;
  var $i482: i1;
  var $i484: i32;
  var $i485: i1;
  var $i487: i32;
  var $i488: i1;
  var $i490: i32;
  var $i491: i1;
  var $i493: i32;
  var $i494: i1;
  var $i496: i32;
  var $i497: i1;
  var $i499: i32;
  var $i500: i1;
  var $i502: i32;
  var $i503: i1;
  var $i505: i32;
  var $i506: i1;
  var $i508: i32;
  var $i509: i1;
  var $i511: i32;
  var $i512: i1;
  var $i514: i32;
  var $i515: i1;
  var $i517: i32;
  var $i518: i1;
  var $i520: i32;
  var $i521: i1;
  var $i523: i32;
  var $i524: i1;
  var $i526: i32;
  var $i527: i1;
  var $i529: i32;
  var $i530: i1;
  var $i532: i32;
  var $i533: i1;
  var $i535: i32;
  var $i536: i1;
  var $i538: i32;
  var $i539: i1;
  var $i541: i32;
  var $i542: i1;
  var $i544: i32;
  var $i545: i1;
  var $i547: i32;
  var $i548: i1;
  var $i550: i32;
  var $i551: i1;
  var $i553: i32;
  var $i554: i1;
  var $i556: i32;
  var $i557: i1;
  var $i559: i32;
  var $i560: i1;
  var $i562: i32;
  var $i563: i1;
  var $i565: i32;
  var $i566: i1;
  var $i568: i32;
  var $i569: i1;
  var $i571: i32;
  var $i572: i1;
  var $i574: i32;
  var $i575: i1;
  var $i577: i32;
  var $i578: i1;
  var $i580: i32;
  var $i581: i1;
  var $i583: i32;
  var $i584: i1;
  var $i586: i32;
  var $i587: i1;
  var $i589: i32;
  var $i590: i1;
  var $i592: i32;
  var $i593: i1;
  var $i595: i32;
  var $i596: i1;
  var $i598: i32;
  var $i599: i1;
  var $i601: i32;
  var $i602: i1;
  var $i604: i32;
  var $i605: i1;
  var $i607: i32;
  var $i608: i1;
  var $i610: i32;
  var $i611: i1;
  var $i613: i32;
  var $i614: i1;
  var $i616: i32;
  var $i617: i1;
  var $i619: i32;
  var $i620: i1;
  var $i622: i32;
  var $i623: i1;
  var $i625: i32;
  var $i626: i1;
  var $i628: i32;
  var $i629: i1;
  var $i631: i32;
  var $i632: i1;
  var $i634: i32;
  var $i635: i1;
  var $i637: i32;
  var $i638: i1;
  var $i640: i32;
  var $i641: i1;
  var $i643: i32;
  var $i644: i1;
  var $i646: i32;
  var $i647: i1;
  var $i649: i32;
  var $i650: i1;
  var $i652: i32;
  var $i653: i1;
  var $i655: i32;
  var $i656: i1;
  var $i658: i32;
  var $i659: i1;
  var $i661: i32;
  var $i662: i1;
  var $i664: i32;
  var $i665: i1;
  var $i667: i32;
  var $i668: i1;
  var $i670: i32;
  var $i671: i1;
  var $i673: i32;
  var $i674: i1;
  var $i676: i32;
  var $i677: i1;
  var $i679: i32;
  var $i680: i1;
  var $i682: i32;
  var $i683: i1;
  var $i685: i32;
  var $i686: i1;
  var $i688: i32;
  var $i689: i1;
  var $i691: i32;
  var $i692: i1;
  var $i694: i32;
  var $i695: i1;
  var $i697: i32;
  var $i698: i1;
  var $i700: i32;
  var $i701: i1;
  var $i703: i32;
  var $i704: i1;
  var $i706: i32;
  var $i707: i1;
  var $i709: i32;
  var $i710: i1;
  var $i712: i32;
  var $i713: i1;
  var $i715: i32;
  var $i716: i1;
  var $i718: i32;
  var $i719: i1;
  var $i721: i32;
  var $i722: i1;
  var $i724: i32;
  var $i725: i1;
  var $i727: i32;
  var $i728: i1;
  var $i730: i32;
  var $i731: i1;
  var $i733: i32;
  var $i734: i1;
  var $i736: i32;
  var $i737: i1;
  var $i739: i32;
  var $i740: i1;
  var $i742: i32;
  var $i743: i1;
  var $i745: i32;
  var $i746: i1;
  var $i748: i32;
  var $i749: i1;
  var $i751: i32;
  var $i752: i1;
  var $i754: i32;
  var $i755: i1;
  var $i757: i32;
  var $i758: i1;
  var $i760: i32;
  var $i761: i1;
  var $i763: i32;
  var $i764: i1;
  var $i766: i32;
  var $i767: i1;
  var $i769: i32;
  var $i770: i1;
  var $i772: i32;
  var $i773: i1;
  var $i775: i32;
  var $i776: i1;
  var $i778: i32;
  var $i779: i1;
  var $i781: i32;
  var $i782: i1;
  var $i784: i32;
  var $i785: i1;
  var $i787: i32;
  var $i788: i1;
  var $i790: i32;
  var $i791: i1;
  var $i793: i32;
  var $i794: i1;
  var $i796: i32;
  var $i797: i1;
  var $i799: i32;
  var $i800: i1;
  var $i802: i32;
  var $i803: i1;
  var $i805: i32;
  var $i806: i1;
  var $i808: i32;
  var $i809: i1;
  var $i811: i32;
  var $i812: i1;
  var $i814: i32;
  var $i815: i1;
  var $i817: i32;
  var $i818: i1;
  var $i820: i32;
  var $i821: i1;
  var $i823: i32;
  var $i824: i1;
  var $i826: i32;
  var $i827: i1;
  var $i829: i32;
  var $i830: i1;
  var $i832: i32;
  var $i833: i1;
  var $i835: i32;
  var $i836: i1;
  var $i838: i32;
  var $i839: i1;
  var $i841: i32;
  var $i842: i1;
  var $i844: i32;
  var $i845: i1;
  var $i847: i32;
  var $i848: i1;
  var $i850: i32;
  var $i851: i1;
  var $i853: i32;
  var $i854: i1;
  var $i856: i32;
  var $i857: i1;
  var $i859: i32;
  var $i860: i1;
  var $i862: i32;
  var $i863: i1;
  var $i865: i32;
  var $i866: i1;
  var $i868: i32;
  var $i869: i1;
  var $i871: i32;
  var $i872: i1;
  var $i874: i32;
  var $i875: i1;
  var $i877: i32;
  var $i878: i1;
  var $i880: i32;
  var $i881: i1;
  var $i883: i32;
  var $i884: i1;
  var $i886: i32;
  var $i887: i1;
  var $i889: i32;
  var $i890: i1;
  var $i892: i32;
  var $i893: i1;
  var $i895: i32;
  var $i896: i1;
  var $i898: i32;
  var $i899: i1;
  var $i901: i32;
  var $i902: i1;
  var $i904: i32;
  var $i905: i1;
  var $i907: i32;
  var $i908: i1;
  var $i910: i32;
  var $i911: i1;
  var $i913: i32;
  var $i914: i1;
  var $i916: i32;
  var $i917: i1;
  var $i919: i32;
  var $i920: i1;
  var $i922: i32;
  var $i923: i1;
  var $i925: i32;
  var $i926: i1;
  var $i928: i32;
  var $i929: i1;
  var $i931: i32;
  var $i932: i1;
  var $i934: i32;
  var $i935: i1;
  var $i937: i32;
  var $i938: i1;
  var $i940: i32;
  var $i941: i1;
  var $i943: i32;
  var $i944: i1;
  var $i946: i32;
  var $i947: i1;
  var $i949: i32;
  var $i950: i1;
  var $i952: i32;
  var $i953: i1;
  var $i955: i32;
  var $i956: i1;
  var $i958: i32;
  var $i959: i1;
  var $i961: i32;
  var $i962: i1;
  var $i964: i32;
  var $i965: i1;
  var $i967: i32;
  var $i968: i1;
  var $i970: i32;
  var $i971: i1;
  var $i973: i32;
  var $i974: i1;
  var $i976: i32;
  var $i977: i1;
  var $i979: i32;
  var $i980: i1;
  var $i982: i32;
  var $i983: i1;
  var $i985: i32;
  var $i986: i1;
  var $i988: i32;
  var $i989: i1;
  var $i991: i32;
  var $i992: i1;
  var $i994: i32;
  var $i995: i1;
  var $i997: i32;
  var $i998: i1;
  var $i1000: i32;
  var $i1001: i1;
  var $i1003: i32;
  var $i1004: i1;
  var $i1006: i32;
  var $i1007: i1;
  var $i1009: i32;
  var $i1010: i1;
  var $i1012: i32;
  var $i1013: i1;
  var $i1015: i32;
  var $i1016: i1;
  var $i1018: i32;
  var $i1019: i1;
  var $i1021: i32;
  var $i1022: i1;
  var $i1024: i32;
  var $i1025: i1;
  var $i1027: i32;
  var $i1028: i1;
  var $i1030: i32;
  var $i1031: i1;
  var $i1033: i32;
  var $i1034: i1;
  var $i1036: i32;
  var $i1037: i1;
  var $i1039: i32;
  var $i1040: i1;
  var $i1042: i32;
  var $i1043: i1;
  var $i1045: i32;
  var $i1046: i1;
  var $i1048: i32;
  var $i1049: i1;
  var $i1051: i32;
  var $i1052: i1;
  var $i1054: i32;
  var $i1055: i1;
  var $i1057: i32;
  var $i1058: i1;
  var $i1060: i32;
  var $i1061: i1;
  var $i1063: i32;
  var $i1064: i1;
  var $i1066: i32;
  var $i1067: i1;
  var $i1069: i32;
  var $i1070: i1;
  var $i1072: i32;
  var $i1073: i1;
  var $i1075: i32;
  var $i1076: i1;
  var $i1078: i32;
  var $i1079: i1;
  var $i1081: i32;
  var $i1082: i1;
  var $i1084: i32;
  var $i1085: i1;
  var $i1087: i32;
  var $i1088: i1;
  var $i1090: i32;
  var $i1091: i1;
  var $i1093: i32;
  var $i1094: i1;
  var $i1096: i32;
  var $i1097: i1;
  var $i1099: i32;
  var $i1100: i1;
  var $i1102: i32;
  var $i1103: i1;
  var $i1105: i32;
  var $i1106: i1;
  var $i1108: i32;
  var $i1109: i1;
  var $i1111: i32;
  var $i1112: i1;
  var $i1114: i32;
  var $i1115: i1;
  var $i1117: i32;
  var $i1118: i1;
  var $i1120: i32;
  var $i1121: i1;
  var $i1123: i32;
  var $i1124: i1;
  var $i1126: i32;
  var $i1127: i1;
  var $i1129: i32;
  var $i1130: i1;
  var $i1132: i32;
  var $i1133: i1;
  var $i1135: i32;
  var $i1136: i1;
  var $i1138: i32;
  var $i1139: i1;
  var $i1141: i32;
  var $i1142: i1;
  var $i1144: i32;
  var $i1145: i1;
  var $i1147: i32;
  var $i1148: i1;
  var $i1150: i32;
  var $i1151: i1;
  var $i1153: i32;
  var $i1154: i1;
  var $i1156: i32;
  var $i1157: i1;
  var $i1159: i32;
  var $i1160: i1;
  var $i1162: i32;
  var $i1163: i1;
  var $i1165: i32;
  var $i1166: i1;
  var $i1168: i32;
  var $i1169: i1;
  var $i1171: i32;
  var $i1172: i1;
  var $i1174: i32;
  var $i1175: i1;
  var $i1177: i32;
  var $i1178: i1;
  var $i1180: i32;
  var $i1181: i1;
  var $i1183: i32;
  var $i1184: i1;
  var $i1186: i32;
  var $i1187: i1;
  var $i1189: i32;
  var $i1190: i1;
  var $i1192: i32;
  var $i1193: i1;
  var $i1195: i32;
  var $i1196: i1;
  var $i1198: i32;
  var $i1199: i1;
  var $i1201: i32;
  var $i1202: i1;
  var $i1204: i32;
  var $i1205: i1;
  var $i1207: i32;
  var $i1208: i1;
  var $i1210: i32;
  var $i1211: i1;
  var $i1213: i32;
  var $i1214: i1;
  var $i1216: i32;
  var $i1217: i1;
  var $i1219: i32;
  var $i1220: i1;
  var $i1222: i32;
  var $i1223: i1;
  var $i1225: i32;
  var $i1226: i1;
  var $i1228: i32;
  var $i1229: i1;
  var $i1231: i32;
  var $i1232: i1;
  var $i1234: i32;
  var $i1235: i1;
  var $i1237: i32;
  var $i1238: i1;
  var $i1240: i32;
  var $i1241: i1;
  var $i1243: i32;
  var $i1244: i1;
  var $i1246: i32;
  var $i1247: i1;
  var $i1249: i32;
  var $i1250: i1;
  var $i1252: i32;
  var $i1253: i1;
  var $i1255: i32;
  var $i1256: i1;
  var $i1258: i32;
  var $i1259: i1;
  var $i1261: i32;
  var $i1262: i1;
  var $i1264: i32;
  var $i1265: i1;
  var $i1267: i32;
  var $i1268: i1;
  var $i1270: i32;
  var $i1271: i1;
  var $i1273: i32;
  var $i1274: i1;
  var $i1276: i32;
  var $i1277: i1;
  var $i1279: i32;
  var $i1280: i1;
  var $i1282: i32;
  var $i1283: i1;
  var $i1285: i32;
  var $i1286: i1;
  var $i1288: i32;
  var $i1289: i1;
  var $i1291: i32;
  var $i1292: i1;
  var $i1294: i32;
  var $i1295: i1;
  var $i1297: i32;
  var $i1298: i1;
  var $i1300: i32;
  var $i1301: i1;
  var $i1303: i32;
  var $i1304: i1;
  var $i1306: i32;
  var $i1307: i1;
  var $i1309: i32;
  var $i1310: i1;
  var $i1312: i32;
  var $i1313: i1;
  var $i1315: i32;
  var $i1316: i1;
  var $i1318: i32;
  var $i1319: i1;
  var $i1321: i32;
  var $i1322: i1;
  var $i1324: i32;
  var $i1325: i1;
  var $i1327: i32;
  var $i1328: i1;
  var $i1330: i32;
  var $i1331: i1;
  var $i1333: i32;
  var $i1334: i1;
  var $i1336: i32;
  var $i1337: i1;
  var $i1339: i32;
  var $i1340: i1;
  var $i1342: i32;
  var $i1343: i1;
  var $i1345: i32;
  var $i1346: i1;
  var $i1348: i32;
  var $i1349: i1;
  var $i1351: i32;
  var $i1352: i1;
  var $i1354: i32;
  var $i1355: i1;
  var $i1357: i32;
  var $i1358: i1;
  var $i1360: i32;
  var $i1361: i1;
  var $i1363: i32;
  var $i1364: i1;
  var $i1366: i32;
  var $i1367: i1;
  var $i1369: i32;
  var $i1370: i1;
  var $i1372: i32;
  var $i1373: i1;
  var $i1375: i32;
  var $i1376: i1;
  var $i1378: i32;
  var $i1379: i1;
  var $i1381: i32;
  var $i1382: i1;
  var $i1384: i32;
  var $i1385: i1;
  var $i1387: i32;
  var $i1388: i1;
  var $i1390: i32;
  var $i1391: i1;
  var $i1393: i32;
  var $i1394: i1;
  var $i1396: i32;
  var $i1397: i1;
  var $i1399: i32;
  var $i1400: i1;
  var $i1402: i32;
  var $i1403: i1;
  var $i1405: i32;
  var $i1406: i1;
  var $i1408: i32;
  var $i1409: i1;
  var $i1411: i32;
  var $i1412: i1;
  var $i1414: i32;
  var $i1415: i1;
  var $i1417: i32;
  var $i1418: i1;
  var $i1420: i32;
  var $i1421: i1;
  var $i1423: i32;
  var $i1424: i1;
  var $i1426: i32;
  var $i1427: i1;
  var $i1429: i32;
  var $i1430: i1;
  var $i1432: i32;
  var $i1433: i1;
  var $i1435: i32;
  var $i1436: i1;
  var $i1438: i32;
  var $i1439: i1;
  var $i1441: i32;
  var $i1442: i1;
  var $i1444: i32;
  var $i1445: i1;
  var $i1447: i32;
  var $i1448: i1;
  var $i1450: i32;
  var $i1451: i1;
  var $i1453: i32;
  var $i1454: i1;
  var $i1456: i32;
  var $i1457: i1;
  var $i1459: i32;
  var $i1460: i1;
  var $i1462: i32;
  var $i1463: i1;
  var $i1465: i32;
  var $i1466: i1;
  var $i1468: i32;
  var $i1469: i1;
  var $i1471: i32;
  var $i1472: i1;
  var $i1474: i32;
  var $i1475: i1;
  var $i1477: i32;
  var $i1478: i1;
  var $i1480: i32;
  var $i1481: i1;
  var $i1483: i32;
  var $i1484: i1;
  var $i1486: i32;
  var $i1487: i1;
  var $i1489: i32;
  var $i1490: i1;
  var $i1492: i32;
  var $i1493: i1;
  var $i1495: i32;
  var $i1496: i1;
  var $i1498: i32;
  var $i1499: i1;
  var $i1501: i32;
  var $i1502: i1;
  var $i1504: i32;
  var $i1505: i1;
  var $i1507: i32;
  var $i1508: i1;
  var $i1510: i32;
  var $i1511: i1;
  var $i1513: i32;
  var $i1514: i1;
  var $i1516: i32;
  var $i1517: i1;
  var $i1519: i32;
  var $i1520: i1;
  var $i1522: i32;
  var $i1523: i1;
  var $i1525: i32;
  var $i1526: i1;
  var $i1528: i32;
  var $i1529: i1;
  var $i1531: i32;
  var $i1532: i1;
  var $i1534: i32;
  var $i1535: i1;
  var $i1537: i32;
  var $i1538: i1;
  var $i1540: i32;
  var $i1541: i1;
  var $i1543: i32;
  var $i1544: i1;
  var $i1546: i32;
  var $i1547: i1;
  var $i1549: i32;
  var $i1550: i1;
  var $i1552: i32;
  var $i1553: i1;
  var $i1555: i32;
  var $i1556: i1;
  var $i1558: i32;
  var $i1559: i1;
  var $i1561: i32;
  var $i1562: i1;
  var $i1564: i32;
  var $i1565: i1;
  var $i1567: i32;
  var $i1568: i1;
  var $i1570: i32;
  var $i1571: i1;
  var $i1573: i32;
  var $i1574: i1;
  var $i1576: i32;
  var $i1577: i1;
  var $i1579: i32;
  var $i1580: i1;
  var $i1582: i32;
  var $i1583: i1;
  var $i1585: i32;
  var $i1586: i1;
  var $i1588: i32;
  var $i1589: i1;
  var $i1591: i32;
  var $i1592: i1;
  var $i1594: i32;
  var $i1595: i1;
  var $i1597: i32;
  var $i1598: i1;
  var $i1600: i32;
  var $i1601: i1;
  var $i1603: i32;
  var $i1604: i1;
  var $i1606: i32;
  var $i1607: i1;
  var $i1609: i32;
  var $i1610: i1;
  var $i1612: i32;
  var $i1613: i1;
  var $i1615: i32;
  var $i1616: i1;
  var $i1618: i32;
  var $i1619: i1;
  var $i1621: i32;
  var $i1622: i1;
  var $i1624: i32;
  var $i1625: i1;
  var $i1627: i32;
  var $i1628: i1;
  var $i1630: i32;
  var $i1631: i1;
  var $i1633: i32;
  var $i1634: i1;
  var $i1636: i32;
  var $i1637: i1;
  var $i1639: i32;
  var $i1640: i1;
  var $i1642: i32;
  var $i1643: i1;
  var $i1645: i32;
  var $i1646: i1;
  var $i1648: i32;
  var $i1649: i1;
  var $i1651: i32;
  var $i1652: i1;
  var $i1654: i32;
  var $i1655: i1;
  var $i1657: i32;
  var $i1658: i1;
  var $i1660: i32;
  var $i1661: i1;
  var $i1663: i32;
  var $i1664: i1;
  var $i1666: i32;
  var $i1667: i1;
  var $i1669: i32;
  var $i1670: i1;
  var $i1672: i32;
  var $i1673: i1;
  var $i1675: i32;
  var $i1676: i1;
  var $i1678: i32;
  var $i1679: i1;
  var $i1681: i32;
  var $i1682: i1;
  var $i1684: i32;
  var $i1685: i1;
  var $i1687: i32;
  var $i1688: i1;
  var $i1690: i32;
  var $i1691: i1;
  var $i1693: i32;
  var $i1694: i1;
  var $i1696: i32;
  var $i1697: i1;
  var $i1699: i32;
  var $i1700: i1;
  var $i1702: i32;
  var $i1703: i1;
  var $i1705: i32;
  var $i1706: i1;
  var $i1708: i32;
  var $i1709: i1;
  var $i1711: i32;
  var $i1712: i1;
  var $i1714: i32;
  var $i1715: i1;
  var $i1717: i32;
  var $i1718: i1;
  var $i1720: i32;
  var $i1721: i1;
  var $i1723: i32;
  var $i1724: i1;
  var $i1726: i32;
  var $i1727: i1;
  var $i1729: i32;
  var $i1730: i1;
  var $i1732: i32;
  var $i1733: i1;
  var $i1735: i32;
  var $i1736: i1;
  var $i1738: i32;
  var $i1739: i1;
  var $i1741: i32;
  var $i1742: i1;
  var $i1744: i32;
  var $i1745: i1;
  var $i1747: i32;
  var $i1748: i1;
  var $i1750: i32;
  var $i1751: i1;
  var $i1753: i32;
  var $i1754: i1;
  var $i1756: i32;
  var $i1757: i1;
  var $i1759: i32;
  var $i1760: i1;
  var $i1762: i32;
  var $i1763: i1;
  var $i1765: i32;
  var $i1766: i1;
  var $i1768: i32;
  var $i1769: i1;
  var $i1771: i32;
  var $i1772: i1;
  var $i1774: i32;
  var $i1775: i1;
  var $i1777: i32;
  var $i1778: i1;
  var $i1780: i32;
  var $i1781: i1;
  var $i1783: i32;
  var $i1784: i1;
  var $i1786: i32;
  var $i1787: i1;
  var $i1789: i32;
  var $i1790: i1;
  var $i1792: i32;
  var $i1793: i1;
  var $i1795: i32;
  var $i1796: i1;
  var $i1798: i32;
  var $i1799: i1;
  var $i1801: i32;
  var $i1802: i1;
  var $i1804: i32;
  var $i1805: i1;
  var $i1807: i32;
  var $i1808: i1;
  var $i1810: i32;
  var $i1811: i1;
  var $i1813: i32;
  var $i1814: i1;
  var $i1816: i32;
  var $i1817: i1;
  var $i1819: i32;
  var $i1820: i1;
  var $i1822: i32;
  var $i1823: i1;
  var $i1825: i32;
  var $i1826: i1;
  var $i1828: i32;
  var $i1829: i1;
  var $i1831: i32;
  var $i1832: i1;
  var $i1834: i32;
  var $i1835: i1;
  var $i1837: i32;
  var $i1838: i1;
  var $i1840: i32;
  var $i1841: i1;
  var $i1843: i32;
  var $i1844: i1;
  var $i1846: i32;
  var $i1847: i1;
  var $i1849: i32;
  var $i1850: i1;
  var $i1852: i32;
  var $i1853: i1;
  var $i1855: i32;
  var $i1856: i1;
  var $i1858: i32;
  var $i1859: i1;
  var $i1861: i32;
  var $i1862: i1;
  var $i1864: i32;
  var $i1865: i1;
  var $i1867: i32;
  var $i1868: i1;
  var $i1870: i32;
  var $i1871: i1;
  var $i1873: i32;
  var $i1874: i1;
  var $i1876: i32;
  var $i1877: i1;
  var $i1879: i32;
  var $i1880: i1;
  var $i1882: i32;
  var $i1883: i1;
  var $i1885: i32;
  var $i1886: i1;
  var $i1888: i32;
  var $i1889: i1;
  var $i1891: i32;
  var $i1892: i1;
  var $i1894: i32;
  var $i1895: i1;
  var $i1897: i32;
  var $i1898: i1;
  var $i1900: i32;
  var $i1901: i1;
  var $i1903: i32;
  var $i1904: i1;
  var $i1906: i32;
  var $i1907: i1;
  var $i1909: i32;
  var $i1910: i1;
  var $i1912: i32;
  var $i1913: i1;
  var $i1915: i32;
  var $i1916: i1;
  var $i1918: i32;
  var $i1919: i1;
  var $i1921: i32;
  var $i1922: i1;
  var $i1924: i32;
  var $i1925: i1;
  var $i1927: i32;
  var $i1928: i1;
  var $i1930: i32;
  var $i1931: i1;
  var $i1933: i32;
  var $i1934: i1;
  var $i1936: i32;
  var $i1937: i1;
  var $i1939: i32;
  var $i1940: i1;
  var $i1942: i32;
  var $i1943: i1;
  var $i1945: i32;
  var $i1946: i1;
  var $i1948: i32;
  var $i1949: i1;
  var $i1951: i32;
  var $i1952: i1;
  var $i1954: i32;
  var $i1955: i1;
  var $i1957: i32;
  var $i1958: i1;
  var $i1960: i32;
  var $i1961: i1;
  var $i1963: i32;
  var $i1964: i1;
  var $i1966: i32;
  var $i1967: i1;
  var $i1969: i32;
  var $i1970: i1;
  var $i1972: i32;
  var $i1973: i1;
  var $i1975: i32;
  var $i1976: i1;
  var $i1978: i32;
  var $i1979: i1;
  var $i1981: i32;
  var $i1982: i1;
  var $i1984: i32;
  var $i1985: i1;
  var $i1987: i32;
  var $i1988: i1;
  var $i1990: i32;
  var $i1991: i1;
  var $i1993: i32;
  var $i1994: i1;
  var $i1996: i32;
  var $i1997: i1;
  var $i1999: i32;
  var $i2000: i1;
  var $i2002: i32;
  var $i2003: i1;
  var $i2005: i32;
  var $i2006: i1;
  var $i2008: i32;
  var $i2009: i1;
  var $i2011: i32;
  var $i2012: i1;
  var $i2014: i32;
  var $i2015: i1;
  var $i2017: i32;
  var $i2018: i1;
  var $i2020: i32;
  var $i2021: i1;
  var $i2023: i32;
  var $i2024: i1;
  var $i2026: i32;
  var $i2027: i1;
  var $i2029: i32;
  var $i2030: i1;
  var $i2032: i32;
  var $i2033: i1;
  var $i2035: i32;
  var $i2036: i1;
  var $i2038: i32;
  var $i2039: i1;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: ref;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;
  var vslice_dummy_var_354: i32;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;
  var vslice_dummy_var_362: i32;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;
  var vslice_dummy_var_365: i32;
  var vslice_dummy_var_366: i32;
  var vslice_dummy_var_367: i32;
  var vslice_dummy_var_368: i32;
  var vslice_dummy_var_369: i32;
  var vslice_dummy_var_370: i32;
  var vslice_dummy_var_371: i32;
  var vslice_dummy_var_372: i32;
  var vslice_dummy_var_373: i32;
  var vslice_dummy_var_374: i32;
  var vslice_dummy_var_375: i32;
  var vslice_dummy_var_376: i32;
  var vslice_dummy_var_377: i32;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i32;
  var vslice_dummy_var_380: i32;
  var vslice_dummy_var_381: i32;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i32;
  var vslice_dummy_var_384: i32;
  var vslice_dummy_var_385: i32;
  var vslice_dummy_var_386: i32;
  var vslice_dummy_var_387: i32;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;
  var vslice_dummy_var_390: i32;
  var vslice_dummy_var_391: i32;
  var vslice_dummy_var_392: i32;
  var vslice_dummy_var_393: i32;
  var vslice_dummy_var_394: i32;
  var vslice_dummy_var_395: i32;
  var vslice_dummy_var_396: i32;
  var vslice_dummy_var_397: i32;
  var vslice_dummy_var_398: i32;
  var vslice_dummy_var_399: i32;
  var vslice_dummy_var_400: i32;
  var vslice_dummy_var_401: i32;
  var vslice_dummy_var_402: i32;
  var vslice_dummy_var_403: i32;
  var vslice_dummy_var_404: i32;
  var vslice_dummy_var_405: i32;
  var vslice_dummy_var_406: i32;
  var vslice_dummy_var_407: i32;
  var vslice_dummy_var_408: i32;
  var vslice_dummy_var_409: i32;
  var vslice_dummy_var_410: i32;
  var vslice_dummy_var_411: i32;
  var vslice_dummy_var_412: i32;
  var vslice_dummy_var_413: i32;
  var vslice_dummy_var_414: i32;
  var vslice_dummy_var_415: i32;
  var vslice_dummy_var_416: i32;
  var vslice_dummy_var_417: i32;
  var vslice_dummy_var_418: i32;
  var vslice_dummy_var_419: i32;
  var vslice_dummy_var_420: i32;
  var vslice_dummy_var_421: i32;
  var vslice_dummy_var_422: i32;
  var vslice_dummy_var_423: i32;
  var vslice_dummy_var_424: i32;
  var vslice_dummy_var_425: i32;
  var vslice_dummy_var_426: i32;
  var vslice_dummy_var_427: i32;
  var vslice_dummy_var_428: i32;
  var vslice_dummy_var_429: i32;
  var vslice_dummy_var_430: i32;
  var vslice_dummy_var_431: i32;
  var vslice_dummy_var_432: i32;
  var vslice_dummy_var_433: i32;
  var vslice_dummy_var_434: i32;
  var vslice_dummy_var_435: i32;
  var vslice_dummy_var_436: i32;
  var vslice_dummy_var_437: i32;
  var vslice_dummy_var_438: i32;
  var vslice_dummy_var_439: i32;
  var vslice_dummy_var_440: i32;
  var vslice_dummy_var_441: i32;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;
  var vslice_dummy_var_444: i32;
  var vslice_dummy_var_445: i32;
  var vslice_dummy_var_446: i32;
  var vslice_dummy_var_447: i32;
  var vslice_dummy_var_448: i32;
  var vslice_dummy_var_449: i32;
  var vslice_dummy_var_450: i32;
  var vslice_dummy_var_451: i32;
  var vslice_dummy_var_452: i32;
  var vslice_dummy_var_453: i32;
  var vslice_dummy_var_454: i32;
  var vslice_dummy_var_455: i32;
  var vslice_dummy_var_456: i32;
  var vslice_dummy_var_457: i32;
  var vslice_dummy_var_458: i32;
  var vslice_dummy_var_459: i32;
  var vslice_dummy_var_460: i32;
  var vslice_dummy_var_461: i32;
  var vslice_dummy_var_462: i32;
  var vslice_dummy_var_463: i32;
  var vslice_dummy_var_464: i32;
  var vslice_dummy_var_465: i32;
  var vslice_dummy_var_466: i32;
  var vslice_dummy_var_467: i32;
  var vslice_dummy_var_468: i32;
  var vslice_dummy_var_469: i32;
  var vslice_dummy_var_470: i32;
  var vslice_dummy_var_471: i32;
  var vslice_dummy_var_472: i32;
  var vslice_dummy_var_473: i32;
  var vslice_dummy_var_474: i32;
  var vslice_dummy_var_475: i32;
  var vslice_dummy_var_476: i32;
  var vslice_dummy_var_477: i32;
  var vslice_dummy_var_478: i32;
  var vslice_dummy_var_479: i32;
  var vslice_dummy_var_480: i32;
  var vslice_dummy_var_481: i32;
  var vslice_dummy_var_482: i32;
  var vslice_dummy_var_483: i32;
  var vslice_dummy_var_484: i32;
  var vslice_dummy_var_485: i32;
  var vslice_dummy_var_486: i32;
  var vslice_dummy_var_487: i32;
  var vslice_dummy_var_488: i32;
  var vslice_dummy_var_489: i32;
  var vslice_dummy_var_490: i32;
  var vslice_dummy_var_491: i32;
  var vslice_dummy_var_492: i32;
  var vslice_dummy_var_493: i32;
  var vslice_dummy_var_494: i32;
  var vslice_dummy_var_495: i32;
  var vslice_dummy_var_496: i32;
  var vslice_dummy_var_497: i32;
  var vslice_dummy_var_498: i32;
  var vslice_dummy_var_499: i32;
  var vslice_dummy_var_500: i32;
  var vslice_dummy_var_501: i32;
  var vslice_dummy_var_502: i32;
  var vslice_dummy_var_503: i32;
  var vslice_dummy_var_504: i32;
  var vslice_dummy_var_505: i32;
  var vslice_dummy_var_506: i32;
  var vslice_dummy_var_507: i32;
  var vslice_dummy_var_508: i32;
  var vslice_dummy_var_509: i32;
  var vslice_dummy_var_510: i32;
  var vslice_dummy_var_511: i32;
  var vslice_dummy_var_512: i32;
  var vslice_dummy_var_513: i32;
  var vslice_dummy_var_514: i32;
  var vslice_dummy_var_515: i32;
  var vslice_dummy_var_516: i32;
  var vslice_dummy_var_517: i32;
  var vslice_dummy_var_518: i32;
  var vslice_dummy_var_519: i32;
  var vslice_dummy_var_520: i32;
  var vslice_dummy_var_521: i32;
  var vslice_dummy_var_522: i32;
  var vslice_dummy_var_523: i32;
  var vslice_dummy_var_524: i32;
  var vslice_dummy_var_525: i32;
  var vslice_dummy_var_526: i32;
  var vslice_dummy_var_527: i32;
  var vslice_dummy_var_528: i32;
  var vslice_dummy_var_529: i32;
  var vslice_dummy_var_530: i32;
  var vslice_dummy_var_531: i32;
  var vslice_dummy_var_532: i32;
  var vslice_dummy_var_533: i32;
  var vslice_dummy_var_534: i32;
  var vslice_dummy_var_535: i32;
  var vslice_dummy_var_536: i32;
  var vslice_dummy_var_537: i32;
  var vslice_dummy_var_538: i32;
  var vslice_dummy_var_539: i32;
  var vslice_dummy_var_540: i32;
  var vslice_dummy_var_541: i32;
  var vslice_dummy_var_542: i32;
  var vslice_dummy_var_543: i32;
  var vslice_dummy_var_544: i32;
  var vslice_dummy_var_545: i32;
  var vslice_dummy_var_546: i32;
  var vslice_dummy_var_547: i32;
  var vslice_dummy_var_548: i32;
  var vslice_dummy_var_549: i32;
  var vslice_dummy_var_550: i32;
  var vslice_dummy_var_551: i32;
  var vslice_dummy_var_552: i32;
  var vslice_dummy_var_553: i32;
  var vslice_dummy_var_554: i32;
  var vslice_dummy_var_555: i32;
  var vslice_dummy_var_556: i32;
  var vslice_dummy_var_557: i32;
  var vslice_dummy_var_558: i32;
  var vslice_dummy_var_559: i32;
  var vslice_dummy_var_560: i32;
  var vslice_dummy_var_561: i32;
  var vslice_dummy_var_562: i32;
  var vslice_dummy_var_563: i32;
  var vslice_dummy_var_564: i32;
  var vslice_dummy_var_565: i32;
  var vslice_dummy_var_566: i32;
  var vslice_dummy_var_567: i32;
  var vslice_dummy_var_568: i32;
  var vslice_dummy_var_569: i32;
  var vslice_dummy_var_570: i32;
  var vslice_dummy_var_571: i32;
  var vslice_dummy_var_572: i32;
  var vslice_dummy_var_573: i32;
  var vslice_dummy_var_574: i32;
  var vslice_dummy_var_575: i32;
  var vslice_dummy_var_576: i32;
  var vslice_dummy_var_577: i32;
  var vslice_dummy_var_578: i32;
  var vslice_dummy_var_579: i32;
  var vslice_dummy_var_580: i32;
  var vslice_dummy_var_581: i32;
  var vslice_dummy_var_582: i32;
  var vslice_dummy_var_583: i32;
  var vslice_dummy_var_584: i32;
  var vslice_dummy_var_585: i32;
  var vslice_dummy_var_586: i32;
  var vslice_dummy_var_587: i32;
  var vslice_dummy_var_588: i32;
  var vslice_dummy_var_589: i32;
  var vslice_dummy_var_590: i32;
  var vslice_dummy_var_591: i32;
  var vslice_dummy_var_592: i32;
  var vslice_dummy_var_593: i32;
  var vslice_dummy_var_594: i32;
  var vslice_dummy_var_595: i32;
  var vslice_dummy_var_596: i32;
  var vslice_dummy_var_597: i32;
  var vslice_dummy_var_598: i32;
  var vslice_dummy_var_599: i32;
  var vslice_dummy_var_600: i32;
  var vslice_dummy_var_601: i32;
  var vslice_dummy_var_602: i32;
  var vslice_dummy_var_603: i32;
  var vslice_dummy_var_604: i32;
  var vslice_dummy_var_605: i32;
  var vslice_dummy_var_606: i32;
  var vslice_dummy_var_607: i32;
  var vslice_dummy_var_608: i32;
  var vslice_dummy_var_609: i32;
  var vslice_dummy_var_610: i32;
  var vslice_dummy_var_611: i32;
  var vslice_dummy_var_612: i32;
  var vslice_dummy_var_613: i32;
  var vslice_dummy_var_614: i32;
  var vslice_dummy_var_615: i32;
  var vslice_dummy_var_616: i32;
  var vslice_dummy_var_617: i32;
  var vslice_dummy_var_618: i32;
  var vslice_dummy_var_619: i32;
  var vslice_dummy_var_620: i32;
  var vslice_dummy_var_621: i32;
  var vslice_dummy_var_622: i32;
  var vslice_dummy_var_623: i32;
  var vslice_dummy_var_624: i32;
  var vslice_dummy_var_625: i32;
  var vslice_dummy_var_626: i32;
  var vslice_dummy_var_627: i32;
  var vslice_dummy_var_628: i32;
  var vslice_dummy_var_629: i32;
  var vslice_dummy_var_630: i32;
  var vslice_dummy_var_631: i32;
  var vslice_dummy_var_632: i32;
  var vslice_dummy_var_633: i32;
  var vslice_dummy_var_634: i32;
  var vslice_dummy_var_635: i32;
  var vslice_dummy_var_636: i32;
  var vslice_dummy_var_637: i32;
  var vslice_dummy_var_638: i32;
  var vslice_dummy_var_639: i32;
  var vslice_dummy_var_640: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} _dev_info.ref.ref($p6, .str.82);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p7 := kzalloc(1184, 208);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} pci_set_drvdata($p0, $p13);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i14 := ida_pre_get(rsxx_disk_ida, 208);
    call {:si_unique_call 286} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i16, $i17, $p19, $i20, $i21, $i22 := rsxx_pci_probe_loop_$bb8($p8, $i16, $i17, $p19, $i20, $i21, $i22);
    goto $bb8_last;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} spin_lock(rsxx_ida_lock);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1084, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i20 := ida_get_new(rsxx_disk_ida, $p19);
    call {:si_unique_call 292} {:cexpr "st"} boogie_si_record_i32($i20);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} spin_unlock(rsxx_ida_lock);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $sub.i32(0, 11));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb9, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i24 := pci_enable_device($p0);
    call {:si_unique_call 295} {:cexpr "st"} boogie_si_record_i32($i24);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} pci_set_master($p0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_37 := pci_set_dma_max_seg_size($p0, 4096);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i28 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    call {:si_unique_call 302} {:cexpr "st"} boogie_si_record_i32($i28);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i34 := pci_request_regions($p0, .str.5);
    call {:si_unique_call 306} {:cexpr "st"} boogie_si_record_i32($i34);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i57, $i61);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, $sub.i64(0, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p68 := pci_iomap($p0, 0, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_38 := spinlock_check($p77);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} __raw_spin_lock_init($p81, .str.87, $p2);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} spin_lock_irq($p84);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} rsxx_disable_ier_and_isr($p8, $sub.i32(0, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} spin_unlock_irq($p85);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i86 := $M.16;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p8);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i96 := ldv_request_irq_45($i94, rsxx_isr, 128, .str.5, $p95);
    call {:si_unique_call 321} {:cexpr "st"} boogie_si_record_i32($i96);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i104 := rsxx_creg_setup($p8);
    call {:si_unique_call 325} {:cexpr "st"} boogie_si_record_i32($i104);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} spin_lock_irq($p110);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} rsxx_enable_ier_and_isr($p8, 2);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} spin_unlock_irq($p111);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i112 := rsxx_compatibility_check($p8);
    call {:si_unique_call 335} {:cexpr "st"} boogie_si_record_i32($i112);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i118 := rsxx_load_config($p8);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 339} {:cexpr "st"} boogie_si_record_i32($i118);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i124 := rsxx_get_num_targets($p8, $p123);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 342} {:cexpr "st"} boogie_si_record_i32($i124);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i132 := $mul.i64($i131, 712);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p133 := kzalloc($i132, 208);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p133);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i141 := rsxx_dma_setup($p8);
    call {:si_unique_call 346} {:cexpr "st"} boogie_si_record_i32($i141);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p146 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.20, 131082, 1, $p3, .str.95, .str.96);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p147, $p146);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(824, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __init_work($p156, 0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, 137438953408);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(824, 1)), $mul.ref(0, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p5);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 352} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p160, $p161, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(824, 1)), $mul.ref(32, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} lockdep_init_map($p163, .str.98, $p4, 0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(824, 1)), $mul.ref(8, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} INIT_LIST_HEAD($p165);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(824, 1)), $mul.ref(24, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, card_event_handler);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i168 := rsxx_setup_dev($p8);
    call {:si_unique_call 356} {:cexpr "st"} boogie_si_record_i32($i168);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_39 := rsxx_get_card_state($p8, $p170);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p174 := rsxx_card_state_to_str($i173);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p176, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} _dev_info.ref.ref.ref($p177, .str.99, $p174);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} spin_lock_irq($p178);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} rsxx_enable_ier_and_isr($p8, 8);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} spin_unlock_irq($p179);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 1);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i182 == 1);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 16);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb107;

  $bb107:
    assume !($i220 == 1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 128);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_43 := rsxx_attach_dev($p8);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} rsxx_debugfs_dev_new($p8);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i225 := rsxx_get_card_size8($p8, $p224);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 382} {:cexpr "st"} boogie_si_record_i32($i225);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i226 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p227, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb106;

  $bb83:
    assume $i182 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i183 := rsxx_issue_card_cmd($p8, 1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 365} {:cexpr "st"} boogie_si_record_i32($i183);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i188 := $M.18;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb88:
    assume $i189 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} _dev_info.ref.ref($p192, .str.101);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ssleep(1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_40 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p193);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 2);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb91, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.0, $p201);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 2);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i203 == 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p210 := rsxx_card_state_to_str($i209);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} _dev_info.ref.ref.ref($p213, .str.99, $p210);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i215 := rsxx_get_card_size8($p8, $p214);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 378} {:cexpr "st"} boogie_si_record_i32($i215);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i216 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p217, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i203 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} dev_warn.ref.ref($p206, .str.102);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p207, 0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb91:
    assume $i200 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ssleep(1);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_41 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p193);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb94;

  $bb92:
    assume $i198 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} ssleep(1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_42 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p193);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb94;

  $bb117:
    assume $i251 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} ssleep(1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_44 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p193);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 2);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb94;

  $bb119:
    assume $i254 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} ssleep(1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_45 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p193);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 2);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb94;

  $bb121:
    assume $i257 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} ssleep(1);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_46 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p193);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb94;

  $bb123:
    assume $i260 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ssleep(1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_47 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p193);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb94;

  $bb125:
    assume $i263 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} ssleep(1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_48 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p193);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb94;

  $bb127:
    assume $i266 == 1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ssleep(1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_49 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p193);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 2);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb94;

  $bb129:
    assume $i269 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} ssleep(1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_50 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p193);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb94;

  $bb131:
    assume $i272 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} ssleep(1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_51 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p193);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 2);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb94;

  $bb133:
    assume $i275 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} ssleep(1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_52 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p193);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 2);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb94;

  $bb135:
    assume $i278 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} ssleep(1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_53 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p193);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb94;

  $bb137:
    assume $i281 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} ssleep(1);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_54 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.0, $p193);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 2);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb94;

  $bb139:
    assume $i284 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ssleep(1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_55 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.0, $p193);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 2);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb94;

  $bb141:
    assume $i287 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} ssleep(1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_56 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p193);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 2);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb94;

  $bb143:
    assume $i290 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} ssleep(1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_57 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p193);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 2);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i293 == 1);
    goto $bb94;

  $bb145:
    assume $i293 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ssleep(1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_58 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.0, $p193);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 2);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb94;

  $bb147:
    assume $i296 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} ssleep(1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_59 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p193);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 2);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb94;

  $bb149:
    assume $i299 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ssleep(1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_60 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p193);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb94;

  $bb151:
    assume $i302 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} ssleep(1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_61 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p193);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb94;

  $bb153:
    assume $i305 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} ssleep(1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_62 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p193);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb94;

  $bb155:
    assume $i308 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} ssleep(1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_63 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p193);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 2);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb94;

  $bb157:
    assume $i311 == 1;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ssleep(1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_64 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p193);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 2);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb94;

  $bb159:
    assume $i314 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} ssleep(1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_65 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p193);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 2);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb94;

  $bb161:
    assume $i317 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ssleep(1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_66 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p193);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb94;

  $bb163:
    assume $i320 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ssleep(1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_67 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p193);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb94;

  $bb165:
    assume $i323 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ssleep(1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_68 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.0, $p193);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 2);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb94;

  $bb167:
    assume $i326 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ssleep(1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_69 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p193);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 2);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb94;

  $bb169:
    assume $i329 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} ssleep(1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_70 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p193);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 2);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb94;

  $bb171:
    assume $i332 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ssleep(1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_71 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p193);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb94;

  $bb173:
    assume $i335 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ssleep(1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_72 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.0, $p193);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i338 == 1);
    goto $bb94;

  $bb175:
    assume $i338 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ssleep(1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_73 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p193);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 2);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb94;

  $bb177:
    assume $i341 == 1;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} ssleep(1);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_74 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.0, $p193);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 2);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb94;

  $bb179:
    assume $i344 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ssleep(1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_75 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.0, $p193);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 2);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb94;

  $bb181:
    assume $i347 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ssleep(1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_76 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.0, $p193);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 2);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb94;

  $bb183:
    assume $i350 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ssleep(1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_77 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.0, $p193);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 2);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb94;

  $bb185:
    assume $i353 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ssleep(1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_78 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.0, $p193);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 2);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i356 == 1);
    goto $bb94;

  $bb187:
    assume $i356 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ssleep(1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_79 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i358 := $load.i32($M.0, $p193);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 2);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i359 == 1);
    goto $bb94;

  $bb189:
    assume $i359 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ssleep(1);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_80 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p193);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb94;

  $bb191:
    assume $i362 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} ssleep(1);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_81 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.0, $p193);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 2);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb94;

  $bb193:
    assume $i365 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} ssleep(1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_82 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.0, $p193);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 2);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i368 == 1);
    goto $bb94;

  $bb195:
    assume $i368 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} ssleep(1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_83 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p193);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 2);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb94;

  $bb197:
    assume $i371 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} ssleep(1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_84 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.0, $p193);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 2);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb94;

  $bb199:
    assume $i374 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ssleep(1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_85 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.0, $p193);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 2);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i377 == 1);
    goto $bb94;

  $bb201:
    assume $i377 == 1;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} ssleep(1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_86 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.0, $p193);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 2);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb94;

  $bb203:
    assume $i380 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ssleep(1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_87 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p193);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 2);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i383 == 1);
    goto $bb94;

  $bb205:
    assume $i383 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} ssleep(1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_88 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p193);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 2);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i386 == 1);
    goto $bb94;

  $bb207:
    assume $i386 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} ssleep(1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_89 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p193);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 2);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb94;

  $bb209:
    assume $i389 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ssleep(1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_90 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.0, $p193);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 2);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb94;

  $bb211:
    assume $i392 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} ssleep(1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_91 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p193);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 2);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb94;

  $bb213:
    assume $i395 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ssleep(1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_92 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.0, $p193);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb94;

  $bb215:
    assume $i398 == 1;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} ssleep(1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_93 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i400 := $load.i32($M.0, $p193);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 2);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb94;

  $bb217:
    assume $i401 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} ssleep(1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_94 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i403 := $load.i32($M.0, $p193);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 2);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i404 == 1);
    goto $bb94;

  $bb219:
    assume $i404 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} ssleep(1);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_95 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.0, $p193);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb94;

  $bb221:
    assume $i407 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ssleep(1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_96 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.0, $p193);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 2);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb94;

  $bb223:
    assume $i410 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} ssleep(1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_97 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.0, $p193);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 2);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb94;

  $bb225:
    assume $i413 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ssleep(1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_98 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i415 := $load.i32($M.0, $p193);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 2);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i416 == 1);
    goto $bb94;

  $bb227:
    assume $i416 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ssleep(1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_99 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.0, $p193);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i419 == 1);
    goto $bb94;

  $bb229:
    assume $i419 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ssleep(1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_100 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.0, $p193);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 2);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb231, $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume !($i422 == 1);
    goto $bb94;

  $bb231:
    assume $i422 == 1;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} ssleep(1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_101 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.0, $p193);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 2);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i425 == 1);
    goto $bb94;

  $bb233:
    assume $i425 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} ssleep(1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_102 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i427 := $load.i32($M.0, $p193);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i428 == 1);
    goto $bb94;

  $bb235:
    assume $i428 == 1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ssleep(1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_103 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.0, $p193);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i430, 2);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb94;

  $bb237:
    assume $i431 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} ssleep(1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_104 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.0, $p193);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i433, 2);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb94;

  $bb239:
    assume $i434 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ssleep(1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_105 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.0, $p193);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 2);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb94;

  $bb241:
    assume $i437 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} ssleep(1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_106 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.0, $p193);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i439, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb94;

  $bb243:
    assume $i440 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ssleep(1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_107 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i442 := $load.i32($M.0, $p193);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 2);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb245, $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb94;

  $bb245:
    assume $i443 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ssleep(1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_108 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.0, $p193);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, 2);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i446 == 1);
    goto $bb94;

  $bb247:
    assume $i446 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ssleep(1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_109 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p193);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb94;

  $bb249:
    assume $i449 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ssleep(1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_110 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.0, $p193);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 2);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i452 == 1);
    goto $bb94;

  $bb251:
    assume $i452 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ssleep(1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_111 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.0, $p193);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i454, 2);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i455 == 1);
    goto $bb94;

  $bb253:
    assume $i455 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} ssleep(1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_112 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.0, $p193);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, 2);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb255, $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb94;

  $bb255:
    assume $i458 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} ssleep(1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_113 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.0, $p193);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 2);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i461 == 1);
    goto $bb94;

  $bb257:
    assume $i461 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} ssleep(1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_114 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.0, $p193);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i463, 2);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i464 == 1);
    goto $bb94;

  $bb259:
    assume $i464 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ssleep(1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_115 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.0, $p193);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i466, 2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb94;

  $bb261:
    assume $i467 == 1;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ssleep(1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_116 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i469 := $load.i32($M.0, $p193);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, 2);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb94;

  $bb263:
    assume $i470 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} ssleep(1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_117 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.0, $p193);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 2);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb94;

  $bb265:
    assume $i473 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} ssleep(1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_118 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i475 := $load.i32($M.0, $p193);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 2);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb94;

  $bb267:
    assume $i476 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ssleep(1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_119 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i478 := $load.i32($M.0, $p193);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 2);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb94;

  $bb269:
    assume $i479 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ssleep(1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_120 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.0, $p193);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, 2);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb94;

  $bb271:
    assume $i482 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ssleep(1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_121 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.0, $p193);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 2);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i485 == 1);
    goto $bb94;

  $bb273:
    assume $i485 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} ssleep(1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_122 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p193);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb275, $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    assume !($i488 == 1);
    goto $bb94;

  $bb275:
    assume $i488 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ssleep(1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_123 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i490 := $load.i32($M.0, $p193);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i490, 2);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i491 == 1);
    goto $bb94;

  $bb277:
    assume $i491 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ssleep(1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_124 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i493 := $load.i32($M.0, $p193);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 2);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb94;

  $bb279:
    assume $i494 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ssleep(1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_125 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p193);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 2);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb94;

  $bb281:
    assume $i497 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ssleep(1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_126 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i499 := $load.i32($M.0, $p193);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 2);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb283, $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb94;

  $bb283:
    assume $i500 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ssleep(1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_127 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i502 := $load.i32($M.0, $p193);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i502, 2);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i503 == 1);
    goto $bb94;

  $bb285:
    assume $i503 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ssleep(1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_128 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i505 := $load.i32($M.0, $p193);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i505, 2);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i506 == 1);
    goto $bb94;

  $bb287:
    assume $i506 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ssleep(1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_129 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i508 := $load.i32($M.0, $p193);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i508, 2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i509} true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i509 == 1);
    goto $bb94;

  $bb289:
    assume $i509 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ssleep(1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_130 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i511 := $load.i32($M.0, $p193);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 2);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i512 == 1);
    goto $bb94;

  $bb291:
    assume $i512 == 1;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ssleep(1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_131 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p193);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i514, 2);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !($i515 == 1);
    goto $bb94;

  $bb293:
    assume $i515 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ssleep(1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_132 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i517 := $load.i32($M.0, $p193);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, 2);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i518 == 1);
    goto $bb94;

  $bb295:
    assume $i518 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ssleep(1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_133 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.0, $p193);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i520, 2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i521 == 1);
    goto $bb94;

  $bb297:
    assume $i521 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ssleep(1);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_134 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i523 := $load.i32($M.0, $p193);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i523, 2);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i524 == 1);
    goto $bb94;

  $bb299:
    assume $i524 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ssleep(1);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_135 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i526 := $load.i32($M.0, $p193);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i526, 2);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb301, $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    assume !($i527 == 1);
    goto $bb94;

  $bb301:
    assume $i527 == 1;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ssleep(1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_136 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.0, $p193);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 2);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb303, $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    assume !($i530 == 1);
    goto $bb94;

  $bb303:
    assume $i530 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} ssleep(1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_137 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i532 := $load.i32($M.0, $p193);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i532, 2);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i533 == 1);
    goto $bb94;

  $bb305:
    assume $i533 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} ssleep(1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_138 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i535 := $load.i32($M.0, $p193);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i535, 2);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb307, $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume !($i536 == 1);
    goto $bb94;

  $bb307:
    assume $i536 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} ssleep(1);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_139 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.0, $p193);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i538, 2);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i539 == 1);
    goto $bb94;

  $bb309:
    assume $i539 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ssleep(1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_140 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i541 := $load.i32($M.0, $p193);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i541, 2);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb311, $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    assume !($i542 == 1);
    goto $bb94;

  $bb311:
    assume $i542 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ssleep(1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_141 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i544 := $load.i32($M.0, $p193);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i545 := $eq.i32($i544, 2);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb94;

  $bb313:
    assume $i545 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} ssleep(1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_142 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i547 := $load.i32($M.0, $p193);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i547, 2);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !($i548 == 1);
    goto $bb94;

  $bb315:
    assume $i548 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} ssleep(1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_143 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p193);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i550, 2);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb94;

  $bb317:
    assume $i551 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} ssleep(1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_144 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i553 := $load.i32($M.0, $p193);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, 2);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i554 == 1);
    goto $bb94;

  $bb319:
    assume $i554 == 1;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ssleep(1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_145 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i556 := $load.i32($M.0, $p193);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i556, 2);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb94;

  $bb321:
    assume $i557 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} ssleep(1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_146 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i559 := $load.i32($M.0, $p193);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i560 := $eq.i32($i559, 2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb323, $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume !($i560 == 1);
    goto $bb94;

  $bb323:
    assume $i560 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} ssleep(1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_147 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i562 := $load.i32($M.0, $p193);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i563 := $eq.i32($i562, 2);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i563 == 1);
    goto $bb94;

  $bb325:
    assume $i563 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} ssleep(1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_148 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.0, $p193);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i565, 2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb94;

  $bb327:
    assume $i566 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} ssleep(1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_149 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i568 := $load.i32($M.0, $p193);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 2);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb329, $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    assume !($i569 == 1);
    goto $bb94;

  $bb329:
    assume $i569 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ssleep(1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_150 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i571 := $load.i32($M.0, $p193);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i571, 2);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb331, $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    assume !($i572 == 1);
    goto $bb94;

  $bb331:
    assume $i572 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} ssleep(1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_151 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i574 := $load.i32($M.0, $p193);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i574, 2);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb94;

  $bb333:
    assume $i575 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} ssleep(1);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_152 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i577 := $load.i32($M.0, $p193);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i577, 2);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb335, $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    assume !($i578 == 1);
    goto $bb94;

  $bb335:
    assume $i578 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ssleep(1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_153 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i580 := $load.i32($M.0, $p193);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i580, 2);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i581 == 1);
    goto $bb94;

  $bb337:
    assume $i581 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} ssleep(1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_154 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.0, $p193);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i583, 2);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb339, $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    assume !($i584 == 1);
    goto $bb94;

  $bb339:
    assume $i584 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} ssleep(1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_155 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i586 := $load.i32($M.0, $p193);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 2);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i587 == 1);
    goto $bb94;

  $bb341:
    assume $i587 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ssleep(1);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_156 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.0, $p193);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i589, 2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb343, $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    assume !($i590 == 1);
    goto $bb94;

  $bb343:
    assume $i590 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} ssleep(1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_157 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p193);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i592, 2);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !($i593 == 1);
    goto $bb94;

  $bb345:
    assume $i593 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ssleep(1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_158 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.0, $p193);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i595, 2);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb94;

  $bb347:
    assume $i596 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} ssleep(1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_159 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i598 := $load.i32($M.0, $p193);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i598, 2);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb349, $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    assume !($i599 == 1);
    goto $bb94;

  $bb349:
    assume $i599 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} ssleep(1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_160 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.0, $p193);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, 2);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !($i602 == 1);
    goto $bb94;

  $bb351:
    assume $i602 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ssleep(1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_161 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i604 := $load.i32($M.0, $p193);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i604, 2);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb353, $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb94;

  $bb353:
    assume $i605 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ssleep(1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_162 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i607 := $load.i32($M.0, $p193);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i607, 2);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb355, $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb94;

  $bb355:
    assume $i608 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} ssleep(1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_163 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p193);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i610, 2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb357, $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    assume !($i611 == 1);
    goto $bb94;

  $bb357:
    assume $i611 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} ssleep(1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_164 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.0, $p193);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i613, 2);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i614} true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i614 == 1);
    goto $bb94;

  $bb359:
    assume $i614 == 1;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} ssleep(1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_165 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i616 := $load.i32($M.0, $p193);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i616, 2);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i617} true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i617 == 1);
    goto $bb94;

  $bb361:
    assume $i617 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ssleep(1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_166 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i619 := $load.i32($M.0, $p193);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i619, 2);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb363, $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    assume !($i620 == 1);
    goto $bb94;

  $bb363:
    assume $i620 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} ssleep(1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_167 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i622 := $load.i32($M.0, $p193);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i622, 2);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb365, $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    assume !($i623 == 1);
    goto $bb94;

  $bb365:
    assume $i623 == 1;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ssleep(1);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_168 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i625 := $load.i32($M.0, $p193);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i625, 2);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !($i626 == 1);
    goto $bb94;

  $bb367:
    assume $i626 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} ssleep(1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_169 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i628 := $load.i32($M.0, $p193);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i628, 2);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i629} true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !($i629 == 1);
    goto $bb94;

  $bb369:
    assume $i629 == 1;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ssleep(1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_170 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i631 := $load.i32($M.0, $p193);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i632 := $eq.i32($i631, 2);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb371, $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    assume !($i632 == 1);
    goto $bb94;

  $bb371:
    assume $i632 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ssleep(1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_171 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p193);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i634, 2);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb373, $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb94;

  $bb373:
    assume $i635 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} ssleep(1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_172 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i637 := $load.i32($M.0, $p193);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i637, 2);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb375, $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    assume !($i638 == 1);
    goto $bb94;

  $bb375:
    assume $i638 == 1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} ssleep(1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_173 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i640 := $load.i32($M.0, $p193);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i640, 2);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb377, $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    assume !($i641 == 1);
    goto $bb94;

  $bb377:
    assume $i641 == 1;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} ssleep(1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_174 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i643 := $load.i32($M.0, $p193);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i643, 2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i644 == 1);
    goto $bb94;

  $bb379:
    assume $i644 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ssleep(1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_175 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i646 := $load.i32($M.0, $p193);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i646, 2);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb381, $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb94;

  $bb381:
    assume $i647 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} ssleep(1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_176 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i649 := $load.i32($M.0, $p193);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i649, 2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb383, $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb94;

  $bb383:
    assume $i650 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} ssleep(1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_177 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i652 := $load.i32($M.0, $p193);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i652, 2);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb385, $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    assume !($i653 == 1);
    goto $bb94;

  $bb385:
    assume $i653 == 1;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ssleep(1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_178 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i655 := $load.i32($M.0, $p193);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i655, 2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb387, $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    assume !($i656 == 1);
    goto $bb94;

  $bb387:
    assume $i656 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} ssleep(1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_179 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i658 := $load.i32($M.0, $p193);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i658, 2);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i659 == 1);
    goto $bb94;

  $bb389:
    assume $i659 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ssleep(1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_180 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i661 := $load.i32($M.0, $p193);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i661, 2);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i662} true;
    goto $bb391, $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume !($i662 == 1);
    goto $bb94;

  $bb391:
    assume $i662 == 1;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ssleep(1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_181 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i664 := $load.i32($M.0, $p193);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i664, 2);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i665 == 1);
    goto $bb94;

  $bb393:
    assume $i665 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} ssleep(1);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_182 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i667 := $load.i32($M.0, $p193);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i667, 2);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i668} true;
    goto $bb395, $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    assume !($i668 == 1);
    goto $bb94;

  $bb395:
    assume $i668 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} ssleep(1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_183 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i670 := $load.i32($M.0, $p193);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i670, 2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i671 == 1);
    goto $bb94;

  $bb397:
    assume $i671 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} ssleep(1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_184 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i673 := $load.i32($M.0, $p193);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i673, 2);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb399, $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    assume !($i674 == 1);
    goto $bb94;

  $bb399:
    assume $i674 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ssleep(1);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_185 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.0, $p193);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i676, 2);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i677} true;
    goto $bb401, $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    assume !($i677 == 1);
    goto $bb94;

  $bb401:
    assume $i677 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ssleep(1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_186 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i679 := $load.i32($M.0, $p193);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i679, 2);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb403, $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb94;

  $bb403:
    assume $i680 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ssleep(1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_187 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i682 := $load.i32($M.0, $p193);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i682, 2);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb405, $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    assume !($i683 == 1);
    goto $bb94;

  $bb405:
    assume $i683 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ssleep(1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_188 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i685 := $load.i32($M.0, $p193);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i685, 2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb407, $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    assume !($i686 == 1);
    goto $bb94;

  $bb407:
    assume $i686 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} ssleep(1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_189 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i688 := $load.i32($M.0, $p193);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i689 := $eq.i32($i688, 2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i689} true;
    goto $bb409, $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    assume !($i689 == 1);
    goto $bb94;

  $bb409:
    assume $i689 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} ssleep(1);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_190 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i691 := $load.i32($M.0, $p193);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i691, 2);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb411, $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb94;

  $bb411:
    assume $i692 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ssleep(1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_191 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i694 := $load.i32($M.0, $p193);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i694, 2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb413, $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    assume !($i695 == 1);
    goto $bb94;

  $bb413:
    assume $i695 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ssleep(1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_192 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i697 := $load.i32($M.0, $p193);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i698 := $eq.i32($i697, 2);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb415, $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb94;

  $bb415:
    assume $i698 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} ssleep(1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_193 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i700 := $load.i32($M.0, $p193);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i701 := $eq.i32($i700, 2);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i701} true;
    goto $bb417, $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    assume !($i701 == 1);
    goto $bb94;

  $bb417:
    assume $i701 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} ssleep(1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_194 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i703 := $load.i32($M.0, $p193);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i703, 2);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb419, $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    assume !($i704 == 1);
    goto $bb94;

  $bb419:
    assume $i704 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} ssleep(1);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_195 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i706 := $load.i32($M.0, $p193);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i706, 2);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb421, $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume !($i707 == 1);
    goto $bb94;

  $bb421:
    assume $i707 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ssleep(1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_196 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i709 := $load.i32($M.0, $p193);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i709, 2);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !($i710 == 1);
    goto $bb94;

  $bb423:
    assume $i710 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ssleep(1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_197 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i712 := $load.i32($M.0, $p193);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i712, 2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb425, $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    assume !($i713 == 1);
    goto $bb94;

  $bb425:
    assume $i713 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} ssleep(1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_198 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i715 := $load.i32($M.0, $p193);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i715, 2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb427, $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    assume !($i716 == 1);
    goto $bb94;

  $bb427:
    assume $i716 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ssleep(1);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_199 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i718 := $load.i32($M.0, $p193);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i718, 2);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !($i719 == 1);
    goto $bb94;

  $bb429:
    assume $i719 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} ssleep(1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_200 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i721 := $load.i32($M.0, $p193);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i721, 2);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i722} true;
    goto $bb431, $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    assume !($i722 == 1);
    goto $bb94;

  $bb431:
    assume $i722 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} ssleep(1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_201 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i724 := $load.i32($M.0, $p193);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i724, 2);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb433, $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    assume !($i725 == 1);
    goto $bb94;

  $bb433:
    assume $i725 == 1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ssleep(1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_202 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i727 := $load.i32($M.0, $p193);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i727, 2);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb435, $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    assume !($i728 == 1);
    goto $bb94;

  $bb435:
    assume $i728 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} ssleep(1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_203 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i730 := $load.i32($M.0, $p193);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i730, 2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb437, $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    assume !($i731 == 1);
    goto $bb94;

  $bb437:
    assume $i731 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} ssleep(1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_204 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.0, $p193);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i733, 2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i734 == 1);
    goto $bb94;

  $bb439:
    assume $i734 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} ssleep(1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_205 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i736 := $load.i32($M.0, $p193);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i736, 2);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb441, $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    assume !($i737 == 1);
    goto $bb94;

  $bb441:
    assume $i737 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} ssleep(1);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_206 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i739 := $load.i32($M.0, $p193);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i739, 2);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i740} true;
    goto $bb443, $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    assume !($i740 == 1);
    goto $bb94;

  $bb443:
    assume $i740 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} ssleep(1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_207 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i742 := $load.i32($M.0, $p193);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i742, 2);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i743} true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !($i743 == 1);
    goto $bb94;

  $bb445:
    assume $i743 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ssleep(1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_208 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i745 := $load.i32($M.0, $p193);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i745, 2);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb447, $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    assume !($i746 == 1);
    goto $bb94;

  $bb447:
    assume $i746 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} ssleep(1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_209 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i748 := $load.i32($M.0, $p193);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 2);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb449, $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    assume !($i749 == 1);
    goto $bb94;

  $bb449:
    assume $i749 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} ssleep(1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_210 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i751 := $load.i32($M.0, $p193);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i751, 2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb451, $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    assume !($i752 == 1);
    goto $bb94;

  $bb451:
    assume $i752 == 1;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ssleep(1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_211 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i754 := $load.i32($M.0, $p193);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i755 := $eq.i32($i754, 2);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb453, $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    assume !($i755 == 1);
    goto $bb94;

  $bb453:
    assume $i755 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} ssleep(1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_212 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i757 := $load.i32($M.0, $p193);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i757, 2);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb455, $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    assume !($i758 == 1);
    goto $bb94;

  $bb455:
    assume $i758 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} ssleep(1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_213 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i760 := $load.i32($M.0, $p193);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i761 := $eq.i32($i760, 2);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i761} true;
    goto $bb457, $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    assume !($i761 == 1);
    goto $bb94;

  $bb457:
    assume $i761 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} ssleep(1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_214 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i763 := $load.i32($M.0, $p193);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i763, 2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb459, $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    assume !($i764 == 1);
    goto $bb94;

  $bb459:
    assume $i764 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} ssleep(1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_215 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i766 := $load.i32($M.0, $p193);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i766, 2);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i767} true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i767 == 1);
    goto $bb94;

  $bb461:
    assume $i767 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} ssleep(1);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_216 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.0, $p193);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i770 := $eq.i32($i769, 2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb463, $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    assume !($i770 == 1);
    goto $bb94;

  $bb463:
    assume $i770 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ssleep(1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_217 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i772 := $load.i32($M.0, $p193);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i773 := $eq.i32($i772, 2);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i773} true;
    goto $bb465, $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    assume !($i773 == 1);
    goto $bb94;

  $bb465:
    assume $i773 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ssleep(1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_218 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i775 := $load.i32($M.0, $p193);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i776 := $eq.i32($i775, 2);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i776} true;
    goto $bb467, $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    assume !($i776 == 1);
    goto $bb94;

  $bb467:
    assume $i776 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ssleep(1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_219 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i778 := $load.i32($M.0, $p193);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i778, 2);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i779} true;
    goto $bb469, $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    assume !($i779 == 1);
    goto $bb94;

  $bb469:
    assume $i779 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ssleep(1);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_220 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i781 := $load.i32($M.0, $p193);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i781, 2);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i782} true;
    goto $bb471, $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    assume !($i782 == 1);
    goto $bb94;

  $bb471:
    assume $i782 == 1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ssleep(1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_221 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i784 := $load.i32($M.0, $p193);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i784, 2);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !($i785 == 1);
    goto $bb94;

  $bb473:
    assume $i785 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ssleep(1);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_222 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i787 := $load.i32($M.0, $p193);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i788 := $eq.i32($i787, 2);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i788} true;
    goto $bb475, $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    assume !($i788 == 1);
    goto $bb94;

  $bb475:
    assume $i788 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ssleep(1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_223 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i790 := $load.i32($M.0, $p193);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i790, 2);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb477, $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    assume !($i791 == 1);
    goto $bb94;

  $bb477:
    assume $i791 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ssleep(1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_224 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i793 := $load.i32($M.0, $p193);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i793, 2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i794} true;
    goto $bb479, $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    assume !($i794 == 1);
    goto $bb94;

  $bb479:
    assume $i794 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ssleep(1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_225 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i796 := $load.i32($M.0, $p193);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i797 := $eq.i32($i796, 2);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i797} true;
    goto $bb481, $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    assume !($i797 == 1);
    goto $bb94;

  $bb481:
    assume $i797 == 1;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ssleep(1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_226 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i799 := $load.i32($M.0, $p193);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i800 := $eq.i32($i799, 2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb483, $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    assume !($i800 == 1);
    goto $bb94;

  $bb483:
    assume $i800 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ssleep(1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_227 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p193);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i802, 2);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb485, $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    assume !($i803 == 1);
    goto $bb94;

  $bb485:
    assume $i803 == 1;
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} ssleep(1);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_228 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i805 := $load.i32($M.0, $p193);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i805, 2);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb487, $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    assume !($i806 == 1);
    goto $bb94;

  $bb487:
    assume $i806 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} ssleep(1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_229 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i808 := $load.i32($M.0, $p193);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i809 := $eq.i32($i808, 2);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb489, $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    assume !($i809 == 1);
    goto $bb94;

  $bb489:
    assume $i809 == 1;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ssleep(1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_230 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i811 := $load.i32($M.0, $p193);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i811, 2);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb491, $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    assume !($i812 == 1);
    goto $bb94;

  $bb491:
    assume $i812 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ssleep(1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_231 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i814 := $load.i32($M.0, $p193);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i815 := $eq.i32($i814, 2);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i815} true;
    goto $bb493, $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    assume !($i815 == 1);
    goto $bb94;

  $bb493:
    assume $i815 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ssleep(1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_232 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i817 := $load.i32($M.0, $p193);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i817, 2);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb495, $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    assume !($i818 == 1);
    goto $bb94;

  $bb495:
    assume $i818 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ssleep(1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_233 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i820 := $load.i32($M.0, $p193);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i820, 2);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb497, $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    assume !($i821 == 1);
    goto $bb94;

  $bb497:
    assume $i821 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ssleep(1);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_234 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i823 := $load.i32($M.0, $p193);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i823, 2);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i824} true;
    goto $bb499, $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume !($i824 == 1);
    goto $bb94;

  $bb499:
    assume $i824 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ssleep(1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_235 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i826 := $load.i32($M.0, $p193);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i827 := $eq.i32($i826, 2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i827} true;
    goto $bb501, $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume !($i827 == 1);
    goto $bb94;

  $bb501:
    assume $i827 == 1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} ssleep(1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_236 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i829 := $load.i32($M.0, $p193);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i829, 2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb503, $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    assume !($i830 == 1);
    goto $bb94;

  $bb503:
    assume $i830 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} ssleep(1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_237 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i832 := $load.i32($M.0, $p193);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i832, 2);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb505, $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    assume !($i833 == 1);
    goto $bb94;

  $bb505:
    assume $i833 == 1;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} ssleep(1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_238 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i835 := $load.i32($M.0, $p193);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i836 := $eq.i32($i835, 2);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i836} true;
    goto $bb507, $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    assume !($i836 == 1);
    goto $bb94;

  $bb507:
    assume $i836 == 1;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} ssleep(1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_239 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i838 := $load.i32($M.0, $p193);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i839 := $eq.i32($i838, 2);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i839} true;
    goto $bb509, $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    assume !($i839 == 1);
    goto $bb94;

  $bb509:
    assume $i839 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ssleep(1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_240 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i841 := $load.i32($M.0, $p193);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i841, 2);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i842} true;
    goto $bb511, $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    assume !($i842 == 1);
    goto $bb94;

  $bb511:
    assume $i842 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ssleep(1);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_241 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i844 := $load.i32($M.0, $p193);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i844, 2);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb513, $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    assume !($i845 == 1);
    goto $bb94;

  $bb513:
    assume $i845 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ssleep(1);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_242 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i847 := $load.i32($M.0, $p193);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i847, 2);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb515, $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    assume !($i848 == 1);
    goto $bb94;

  $bb515:
    assume $i848 == 1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ssleep(1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_243 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i850 := $load.i32($M.0, $p193);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i850, 2);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i851} true;
    goto $bb517, $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb94;

  $bb517:
    assume $i851 == 1;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ssleep(1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_244 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i853 := $load.i32($M.0, $p193);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i853, 2);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb519, $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    assume !($i854 == 1);
    goto $bb94;

  $bb519:
    assume $i854 == 1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ssleep(1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_245 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i856 := $load.i32($M.0, $p193);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i856, 2);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb521, $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    assume !($i857 == 1);
    goto $bb94;

  $bb521:
    assume $i857 == 1;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ssleep(1);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_246 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i859 := $load.i32($M.0, $p193);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i860 := $eq.i32($i859, 2);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i860} true;
    goto $bb523, $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    assume !($i860 == 1);
    goto $bb94;

  $bb523:
    assume $i860 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} ssleep(1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} vslice_dummy_var_247 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i862 := $load.i32($M.0, $p193);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i862, 2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb525, $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    assume !($i863 == 1);
    goto $bb94;

  $bb525:
    assume $i863 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ssleep(1);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_248 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i865 := $load.i32($M.0, $p193);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i865, 2);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i866} true;
    goto $bb527, $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    assume !($i866 == 1);
    goto $bb94;

  $bb527:
    assume $i866 == 1;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ssleep(1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} vslice_dummy_var_249 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i868 := $load.i32($M.0, $p193);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i869 := $eq.i32($i868, 2);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i869} true;
    goto $bb529, $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume !($i869 == 1);
    goto $bb94;

  $bb529:
    assume $i869 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ssleep(1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_250 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i871 := $load.i32($M.0, $p193);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i871, 2);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb531, $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    assume !($i872 == 1);
    goto $bb94;

  $bb531:
    assume $i872 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ssleep(1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_251 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i874 := $load.i32($M.0, $p193);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i874, 2);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb533, $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    assume !($i875 == 1);
    goto $bb94;

  $bb533:
    assume $i875 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ssleep(1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_252 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i877 := $load.i32($M.0, $p193);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i877, 2);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i878} true;
    goto $bb535, $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    assume !($i878 == 1);
    goto $bb94;

  $bb535:
    assume $i878 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ssleep(1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_253 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i880 := $load.i32($M.0, $p193);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i881 := $eq.i32($i880, 2);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i881 == 1);
    goto $bb94;

  $bb537:
    assume $i881 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ssleep(1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_254 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i883 := $load.i32($M.0, $p193);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i883, 2);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i884} true;
    goto $bb539, $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    assume !($i884 == 1);
    goto $bb94;

  $bb539:
    assume $i884 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ssleep(1);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_255 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i886 := $load.i32($M.0, $p193);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i887 := $eq.i32($i886, 2);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i887} true;
    goto $bb541, $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    assume !($i887 == 1);
    goto $bb94;

  $bb541:
    assume $i887 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} ssleep(1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_256 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i889 := $load.i32($M.0, $p193);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i889, 2);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i890} true;
    goto $bb543, $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    assume !($i890 == 1);
    goto $bb94;

  $bb543:
    assume $i890 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ssleep(1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_257 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i892 := $load.i32($M.0, $p193);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i893 := $eq.i32($i892, 2);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb545, $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    assume !($i893 == 1);
    goto $bb94;

  $bb545:
    assume $i893 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} ssleep(1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_258 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i895 := $load.i32($M.0, $p193);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i895, 2);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb547, $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    assume !($i896 == 1);
    goto $bb94;

  $bb547:
    assume $i896 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} ssleep(1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_259 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i898 := $load.i32($M.0, $p193);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i898, 2);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i899} true;
    goto $bb549, $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    assume !($i899 == 1);
    goto $bb94;

  $bb549:
    assume $i899 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ssleep(1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_260 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i901 := $load.i32($M.0, $p193);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i901, 2);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb551, $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    assume !($i902 == 1);
    goto $bb94;

  $bb551:
    assume $i902 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} ssleep(1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_261 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i904 := $load.i32($M.0, $p193);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i905 := $eq.i32($i904, 2);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb553, $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    assume !($i905 == 1);
    goto $bb94;

  $bb553:
    assume $i905 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} ssleep(1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_262 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i907 := $load.i32($M.0, $p193);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i907, 2);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb555, $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    assume !($i908 == 1);
    goto $bb94;

  $bb555:
    assume $i908 == 1;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} ssleep(1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_263 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i910 := $load.i32($M.0, $p193);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i910, 2);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i911} true;
    goto $bb557, $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    assume !($i911 == 1);
    goto $bb94;

  $bb557:
    assume $i911 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} ssleep(1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_264 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i913 := $load.i32($M.0, $p193);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i913, 2);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i914} true;
    goto $bb559, $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    assume !($i914 == 1);
    goto $bb94;

  $bb559:
    assume $i914 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ssleep(1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_265 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i916 := $load.i32($M.0, $p193);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i917 := $eq.i32($i916, 2);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb561, $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    assume !($i917 == 1);
    goto $bb94;

  $bb561:
    assume $i917 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ssleep(1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_266 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i919 := $load.i32($M.0, $p193);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i920 := $eq.i32($i919, 2);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb563, $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    assume !($i920 == 1);
    goto $bb94;

  $bb563:
    assume $i920 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ssleep(1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_267 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i922 := $load.i32($M.0, $p193);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i922, 2);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i923} true;
    goto $bb565, $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    assume !($i923 == 1);
    goto $bb94;

  $bb565:
    assume $i923 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ssleep(1);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_268 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i925 := $load.i32($M.0, $p193);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i926 := $eq.i32($i925, 2);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i926} true;
    goto $bb567, $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    assume !($i926 == 1);
    goto $bb94;

  $bb567:
    assume $i926 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ssleep(1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_269 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p193);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i929 := $eq.i32($i928, 2);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb569, $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    assume !($i929 == 1);
    goto $bb94;

  $bb569:
    assume $i929 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ssleep(1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_270 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i931 := $load.i32($M.0, $p193);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i932 := $eq.i32($i931, 2);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i932} true;
    goto $bb571, $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    assume !($i932 == 1);
    goto $bb94;

  $bb571:
    assume $i932 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ssleep(1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_271 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i934 := $load.i32($M.0, $p193);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i935 := $eq.i32($i934, 2);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i935} true;
    goto $bb573, $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    assume !($i935 == 1);
    goto $bb94;

  $bb573:
    assume $i935 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ssleep(1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_272 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i937 := $load.i32($M.0, $p193);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i938 := $eq.i32($i937, 2);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb575, $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    assume !($i938 == 1);
    goto $bb94;

  $bb575:
    assume $i938 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ssleep(1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_273 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i940 := $load.i32($M.0, $p193);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i941 := $eq.i32($i940, 2);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb577, $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    assume !($i941 == 1);
    goto $bb94;

  $bb577:
    assume $i941 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ssleep(1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_274 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i943 := $load.i32($M.0, $p193);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i944 := $eq.i32($i943, 2);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i944} true;
    goto $bb579, $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    assume !($i944 == 1);
    goto $bb94;

  $bb579:
    assume $i944 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ssleep(1);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_275 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i946 := $load.i32($M.0, $p193);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i946, 2);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb581, $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    assume !($i947 == 1);
    goto $bb94;

  $bb581:
    assume $i947 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ssleep(1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_276 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i949 := $load.i32($M.0, $p193);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i949, 2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i950} true;
    goto $bb583, $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    assume !($i950 == 1);
    goto $bb94;

  $bb583:
    assume $i950 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ssleep(1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_277 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i952 := $load.i32($M.0, $p193);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i953 := $eq.i32($i952, 2);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i953} true;
    goto $bb585, $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    assume !($i953 == 1);
    goto $bb94;

  $bb585:
    assume $i953 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ssleep(1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} vslice_dummy_var_278 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i955 := $load.i32($M.0, $p193);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i956 := $eq.i32($i955, 2);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i956} true;
    goto $bb587, $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    assume !($i956 == 1);
    goto $bb94;

  $bb587:
    assume $i956 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ssleep(1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_279 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i958 := $load.i32($M.0, $p193);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i959 := $eq.i32($i958, 2);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb589, $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    assume !($i959 == 1);
    goto $bb94;

  $bb589:
    assume $i959 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ssleep(1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vslice_dummy_var_280 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i961 := $load.i32($M.0, $p193);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i962 := $eq.i32($i961, 2);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i962} true;
    goto $bb591, $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    assume !($i962 == 1);
    goto $bb94;

  $bb591:
    assume $i962 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ssleep(1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} vslice_dummy_var_281 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i964 := $load.i32($M.0, $p193);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i965 := $eq.i32($i964, 2);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i965} true;
    goto $bb593, $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    assume !($i965 == 1);
    goto $bb94;

  $bb593:
    assume $i965 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} ssleep(1);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_282 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i967 := $load.i32($M.0, $p193);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i968 := $eq.i32($i967, 2);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i968} true;
    goto $bb595, $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    assume !($i968 == 1);
    goto $bb94;

  $bb595:
    assume $i968 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ssleep(1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} vslice_dummy_var_283 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.0, $p193);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i971 := $eq.i32($i970, 2);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i971} true;
    goto $bb597, $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    assume !($i971 == 1);
    goto $bb94;

  $bb597:
    assume $i971 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ssleep(1);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_284 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i973 := $load.i32($M.0, $p193);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i974 := $eq.i32($i973, 2);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i974} true;
    goto $bb599, $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    assume !($i974 == 1);
    goto $bb94;

  $bb599:
    assume $i974 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ssleep(1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_285 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i976 := $load.i32($M.0, $p193);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i977 := $eq.i32($i976, 2);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i977} true;
    goto $bb601, $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    assume !($i977 == 1);
    goto $bb94;

  $bb601:
    assume $i977 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ssleep(1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_286 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i979 := $load.i32($M.0, $p193);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i980 := $eq.i32($i979, 2);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i980} true;
    goto $bb603, $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    assume !($i980 == 1);
    goto $bb94;

  $bb603:
    assume $i980 == 1;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ssleep(1);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_287 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i982 := $load.i32($M.0, $p193);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i983 := $eq.i32($i982, 2);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i983} true;
    goto $bb605, $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    assume !($i983 == 1);
    goto $bb94;

  $bb605:
    assume $i983 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ssleep(1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_288 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i985 := $load.i32($M.0, $p193);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i986 := $eq.i32($i985, 2);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i986} true;
    goto $bb607, $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    assume !($i986 == 1);
    goto $bb94;

  $bb607:
    assume $i986 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ssleep(1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_289 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i988 := $load.i32($M.0, $p193);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i989 := $eq.i32($i988, 2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i989} true;
    goto $bb609, $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    assume !($i989 == 1);
    goto $bb94;

  $bb609:
    assume $i989 == 1;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ssleep(1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_290 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i991 := $load.i32($M.0, $p193);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i992 := $eq.i32($i991, 2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i992} true;
    goto $bb611, $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    assume !($i992 == 1);
    goto $bb94;

  $bb611:
    assume $i992 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ssleep(1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_291 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i994 := $load.i32($M.0, $p193);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i995 := $eq.i32($i994, 2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i995} true;
    goto $bb613, $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    assume !($i995 == 1);
    goto $bb94;

  $bb613:
    assume $i995 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ssleep(1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_292 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i997 := $load.i32($M.0, $p193);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i998 := $eq.i32($i997, 2);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i998} true;
    goto $bb615, $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    assume !($i998 == 1);
    goto $bb94;

  $bb615:
    assume $i998 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ssleep(1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_293 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i1000 := $load.i32($M.0, $p193);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i1001 := $eq.i32($i1000, 2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1001} true;
    goto $bb617, $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    assume !($i1001 == 1);
    goto $bb94;

  $bb617:
    assume $i1001 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ssleep(1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_294 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i1003 := $load.i32($M.0, $p193);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i1004 := $eq.i32($i1003, 2);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1004} true;
    goto $bb619, $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    assume !($i1004 == 1);
    goto $bb94;

  $bb619:
    assume $i1004 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ssleep(1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_295 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i1006 := $load.i32($M.0, $p193);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i1007 := $eq.i32($i1006, 2);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1007} true;
    goto $bb621, $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    assume !($i1007 == 1);
    goto $bb94;

  $bb621:
    assume $i1007 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ssleep(1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_296 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i1009 := $load.i32($M.0, $p193);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i1010 := $eq.i32($i1009, 2);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1010} true;
    goto $bb623, $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    assume !($i1010 == 1);
    goto $bb94;

  $bb623:
    assume $i1010 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ssleep(1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_297 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i1012 := $load.i32($M.0, $p193);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i1013 := $eq.i32($i1012, 2);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1013} true;
    goto $bb625, $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    assume !($i1013 == 1);
    goto $bb94;

  $bb625:
    assume $i1013 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ssleep(1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_298 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i1015 := $load.i32($M.0, $p193);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i1016 := $eq.i32($i1015, 2);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1016} true;
    goto $bb627, $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    assume !($i1016 == 1);
    goto $bb94;

  $bb627:
    assume $i1016 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ssleep(1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_299 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i1018 := $load.i32($M.0, $p193);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i1019 := $eq.i32($i1018, 2);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1019} true;
    goto $bb629, $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    assume !($i1019 == 1);
    goto $bb94;

  $bb629:
    assume $i1019 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ssleep(1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_300 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i1021 := $load.i32($M.0, $p193);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i1022 := $eq.i32($i1021, 2);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1022} true;
    goto $bb631, $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    assume !($i1022 == 1);
    goto $bb94;

  $bb631:
    assume $i1022 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ssleep(1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_301 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i1024 := $load.i32($M.0, $p193);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i1025 := $eq.i32($i1024, 2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1025} true;
    goto $bb633, $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    assume !($i1025 == 1);
    goto $bb94;

  $bb633:
    assume $i1025 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ssleep(1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} vslice_dummy_var_302 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i1027 := $load.i32($M.0, $p193);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i1028 := $eq.i32($i1027, 2);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1028} true;
    goto $bb635, $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    assume !($i1028 == 1);
    goto $bb94;

  $bb635:
    assume $i1028 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ssleep(1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} vslice_dummy_var_303 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i1030 := $load.i32($M.0, $p193);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i1031 := $eq.i32($i1030, 2);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1031} true;
    goto $bb637, $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    assume !($i1031 == 1);
    goto $bb94;

  $bb637:
    assume $i1031 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ssleep(1);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_304 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i1033 := $load.i32($M.0, $p193);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i1034 := $eq.i32($i1033, 2);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1034} true;
    goto $bb639, $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    assume !($i1034 == 1);
    goto $bb94;

  $bb639:
    assume $i1034 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ssleep(1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_305 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i1036 := $load.i32($M.0, $p193);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i1037 := $eq.i32($i1036, 2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1037} true;
    goto $bb641, $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    assume !($i1037 == 1);
    goto $bb94;

  $bb641:
    assume $i1037 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ssleep(1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_306 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i1039 := $load.i32($M.0, $p193);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i1040 := $eq.i32($i1039, 2);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1040} true;
    goto $bb643, $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    assume !($i1040 == 1);
    goto $bb94;

  $bb643:
    assume $i1040 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ssleep(1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_307 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i1042 := $load.i32($M.0, $p193);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i1043 := $eq.i32($i1042, 2);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1043} true;
    goto $bb645, $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    assume !($i1043 == 1);
    goto $bb94;

  $bb645:
    assume $i1043 == 1;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ssleep(1);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_308 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i1045 := $load.i32($M.0, $p193);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i1046 := $eq.i32($i1045, 2);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1046} true;
    goto $bb647, $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    assume !($i1046 == 1);
    goto $bb94;

  $bb647:
    assume $i1046 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ssleep(1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_309 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i1048 := $load.i32($M.0, $p193);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i1049 := $eq.i32($i1048, 2);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1049} true;
    goto $bb649, $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    assume !($i1049 == 1);
    goto $bb94;

  $bb649:
    assume $i1049 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ssleep(1);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_310 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i1051 := $load.i32($M.0, $p193);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i1052 := $eq.i32($i1051, 2);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1052} true;
    goto $bb651, $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    assume !($i1052 == 1);
    goto $bb94;

  $bb651:
    assume $i1052 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ssleep(1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_311 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i1054 := $load.i32($M.0, $p193);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i1055 := $eq.i32($i1054, 2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1055} true;
    goto $bb653, $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    assume !($i1055 == 1);
    goto $bb94;

  $bb653:
    assume $i1055 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ssleep(1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_312 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i1057 := $load.i32($M.0, $p193);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i1058 := $eq.i32($i1057, 2);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1058} true;
    goto $bb655, $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    assume !($i1058 == 1);
    goto $bb94;

  $bb655:
    assume $i1058 == 1;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ssleep(1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_313 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i1060 := $load.i32($M.0, $p193);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i1061 := $eq.i32($i1060, 2);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1061} true;
    goto $bb657, $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    assume !($i1061 == 1);
    goto $bb94;

  $bb657:
    assume $i1061 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} ssleep(1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_314 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i1063 := $load.i32($M.0, $p193);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i1064 := $eq.i32($i1063, 2);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1064} true;
    goto $bb659, $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    assume !($i1064 == 1);
    goto $bb94;

  $bb659:
    assume $i1064 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ssleep(1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_315 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i1066 := $load.i32($M.0, $p193);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i1067 := $eq.i32($i1066, 2);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1067} true;
    goto $bb661, $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    assume !($i1067 == 1);
    goto $bb94;

  $bb661:
    assume $i1067 == 1;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ssleep(1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_316 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i1069 := $load.i32($M.0, $p193);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i1070 := $eq.i32($i1069, 2);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1070} true;
    goto $bb663, $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    assume !($i1070 == 1);
    goto $bb94;

  $bb663:
    assume $i1070 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ssleep(1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} vslice_dummy_var_317 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i1072 := $load.i32($M.0, $p193);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i1073 := $eq.i32($i1072, 2);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1073} true;
    goto $bb665, $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    assume !($i1073 == 1);
    goto $bb94;

  $bb665:
    assume $i1073 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ssleep(1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_318 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i1075 := $load.i32($M.0, $p193);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i1076 := $eq.i32($i1075, 2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1076} true;
    goto $bb667, $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    assume !($i1076 == 1);
    goto $bb94;

  $bb667:
    assume $i1076 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ssleep(1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_319 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i1078 := $load.i32($M.0, $p193);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i1079 := $eq.i32($i1078, 2);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1079} true;
    goto $bb669, $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    assume !($i1079 == 1);
    goto $bb94;

  $bb669:
    assume $i1079 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ssleep(1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_320 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i1081 := $load.i32($M.0, $p193);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i1082 := $eq.i32($i1081, 2);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1082} true;
    goto $bb671, $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    assume !($i1082 == 1);
    goto $bb94;

  $bb671:
    assume $i1082 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ssleep(1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_321 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i1084 := $load.i32($M.0, $p193);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i1085 := $eq.i32($i1084, 2);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1085} true;
    goto $bb673, $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    assume !($i1085 == 1);
    goto $bb94;

  $bb673:
    assume $i1085 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ssleep(1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_322 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i1087 := $load.i32($M.0, $p193);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i1088 := $eq.i32($i1087, 2);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1088} true;
    goto $bb675, $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    assume !($i1088 == 1);
    goto $bb94;

  $bb675:
    assume $i1088 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ssleep(1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_323 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i1090 := $load.i32($M.0, $p193);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i1091 := $eq.i32($i1090, 2);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1091} true;
    goto $bb677, $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    assume !($i1091 == 1);
    goto $bb94;

  $bb677:
    assume $i1091 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ssleep(1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_324 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i1093 := $load.i32($M.0, $p193);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i1094 := $eq.i32($i1093, 2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1094} true;
    goto $bb679, $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    assume !($i1094 == 1);
    goto $bb94;

  $bb679:
    assume $i1094 == 1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} ssleep(1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_325 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i1096 := $load.i32($M.0, $p193);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i1097 := $eq.i32($i1096, 2);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1097} true;
    goto $bb681, $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    assume !($i1097 == 1);
    goto $bb94;

  $bb681:
    assume $i1097 == 1;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} ssleep(1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_326 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i1099 := $load.i32($M.0, $p193);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i1100 := $eq.i32($i1099, 2);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1100} true;
    goto $bb683, $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    assume !($i1100 == 1);
    goto $bb94;

  $bb683:
    assume $i1100 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ssleep(1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_327 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i1102 := $load.i32($M.0, $p193);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i1103 := $eq.i32($i1102, 2);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1103} true;
    goto $bb685, $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    assume !($i1103 == 1);
    goto $bb94;

  $bb685:
    assume $i1103 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} ssleep(1);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_328 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i1105 := $load.i32($M.0, $p193);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i1106 := $eq.i32($i1105, 2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1106} true;
    goto $bb687, $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    assume !($i1106 == 1);
    goto $bb94;

  $bb687:
    assume $i1106 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} ssleep(1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_329 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i1108 := $load.i32($M.0, $p193);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i1109 := $eq.i32($i1108, 2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1109} true;
    goto $bb689, $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    assume !($i1109 == 1);
    goto $bb94;

  $bb689:
    assume $i1109 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} ssleep(1);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_330 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i1111 := $load.i32($M.0, $p193);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i1112 := $eq.i32($i1111, 2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1112} true;
    goto $bb691, $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    assume !($i1112 == 1);
    goto $bb94;

  $bb691:
    assume $i1112 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ssleep(1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_331 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i1114 := $load.i32($M.0, $p193);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i1115 := $eq.i32($i1114, 2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1115} true;
    goto $bb693, $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    assume !($i1115 == 1);
    goto $bb94;

  $bb693:
    assume $i1115 == 1;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} ssleep(1);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_332 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i1117 := $load.i32($M.0, $p193);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i1118 := $eq.i32($i1117, 2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1118} true;
    goto $bb695, $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    assume !($i1118 == 1);
    goto $bb94;

  $bb695:
    assume $i1118 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ssleep(1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_333 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i1120 := $load.i32($M.0, $p193);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i1121 := $eq.i32($i1120, 2);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1121} true;
    goto $bb697, $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    assume !($i1121 == 1);
    goto $bb94;

  $bb697:
    assume $i1121 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ssleep(1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_334 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i1123 := $load.i32($M.0, $p193);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i1124 := $eq.i32($i1123, 2);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1124} true;
    goto $bb699, $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    assume !($i1124 == 1);
    goto $bb94;

  $bb699:
    assume $i1124 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ssleep(1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} vslice_dummy_var_335 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i1126 := $load.i32($M.0, $p193);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i1127 := $eq.i32($i1126, 2);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb701, $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    assume !($i1127 == 1);
    goto $bb94;

  $bb701:
    assume $i1127 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ssleep(1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_336 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i1129 := $load.i32($M.0, $p193);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i1130 := $eq.i32($i1129, 2);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1130} true;
    goto $bb703, $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    assume !($i1130 == 1);
    goto $bb94;

  $bb703:
    assume $i1130 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ssleep(1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} vslice_dummy_var_337 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i1132 := $load.i32($M.0, $p193);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i1133 := $eq.i32($i1132, 2);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1133} true;
    goto $bb705, $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    assume !($i1133 == 1);
    goto $bb94;

  $bb705:
    assume $i1133 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ssleep(1);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_338 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i1135 := $load.i32($M.0, $p193);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i1136 := $eq.i32($i1135, 2);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1136} true;
    goto $bb707, $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    assume !($i1136 == 1);
    goto $bb94;

  $bb707:
    assume $i1136 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ssleep(1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_339 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i1138 := $load.i32($M.0, $p193);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i1139 := $eq.i32($i1138, 2);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1139} true;
    goto $bb709, $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    assume !($i1139 == 1);
    goto $bb94;

  $bb709:
    assume $i1139 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ssleep(1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_340 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i1141 := $load.i32($M.0, $p193);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i1142 := $eq.i32($i1141, 2);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1142} true;
    goto $bb711, $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    assume !($i1142 == 1);
    goto $bb94;

  $bb711:
    assume $i1142 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ssleep(1);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_341 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i1144 := $load.i32($M.0, $p193);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i1145 := $eq.i32($i1144, 2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1145} true;
    goto $bb713, $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    assume !($i1145 == 1);
    goto $bb94;

  $bb713:
    assume $i1145 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ssleep(1);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_342 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i1147 := $load.i32($M.0, $p193);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i1148 := $eq.i32($i1147, 2);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1148} true;
    goto $bb715, $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    assume !($i1148 == 1);
    goto $bb94;

  $bb715:
    assume $i1148 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ssleep(1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_343 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i1150 := $load.i32($M.0, $p193);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i1151 := $eq.i32($i1150, 2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1151} true;
    goto $bb717, $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    assume !($i1151 == 1);
    goto $bb94;

  $bb717:
    assume $i1151 == 1;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ssleep(1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_344 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i1153 := $load.i32($M.0, $p193);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i1154 := $eq.i32($i1153, 2);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1154} true;
    goto $bb719, $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    assume !($i1154 == 1);
    goto $bb94;

  $bb719:
    assume $i1154 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ssleep(1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_345 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i1156 := $load.i32($M.0, $p193);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i1157 := $eq.i32($i1156, 2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1157} true;
    goto $bb721, $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    assume !($i1157 == 1);
    goto $bb94;

  $bb721:
    assume $i1157 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ssleep(1);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_346 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i1159 := $load.i32($M.0, $p193);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i1160 := $eq.i32($i1159, 2);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1160} true;
    goto $bb723, $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    assume !($i1160 == 1);
    goto $bb94;

  $bb723:
    assume $i1160 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} ssleep(1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_347 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i1162 := $load.i32($M.0, $p193);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i1163 := $eq.i32($i1162, 2);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1163} true;
    goto $bb725, $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    assume !($i1163 == 1);
    goto $bb94;

  $bb725:
    assume $i1163 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ssleep(1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_348 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i1165 := $load.i32($M.0, $p193);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i1166 := $eq.i32($i1165, 2);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1166} true;
    goto $bb727, $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    assume !($i1166 == 1);
    goto $bb94;

  $bb727:
    assume $i1166 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ssleep(1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_349 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i1168 := $load.i32($M.0, $p193);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i1169 := $eq.i32($i1168, 2);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1169} true;
    goto $bb729, $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    assume !($i1169 == 1);
    goto $bb94;

  $bb729:
    assume $i1169 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ssleep(1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_350 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i1171 := $load.i32($M.0, $p193);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i1172 := $eq.i32($i1171, 2);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1172} true;
    goto $bb731, $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    assume !($i1172 == 1);
    goto $bb94;

  $bb731:
    assume $i1172 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ssleep(1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_351 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i1174 := $load.i32($M.0, $p193);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i1175 := $eq.i32($i1174, 2);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1175} true;
    goto $bb733, $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    assume !($i1175 == 1);
    goto $bb94;

  $bb733:
    assume $i1175 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ssleep(1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_352 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i1177 := $load.i32($M.0, $p193);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i1178 := $eq.i32($i1177, 2);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1178} true;
    goto $bb735, $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    assume !($i1178 == 1);
    goto $bb94;

  $bb735:
    assume $i1178 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ssleep(1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_353 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i1180 := $load.i32($M.0, $p193);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i1181 := $eq.i32($i1180, 2);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1181} true;
    goto $bb737, $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    assume !($i1181 == 1);
    goto $bb94;

  $bb737:
    assume $i1181 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} ssleep(1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_354 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i1183 := $load.i32($M.0, $p193);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i1184 := $eq.i32($i1183, 2);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1184} true;
    goto $bb739, $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    assume !($i1184 == 1);
    goto $bb94;

  $bb739:
    assume $i1184 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ssleep(1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_355 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i1186 := $load.i32($M.0, $p193);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i1187 := $eq.i32($i1186, 2);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1187} true;
    goto $bb741, $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    assume !($i1187 == 1);
    goto $bb94;

  $bb741:
    assume $i1187 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ssleep(1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_356 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i1189 := $load.i32($M.0, $p193);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i1190 := $eq.i32($i1189, 2);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1190} true;
    goto $bb743, $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    assume !($i1190 == 1);
    goto $bb94;

  $bb743:
    assume $i1190 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ssleep(1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} vslice_dummy_var_357 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i1192 := $load.i32($M.0, $p193);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i1193 := $eq.i32($i1192, 2);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1193} true;
    goto $bb745, $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    assume !($i1193 == 1);
    goto $bb94;

  $bb745:
    assume $i1193 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ssleep(1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_358 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i1195 := $load.i32($M.0, $p193);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i1196 := $eq.i32($i1195, 2);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1196} true;
    goto $bb747, $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    assume !($i1196 == 1);
    goto $bb94;

  $bb747:
    assume $i1196 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ssleep(1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_359 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i1198 := $load.i32($M.0, $p193);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i1199 := $eq.i32($i1198, 2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1199} true;
    goto $bb749, $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    assume !($i1199 == 1);
    goto $bb94;

  $bb749:
    assume $i1199 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ssleep(1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_360 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i1201 := $load.i32($M.0, $p193);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i1202 := $eq.i32($i1201, 2);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1202} true;
    goto $bb751, $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    assume !($i1202 == 1);
    goto $bb94;

  $bb751:
    assume $i1202 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ssleep(1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_361 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i1204 := $load.i32($M.0, $p193);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i1205 := $eq.i32($i1204, 2);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1205} true;
    goto $bb753, $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    assume !($i1205 == 1);
    goto $bb94;

  $bb753:
    assume $i1205 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ssleep(1);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_362 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i1207 := $load.i32($M.0, $p193);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i1208 := $eq.i32($i1207, 2);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1208} true;
    goto $bb755, $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    assume !($i1208 == 1);
    goto $bb94;

  $bb755:
    assume $i1208 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ssleep(1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_363 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i1210 := $load.i32($M.0, $p193);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i1211 := $eq.i32($i1210, 2);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1211} true;
    goto $bb757, $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    assume !($i1211 == 1);
    goto $bb94;

  $bb757:
    assume $i1211 == 1;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ssleep(1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_364 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i1213 := $load.i32($M.0, $p193);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i1214 := $eq.i32($i1213, 2);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1214} true;
    goto $bb759, $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    assume !($i1214 == 1);
    goto $bb94;

  $bb759:
    assume $i1214 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ssleep(1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_365 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i1216 := $load.i32($M.0, $p193);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i1217 := $eq.i32($i1216, 2);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1217} true;
    goto $bb761, $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    assume !($i1217 == 1);
    goto $bb94;

  $bb761:
    assume $i1217 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ssleep(1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_366 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i1219 := $load.i32($M.0, $p193);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i1220 := $eq.i32($i1219, 2);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1220} true;
    goto $bb763, $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    assume !($i1220 == 1);
    goto $bb94;

  $bb763:
    assume $i1220 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ssleep(1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_367 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i1222 := $load.i32($M.0, $p193);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i1223 := $eq.i32($i1222, 2);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1223} true;
    goto $bb765, $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    assume !($i1223 == 1);
    goto $bb94;

  $bb765:
    assume $i1223 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ssleep(1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_368 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i1225 := $load.i32($M.0, $p193);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i1226 := $eq.i32($i1225, 2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1226} true;
    goto $bb767, $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    assume !($i1226 == 1);
    goto $bb94;

  $bb767:
    assume $i1226 == 1;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ssleep(1);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_369 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i1228 := $load.i32($M.0, $p193);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i1229 := $eq.i32($i1228, 2);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1229} true;
    goto $bb769, $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    assume !($i1229 == 1);
    goto $bb94;

  $bb769:
    assume $i1229 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ssleep(1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_370 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i1231 := $load.i32($M.0, $p193);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i1232 := $eq.i32($i1231, 2);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1232} true;
    goto $bb771, $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    assume !($i1232 == 1);
    goto $bb94;

  $bb771:
    assume $i1232 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ssleep(1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_371 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i1234 := $load.i32($M.0, $p193);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i1235 := $eq.i32($i1234, 2);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1235} true;
    goto $bb773, $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    assume !($i1235 == 1);
    goto $bb94;

  $bb773:
    assume $i1235 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} ssleep(1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_372 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i1237 := $load.i32($M.0, $p193);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i1238 := $eq.i32($i1237, 2);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1238} true;
    goto $bb775, $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    assume !($i1238 == 1);
    goto $bb94;

  $bb775:
    assume $i1238 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ssleep(1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_373 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i1240 := $load.i32($M.0, $p193);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i1241 := $eq.i32($i1240, 2);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1241} true;
    goto $bb777, $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    assume !($i1241 == 1);
    goto $bb94;

  $bb777:
    assume $i1241 == 1;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ssleep(1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_374 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i1243 := $load.i32($M.0, $p193);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i1244 := $eq.i32($i1243, 2);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1244} true;
    goto $bb779, $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    assume !($i1244 == 1);
    goto $bb94;

  $bb779:
    assume $i1244 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ssleep(1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_375 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i1246 := $load.i32($M.0, $p193);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i1247 := $eq.i32($i1246, 2);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1247} true;
    goto $bb781, $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    assume !($i1247 == 1);
    goto $bb94;

  $bb781:
    assume $i1247 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} ssleep(1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_376 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i1249 := $load.i32($M.0, $p193);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i1250 := $eq.i32($i1249, 2);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1250} true;
    goto $bb783, $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    assume !($i1250 == 1);
    goto $bb94;

  $bb783:
    assume $i1250 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ssleep(1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} vslice_dummy_var_377 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i1252 := $load.i32($M.0, $p193);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i1253 := $eq.i32($i1252, 2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1253} true;
    goto $bb785, $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    assume !($i1253 == 1);
    goto $bb94;

  $bb785:
    assume $i1253 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} ssleep(1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_378 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i1255 := $load.i32($M.0, $p193);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i1256 := $eq.i32($i1255, 2);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1256} true;
    goto $bb787, $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    assume !($i1256 == 1);
    goto $bb94;

  $bb787:
    assume $i1256 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} ssleep(1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_379 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i1258 := $load.i32($M.0, $p193);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i1259 := $eq.i32($i1258, 2);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1259} true;
    goto $bb789, $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    assume !($i1259 == 1);
    goto $bb94;

  $bb789:
    assume $i1259 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ssleep(1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_380 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i1261 := $load.i32($M.0, $p193);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i1262 := $eq.i32($i1261, 2);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1262} true;
    goto $bb791, $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    assume !($i1262 == 1);
    goto $bb94;

  $bb791:
    assume $i1262 == 1;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ssleep(1);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_381 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i1264 := $load.i32($M.0, $p193);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i1265 := $eq.i32($i1264, 2);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1265} true;
    goto $bb793, $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    assume !($i1265 == 1);
    goto $bb94;

  $bb793:
    assume $i1265 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ssleep(1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_382 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i1267 := $load.i32($M.0, $p193);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i1268 := $eq.i32($i1267, 2);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1268} true;
    goto $bb795, $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    assume !($i1268 == 1);
    goto $bb94;

  $bb795:
    assume $i1268 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ssleep(1);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_383 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i1270 := $load.i32($M.0, $p193);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i1271 := $eq.i32($i1270, 2);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1271} true;
    goto $bb797, $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    assume !($i1271 == 1);
    goto $bb94;

  $bb797:
    assume $i1271 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} ssleep(1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_384 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i1273 := $load.i32($M.0, $p193);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i1274 := $eq.i32($i1273, 2);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1274} true;
    goto $bb799, $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    assume !($i1274 == 1);
    goto $bb94;

  $bb799:
    assume $i1274 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ssleep(1);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_385 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i1276 := $load.i32($M.0, $p193);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i1277 := $eq.i32($i1276, 2);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1277} true;
    goto $bb801, $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    assume !($i1277 == 1);
    goto $bb94;

  $bb801:
    assume $i1277 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ssleep(1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_386 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i1279 := $load.i32($M.0, $p193);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i1280 := $eq.i32($i1279, 2);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1280} true;
    goto $bb803, $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    assume !($i1280 == 1);
    goto $bb94;

  $bb803:
    assume $i1280 == 1;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ssleep(1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_387 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i1282 := $load.i32($M.0, $p193);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i1283 := $eq.i32($i1282, 2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1283} true;
    goto $bb805, $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    assume !($i1283 == 1);
    goto $bb94;

  $bb805:
    assume $i1283 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ssleep(1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} vslice_dummy_var_388 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i1285 := $load.i32($M.0, $p193);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i1286 := $eq.i32($i1285, 2);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1286} true;
    goto $bb807, $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    assume !($i1286 == 1);
    goto $bb94;

  $bb807:
    assume $i1286 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ssleep(1);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_389 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i1288 := $load.i32($M.0, $p193);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i1289 := $eq.i32($i1288, 2);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1289} true;
    goto $bb809, $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    assume !($i1289 == 1);
    goto $bb94;

  $bb809:
    assume $i1289 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ssleep(1);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} vslice_dummy_var_390 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i1291 := $load.i32($M.0, $p193);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i1292 := $eq.i32($i1291, 2);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1292} true;
    goto $bb811, $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    assume !($i1292 == 1);
    goto $bb94;

  $bb811:
    assume $i1292 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ssleep(1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_391 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i1294 := $load.i32($M.0, $p193);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i1295 := $eq.i32($i1294, 2);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1295} true;
    goto $bb813, $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    assume !($i1295 == 1);
    goto $bb94;

  $bb813:
    assume $i1295 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ssleep(1);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_392 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i1297 := $load.i32($M.0, $p193);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i1298 := $eq.i32($i1297, 2);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1298} true;
    goto $bb815, $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    assume !($i1298 == 1);
    goto $bb94;

  $bb815:
    assume $i1298 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ssleep(1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_393 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i1300 := $load.i32($M.0, $p193);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i1301 := $eq.i32($i1300, 2);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1301} true;
    goto $bb817, $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    assume !($i1301 == 1);
    goto $bb94;

  $bb817:
    assume $i1301 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ssleep(1);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_394 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i1303 := $load.i32($M.0, $p193);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i1304 := $eq.i32($i1303, 2);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1304} true;
    goto $bb819, $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    assume !($i1304 == 1);
    goto $bb94;

  $bb819:
    assume $i1304 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ssleep(1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} vslice_dummy_var_395 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i1306 := $load.i32($M.0, $p193);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i1307 := $eq.i32($i1306, 2);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1307} true;
    goto $bb821, $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    assume !($i1307 == 1);
    goto $bb94;

  $bb821:
    assume $i1307 == 1;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} ssleep(1);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_396 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i1309 := $load.i32($M.0, $p193);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i1310 := $eq.i32($i1309, 2);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1310} true;
    goto $bb823, $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    assume !($i1310 == 1);
    goto $bb94;

  $bb823:
    assume $i1310 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ssleep(1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_397 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i1312 := $load.i32($M.0, $p193);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i1313 := $eq.i32($i1312, 2);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1313} true;
    goto $bb825, $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    assume !($i1313 == 1);
    goto $bb94;

  $bb825:
    assume $i1313 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ssleep(1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_398 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i1315 := $load.i32($M.0, $p193);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i1316 := $eq.i32($i1315, 2);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1316} true;
    goto $bb827, $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    assume !($i1316 == 1);
    goto $bb94;

  $bb827:
    assume $i1316 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ssleep(1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_399 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i1318 := $load.i32($M.0, $p193);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i1319 := $eq.i32($i1318, 2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1319} true;
    goto $bb829, $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    assume !($i1319 == 1);
    goto $bb94;

  $bb829:
    assume $i1319 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ssleep(1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_400 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i1321 := $load.i32($M.0, $p193);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i1322 := $eq.i32($i1321, 2);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1322} true;
    goto $bb831, $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    assume !($i1322 == 1);
    goto $bb94;

  $bb831:
    assume $i1322 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} ssleep(1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_401 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i1324 := $load.i32($M.0, $p193);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i1325 := $eq.i32($i1324, 2);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1325} true;
    goto $bb833, $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    assume !($i1325 == 1);
    goto $bb94;

  $bb833:
    assume $i1325 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ssleep(1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_402 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i1327 := $load.i32($M.0, $p193);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i1328 := $eq.i32($i1327, 2);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1328} true;
    goto $bb835, $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    assume !($i1328 == 1);
    goto $bb94;

  $bb835:
    assume $i1328 == 1;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} ssleep(1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_403 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i1330 := $load.i32($M.0, $p193);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i1331 := $eq.i32($i1330, 2);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1331} true;
    goto $bb837, $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    assume !($i1331 == 1);
    goto $bb94;

  $bb837:
    assume $i1331 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ssleep(1);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_404 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i1333 := $load.i32($M.0, $p193);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i1334 := $eq.i32($i1333, 2);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1334} true;
    goto $bb839, $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    assume !($i1334 == 1);
    goto $bb94;

  $bb839:
    assume $i1334 == 1;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ssleep(1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_405 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i1336 := $load.i32($M.0, $p193);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i1337 := $eq.i32($i1336, 2);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1337} true;
    goto $bb841, $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    assume !($i1337 == 1);
    goto $bb94;

  $bb841:
    assume $i1337 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} ssleep(1);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_406 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i1339 := $load.i32($M.0, $p193);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i1340 := $eq.i32($i1339, 2);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1340} true;
    goto $bb843, $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    assume !($i1340 == 1);
    goto $bb94;

  $bb843:
    assume $i1340 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} ssleep(1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_407 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i1342 := $load.i32($M.0, $p193);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i1343 := $eq.i32($i1342, 2);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1343} true;
    goto $bb845, $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    assume !($i1343 == 1);
    goto $bb94;

  $bb845:
    assume $i1343 == 1;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ssleep(1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_408 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i1345 := $load.i32($M.0, $p193);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i1346 := $eq.i32($i1345, 2);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1346} true;
    goto $bb847, $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    assume !($i1346 == 1);
    goto $bb94;

  $bb847:
    assume $i1346 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ssleep(1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_409 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i1348 := $load.i32($M.0, $p193);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i1349 := $eq.i32($i1348, 2);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1349} true;
    goto $bb849, $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    assume !($i1349 == 1);
    goto $bb94;

  $bb849:
    assume $i1349 == 1;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ssleep(1);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_410 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i1351 := $load.i32($M.0, $p193);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i1352 := $eq.i32($i1351, 2);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1352} true;
    goto $bb851, $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    assume !($i1352 == 1);
    goto $bb94;

  $bb851:
    assume $i1352 == 1;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ssleep(1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} vslice_dummy_var_411 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i1354 := $load.i32($M.0, $p193);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i1355 := $eq.i32($i1354, 2);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1355} true;
    goto $bb853, $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    assume !($i1355 == 1);
    goto $bb94;

  $bb853:
    assume $i1355 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ssleep(1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} vslice_dummy_var_412 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i1357 := $load.i32($M.0, $p193);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i1358 := $eq.i32($i1357, 2);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1358} true;
    goto $bb855, $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    assume !($i1358 == 1);
    goto $bb94;

  $bb855:
    assume $i1358 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ssleep(1);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vslice_dummy_var_413 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i1360 := $load.i32($M.0, $p193);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i1361 := $eq.i32($i1360, 2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1361} true;
    goto $bb857, $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    assume !($i1361 == 1);
    goto $bb94;

  $bb857:
    assume $i1361 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ssleep(1);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_414 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i1363 := $load.i32($M.0, $p193);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i1364 := $eq.i32($i1363, 2);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1364} true;
    goto $bb859, $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    assume !($i1364 == 1);
    goto $bb94;

  $bb859:
    assume $i1364 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} ssleep(1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_415 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i1366 := $load.i32($M.0, $p193);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i1367 := $eq.i32($i1366, 2);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1367} true;
    goto $bb861, $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    assume !($i1367 == 1);
    goto $bb94;

  $bb861:
    assume $i1367 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} ssleep(1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_416 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i1369 := $load.i32($M.0, $p193);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i1370 := $eq.i32($i1369, 2);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1370} true;
    goto $bb863, $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    assume !($i1370 == 1);
    goto $bb94;

  $bb863:
    assume $i1370 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} ssleep(1);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_417 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i1372 := $load.i32($M.0, $p193);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i1373 := $eq.i32($i1372, 2);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1373} true;
    goto $bb865, $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    assume !($i1373 == 1);
    goto $bb94;

  $bb865:
    assume $i1373 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} ssleep(1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_418 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i1375 := $load.i32($M.0, $p193);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i1376 := $eq.i32($i1375, 2);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1376} true;
    goto $bb867, $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    assume !($i1376 == 1);
    goto $bb94;

  $bb867:
    assume $i1376 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ssleep(1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_419 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i1378 := $load.i32($M.0, $p193);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i1379 := $eq.i32($i1378, 2);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1379} true;
    goto $bb869, $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    assume !($i1379 == 1);
    goto $bb94;

  $bb869:
    assume $i1379 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ssleep(1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_420 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i1381 := $load.i32($M.0, $p193);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i1382 := $eq.i32($i1381, 2);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1382} true;
    goto $bb871, $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    assume !($i1382 == 1);
    goto $bb94;

  $bb871:
    assume $i1382 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} ssleep(1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_421 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i1384 := $load.i32($M.0, $p193);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i1385 := $eq.i32($i1384, 2);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1385} true;
    goto $bb873, $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    assume !($i1385 == 1);
    goto $bb94;

  $bb873:
    assume $i1385 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} ssleep(1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_422 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i1387 := $load.i32($M.0, $p193);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i1388 := $eq.i32($i1387, 2);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1388} true;
    goto $bb875, $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    assume !($i1388 == 1);
    goto $bb94;

  $bb875:
    assume $i1388 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} ssleep(1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} vslice_dummy_var_423 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i1390 := $load.i32($M.0, $p193);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i1391 := $eq.i32($i1390, 2);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1391} true;
    goto $bb877, $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    assume !($i1391 == 1);
    goto $bb94;

  $bb877:
    assume $i1391 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} ssleep(1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_424 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i1393 := $load.i32($M.0, $p193);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i1394 := $eq.i32($i1393, 2);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1394} true;
    goto $bb879, $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    assume !($i1394 == 1);
    goto $bb94;

  $bb879:
    assume $i1394 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} ssleep(1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_425 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i1396 := $load.i32($M.0, $p193);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i1397 := $eq.i32($i1396, 2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1397} true;
    goto $bb881, $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    assume !($i1397 == 1);
    goto $bb94;

  $bb881:
    assume $i1397 == 1;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ssleep(1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_426 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i1399 := $load.i32($M.0, $p193);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i1400 := $eq.i32($i1399, 2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1400} true;
    goto $bb883, $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    assume !($i1400 == 1);
    goto $bb94;

  $bb883:
    assume $i1400 == 1;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} ssleep(1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_427 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i1402 := $load.i32($M.0, $p193);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i1403 := $eq.i32($i1402, 2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1403} true;
    goto $bb885, $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    assume !($i1403 == 1);
    goto $bb94;

  $bb885:
    assume $i1403 == 1;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} ssleep(1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_428 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i1405 := $load.i32($M.0, $p193);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i1406 := $eq.i32($i1405, 2);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1406} true;
    goto $bb887, $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    assume !($i1406 == 1);
    goto $bb94;

  $bb887:
    assume $i1406 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} ssleep(1);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_429 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i1408 := $load.i32($M.0, $p193);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i1409 := $eq.i32($i1408, 2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1409} true;
    goto $bb889, $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    assume !($i1409 == 1);
    goto $bb94;

  $bb889:
    assume $i1409 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ssleep(1);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_430 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i1411 := $load.i32($M.0, $p193);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i1412 := $eq.i32($i1411, 2);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1412} true;
    goto $bb891, $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    assume !($i1412 == 1);
    goto $bb94;

  $bb891:
    assume $i1412 == 1;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} ssleep(1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_431 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i1414 := $load.i32($M.0, $p193);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i1415 := $eq.i32($i1414, 2);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1415} true;
    goto $bb893, $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    assume !($i1415 == 1);
    goto $bb94;

  $bb893:
    assume $i1415 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ssleep(1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} vslice_dummy_var_432 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i1417 := $load.i32($M.0, $p193);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i1418 := $eq.i32($i1417, 2);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1418} true;
    goto $bb895, $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    assume !($i1418 == 1);
    goto $bb94;

  $bb895:
    assume $i1418 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ssleep(1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} vslice_dummy_var_433 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i1420 := $load.i32($M.0, $p193);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i1421 := $eq.i32($i1420, 2);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1421} true;
    goto $bb897, $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    assume !($i1421 == 1);
    goto $bb94;

  $bb897:
    assume $i1421 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ssleep(1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} vslice_dummy_var_434 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i1423 := $load.i32($M.0, $p193);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i1424 := $eq.i32($i1423, 2);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1424} true;
    goto $bb899, $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    assume !($i1424 == 1);
    goto $bb94;

  $bb899:
    assume $i1424 == 1;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ssleep(1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} vslice_dummy_var_435 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i1426 := $load.i32($M.0, $p193);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i1427 := $eq.i32($i1426, 2);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1427} true;
    goto $bb901, $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    assume !($i1427 == 1);
    goto $bb94;

  $bb901:
    assume $i1427 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ssleep(1);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_436 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i1429 := $load.i32($M.0, $p193);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i1430 := $eq.i32($i1429, 2);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1430} true;
    goto $bb903, $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    assume !($i1430 == 1);
    goto $bb94;

  $bb903:
    assume $i1430 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ssleep(1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} vslice_dummy_var_437 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i1432 := $load.i32($M.0, $p193);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i1433 := $eq.i32($i1432, 2);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1433} true;
    goto $bb905, $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    assume !($i1433 == 1);
    goto $bb94;

  $bb905:
    assume $i1433 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ssleep(1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} vslice_dummy_var_438 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i1435 := $load.i32($M.0, $p193);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i1436 := $eq.i32($i1435, 2);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1436} true;
    goto $bb907, $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    assume !($i1436 == 1);
    goto $bb94;

  $bb907:
    assume $i1436 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ssleep(1);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} vslice_dummy_var_439 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i1438 := $load.i32($M.0, $p193);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i1439 := $eq.i32($i1438, 2);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1439} true;
    goto $bb909, $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    assume !($i1439 == 1);
    goto $bb94;

  $bb909:
    assume $i1439 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ssleep(1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} vslice_dummy_var_440 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i1441 := $load.i32($M.0, $p193);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i1442 := $eq.i32($i1441, 2);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1442} true;
    goto $bb911, $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    assume !($i1442 == 1);
    goto $bb94;

  $bb911:
    assume $i1442 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ssleep(1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} vslice_dummy_var_441 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i1444 := $load.i32($M.0, $p193);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i1445 := $eq.i32($i1444, 2);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1445} true;
    goto $bb913, $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    assume !($i1445 == 1);
    goto $bb94;

  $bb913:
    assume $i1445 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} ssleep(1);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} vslice_dummy_var_442 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i1447 := $load.i32($M.0, $p193);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i1448 := $eq.i32($i1447, 2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1448} true;
    goto $bb915, $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    assume !($i1448 == 1);
    goto $bb94;

  $bb915:
    assume $i1448 == 1;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ssleep(1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vslice_dummy_var_443 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i1450 := $load.i32($M.0, $p193);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i1451 := $eq.i32($i1450, 2);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1451} true;
    goto $bb917, $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    assume !($i1451 == 1);
    goto $bb94;

  $bb917:
    assume $i1451 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} ssleep(1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_444 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i1453 := $load.i32($M.0, $p193);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i1454 := $eq.i32($i1453, 2);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1454} true;
    goto $bb919, $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    assume !($i1454 == 1);
    goto $bb94;

  $bb919:
    assume $i1454 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} ssleep(1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_445 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i1456 := $load.i32($M.0, $p193);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i1457 := $eq.i32($i1456, 2);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1457} true;
    goto $bb921, $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    assume !($i1457 == 1);
    goto $bb94;

  $bb921:
    assume $i1457 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ssleep(1);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_446 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i1459 := $load.i32($M.0, $p193);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i1460 := $eq.i32($i1459, 2);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1460} true;
    goto $bb923, $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    assume !($i1460 == 1);
    goto $bb94;

  $bb923:
    assume $i1460 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} ssleep(1);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vslice_dummy_var_447 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i1462 := $load.i32($M.0, $p193);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i1463 := $eq.i32($i1462, 2);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1463} true;
    goto $bb925, $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    assume !($i1463 == 1);
    goto $bb94;

  $bb925:
    assume $i1463 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ssleep(1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} vslice_dummy_var_448 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i1465 := $load.i32($M.0, $p193);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i1466 := $eq.i32($i1465, 2);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1466} true;
    goto $bb927, $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    assume !($i1466 == 1);
    goto $bb94;

  $bb927:
    assume $i1466 == 1;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ssleep(1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vslice_dummy_var_449 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i1468 := $load.i32($M.0, $p193);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i1469 := $eq.i32($i1468, 2);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1469} true;
    goto $bb929, $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    assume !($i1469 == 1);
    goto $bb94;

  $bb929:
    assume $i1469 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} ssleep(1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vslice_dummy_var_450 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i1471 := $load.i32($M.0, $p193);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i1472 := $eq.i32($i1471, 2);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1472} true;
    goto $bb931, $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    assume !($i1472 == 1);
    goto $bb94;

  $bb931:
    assume $i1472 == 1;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ssleep(1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_451 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i1474 := $load.i32($M.0, $p193);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i1475 := $eq.i32($i1474, 2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1475} true;
    goto $bb933, $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    assume !($i1475 == 1);
    goto $bb94;

  $bb933:
    assume $i1475 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ssleep(1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} vslice_dummy_var_452 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i1477 := $load.i32($M.0, $p193);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i1478 := $eq.i32($i1477, 2);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1478} true;
    goto $bb935, $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    assume !($i1478 == 1);
    goto $bb94;

  $bb935:
    assume $i1478 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ssleep(1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} vslice_dummy_var_453 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i1480 := $load.i32($M.0, $p193);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i1481 := $eq.i32($i1480, 2);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1481} true;
    goto $bb937, $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    assume !($i1481 == 1);
    goto $bb94;

  $bb937:
    assume $i1481 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ssleep(1);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_454 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i1483 := $load.i32($M.0, $p193);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i1484 := $eq.i32($i1483, 2);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1484} true;
    goto $bb939, $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    assume !($i1484 == 1);
    goto $bb94;

  $bb939:
    assume $i1484 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} ssleep(1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vslice_dummy_var_455 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i1486 := $load.i32($M.0, $p193);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i1487 := $eq.i32($i1486, 2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1487} true;
    goto $bb941, $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    assume !($i1487 == 1);
    goto $bb94;

  $bb941:
    assume $i1487 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ssleep(1);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_456 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i1489 := $load.i32($M.0, $p193);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i1490 := $eq.i32($i1489, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1490} true;
    goto $bb943, $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    assume !($i1490 == 1);
    goto $bb94;

  $bb943:
    assume $i1490 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} ssleep(1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_457 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i1492 := $load.i32($M.0, $p193);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i1493 := $eq.i32($i1492, 2);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1493} true;
    goto $bb945, $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    assume !($i1493 == 1);
    goto $bb94;

  $bb945:
    assume $i1493 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} ssleep(1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} vslice_dummy_var_458 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i1495 := $load.i32($M.0, $p193);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i1496 := $eq.i32($i1495, 2);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1496} true;
    goto $bb947, $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    assume !($i1496 == 1);
    goto $bb94;

  $bb947:
    assume $i1496 == 1;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ssleep(1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_459 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i1498 := $load.i32($M.0, $p193);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i1499 := $eq.i32($i1498, 2);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1499} true;
    goto $bb949, $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    assume !($i1499 == 1);
    goto $bb94;

  $bb949:
    assume $i1499 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} ssleep(1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_460 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i1501 := $load.i32($M.0, $p193);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i1502 := $eq.i32($i1501, 2);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1502} true;
    goto $bb951, $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    assume !($i1502 == 1);
    goto $bb94;

  $bb951:
    assume $i1502 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} ssleep(1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_461 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i1504 := $load.i32($M.0, $p193);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i1505 := $eq.i32($i1504, 2);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1505} true;
    goto $bb953, $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    assume !($i1505 == 1);
    goto $bb94;

  $bb953:
    assume $i1505 == 1;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} ssleep(1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_462 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i1507 := $load.i32($M.0, $p193);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i1508 := $eq.i32($i1507, 2);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1508} true;
    goto $bb955, $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    assume !($i1508 == 1);
    goto $bb94;

  $bb955:
    assume $i1508 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ssleep(1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_463 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i1510 := $load.i32($M.0, $p193);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i1511 := $eq.i32($i1510, 2);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1511} true;
    goto $bb957, $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    assume !($i1511 == 1);
    goto $bb94;

  $bb957:
    assume $i1511 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} ssleep(1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_464 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i1513 := $load.i32($M.0, $p193);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i1514 := $eq.i32($i1513, 2);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1514} true;
    goto $bb959, $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    assume !($i1514 == 1);
    goto $bb94;

  $bb959:
    assume $i1514 == 1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} ssleep(1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_465 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i1516 := $load.i32($M.0, $p193);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i1517 := $eq.i32($i1516, 2);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1517} true;
    goto $bb961, $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    assume !($i1517 == 1);
    goto $bb94;

  $bb961:
    assume $i1517 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ssleep(1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_466 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i1519 := $load.i32($M.0, $p193);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i1520 := $eq.i32($i1519, 2);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1520} true;
    goto $bb963, $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    assume !($i1520 == 1);
    goto $bb94;

  $bb963:
    assume $i1520 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ssleep(1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} vslice_dummy_var_467 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i1522 := $load.i32($M.0, $p193);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i1523 := $eq.i32($i1522, 2);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1523} true;
    goto $bb965, $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    assume !($i1523 == 1);
    goto $bb94;

  $bb965:
    assume $i1523 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} ssleep(1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_468 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i1525 := $load.i32($M.0, $p193);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i1526 := $eq.i32($i1525, 2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1526} true;
    goto $bb967, $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    assume !($i1526 == 1);
    goto $bb94;

  $bb967:
    assume $i1526 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} ssleep(1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_469 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i1528 := $load.i32($M.0, $p193);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i1529 := $eq.i32($i1528, 2);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1529} true;
    goto $bb969, $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    assume !($i1529 == 1);
    goto $bb94;

  $bb969:
    assume $i1529 == 1;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} ssleep(1);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_470 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i1531 := $load.i32($M.0, $p193);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i1532 := $eq.i32($i1531, 2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1532} true;
    goto $bb971, $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    assume !($i1532 == 1);
    goto $bb94;

  $bb971:
    assume $i1532 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ssleep(1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_471 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i1534 := $load.i32($M.0, $p193);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i1535 := $eq.i32($i1534, 2);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1535} true;
    goto $bb973, $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    assume !($i1535 == 1);
    goto $bb94;

  $bb973:
    assume $i1535 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} ssleep(1);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} vslice_dummy_var_472 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i1537 := $load.i32($M.0, $p193);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i1538 := $eq.i32($i1537, 2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1538} true;
    goto $bb975, $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    assume !($i1538 == 1);
    goto $bb94;

  $bb975:
    assume $i1538 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} ssleep(1);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_473 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i1540 := $load.i32($M.0, $p193);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i1541 := $eq.i32($i1540, 2);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1541} true;
    goto $bb977, $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    assume !($i1541 == 1);
    goto $bb94;

  $bb977:
    assume $i1541 == 1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} ssleep(1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} vslice_dummy_var_474 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i1543 := $load.i32($M.0, $p193);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i1544 := $eq.i32($i1543, 2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1544} true;
    goto $bb979, $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    assume !($i1544 == 1);
    goto $bb94;

  $bb979:
    assume $i1544 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} ssleep(1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_475 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i1546 := $load.i32($M.0, $p193);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i1547 := $eq.i32($i1546, 2);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1547} true;
    goto $bb981, $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    assume !($i1547 == 1);
    goto $bb94;

  $bb981:
    assume $i1547 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} ssleep(1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_476 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i1549 := $load.i32($M.0, $p193);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i1550 := $eq.i32($i1549, 2);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1550} true;
    goto $bb983, $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    assume !($i1550 == 1);
    goto $bb94;

  $bb983:
    assume $i1550 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} ssleep(1);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vslice_dummy_var_477 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i1552 := $load.i32($M.0, $p193);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i1553 := $eq.i32($i1552, 2);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1553} true;
    goto $bb985, $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    assume !($i1553 == 1);
    goto $bb94;

  $bb985:
    assume $i1553 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} ssleep(1);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_478 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i1555 := $load.i32($M.0, $p193);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i1556 := $eq.i32($i1555, 2);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1556} true;
    goto $bb987, $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    assume !($i1556 == 1);
    goto $bb94;

  $bb987:
    assume $i1556 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} ssleep(1);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} vslice_dummy_var_479 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i1558 := $load.i32($M.0, $p193);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i1559 := $eq.i32($i1558, 2);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1559} true;
    goto $bb989, $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    assume !($i1559 == 1);
    goto $bb94;

  $bb989:
    assume $i1559 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} ssleep(1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_480 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i1561 := $load.i32($M.0, $p193);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i1562 := $eq.i32($i1561, 2);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1562} true;
    goto $bb991, $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    assume !($i1562 == 1);
    goto $bb94;

  $bb991:
    assume $i1562 == 1;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ssleep(1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_481 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i1564 := $load.i32($M.0, $p193);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i1565 := $eq.i32($i1564, 2);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1565} true;
    goto $bb993, $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    assume !($i1565 == 1);
    goto $bb94;

  $bb993:
    assume $i1565 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} ssleep(1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_482 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i1567 := $load.i32($M.0, $p193);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i1568 := $eq.i32($i1567, 2);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1568} true;
    goto $bb995, $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    assume !($i1568 == 1);
    goto $bb94;

  $bb995:
    assume $i1568 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} ssleep(1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_483 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i1570 := $load.i32($M.0, $p193);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i1571 := $eq.i32($i1570, 2);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1571} true;
    goto $bb997, $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    assume !($i1571 == 1);
    goto $bb94;

  $bb997:
    assume $i1571 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ssleep(1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_484 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i1573 := $load.i32($M.0, $p193);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i1574 := $eq.i32($i1573, 2);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1574} true;
    goto $bb999, $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    assume !($i1574 == 1);
    goto $bb94;

  $bb999:
    assume $i1574 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} ssleep(1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} vslice_dummy_var_485 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i1576 := $load.i32($M.0, $p193);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i1577 := $eq.i32($i1576, 2);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1577} true;
    goto $bb1001, $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    assume !($i1577 == 1);
    goto $bb94;

  $bb1001:
    assume $i1577 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} ssleep(1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_486 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i1579 := $load.i32($M.0, $p193);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i1580 := $eq.i32($i1579, 2);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1580} true;
    goto $bb1003, $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    assume !($i1580 == 1);
    goto $bb94;

  $bb1003:
    assume $i1580 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} ssleep(1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_487 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i1582 := $load.i32($M.0, $p193);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i1583 := $eq.i32($i1582, 2);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1583} true;
    goto $bb1005, $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    assume !($i1583 == 1);
    goto $bb94;

  $bb1005:
    assume $i1583 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} ssleep(1);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_488 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i1585 := $load.i32($M.0, $p193);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i1586 := $eq.i32($i1585, 2);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1586} true;
    goto $bb1007, $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    assume !($i1586 == 1);
    goto $bb94;

  $bb1007:
    assume $i1586 == 1;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} ssleep(1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_489 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i1588 := $load.i32($M.0, $p193);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i1589 := $eq.i32($i1588, 2);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1589} true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    assume !($i1589 == 1);
    goto $bb94;

  $bb1009:
    assume $i1589 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ssleep(1);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_490 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i1591 := $load.i32($M.0, $p193);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i1592 := $eq.i32($i1591, 2);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1592} true;
    goto $bb1011, $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    assume !($i1592 == 1);
    goto $bb94;

  $bb1011:
    assume $i1592 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} ssleep(1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vslice_dummy_var_491 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i1594 := $load.i32($M.0, $p193);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i1595 := $eq.i32($i1594, 2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1595} true;
    goto $bb1013, $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    assume !($i1595 == 1);
    goto $bb94;

  $bb1013:
    assume $i1595 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} ssleep(1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_492 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i1597 := $load.i32($M.0, $p193);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i1598 := $eq.i32($i1597, 2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1598} true;
    goto $bb1015, $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    assume !($i1598 == 1);
    goto $bb94;

  $bb1015:
    assume $i1598 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} ssleep(1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_493 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i1600 := $load.i32($M.0, $p193);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i1601 := $eq.i32($i1600, 2);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1601} true;
    goto $bb1017, $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    assume !($i1601 == 1);
    goto $bb94;

  $bb1017:
    assume $i1601 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ssleep(1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_494 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i1603 := $load.i32($M.0, $p193);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i1604 := $eq.i32($i1603, 2);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1604} true;
    goto $bb1019, $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    assume !($i1604 == 1);
    goto $bb94;

  $bb1019:
    assume $i1604 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} ssleep(1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_495 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i1606 := $load.i32($M.0, $p193);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i1607 := $eq.i32($i1606, 2);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1607} true;
    goto $bb1021, $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    assume !($i1607 == 1);
    goto $bb94;

  $bb1021:
    assume $i1607 == 1;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} ssleep(1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vslice_dummy_var_496 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i1609 := $load.i32($M.0, $p193);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i1610 := $eq.i32($i1609, 2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1610} true;
    goto $bb1023, $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    assume !($i1610 == 1);
    goto $bb94;

  $bb1023:
    assume $i1610 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ssleep(1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vslice_dummy_var_497 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i1612 := $load.i32($M.0, $p193);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i1613 := $eq.i32($i1612, 2);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1613} true;
    goto $bb1025, $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    assume !($i1613 == 1);
    goto $bb94;

  $bb1025:
    assume $i1613 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} ssleep(1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} vslice_dummy_var_498 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i1615 := $load.i32($M.0, $p193);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i1616 := $eq.i32($i1615, 2);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1616} true;
    goto $bb1027, $bb1028;

  $bb1028:
    assume {:verifier.code 0} true;
    assume !($i1616 == 1);
    goto $bb94;

  $bb1027:
    assume $i1616 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} ssleep(1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_499 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i1618 := $load.i32($M.0, $p193);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i1619 := $eq.i32($i1618, 2);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1619} true;
    goto $bb1029, $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    assume !($i1619 == 1);
    goto $bb94;

  $bb1029:
    assume $i1619 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} ssleep(1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_500 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i1621 := $load.i32($M.0, $p193);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i1622 := $eq.i32($i1621, 2);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1622} true;
    goto $bb1031, $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    assume !($i1622 == 1);
    goto $bb94;

  $bb1031:
    assume $i1622 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} ssleep(1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_501 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i1624 := $load.i32($M.0, $p193);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i1625 := $eq.i32($i1624, 2);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1625} true;
    goto $bb1033, $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    assume !($i1625 == 1);
    goto $bb94;

  $bb1033:
    assume $i1625 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} ssleep(1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_502 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i1627 := $load.i32($M.0, $p193);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i1628 := $eq.i32($i1627, 2);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1628} true;
    goto $bb1035, $bb1036;

  $bb1036:
    assume {:verifier.code 0} true;
    assume !($i1628 == 1);
    goto $bb94;

  $bb1035:
    assume $i1628 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ssleep(1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_503 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i1630 := $load.i32($M.0, $p193);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i1631 := $eq.i32($i1630, 2);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1631} true;
    goto $bb1037, $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    assume !($i1631 == 1);
    goto $bb94;

  $bb1037:
    assume $i1631 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} ssleep(1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_504 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i1633 := $load.i32($M.0, $p193);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i1634 := $eq.i32($i1633, 2);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1634} true;
    goto $bb1039, $bb1040;

  $bb1040:
    assume {:verifier.code 0} true;
    assume !($i1634 == 1);
    goto $bb94;

  $bb1039:
    assume $i1634 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} ssleep(1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_505 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i1636 := $load.i32($M.0, $p193);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i1637 := $eq.i32($i1636, 2);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1637} true;
    goto $bb1041, $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    assume !($i1637 == 1);
    goto $bb94;

  $bb1041:
    assume $i1637 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} ssleep(1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} vslice_dummy_var_506 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i1639 := $load.i32($M.0, $p193);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i1640 := $eq.i32($i1639, 2);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1640} true;
    goto $bb1043, $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    assume !($i1640 == 1);
    goto $bb94;

  $bb1043:
    assume $i1640 == 1;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} ssleep(1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_507 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i1642 := $load.i32($M.0, $p193);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i1643 := $eq.i32($i1642, 2);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1643} true;
    goto $bb1045, $bb1046;

  $bb1046:
    assume {:verifier.code 0} true;
    assume !($i1643 == 1);
    goto $bb94;

  $bb1045:
    assume $i1643 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} ssleep(1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_508 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i1645 := $load.i32($M.0, $p193);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i1646 := $eq.i32($i1645, 2);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1646} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume {:verifier.code 0} true;
    assume !($i1646 == 1);
    goto $bb94;

  $bb1047:
    assume $i1646 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} ssleep(1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_509 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i1648 := $load.i32($M.0, $p193);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i1649 := $eq.i32($i1648, 2);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1649} true;
    goto $bb1049, $bb1050;

  $bb1050:
    assume {:verifier.code 0} true;
    assume !($i1649 == 1);
    goto $bb94;

  $bb1049:
    assume $i1649 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} ssleep(1);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_510 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i1651 := $load.i32($M.0, $p193);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i1652 := $eq.i32($i1651, 2);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1652} true;
    goto $bb1051, $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    assume !($i1652 == 1);
    goto $bb94;

  $bb1051:
    assume $i1652 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} ssleep(1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_511 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i1654 := $load.i32($M.0, $p193);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i1655 := $eq.i32($i1654, 2);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1655} true;
    goto $bb1053, $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    assume !($i1655 == 1);
    goto $bb94;

  $bb1053:
    assume $i1655 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} ssleep(1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_512 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i1657 := $load.i32($M.0, $p193);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i1658 := $eq.i32($i1657, 2);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1658} true;
    goto $bb1055, $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    assume !($i1658 == 1);
    goto $bb94;

  $bb1055:
    assume $i1658 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} ssleep(1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_513 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i1660 := $load.i32($M.0, $p193);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i1661 := $eq.i32($i1660, 2);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1661} true;
    goto $bb1057, $bb1058;

  $bb1058:
    assume {:verifier.code 0} true;
    assume !($i1661 == 1);
    goto $bb94;

  $bb1057:
    assume $i1661 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ssleep(1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_514 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i1663 := $load.i32($M.0, $p193);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i1664 := $eq.i32($i1663, 2);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1664} true;
    goto $bb1059, $bb1060;

  $bb1060:
    assume {:verifier.code 0} true;
    assume !($i1664 == 1);
    goto $bb94;

  $bb1059:
    assume $i1664 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} ssleep(1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_515 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i1666 := $load.i32($M.0, $p193);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i1667 := $eq.i32($i1666, 2);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1667} true;
    goto $bb1061, $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    assume !($i1667 == 1);
    goto $bb94;

  $bb1061:
    assume $i1667 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ssleep(1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_516 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i1669 := $load.i32($M.0, $p193);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i1670 := $eq.i32($i1669, 2);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1670} true;
    goto $bb1063, $bb1064;

  $bb1064:
    assume {:verifier.code 0} true;
    assume !($i1670 == 1);
    goto $bb94;

  $bb1063:
    assume $i1670 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ssleep(1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} vslice_dummy_var_517 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i1672 := $load.i32($M.0, $p193);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i1673 := $eq.i32($i1672, 2);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1673} true;
    goto $bb1065, $bb1066;

  $bb1066:
    assume {:verifier.code 0} true;
    assume !($i1673 == 1);
    goto $bb94;

  $bb1065:
    assume $i1673 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} ssleep(1);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_518 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i1675 := $load.i32($M.0, $p193);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i1676 := $eq.i32($i1675, 2);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1676} true;
    goto $bb1067, $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    assume !($i1676 == 1);
    goto $bb94;

  $bb1067:
    assume $i1676 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} ssleep(1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_519 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i1678 := $load.i32($M.0, $p193);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i1679 := $eq.i32($i1678, 2);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1679} true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume {:verifier.code 0} true;
    assume !($i1679 == 1);
    goto $bb94;

  $bb1069:
    assume $i1679 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} ssleep(1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_520 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i1681 := $load.i32($M.0, $p193);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i1682 := $eq.i32($i1681, 2);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1682} true;
    goto $bb1071, $bb1072;

  $bb1072:
    assume {:verifier.code 0} true;
    assume !($i1682 == 1);
    goto $bb94;

  $bb1071:
    assume $i1682 == 1;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ssleep(1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_521 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i1684 := $load.i32($M.0, $p193);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i1685 := $eq.i32($i1684, 2);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1685} true;
    goto $bb1073, $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    assume !($i1685 == 1);
    goto $bb94;

  $bb1073:
    assume $i1685 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ssleep(1);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vslice_dummy_var_522 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i1687 := $load.i32($M.0, $p193);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i1688 := $eq.i32($i1687, 2);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1688} true;
    goto $bb1075, $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    assume !($i1688 == 1);
    goto $bb94;

  $bb1075:
    assume $i1688 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} ssleep(1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_523 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i1690 := $load.i32($M.0, $p193);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i1691 := $eq.i32($i1690, 2);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1691} true;
    goto $bb1077, $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    assume !($i1691 == 1);
    goto $bb94;

  $bb1077:
    assume $i1691 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} ssleep(1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} vslice_dummy_var_524 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i1693 := $load.i32($M.0, $p193);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i1694 := $eq.i32($i1693, 2);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1694} true;
    goto $bb1079, $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    assume !($i1694 == 1);
    goto $bb94;

  $bb1079:
    assume $i1694 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} ssleep(1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_525 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i1696 := $load.i32($M.0, $p193);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i1697 := $eq.i32($i1696, 2);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1697} true;
    goto $bb1081, $bb1082;

  $bb1082:
    assume {:verifier.code 0} true;
    assume !($i1697 == 1);
    goto $bb94;

  $bb1081:
    assume $i1697 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ssleep(1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_526 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i1699 := $load.i32($M.0, $p193);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i1700 := $eq.i32($i1699, 2);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1700} true;
    goto $bb1083, $bb1084;

  $bb1084:
    assume {:verifier.code 0} true;
    assume !($i1700 == 1);
    goto $bb94;

  $bb1083:
    assume $i1700 == 1;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} ssleep(1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_527 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i1702 := $load.i32($M.0, $p193);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i1703 := $eq.i32($i1702, 2);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1703} true;
    goto $bb1085, $bb1086;

  $bb1086:
    assume {:verifier.code 0} true;
    assume !($i1703 == 1);
    goto $bb94;

  $bb1085:
    assume $i1703 == 1;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ssleep(1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} vslice_dummy_var_528 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i1705 := $load.i32($M.0, $p193);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i1706 := $eq.i32($i1705, 2);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1706} true;
    goto $bb1087, $bb1088;

  $bb1088:
    assume {:verifier.code 0} true;
    assume !($i1706 == 1);
    goto $bb94;

  $bb1087:
    assume $i1706 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} ssleep(1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_529 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i1708 := $load.i32($M.0, $p193);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i1709 := $eq.i32($i1708, 2);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1709} true;
    goto $bb1089, $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    assume !($i1709 == 1);
    goto $bb94;

  $bb1089:
    assume $i1709 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} ssleep(1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_530 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i1711 := $load.i32($M.0, $p193);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i1712 := $eq.i32($i1711, 2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1712} true;
    goto $bb1091, $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    assume !($i1712 == 1);
    goto $bb94;

  $bb1091:
    assume $i1712 == 1;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} ssleep(1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_531 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i1714 := $load.i32($M.0, $p193);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i1715 := $eq.i32($i1714, 2);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1715} true;
    goto $bb1093, $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    assume !($i1715 == 1);
    goto $bb94;

  $bb1093:
    assume $i1715 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ssleep(1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_532 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i1717 := $load.i32($M.0, $p193);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i1718 := $eq.i32($i1717, 2);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1718} true;
    goto $bb1095, $bb1096;

  $bb1096:
    assume {:verifier.code 0} true;
    assume !($i1718 == 1);
    goto $bb94;

  $bb1095:
    assume $i1718 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} ssleep(1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_533 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i1720 := $load.i32($M.0, $p193);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i1721 := $eq.i32($i1720, 2);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1721} true;
    goto $bb1097, $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    assume !($i1721 == 1);
    goto $bb94;

  $bb1097:
    assume $i1721 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} ssleep(1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_534 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i1723 := $load.i32($M.0, $p193);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i1724 := $eq.i32($i1723, 2);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1724} true;
    goto $bb1099, $bb1100;

  $bb1100:
    assume {:verifier.code 0} true;
    assume !($i1724 == 1);
    goto $bb94;

  $bb1099:
    assume $i1724 == 1;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} ssleep(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_535 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i1726 := $load.i32($M.0, $p193);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i1727 := $eq.i32($i1726, 2);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1727} true;
    goto $bb1101, $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    assume !($i1727 == 1);
    goto $bb94;

  $bb1101:
    assume $i1727 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ssleep(1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_536 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i1729 := $load.i32($M.0, $p193);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i1730 := $eq.i32($i1729, 2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1730} true;
    goto $bb1103, $bb1104;

  $bb1104:
    assume {:verifier.code 0} true;
    assume !($i1730 == 1);
    goto $bb94;

  $bb1103:
    assume $i1730 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ssleep(1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_537 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i1732 := $load.i32($M.0, $p193);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i1733 := $eq.i32($i1732, 2);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1733} true;
    goto $bb1105, $bb1106;

  $bb1106:
    assume {:verifier.code 0} true;
    assume !($i1733 == 1);
    goto $bb94;

  $bb1105:
    assume $i1733 == 1;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ssleep(1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_538 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i1735 := $load.i32($M.0, $p193);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i1736 := $eq.i32($i1735, 2);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1736} true;
    goto $bb1107, $bb1108;

  $bb1108:
    assume {:verifier.code 0} true;
    assume !($i1736 == 1);
    goto $bb94;

  $bb1107:
    assume $i1736 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ssleep(1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_539 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i1738 := $load.i32($M.0, $p193);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i1739 := $eq.i32($i1738, 2);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1739} true;
    goto $bb1109, $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    assume !($i1739 == 1);
    goto $bb94;

  $bb1109:
    assume $i1739 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} ssleep(1);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_540 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i1741 := $load.i32($M.0, $p193);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i1742 := $eq.i32($i1741, 2);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1742} true;
    goto $bb1111, $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    assume !($i1742 == 1);
    goto $bb94;

  $bb1111:
    assume $i1742 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} ssleep(1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_541 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i1744 := $load.i32($M.0, $p193);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i1745 := $eq.i32($i1744, 2);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1745} true;
    goto $bb1113, $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    assume !($i1745 == 1);
    goto $bb94;

  $bb1113:
    assume $i1745 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} ssleep(1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_542 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i1747 := $load.i32($M.0, $p193);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i1748 := $eq.i32($i1747, 2);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1748} true;
    goto $bb1115, $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    assume !($i1748 == 1);
    goto $bb94;

  $bb1115:
    assume $i1748 == 1;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ssleep(1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} vslice_dummy_var_543 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i1750 := $load.i32($M.0, $p193);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i1751 := $eq.i32($i1750, 2);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1751} true;
    goto $bb1117, $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    assume !($i1751 == 1);
    goto $bb94;

  $bb1117:
    assume $i1751 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ssleep(1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_544 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i1753 := $load.i32($M.0, $p193);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i1754 := $eq.i32($i1753, 2);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1754} true;
    goto $bb1119, $bb1120;

  $bb1120:
    assume {:verifier.code 0} true;
    assume !($i1754 == 1);
    goto $bb94;

  $bb1119:
    assume $i1754 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ssleep(1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} vslice_dummy_var_545 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i1756 := $load.i32($M.0, $p193);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i1757 := $eq.i32($i1756, 2);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1757} true;
    goto $bb1121, $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    assume !($i1757 == 1);
    goto $bb94;

  $bb1121:
    assume $i1757 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} ssleep(1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_546 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i1759 := $load.i32($M.0, $p193);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i1760 := $eq.i32($i1759, 2);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1760} true;
    goto $bb1123, $bb1124;

  $bb1124:
    assume {:verifier.code 0} true;
    assume !($i1760 == 1);
    goto $bb94;

  $bb1123:
    assume $i1760 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} ssleep(1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} vslice_dummy_var_547 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i1762 := $load.i32($M.0, $p193);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i1763 := $eq.i32($i1762, 2);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1763} true;
    goto $bb1125, $bb1126;

  $bb1126:
    assume {:verifier.code 0} true;
    assume !($i1763 == 1);
    goto $bb94;

  $bb1125:
    assume $i1763 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ssleep(1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} vslice_dummy_var_548 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i1765 := $load.i32($M.0, $p193);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i1766 := $eq.i32($i1765, 2);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1766} true;
    goto $bb1127, $bb1128;

  $bb1128:
    assume {:verifier.code 0} true;
    assume !($i1766 == 1);
    goto $bb94;

  $bb1127:
    assume $i1766 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ssleep(1);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} vslice_dummy_var_549 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i1768 := $load.i32($M.0, $p193);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i1769 := $eq.i32($i1768, 2);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1769} true;
    goto $bb1129, $bb1130;

  $bb1130:
    assume {:verifier.code 0} true;
    assume !($i1769 == 1);
    goto $bb94;

  $bb1129:
    assume $i1769 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ssleep(1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_550 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i1771 := $load.i32($M.0, $p193);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i1772 := $eq.i32($i1771, 2);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1772} true;
    goto $bb1131, $bb1132;

  $bb1132:
    assume {:verifier.code 0} true;
    assume !($i1772 == 1);
    goto $bb94;

  $bb1131:
    assume $i1772 == 1;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ssleep(1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_551 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i1774 := $load.i32($M.0, $p193);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i1775 := $eq.i32($i1774, 2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1775} true;
    goto $bb1133, $bb1134;

  $bb1134:
    assume {:verifier.code 0} true;
    assume !($i1775 == 1);
    goto $bb94;

  $bb1133:
    assume $i1775 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ssleep(1);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} vslice_dummy_var_552 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i1777 := $load.i32($M.0, $p193);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i1778 := $eq.i32($i1777, 2);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1778} true;
    goto $bb1135, $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    assume !($i1778 == 1);
    goto $bb94;

  $bb1135:
    assume $i1778 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ssleep(1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_553 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i1780 := $load.i32($M.0, $p193);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i1781 := $eq.i32($i1780, 2);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1781} true;
    goto $bb1137, $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    assume !($i1781 == 1);
    goto $bb94;

  $bb1137:
    assume $i1781 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} ssleep(1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} vslice_dummy_var_554 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i1783 := $load.i32($M.0, $p193);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i1784 := $eq.i32($i1783, 2);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1784} true;
    goto $bb1139, $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    assume !($i1784 == 1);
    goto $bb94;

  $bb1139:
    assume $i1784 == 1;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ssleep(1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_555 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i1786 := $load.i32($M.0, $p193);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i1787 := $eq.i32($i1786, 2);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1787} true;
    goto $bb1141, $bb1142;

  $bb1142:
    assume {:verifier.code 0} true;
    assume !($i1787 == 1);
    goto $bb94;

  $bb1141:
    assume $i1787 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ssleep(1);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_556 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i1789 := $load.i32($M.0, $p193);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i1790 := $eq.i32($i1789, 2);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1790} true;
    goto $bb1143, $bb1144;

  $bb1144:
    assume {:verifier.code 0} true;
    assume !($i1790 == 1);
    goto $bb94;

  $bb1143:
    assume $i1790 == 1;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ssleep(1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_557 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i1792 := $load.i32($M.0, $p193);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i1793 := $eq.i32($i1792, 2);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1793} true;
    goto $bb1145, $bb1146;

  $bb1146:
    assume {:verifier.code 0} true;
    assume !($i1793 == 1);
    goto $bb94;

  $bb1145:
    assume $i1793 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ssleep(1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} vslice_dummy_var_558 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i1795 := $load.i32($M.0, $p193);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i1796 := $eq.i32($i1795, 2);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1796} true;
    goto $bb1147, $bb1148;

  $bb1148:
    assume {:verifier.code 0} true;
    assume !($i1796 == 1);
    goto $bb94;

  $bb1147:
    assume $i1796 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ssleep(1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} vslice_dummy_var_559 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i1798 := $load.i32($M.0, $p193);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i1799 := $eq.i32($i1798, 2);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1799} true;
    goto $bb1149, $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    assume !($i1799 == 1);
    goto $bb94;

  $bb1149:
    assume $i1799 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ssleep(1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_560 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i1801 := $load.i32($M.0, $p193);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i1802 := $eq.i32($i1801, 2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1802} true;
    goto $bb1151, $bb1152;

  $bb1152:
    assume {:verifier.code 0} true;
    assume !($i1802 == 1);
    goto $bb94;

  $bb1151:
    assume $i1802 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ssleep(1);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} vslice_dummy_var_561 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1621, SeqInstr_1622;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  SeqInstr_1623:
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i1804 := $load.i32($M.0, $p193);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i1805 := $eq.i32($i1804, 2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1805} true;
    goto $bb1153, $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    assume !($i1805 == 1);
    goto $bb94;

  $bb1153:
    assume $i1805 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ssleep(1);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_562 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1624, SeqInstr_1625;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  SeqInstr_1626:
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i1807 := $load.i32($M.0, $p193);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i1808 := $eq.i32($i1807, 2);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1808} true;
    goto $bb1155, $bb1156;

  $bb1156:
    assume {:verifier.code 0} true;
    assume !($i1808 == 1);
    goto $bb94;

  $bb1155:
    assume $i1808 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} ssleep(1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_563 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1627, SeqInstr_1628;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  SeqInstr_1629:
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i1810 := $load.i32($M.0, $p193);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i1811 := $eq.i32($i1810, 2);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1811} true;
    goto $bb1157, $bb1158;

  $bb1158:
    assume {:verifier.code 0} true;
    assume !($i1811 == 1);
    goto $bb94;

  $bb1157:
    assume $i1811 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ssleep(1);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_564 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1630, SeqInstr_1631;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  SeqInstr_1632:
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i1813 := $load.i32($M.0, $p193);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i1814 := $eq.i32($i1813, 2);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1814} true;
    goto $bb1159, $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    assume !($i1814 == 1);
    goto $bb94;

  $bb1159:
    assume $i1814 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} ssleep(1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_565 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1633, SeqInstr_1634;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  SeqInstr_1635:
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i1816 := $load.i32($M.0, $p193);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i1817 := $eq.i32($i1816, 2);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1817} true;
    goto $bb1161, $bb1162;

  $bb1162:
    assume {:verifier.code 0} true;
    assume !($i1817 == 1);
    goto $bb94;

  $bb1161:
    assume $i1817 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ssleep(1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_566 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1636, SeqInstr_1637;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  SeqInstr_1638:
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i1819 := $load.i32($M.0, $p193);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i1820 := $eq.i32($i1819, 2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1820} true;
    goto $bb1163, $bb1164;

  $bb1164:
    assume {:verifier.code 0} true;
    assume !($i1820 == 1);
    goto $bb94;

  $bb1163:
    assume $i1820 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ssleep(1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_567 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1639, SeqInstr_1640;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  SeqInstr_1641:
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i1822 := $load.i32($M.0, $p193);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i1823 := $eq.i32($i1822, 2);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1823} true;
    goto $bb1165, $bb1166;

  $bb1166:
    assume {:verifier.code 0} true;
    assume !($i1823 == 1);
    goto $bb94;

  $bb1165:
    assume $i1823 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ssleep(1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_568 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1642, SeqInstr_1643;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  SeqInstr_1644:
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i1825 := $load.i32($M.0, $p193);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i1826 := $eq.i32($i1825, 2);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1826} true;
    goto $bb1167, $bb1168;

  $bb1168:
    assume {:verifier.code 0} true;
    assume !($i1826 == 1);
    goto $bb94;

  $bb1167:
    assume $i1826 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ssleep(1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_569 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1645, SeqInstr_1646;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  SeqInstr_1647:
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i1828 := $load.i32($M.0, $p193);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i1829 := $eq.i32($i1828, 2);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1829} true;
    goto $bb1169, $bb1170;

  $bb1170:
    assume {:verifier.code 0} true;
    assume !($i1829 == 1);
    goto $bb94;

  $bb1169:
    assume $i1829 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ssleep(1);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_570 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1648, SeqInstr_1649;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  SeqInstr_1650:
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i1831 := $load.i32($M.0, $p193);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i1832 := $eq.i32($i1831, 2);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1832} true;
    goto $bb1171, $bb1172;

  $bb1172:
    assume {:verifier.code 0} true;
    assume !($i1832 == 1);
    goto $bb94;

  $bb1171:
    assume $i1832 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ssleep(1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_571 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1651, SeqInstr_1652;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  SeqInstr_1653:
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i1834 := $load.i32($M.0, $p193);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i1835 := $eq.i32($i1834, 2);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1835} true;
    goto $bb1173, $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    assume !($i1835 == 1);
    goto $bb94;

  $bb1173:
    assume $i1835 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ssleep(1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_572 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1654, SeqInstr_1655;

  SeqInstr_1655:
    assume assertsPassed;
    goto SeqInstr_1656;

  SeqInstr_1656:
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i1837 := $load.i32($M.0, $p193);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i1838 := $eq.i32($i1837, 2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1838} true;
    goto $bb1175, $bb1176;

  $bb1176:
    assume {:verifier.code 0} true;
    assume !($i1838 == 1);
    goto $bb94;

  $bb1175:
    assume $i1838 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} ssleep(1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_573 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1657, SeqInstr_1658;

  SeqInstr_1658:
    assume assertsPassed;
    goto SeqInstr_1659;

  SeqInstr_1659:
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i1840 := $load.i32($M.0, $p193);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i1841 := $eq.i32($i1840, 2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1841} true;
    goto $bb1177, $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    assume !($i1841 == 1);
    goto $bb94;

  $bb1177:
    assume $i1841 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ssleep(1);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_574 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1660, SeqInstr_1661;

  SeqInstr_1661:
    assume assertsPassed;
    goto SeqInstr_1662;

  SeqInstr_1662:
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i1843 := $load.i32($M.0, $p193);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i1844 := $eq.i32($i1843, 2);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1844} true;
    goto $bb1179, $bb1180;

  $bb1180:
    assume {:verifier.code 0} true;
    assume !($i1844 == 1);
    goto $bb94;

  $bb1179:
    assume $i1844 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ssleep(1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_575 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1663, SeqInstr_1664;

  SeqInstr_1664:
    assume assertsPassed;
    goto SeqInstr_1665;

  SeqInstr_1665:
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i1846 := $load.i32($M.0, $p193);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i1847 := $eq.i32($i1846, 2);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1847} true;
    goto $bb1181, $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    assume !($i1847 == 1);
    goto $bb94;

  $bb1181:
    assume $i1847 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ssleep(1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_576 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1666, SeqInstr_1667;

  SeqInstr_1667:
    assume assertsPassed;
    goto SeqInstr_1668;

  SeqInstr_1668:
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i1849 := $load.i32($M.0, $p193);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i1850 := $eq.i32($i1849, 2);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1850} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume {:verifier.code 0} true;
    assume !($i1850 == 1);
    goto $bb94;

  $bb1183:
    assume $i1850 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} ssleep(1);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_577 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1669, SeqInstr_1670;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  SeqInstr_1671:
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i1852 := $load.i32($M.0, $p193);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i1853 := $eq.i32($i1852, 2);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1853} true;
    goto $bb1185, $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    assume !($i1853 == 1);
    goto $bb94;

  $bb1185:
    assume $i1853 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ssleep(1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_578 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1672, SeqInstr_1673;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  SeqInstr_1674:
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i1855 := $load.i32($M.0, $p193);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i1856 := $eq.i32($i1855, 2);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1856} true;
    goto $bb1187, $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    assume !($i1856 == 1);
    goto $bb94;

  $bb1187:
    assume $i1856 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ssleep(1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_579 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1675, SeqInstr_1676;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  SeqInstr_1677:
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i1858 := $load.i32($M.0, $p193);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i1859 := $eq.i32($i1858, 2);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1859} true;
    goto $bb1189, $bb1190;

  $bb1190:
    assume {:verifier.code 0} true;
    assume !($i1859 == 1);
    goto $bb94;

  $bb1189:
    assume $i1859 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ssleep(1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_580 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1678, SeqInstr_1679;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  SeqInstr_1680:
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i1861 := $load.i32($M.0, $p193);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i1862 := $eq.i32($i1861, 2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1862} true;
    goto $bb1191, $bb1192;

  $bb1192:
    assume {:verifier.code 0} true;
    assume !($i1862 == 1);
    goto $bb94;

  $bb1191:
    assume $i1862 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ssleep(1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_581 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1681, SeqInstr_1682;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  SeqInstr_1683:
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i1864 := $load.i32($M.0, $p193);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i1865 := $eq.i32($i1864, 2);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1865} true;
    goto $bb1193, $bb1194;

  $bb1194:
    assume {:verifier.code 0} true;
    assume !($i1865 == 1);
    goto $bb94;

  $bb1193:
    assume $i1865 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ssleep(1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_582 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1684, SeqInstr_1685;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  SeqInstr_1686:
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i1867 := $load.i32($M.0, $p193);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i1868 := $eq.i32($i1867, 2);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1868} true;
    goto $bb1195, $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    assume !($i1868 == 1);
    goto $bb94;

  $bb1195:
    assume $i1868 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} ssleep(1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_583 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1687, SeqInstr_1688;

  SeqInstr_1688:
    assume assertsPassed;
    goto SeqInstr_1689;

  SeqInstr_1689:
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i1870 := $load.i32($M.0, $p193);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i1871 := $eq.i32($i1870, 2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1871} true;
    goto $bb1197, $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    assume !($i1871 == 1);
    goto $bb94;

  $bb1197:
    assume $i1871 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ssleep(1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_584 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1690, SeqInstr_1691;

  SeqInstr_1691:
    assume assertsPassed;
    goto SeqInstr_1692;

  SeqInstr_1692:
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i1873 := $load.i32($M.0, $p193);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i1874 := $eq.i32($i1873, 2);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1874} true;
    goto $bb1199, $bb1200;

  $bb1200:
    assume {:verifier.code 0} true;
    assume !($i1874 == 1);
    goto $bb94;

  $bb1199:
    assume $i1874 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} ssleep(1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_585 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1693, SeqInstr_1694;

  SeqInstr_1694:
    assume assertsPassed;
    goto SeqInstr_1695;

  SeqInstr_1695:
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i1876 := $load.i32($M.0, $p193);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i1877 := $eq.i32($i1876, 2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1877} true;
    goto $bb1201, $bb1202;

  $bb1202:
    assume {:verifier.code 0} true;
    assume !($i1877 == 1);
    goto $bb94;

  $bb1201:
    assume $i1877 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ssleep(1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} vslice_dummy_var_586 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1696, SeqInstr_1697;

  SeqInstr_1697:
    assume assertsPassed;
    goto SeqInstr_1698;

  SeqInstr_1698:
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i1879 := $load.i32($M.0, $p193);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i1880 := $eq.i32($i1879, 2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1880} true;
    goto $bb1203, $bb1204;

  $bb1204:
    assume {:verifier.code 0} true;
    assume !($i1880 == 1);
    goto $bb94;

  $bb1203:
    assume $i1880 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ssleep(1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_587 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1699, SeqInstr_1700;

  SeqInstr_1700:
    assume assertsPassed;
    goto SeqInstr_1701;

  SeqInstr_1701:
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i1882 := $load.i32($M.0, $p193);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i1883 := $eq.i32($i1882, 2);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1883} true;
    goto $bb1205, $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    assume !($i1883 == 1);
    goto $bb94;

  $bb1205:
    assume $i1883 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ssleep(1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_588 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1702, SeqInstr_1703;

  SeqInstr_1703:
    assume assertsPassed;
    goto SeqInstr_1704;

  SeqInstr_1704:
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i1885 := $load.i32($M.0, $p193);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i1886 := $eq.i32($i1885, 2);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1886} true;
    goto $bb1207, $bb1208;

  $bb1208:
    assume {:verifier.code 0} true;
    assume !($i1886 == 1);
    goto $bb94;

  $bb1207:
    assume $i1886 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} ssleep(1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_589 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1705, SeqInstr_1706;

  SeqInstr_1706:
    assume assertsPassed;
    goto SeqInstr_1707;

  SeqInstr_1707:
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i1888 := $load.i32($M.0, $p193);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i1889 := $eq.i32($i1888, 2);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1889} true;
    goto $bb1209, $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    assume !($i1889 == 1);
    goto $bb94;

  $bb1209:
    assume $i1889 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ssleep(1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_590 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1708, SeqInstr_1709;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  SeqInstr_1710:
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i1891 := $load.i32($M.0, $p193);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i1892 := $eq.i32($i1891, 2);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1892} true;
    goto $bb1211, $bb1212;

  $bb1212:
    assume {:verifier.code 0} true;
    assume !($i1892 == 1);
    goto $bb94;

  $bb1211:
    assume $i1892 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} ssleep(1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_591 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1711, SeqInstr_1712;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  SeqInstr_1713:
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i1894 := $load.i32($M.0, $p193);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i1895 := $eq.i32($i1894, 2);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1895} true;
    goto $bb1213, $bb1214;

  $bb1214:
    assume {:verifier.code 0} true;
    assume !($i1895 == 1);
    goto $bb94;

  $bb1213:
    assume $i1895 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ssleep(1);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_592 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1714, SeqInstr_1715;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  SeqInstr_1716:
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i1897 := $load.i32($M.0, $p193);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i1898 := $eq.i32($i1897, 2);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1898} true;
    goto $bb1215, $bb1216;

  $bb1216:
    assume {:verifier.code 0} true;
    assume !($i1898 == 1);
    goto $bb94;

  $bb1215:
    assume $i1898 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ssleep(1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_593 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1717, SeqInstr_1718;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  SeqInstr_1719:
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i1900 := $load.i32($M.0, $p193);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i1901 := $eq.i32($i1900, 2);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1901} true;
    goto $bb1217, $bb1218;

  $bb1218:
    assume {:verifier.code 0} true;
    assume !($i1901 == 1);
    goto $bb94;

  $bb1217:
    assume $i1901 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ssleep(1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_594 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1720, SeqInstr_1721;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  SeqInstr_1722:
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i1903 := $load.i32($M.0, $p193);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i1904 := $eq.i32($i1903, 2);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1904} true;
    goto $bb1219, $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    assume !($i1904 == 1);
    goto $bb94;

  $bb1219:
    assume $i1904 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} ssleep(1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_595 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1723, SeqInstr_1724;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  SeqInstr_1725:
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i1906 := $load.i32($M.0, $p193);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i1907 := $eq.i32($i1906, 2);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1907} true;
    goto $bb1221, $bb1222;

  $bb1222:
    assume {:verifier.code 0} true;
    assume !($i1907 == 1);
    goto $bb94;

  $bb1221:
    assume $i1907 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ssleep(1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_596 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1726, SeqInstr_1727;

  SeqInstr_1727:
    assume assertsPassed;
    goto SeqInstr_1728;

  SeqInstr_1728:
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i1909 := $load.i32($M.0, $p193);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i1910 := $eq.i32($i1909, 2);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1910} true;
    goto $bb1223, $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    assume !($i1910 == 1);
    goto $bb94;

  $bb1223:
    assume $i1910 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ssleep(1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_597 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1729, SeqInstr_1730;

  SeqInstr_1730:
    assume assertsPassed;
    goto SeqInstr_1731;

  SeqInstr_1731:
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i1912 := $load.i32($M.0, $p193);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i1913 := $eq.i32($i1912, 2);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1913} true;
    goto $bb1225, $bb1226;

  $bb1226:
    assume {:verifier.code 0} true;
    assume !($i1913 == 1);
    goto $bb94;

  $bb1225:
    assume $i1913 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ssleep(1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_598 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1732, SeqInstr_1733;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  SeqInstr_1734:
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i1915 := $load.i32($M.0, $p193);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i1916 := $eq.i32($i1915, 2);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1916} true;
    goto $bb1227, $bb1228;

  $bb1228:
    assume {:verifier.code 0} true;
    assume !($i1916 == 1);
    goto $bb94;

  $bb1227:
    assume $i1916 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ssleep(1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_599 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1735, SeqInstr_1736;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  SeqInstr_1737:
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i1918 := $load.i32($M.0, $p193);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i1919 := $eq.i32($i1918, 2);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1919} true;
    goto $bb1229, $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    assume !($i1919 == 1);
    goto $bb94;

  $bb1229:
    assume $i1919 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ssleep(1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_600 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1738, SeqInstr_1739;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  SeqInstr_1740:
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i1921 := $load.i32($M.0, $p193);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i1922 := $eq.i32($i1921, 2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1922} true;
    goto $bb1231, $bb1232;

  $bb1232:
    assume {:verifier.code 0} true;
    assume !($i1922 == 1);
    goto $bb94;

  $bb1231:
    assume $i1922 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ssleep(1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} vslice_dummy_var_601 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1741, SeqInstr_1742;

  SeqInstr_1742:
    assume assertsPassed;
    goto SeqInstr_1743;

  SeqInstr_1743:
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i1924 := $load.i32($M.0, $p193);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i1925 := $eq.i32($i1924, 2);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1925} true;
    goto $bb1233, $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    assume !($i1925 == 1);
    goto $bb94;

  $bb1233:
    assume $i1925 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ssleep(1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} vslice_dummy_var_602 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1744, SeqInstr_1745;

  SeqInstr_1745:
    assume assertsPassed;
    goto SeqInstr_1746;

  SeqInstr_1746:
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i1927 := $load.i32($M.0, $p193);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i1928 := $eq.i32($i1927, 2);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1928} true;
    goto $bb1235, $bb1236;

  $bb1236:
    assume {:verifier.code 0} true;
    assume !($i1928 == 1);
    goto $bb94;

  $bb1235:
    assume $i1928 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ssleep(1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_603 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1747, SeqInstr_1748;

  SeqInstr_1748:
    assume assertsPassed;
    goto SeqInstr_1749;

  SeqInstr_1749:
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i1930 := $load.i32($M.0, $p193);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i1931 := $eq.i32($i1930, 2);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1931} true;
    goto $bb1237, $bb1238;

  $bb1238:
    assume {:verifier.code 0} true;
    assume !($i1931 == 1);
    goto $bb94;

  $bb1237:
    assume $i1931 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ssleep(1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} vslice_dummy_var_604 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1750, SeqInstr_1751;

  SeqInstr_1751:
    assume assertsPassed;
    goto SeqInstr_1752;

  SeqInstr_1752:
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i1933 := $load.i32($M.0, $p193);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i1934 := $eq.i32($i1933, 2);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1934} true;
    goto $bb1239, $bb1240;

  $bb1240:
    assume {:verifier.code 0} true;
    assume !($i1934 == 1);
    goto $bb94;

  $bb1239:
    assume $i1934 == 1;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ssleep(1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_605 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1753, SeqInstr_1754;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  SeqInstr_1755:
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i1936 := $load.i32($M.0, $p193);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i1937 := $eq.i32($i1936, 2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1937} true;
    goto $bb1241, $bb1242;

  $bb1242:
    assume {:verifier.code 0} true;
    assume !($i1937 == 1);
    goto $bb94;

  $bb1241:
    assume $i1937 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ssleep(1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_606 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1756, SeqInstr_1757;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  SeqInstr_1758:
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i1939 := $load.i32($M.0, $p193);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i1940 := $eq.i32($i1939, 2);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1940} true;
    goto $bb1243, $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    assume !($i1940 == 1);
    goto $bb94;

  $bb1243:
    assume $i1940 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ssleep(1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_607 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1759, SeqInstr_1760;

  SeqInstr_1760:
    assume assertsPassed;
    goto SeqInstr_1761;

  SeqInstr_1761:
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i1942 := $load.i32($M.0, $p193);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i1943 := $eq.i32($i1942, 2);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1943} true;
    goto $bb1245, $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    assume !($i1943 == 1);
    goto $bb94;

  $bb1245:
    assume $i1943 == 1;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ssleep(1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_608 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1762, SeqInstr_1763;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  SeqInstr_1764:
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i1945 := $load.i32($M.0, $p193);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i1946 := $eq.i32($i1945, 2);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1946} true;
    goto $bb1247, $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    assume !($i1946 == 1);
    goto $bb94;

  $bb1247:
    assume $i1946 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ssleep(1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_609 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1765, SeqInstr_1766;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  SeqInstr_1767:
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i1948 := $load.i32($M.0, $p193);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i1949 := $eq.i32($i1948, 2);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1949} true;
    goto $bb1249, $bb1250;

  $bb1250:
    assume {:verifier.code 0} true;
    assume !($i1949 == 1);
    goto $bb94;

  $bb1249:
    assume $i1949 == 1;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} ssleep(1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_610 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1768, SeqInstr_1769;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  SeqInstr_1770:
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i1951 := $load.i32($M.0, $p193);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i1952 := $eq.i32($i1951, 2);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1952} true;
    goto $bb1251, $bb1252;

  $bb1252:
    assume {:verifier.code 0} true;
    assume !($i1952 == 1);
    goto $bb94;

  $bb1251:
    assume $i1952 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ssleep(1);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} vslice_dummy_var_611 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1771, SeqInstr_1772;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  SeqInstr_1773:
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i1954 := $load.i32($M.0, $p193);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i1955 := $eq.i32($i1954, 2);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1955} true;
    goto $bb1253, $bb1254;

  $bb1254:
    assume {:verifier.code 0} true;
    assume !($i1955 == 1);
    goto $bb94;

  $bb1253:
    assume $i1955 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ssleep(1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_612 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1774, SeqInstr_1775;

  SeqInstr_1775:
    assume assertsPassed;
    goto SeqInstr_1776;

  SeqInstr_1776:
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i1957 := $load.i32($M.0, $p193);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i1958 := $eq.i32($i1957, 2);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1958} true;
    goto $bb1255, $bb1256;

  $bb1256:
    assume {:verifier.code 0} true;
    assume !($i1958 == 1);
    goto $bb94;

  $bb1255:
    assume $i1958 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ssleep(1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} vslice_dummy_var_613 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1777, SeqInstr_1778;

  SeqInstr_1778:
    assume assertsPassed;
    goto SeqInstr_1779;

  SeqInstr_1779:
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i1960 := $load.i32($M.0, $p193);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i1961 := $eq.i32($i1960, 2);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1961} true;
    goto $bb1257, $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    assume !($i1961 == 1);
    goto $bb94;

  $bb1257:
    assume $i1961 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ssleep(1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_614 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1780, SeqInstr_1781;

  SeqInstr_1781:
    assume assertsPassed;
    goto SeqInstr_1782;

  SeqInstr_1782:
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i1963 := $load.i32($M.0, $p193);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i1964 := $eq.i32($i1963, 2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1964} true;
    goto $bb1259, $bb1260;

  $bb1260:
    assume {:verifier.code 0} true;
    assume !($i1964 == 1);
    goto $bb94;

  $bb1259:
    assume $i1964 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ssleep(1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_615 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1783, SeqInstr_1784;

  SeqInstr_1784:
    assume assertsPassed;
    goto SeqInstr_1785;

  SeqInstr_1785:
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i1966 := $load.i32($M.0, $p193);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i1967 := $eq.i32($i1966, 2);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1967} true;
    goto $bb1261, $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    assume !($i1967 == 1);
    goto $bb94;

  $bb1261:
    assume $i1967 == 1;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ssleep(1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_616 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1786, SeqInstr_1787;

  SeqInstr_1787:
    assume assertsPassed;
    goto SeqInstr_1788;

  SeqInstr_1788:
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i1969 := $load.i32($M.0, $p193);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i1970 := $eq.i32($i1969, 2);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1970} true;
    goto $bb1263, $bb1264;

  $bb1264:
    assume {:verifier.code 0} true;
    assume !($i1970 == 1);
    goto $bb94;

  $bb1263:
    assume $i1970 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ssleep(1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_617 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1789, SeqInstr_1790;

  SeqInstr_1790:
    assume assertsPassed;
    goto SeqInstr_1791;

  SeqInstr_1791:
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i1972 := $load.i32($M.0, $p193);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i1973 := $eq.i32($i1972, 2);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1973} true;
    goto $bb1265, $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    assume !($i1973 == 1);
    goto $bb94;

  $bb1265:
    assume $i1973 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ssleep(1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_618 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1792, SeqInstr_1793;

  SeqInstr_1793:
    assume assertsPassed;
    goto SeqInstr_1794;

  SeqInstr_1794:
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i1975 := $load.i32($M.0, $p193);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i1976 := $eq.i32($i1975, 2);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1976} true;
    goto $bb1267, $bb1268;

  $bb1268:
    assume {:verifier.code 0} true;
    assume !($i1976 == 1);
    goto $bb94;

  $bb1267:
    assume $i1976 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ssleep(1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_619 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1795, SeqInstr_1796;

  SeqInstr_1796:
    assume assertsPassed;
    goto SeqInstr_1797;

  SeqInstr_1797:
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i1978 := $load.i32($M.0, $p193);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i1979 := $eq.i32($i1978, 2);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1979} true;
    goto $bb1269, $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    assume !($i1979 == 1);
    goto $bb94;

  $bb1269:
    assume $i1979 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ssleep(1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_620 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1798, SeqInstr_1799;

  SeqInstr_1799:
    assume assertsPassed;
    goto SeqInstr_1800;

  SeqInstr_1800:
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i1981 := $load.i32($M.0, $p193);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i1982 := $eq.i32($i1981, 2);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1982} true;
    goto $bb1271, $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    assume !($i1982 == 1);
    goto $bb94;

  $bb1271:
    assume $i1982 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ssleep(1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_621 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1801, SeqInstr_1802;

  SeqInstr_1802:
    assume assertsPassed;
    goto SeqInstr_1803;

  SeqInstr_1803:
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i1984 := $load.i32($M.0, $p193);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i1985 := $eq.i32($i1984, 2);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1985} true;
    goto $bb1273, $bb1274;

  $bb1274:
    assume {:verifier.code 0} true;
    assume !($i1985 == 1);
    goto $bb94;

  $bb1273:
    assume $i1985 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ssleep(1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_622 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1804, SeqInstr_1805;

  SeqInstr_1805:
    assume assertsPassed;
    goto SeqInstr_1806;

  SeqInstr_1806:
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i1987 := $load.i32($M.0, $p193);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i1988 := $eq.i32($i1987, 2);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1988} true;
    goto $bb1275, $bb1276;

  $bb1276:
    assume {:verifier.code 0} true;
    assume !($i1988 == 1);
    goto $bb94;

  $bb1275:
    assume $i1988 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ssleep(1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_623 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1807, SeqInstr_1808;

  SeqInstr_1808:
    assume assertsPassed;
    goto SeqInstr_1809;

  SeqInstr_1809:
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i1990 := $load.i32($M.0, $p193);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i1991 := $eq.i32($i1990, 2);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1991} true;
    goto $bb1277, $bb1278;

  $bb1278:
    assume {:verifier.code 0} true;
    assume !($i1991 == 1);
    goto $bb94;

  $bb1277:
    assume $i1991 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ssleep(1);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_624 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1810, SeqInstr_1811;

  SeqInstr_1811:
    assume assertsPassed;
    goto SeqInstr_1812;

  SeqInstr_1812:
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i1993 := $load.i32($M.0, $p193);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i1994 := $eq.i32($i1993, 2);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1994} true;
    goto $bb1279, $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    assume !($i1994 == 1);
    goto $bb94;

  $bb1279:
    assume $i1994 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ssleep(1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_625 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1813, SeqInstr_1814;

  SeqInstr_1814:
    assume assertsPassed;
    goto SeqInstr_1815;

  SeqInstr_1815:
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i1996 := $load.i32($M.0, $p193);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i1997 := $eq.i32($i1996, 2);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1997} true;
    goto $bb1281, $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    assume !($i1997 == 1);
    goto $bb94;

  $bb1281:
    assume $i1997 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ssleep(1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_626 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1816, SeqInstr_1817;

  SeqInstr_1817:
    assume assertsPassed;
    goto SeqInstr_1818;

  SeqInstr_1818:
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i1999 := $load.i32($M.0, $p193);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i2000 := $eq.i32($i1999, 2);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2000} true;
    goto $bb1283, $bb1284;

  $bb1284:
    assume {:verifier.code 0} true;
    assume !($i2000 == 1);
    goto $bb94;

  $bb1283:
    assume $i2000 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ssleep(1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_627 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1819, SeqInstr_1820;

  SeqInstr_1820:
    assume assertsPassed;
    goto SeqInstr_1821;

  SeqInstr_1821:
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i2002 := $load.i32($M.0, $p193);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i2003 := $eq.i32($i2002, 2);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2003} true;
    goto $bb1285, $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    assume !($i2003 == 1);
    goto $bb94;

  $bb1285:
    assume $i2003 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ssleep(1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_628 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1822, SeqInstr_1823;

  SeqInstr_1823:
    assume assertsPassed;
    goto SeqInstr_1824;

  SeqInstr_1824:
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i2005 := $load.i32($M.0, $p193);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i2006 := $eq.i32($i2005, 2);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2006} true;
    goto $bb1287, $bb1288;

  $bb1288:
    assume {:verifier.code 0} true;
    assume !($i2006 == 1);
    goto $bb94;

  $bb1287:
    assume $i2006 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ssleep(1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_629 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1825, SeqInstr_1826;

  SeqInstr_1826:
    assume assertsPassed;
    goto SeqInstr_1827;

  SeqInstr_1827:
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i2008 := $load.i32($M.0, $p193);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i2009 := $eq.i32($i2008, 2);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2009} true;
    goto $bb1289, $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    assume !($i2009 == 1);
    goto $bb94;

  $bb1289:
    assume $i2009 == 1;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ssleep(1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_630 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1828, SeqInstr_1829;

  SeqInstr_1829:
    assume assertsPassed;
    goto SeqInstr_1830;

  SeqInstr_1830:
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i2011 := $load.i32($M.0, $p193);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i2012 := $eq.i32($i2011, 2);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2012} true;
    goto $bb1291, $bb1292;

  $bb1292:
    assume {:verifier.code 0} true;
    assume !($i2012 == 1);
    goto $bb94;

  $bb1291:
    assume $i2012 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ssleep(1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_631 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1831, SeqInstr_1832;

  SeqInstr_1832:
    assume assertsPassed;
    goto SeqInstr_1833;

  SeqInstr_1833:
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i2014 := $load.i32($M.0, $p193);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i2015 := $eq.i32($i2014, 2);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2015} true;
    goto $bb1293, $bb1294;

  $bb1294:
    assume {:verifier.code 0} true;
    assume !($i2015 == 1);
    goto $bb94;

  $bb1293:
    assume $i2015 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ssleep(1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_632 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1834, SeqInstr_1835;

  SeqInstr_1835:
    assume assertsPassed;
    goto SeqInstr_1836;

  SeqInstr_1836:
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i2017 := $load.i32($M.0, $p193);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i2018 := $eq.i32($i2017, 2);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2018} true;
    goto $bb1295, $bb1296;

  $bb1296:
    assume {:verifier.code 0} true;
    assume !($i2018 == 1);
    goto $bb94;

  $bb1295:
    assume $i2018 == 1;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ssleep(1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_633 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1837, SeqInstr_1838;

  SeqInstr_1838:
    assume assertsPassed;
    goto SeqInstr_1839;

  SeqInstr_1839:
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i2020 := $load.i32($M.0, $p193);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i2021 := $eq.i32($i2020, 2);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2021} true;
    goto $bb1297, $bb1298;

  $bb1298:
    assume {:verifier.code 0} true;
    assume !($i2021 == 1);
    goto $bb94;

  $bb1297:
    assume $i2021 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} ssleep(1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_634 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1840, SeqInstr_1841;

  SeqInstr_1841:
    assume assertsPassed;
    goto SeqInstr_1842;

  SeqInstr_1842:
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i2023 := $load.i32($M.0, $p193);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i2024 := $eq.i32($i2023, 2);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2024} true;
    goto $bb1299, $bb1300;

  $bb1300:
    assume {:verifier.code 0} true;
    assume !($i2024 == 1);
    goto $bb94;

  $bb1299:
    assume $i2024 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ssleep(1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_635 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1843, SeqInstr_1844;

  SeqInstr_1844:
    assume assertsPassed;
    goto SeqInstr_1845;

  SeqInstr_1845:
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i2026 := $load.i32($M.0, $p193);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i2027 := $eq.i32($i2026, 2);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2027} true;
    goto $bb1301, $bb1302;

  $bb1302:
    assume {:verifier.code 0} true;
    assume !($i2027 == 1);
    goto $bb94;

  $bb1301:
    assume $i2027 == 1;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ssleep(1);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_636 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1846, SeqInstr_1847;

  SeqInstr_1847:
    assume assertsPassed;
    goto SeqInstr_1848;

  SeqInstr_1848:
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i2029 := $load.i32($M.0, $p193);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i2030 := $eq.i32($i2029, 2);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2030} true;
    goto $bb1303, $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    assume !($i2030 == 1);
    goto $bb94;

  $bb1303:
    assume $i2030 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} ssleep(1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_637 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1849, SeqInstr_1850;

  SeqInstr_1850:
    assume assertsPassed;
    goto SeqInstr_1851;

  SeqInstr_1851:
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i2032 := $load.i32($M.0, $p193);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i2033 := $eq.i32($i2032, 2);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2033} true;
    goto $bb1305, $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    assume !($i2033 == 1);
    goto $bb94;

  $bb1305:
    assume $i2033 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} ssleep(1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_638 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1852, SeqInstr_1853;

  SeqInstr_1853:
    assume assertsPassed;
    goto SeqInstr_1854;

  SeqInstr_1854:
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i2035 := $load.i32($M.0, $p193);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i2036 := $eq.i32($i2035, 2);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2036} true;
    goto $bb1307, $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    assume !($i2036 == 1);
    goto $bb94;

  $bb1307:
    assume $i2036 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ssleep(1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_639 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1855, SeqInstr_1856;

  SeqInstr_1856:
    assume assertsPassed;
    goto SeqInstr_1857;

  SeqInstr_1857:
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i2038 := $load.i32($M.0, $p193);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i2039 := $eq.i32($i2038, 2);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2039} true;
    goto $bb1309, $bb1310;

  $bb1310:
    assume {:verifier.code 0} true;
    assume !($i2039 == 1);
    goto $bb94;

  $bb1309:
    assume $i2039 == 1;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ssleep(1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_640 := rsxx_get_card_state($p8, $p194);
    goto SeqInstr_1858, SeqInstr_1859;

  SeqInstr_1859:
    assume assertsPassed;
    goto SeqInstr_1860;

  SeqInstr_1860:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_1858:
    assume !assertsPassed;
    return;

  SeqInstr_1855:
    assume !assertsPassed;
    return;

  SeqInstr_1852:
    assume !assertsPassed;
    return;

  SeqInstr_1849:
    assume !assertsPassed;
    return;

  SeqInstr_1846:
    assume !assertsPassed;
    return;

  SeqInstr_1843:
    assume !assertsPassed;
    return;

  SeqInstr_1840:
    assume !assertsPassed;
    return;

  SeqInstr_1837:
    assume !assertsPassed;
    return;

  SeqInstr_1834:
    assume !assertsPassed;
    return;

  SeqInstr_1831:
    assume !assertsPassed;
    return;

  SeqInstr_1828:
    assume !assertsPassed;
    return;

  SeqInstr_1825:
    assume !assertsPassed;
    return;

  SeqInstr_1822:
    assume !assertsPassed;
    return;

  SeqInstr_1819:
    assume !assertsPassed;
    return;

  SeqInstr_1816:
    assume !assertsPassed;
    return;

  SeqInstr_1813:
    assume !assertsPassed;
    return;

  SeqInstr_1810:
    assume !assertsPassed;
    return;

  SeqInstr_1807:
    assume !assertsPassed;
    return;

  SeqInstr_1804:
    assume !assertsPassed;
    return;

  SeqInstr_1801:
    assume !assertsPassed;
    return;

  SeqInstr_1798:
    assume !assertsPassed;
    return;

  SeqInstr_1795:
    assume !assertsPassed;
    return;

  SeqInstr_1792:
    assume !assertsPassed;
    return;

  SeqInstr_1789:
    assume !assertsPassed;
    return;

  SeqInstr_1786:
    assume !assertsPassed;
    return;

  SeqInstr_1783:
    assume !assertsPassed;
    return;

  SeqInstr_1780:
    assume !assertsPassed;
    return;

  SeqInstr_1777:
    assume !assertsPassed;
    return;

  SeqInstr_1774:
    assume !assertsPassed;
    return;

  SeqInstr_1771:
    assume !assertsPassed;
    return;

  SeqInstr_1768:
    assume !assertsPassed;
    return;

  SeqInstr_1765:
    assume !assertsPassed;
    return;

  SeqInstr_1762:
    assume !assertsPassed;
    return;

  SeqInstr_1759:
    assume !assertsPassed;
    return;

  SeqInstr_1756:
    assume !assertsPassed;
    return;

  SeqInstr_1753:
    assume !assertsPassed;
    return;

  SeqInstr_1750:
    assume !assertsPassed;
    return;

  SeqInstr_1747:
    assume !assertsPassed;
    return;

  SeqInstr_1744:
    assume !assertsPassed;
    return;

  SeqInstr_1741:
    assume !assertsPassed;
    return;

  SeqInstr_1738:
    assume !assertsPassed;
    return;

  SeqInstr_1735:
    assume !assertsPassed;
    return;

  SeqInstr_1732:
    assume !assertsPassed;
    return;

  SeqInstr_1729:
    assume !assertsPassed;
    return;

  SeqInstr_1726:
    assume !assertsPassed;
    return;

  SeqInstr_1723:
    assume !assertsPassed;
    return;

  SeqInstr_1720:
    assume !assertsPassed;
    return;

  SeqInstr_1717:
    assume !assertsPassed;
    return;

  SeqInstr_1714:
    assume !assertsPassed;
    return;

  SeqInstr_1711:
    assume !assertsPassed;
    return;

  SeqInstr_1708:
    assume !assertsPassed;
    return;

  SeqInstr_1705:
    assume !assertsPassed;
    return;

  SeqInstr_1702:
    assume !assertsPassed;
    return;

  SeqInstr_1699:
    assume !assertsPassed;
    return;

  SeqInstr_1696:
    assume !assertsPassed;
    return;

  SeqInstr_1693:
    assume !assertsPassed;
    return;

  SeqInstr_1690:
    assume !assertsPassed;
    return;

  SeqInstr_1687:
    assume !assertsPassed;
    return;

  SeqInstr_1684:
    assume !assertsPassed;
    return;

  SeqInstr_1681:
    assume !assertsPassed;
    return;

  SeqInstr_1678:
    assume !assertsPassed;
    return;

  SeqInstr_1675:
    assume !assertsPassed;
    return;

  SeqInstr_1672:
    assume !assertsPassed;
    return;

  SeqInstr_1669:
    assume !assertsPassed;
    return;

  SeqInstr_1666:
    assume !assertsPassed;
    return;

  SeqInstr_1663:
    assume !assertsPassed;
    return;

  SeqInstr_1660:
    assume !assertsPassed;
    return;

  SeqInstr_1657:
    assume !assertsPassed;
    return;

  SeqInstr_1654:
    assume !assertsPassed;
    return;

  SeqInstr_1651:
    assume !assertsPassed;
    return;

  SeqInstr_1648:
    assume !assertsPassed;
    return;

  SeqInstr_1645:
    assume !assertsPassed;
    return;

  SeqInstr_1642:
    assume !assertsPassed;
    return;

  SeqInstr_1639:
    assume !assertsPassed;
    return;

  SeqInstr_1636:
    assume !assertsPassed;
    return;

  SeqInstr_1633:
    assume !assertsPassed;
    return;

  SeqInstr_1630:
    assume !assertsPassed;
    return;

  SeqInstr_1627:
    assume !assertsPassed;
    return;

  SeqInstr_1624:
    assume !assertsPassed;
    return;

  SeqInstr_1621:
    assume !assertsPassed;
    return;

  SeqInstr_1618:
    assume !assertsPassed;
    return;

  SeqInstr_1615:
    assume !assertsPassed;
    return;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  SeqInstr_1609:
    assume !assertsPassed;
    return;

  SeqInstr_1606:
    assume !assertsPassed;
    return;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  SeqInstr_1600:
    assume !assertsPassed;
    return;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  SeqInstr_1594:
    assume !assertsPassed;
    return;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  SeqInstr_1585:
    assume !assertsPassed;
    return;

  SeqInstr_1582:
    assume !assertsPassed;
    return;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  SeqInstr_1576:
    assume !assertsPassed;
    return;

  SeqInstr_1573:
    assume !assertsPassed;
    return;

  SeqInstr_1570:
    assume !assertsPassed;
    return;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  SeqInstr_1564:
    assume !assertsPassed;
    return;

  SeqInstr_1561:
    assume !assertsPassed;
    return;

  SeqInstr_1558:
    assume !assertsPassed;
    return;

  SeqInstr_1555:
    assume !assertsPassed;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;

  SeqInstr_1516:
    assume !assertsPassed;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;

  SeqInstr_1510:
    assume !assertsPassed;
    return;

  SeqInstr_1507:
    assume !assertsPassed;
    return;

  SeqInstr_1504:
    assume !assertsPassed;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i184 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} dev_crit.ref.ref($p187, .str.100);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i169 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_destroy_workqueue_46($p230);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p231, $0.ref);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i155 := $i168;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} rsxx_dma_destroy($p8);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i140 := $i155;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i117 := $i140;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv_destroy_workqueue_47($p234);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p236, $0.ref);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i109 := $i117;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} spin_lock_irq($p237);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} rsxx_disable_ier_and_isr($p8, $sub.i32(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} spin_unlock_irq($p238);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p8);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} ldv_free_irq_48($i240, $p241);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i242 := $M.16;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i103 := $i109;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} pci_iounmap($p0, $p245);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i67 := $i103;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} pci_release_regions($p0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i39 := $i67;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} pci_disable_device($p0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i26 := $i33;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} spin_lock(rsxx_ida_lock);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(1084, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $p246);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ida_remove(rsxx_disk_ida, $i247);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} spin_unlock(rsxx_ida_lock);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i18 := $i26;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p8);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} kfree($p248);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  $bb114:
    assume $i243 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} pci_disable_msi($p0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb75:
    assume $i151 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} dev_err.ref.ref($p154, .str.97);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i155 := $i141;
    goto $bb77;

  $bb72:
    assume $i142 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} _dev_info.ref.ref($p145, .str.94);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i140 := $i141;
    goto $bb70;

  $bb68:
    assume $i139 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32(0, 12);
    goto $bb70;

  $bb65:
    assume $i125 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} _dev_info.ref.ref($p128, .str.93);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i119 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} dev_err.ref.ref($p122, .str.92);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i113 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} dev_warn.ref.ref($p116, .str.91);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32(0, 22);
    goto $bb60;

  $bb54:
    assume $i105 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} dev_err.ref.ref($p108, .str.90);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i109 := $i104;
    goto $bb56;

  $bb50:
    assume $i97 == 1;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} dev_err.ref.ref.i32($p100, .str.89, $i102);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i103 := $i96;
    goto $bb52;

  $bb44:
    assume $i87 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i88 := pci_enable_msi_exact($p0, 1);
    call {:si_unique_call 318} {:cexpr "st"} boogie_si_record_i32($i88);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i89 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} dev_warn.ref.ref($p92, .str.88);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i73 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} dev_err.ref.ref($p76, .str.86);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 12);
    goto $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} dev_err.ref.ref($p66, .str.85);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 12);
    goto $bb39;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i48, $i52);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb35;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} dev_err.ref.ref($p38, .str.84);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i39 := $i34;
    goto $bb29;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} dev_err.ref.ref($p32, .str.83);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i33 := $i28;
    goto $bb25;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb21;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i18 := $i22;
    goto $bb12;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i16 := ida_pre_get(rsxx_disk_ida, 208);
    call {:si_unique_call 288} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const rsxx_pci_remove: ref;

axiom rsxx_pci_remove == $sub.ref(0, 414585);

procedure rsxx_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.23, $M.25, $M.27, $M.29, $M.8, $M.10, $M.12, $M.14, $M.31, $M.33, $M.35, $M.37, $M.21, $CurrAddr, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, assertsPassed, $M.51, $M.52, $M.9, $M.11, $M.13, $M.15, $M.7, $M.24, $M.26, $M.28, $M.30;



implementation rsxx_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i11: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_641: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} _dev_info.ref.ref($p7, .str.109);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} rsxx_detach_dev($p2);
    goto SeqInstr_1861, SeqInstr_1862;

  SeqInstr_1862:
    assume assertsPassed;
    goto SeqInstr_1863;

  SeqInstr_1863:
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $i20 := card_shutdown($p2);
    goto SeqInstr_1864, SeqInstr_1865;

  SeqInstr_1865:
    assume assertsPassed;
    goto SeqInstr_1866;

  SeqInstr_1866:
    call {:si_unique_call 1590} {:cexpr "st"} boogie_si_record_i32($i20);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p26 := spinlock_check($p25);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 1594} {:cexpr "flags"} boogie_si_record_i64($i27);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} rsxx_disable_ier_and_isr($p2, 8);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} spin_unlock_irqrestore($p28, $i27);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(824, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_641 := ldv_cancel_work_sync_49($p29);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} rsxx_destroy_dev($p2);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} rsxx_dma_destroy($p2);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p32 := spinlock_check($p31);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i33 := _raw_spin_lock_irqsave($p32);
    call {:si_unique_call 1602} {:cexpr "flags"} boogie_si_record_i64($i33);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} rsxx_disable_ier_and_isr($p2, $sub.i32(0, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} spin_unlock_irqrestore($p34, $i33);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} debugfs_remove_recursive($p37);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_free_irq_50($i39, $p40);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i41 := $M.16;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} rsxx_creg_destroy($p2);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} pci_iounmap($p0, $p44);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} pci_disable_device($p0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} pci_release_regions($p0);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} kfree($p45);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} pci_disable_msi($p0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} dev_crit.ref.ref($p24, .str.110);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1864:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $i11 := rsxx_pci_remove_loop_$bb8($p2, $p8, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $i11);
    goto $bb8_last;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p13 := spinlock_check($p12);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 1583} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i15 := CR_INTR_DMA($i11);
    call {:si_unique_call 1585} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} rsxx_disable_ier_and_isr($p2, $i15);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} spin_unlock_irqrestore($p16, $i14);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 1588} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p8);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb10_dummy;

  SeqInstr_1861:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;
}



const rsxx_pci_suspend: ref;

axiom rsxx_pci_suspend == $sub.ref(0, 415617);

procedure rsxx_pci_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $CurrAddr;



implementation rsxx_pci_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p3, $i1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;
}



const rsxx_pci_shutdown: ref;

axiom rsxx_pci_shutdown == $sub.ref(0, 416649);

procedure rsxx_pci_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, assertsPassed, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15;



implementation rsxx_pci_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i11: i32;
  var vslice_dummy_var_642: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} _dev_info.ref.ref($p7, .str.108);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} rsxx_detach_dev($p2);
    goto SeqInstr_1867, SeqInstr_1868;

  SeqInstr_1868:
    assume assertsPassed;
    goto SeqInstr_1869;

  SeqInstr_1869:
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} vslice_dummy_var_642 := card_shutdown($p2);
    goto SeqInstr_1870, SeqInstr_1871;

  SeqInstr_1871:
    assume assertsPassed;
    goto SeqInstr_1872;

  SeqInstr_1872:
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1870:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $i11 := rsxx_pci_shutdown_loop_$bb8($p2, $p8, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $i11);
    goto $bb8_last;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p13 := spinlock_check($p12);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 1619} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $i15 := CR_INTR_DMA($i11);
    call {:si_unique_call 1621} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} rsxx_disable_ier_and_isr($p2, $i15);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} spin_unlock_irqrestore($p16, $i14);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 1624} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p8);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb10_dummy;

  SeqInstr_1867:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5121;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 417681);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 418713);

procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_detach_dev: ref;

axiom rsxx_detach_dev == $sub.ref(0, 419745);

procedure rsxx_detach_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed;



implementation rsxx_detach_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(920, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_mutex_lock_135($p1);
    goto SeqInstr_1873, SeqInstr_1874;

  SeqInstr_1874:
    assume assertsPassed;
    goto SeqInstr_1875;

  SeqInstr_1875:
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1080, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(920, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} ldv_mutex_unlock_136($p8);
    goto SeqInstr_1876, SeqInstr_1877;

  SeqInstr_1877:
    assume assertsPassed;
    goto SeqInstr_1878;

  SeqInstr_1878:
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1876:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} del_gendisk($p6);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1080, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1873:
    assume !assertsPassed;
    return;
}



const CR_INTR_DMA: ref;

axiom CR_INTR_DMA == $sub.ref(0, 420777);

procedure CR_INTR_DMA($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $CurrAddr;



implementation CR_INTR_DMA($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1631} {:cexpr "CR_INTR_DMA:arg:N"} boogie_si_record_i32($i0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 4));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(1, 4));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, 4);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 4));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p4, 16);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 4));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p5, 32);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 4));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p6, 64);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(5, 4));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p7, 128);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(6, 4));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p8, 256);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(7, 4));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p9, 512);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i10, 4));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.20, $p11);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const card_shutdown: ref;

axiom card_shutdown == $sub.ref(0, 421809);

procedure card_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation card_shutdown($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i7: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i29: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i2 := msecs_to_jiffies(120000);
    call {:si_unique_call 1634} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    call {:si_unique_call 1635} {:cexpr "timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1636} {:cexpr "start"} boogie_si_record_i64($i4);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i5 := rsxx_get_card_state($p0, $p1);
    goto SeqInstr_1879, SeqInstr_1880;

  SeqInstr_1880:
    assume assertsPassed;
    goto SeqInstr_1881;

  SeqInstr_1881:
    call {:si_unique_call 1638} {:cexpr "st"} boogie_si_record_i32($i5);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17 := card_shutdown_loop_$bb4($p0, $p1, $i3, $i4, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 32);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, jiffies);
    call {:si_unique_call 1643} {:cexpr "start"} boogie_si_record_i64($i26);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i27 := rsxx_get_card_state($p0, $p1);
    goto SeqInstr_1888, SeqInstr_1889;

  SeqInstr_1889:
    assume assertsPassed;
    goto SeqInstr_1890;

  SeqInstr_1890:
    call {:si_unique_call 1645} {:cexpr "st"} boogie_si_record_i32($i27);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i28 == 1);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    call $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38 := card_shutdown_loop_$bb30($p0, $p1, $i3, $i26, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38);
    goto $bb30_last;

  $bb34:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 1);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb40:
    assume $i40 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 110);
    goto $bb8;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i35, $i26);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i3);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i38 := $ult.i64($i36, $i37);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb37;

  $bb31:
    assume $i38 == 1;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i30 := rsxx_get_card_state($p0, $p1);
    goto SeqInstr_1891, SeqInstr_1892;

  SeqInstr_1892:
    assume assertsPassed;
    goto SeqInstr_1893;

  SeqInstr_1893:
    call {:si_unique_call 1647} {:cexpr "st"} boogie_si_record_i32($i30);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb33_dummy;

  $bb32:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i29 := $i32;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i11 := $i29;
    goto $bb8;

  SeqInstr_1891:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb28;

  SeqInstr_1888:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i21 == 1;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p1);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb20;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $i24 := rsxx_issue_card_cmd($p0, 2);
    goto SeqInstr_1885, SeqInstr_1886;

  SeqInstr_1886:
    assume assertsPassed;
    goto SeqInstr_1887;

  SeqInstr_1887:
    call {:si_unique_call 1642} {:cexpr "st"} boogie_si_record_i32($i24);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb8;

  SeqInstr_1885:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 110);
    goto $bb8;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, jiffies);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i14, $i4);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i3);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i17 := $ult.i64($i15, $i16);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $i8 := rsxx_get_card_state($p0, $p1);
    goto SeqInstr_1882, SeqInstr_1883;

  SeqInstr_1883:
    assume assertsPassed;
    goto SeqInstr_1884;

  SeqInstr_1884:
    call {:si_unique_call 1640} {:cexpr "st"} boogie_si_record_i32($i8);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7_dummy;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb8;

  SeqInstr_1882:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  SeqInstr_1879:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const rsxx_get_card_state: ref;

axiom rsxx_get_card_state == $sub.ref(0, 422841);

procedure rsxx_get_card_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_get_card_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i3 := rsxx_creg_read($p0, $sub.i32(0, 2147479548), 4, $p2, 0);
    goto SeqInstr_1894, SeqInstr_1895;

  SeqInstr_1895:
    assume assertsPassed;
    goto SeqInstr_1896;

  SeqInstr_1896:
    call {:si_unique_call 1649} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1894:
    assume !assertsPassed;
    return;
}



const rsxx_issue_card_cmd: ref;

axiom rsxx_issue_card_cmd == $sub.ref(0, 423873);

procedure rsxx_issue_card_cmd($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_issue_card_cmd($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i4 := rsxx_creg_write($p0, $sub.i32(0, 2147479552), 4, $p3, 0);
    goto SeqInstr_1897, SeqInstr_1898;

  SeqInstr_1898:
    assume assertsPassed;
    goto SeqInstr_1899;

  SeqInstr_1899:
    call {:si_unique_call 1652} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1897:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_135: ref;

axiom ldv_mutex_lock_135 == $sub.ref(0, 424905);

procedure ldv_mutex_lock_135($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_lock_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_mutex_lock_dev_lock_of_rsxx_cardinfo($p0);
    goto SeqInstr_1900, SeqInstr_1901;

  SeqInstr_1901:
    assume assertsPassed;
    goto SeqInstr_1902;

  SeqInstr_1902:
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} mutex_lock($p0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1900:
    assume !assertsPassed;
    return;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 425937);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_136: ref;

axiom ldv_mutex_unlock_136 == $sub.ref(0, 426969);

procedure ldv_mutex_unlock_136($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_unlock_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo($p0);
    goto SeqInstr_1903, SeqInstr_1904;

  SeqInstr_1904:
    assume assertsPassed;
    goto SeqInstr_1905;

  SeqInstr_1905:
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} mutex_unlock($p0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1903:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo: ref;

axiom ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo == $sub.ref(0, 428001);

procedure ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i1 := $M.21;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1658} {:cexpr "ldv_mutex_dev_lock_of_rsxx_cardinfo"} boogie_si_record_i32(1);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} ldv_error();
    goto SeqInstr_1906, SeqInstr_1907;

  SeqInstr_1907:
    assume assertsPassed;
    goto SeqInstr_1908;

  SeqInstr_1908:
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1906:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_dev_lock_of_rsxx_cardinfo: ref;

axiom ldv_mutex_lock_dev_lock_of_rsxx_cardinfo == $sub.ref(0, 429033);

procedure ldv_mutex_lock_dev_lock_of_rsxx_cardinfo($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_lock_dev_lock_of_rsxx_cardinfo($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i1 := $M.21;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1660} {:cexpr "ldv_mutex_dev_lock_of_rsxx_cardinfo"} boogie_si_record_i32(2);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_error();
    goto SeqInstr_1909, SeqInstr_1910;

  SeqInstr_1910:
    assume assertsPassed;
    goto SeqInstr_1911;

  SeqInstr_1911:
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1909:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 430065);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 431097);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_cancel_work_sync_49: ref;

axiom ldv_cancel_work_sync_49 == $sub.ref(0, 432129);

procedure ldv_cancel_work_sync_49($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29;



implementation ldv_cancel_work_sync_49($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i1 := cancel_work_sync($p0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1662} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1663} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} disable_work_3($p0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const rsxx_destroy_dev: ref;

axiom rsxx_destroy_dev == $sub.ref(0, 433161);

procedure rsxx_destroy_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_destroy_dev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} put_disk($p4);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} blk_cleanup_queue($p7);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4208)), $mul.ref(2496, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} unregister_blkdev($i12, .str.5);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_dma_destroy: ref;

axiom rsxx_dma_destroy == $sub.ref(0, 434193);

procedure rsxx_dma_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.12, $M.14, $M.23, $M.25, $M.27, $M.29, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.9, $M.11, $M.13, $M.15, $M.24, $M.26, $M.28, $M.30;



implementation rsxx_dma_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i4: i32;
  var vslice_dummy_var_643: i32;
  var vslice_dummy_var_644: i32;
  var vslice_dummy_var_645: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $p26, $p28, $p29, $p31, $p33, $p34, $p35, $p36, $p37, $p39, $p40, $p42, $i43, $p44, $p45, $p47, $p48, $p50, $i51, $i52, $i53, $i54, $i4, vslice_dummy_var_643, vslice_dummy_var_644, vslice_dummy_var_645 := rsxx_dma_destroy_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $i25, $p26, $p28, $p29, $p31, $p33, $p34, $p35, $p36, $p37, $p39, $p40, $p42, $i43, $p44, $p45, $p47, $p48, $p50, $i51, $i52, $i53, $i54, $i4, vslice_dummy_var_643, vslice_dummy_var_644, vslice_dummy_var_645);
    goto $bb4_last;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 712));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(344, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i24 := timer_pending($p23);
    call {:si_unique_call 1671} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(80, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} spin_lock_bh($p28);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(152, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_644 := rsxx_cleanup_dma_queue($p8, $p29, 1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(80, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} spin_unlock_bh($p31);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_645 := rsxx_dma_cancel($p8);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(472, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} vfree($p35);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} pci_free_consistent($p37, 4096, $p40, $i43);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} pci_free_consistent($p45, 4096, $p48, $i51);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i4, 1);
    call {:si_unique_call 1680} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i53, $i52);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i52;
    goto $bb15_dummy;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(344, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_643 := ldv_del_timer_sync_182($p26);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} ldv_destroy_workqueue_181($p21);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_destroy_workqueue_180($p14);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref($i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5345;
}



const debugfs_remove_recursive: ref;

axiom debugfs_remove_recursive == $sub.ref(0, 435225);

procedure debugfs_remove_recursive($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove_recursive($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_50: ref;

axiom ldv_free_irq_50 == $sub.ref(0, 436257);

procedure ldv_free_irq_50($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.31, $M.33, $M.35, $M.37;



implementation ldv_free_irq_50($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} {:cexpr "ldv_free_irq_50:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} free_irq($i0, $p1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 437289);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_creg_destroy: ref;

axiom rsxx_creg_destroy == $sub.ref(0, 438321);

procedure rsxx_creg_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.23, $M.25, $M.27, $M.29, $CurrAddr, $M.9, $M.11, $M.13, $M.15;



implementation rsxx_creg_destroy($p0: ref)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i39: i32;
  var $i18: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var vslice_dummy_var_646: i32;
  var vslice_dummy_var_647: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} spin_lock_bh($p2);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i13, $i16);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i18, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p46);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} spin_unlock_bh($p70);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} vslice_dummy_var_647 := ldv_cancel_work_sync_96($p72);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i50 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $i53 := timer_pending($p52);
    call {:si_unique_call 1691} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} _dev_info.ref.ref($p66, .str.26);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p67 := $M.6;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p46);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} kmem_cache_free($p67, $p68);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    call {:si_unique_call 1693} devirtbounce.1($p63, $p0, $p46, $sub.i32(0, 125));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} vslice_dummy_var_646 := ldv_del_timer_sync_95($p56);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} _dev_info.ref.ref.i32($p43, .str.25, $i18);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i19, $p20, $p21 := 0, $p6, $p10;
    goto $bb4;

  $bb4:
    call $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $i31, $p33, $p34, $p36, $i37, $i38, $i19, $p20, $p21, $i39 := rsxx_creg_destroy_loop_$bb4($p0, $i16, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $i31, $p33, $p34, $p36, $i37, $i38, $i19, $p20, $p21, $i39);
    goto $bb4_last;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} list_del($p22);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $M.6;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p20);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} kmem_cache_free($p29, $p30);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i19, 1);
    call {:si_unique_call 1688} {:cexpr "cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $i16);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i39 := $i31;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i18 := $i39;
    goto $bb3;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i19, $p20, $p21 := $i31, $p21, $p34;
    goto $bb9_dummy;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 1686} devirtbounce.1($p28, $p0, $p20, $sub.i32(0, 125));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5439;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 439353);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 440385);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 441417);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_95: ref;

axiom ldv_del_timer_sync_95 == $sub.ref(0, 442449);

procedure ldv_del_timer_sync_95($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_del_timer_sync_95($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1699} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} disable_suitable_timer_6($p0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cancel_work_sync_96: ref;

axiom ldv_cancel_work_sync_96 == $sub.ref(0, 443481);

procedure ldv_cancel_work_sync_96($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29;



implementation ldv_cancel_work_sync_96($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i1 := cancel_work_sync($p0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1702} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1703} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} disable_work_3($p0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 444513);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1706} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_3: ref;

axiom disable_work_3 == $sub.ref(0, 445545);

procedure disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29;



implementation disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.25;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i11 := $M.25;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.27;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i19 := $M.27;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.29;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i27 := $M.29;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.30;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1710} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.28;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.26;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.24;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 446577);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 447609);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.31, $M.33, $M.35, $M.37;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i2 := $M.31;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.33;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.35;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.37;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i16 := $M.38;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1716} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i12 := $M.36;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i8 := $M.34;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1714} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i4 := $M.32;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_destroy_workqueue_180: ref;

axiom ldv_destroy_workqueue_180 == $sub.ref(0, 448641);

procedure ldv_destroy_workqueue_180($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_180($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} destroy_workqueue($p0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} call_and_disable_all_3(2);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_181: ref;

axiom ldv_destroy_workqueue_181 == $sub.ref(0, 449673);

procedure ldv_destroy_workqueue_181($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_181($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} destroy_workqueue($p0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} call_and_disable_all_3(2);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_182: ref;

axiom ldv_del_timer_sync_182 == $sub.ref(0, 450705);

procedure ldv_del_timer_sync_182($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_del_timer_sync_182($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1722} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} disable_suitable_timer_6($p0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rsxx_cleanup_dma_queue: ref;

axiom rsxx_cleanup_dma_queue == $sub.ref(0, 451737);

procedure rsxx_cleanup_dma_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_cleanup_dma_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i29: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} {:cexpr "rsxx_cleanup_dma_queue:arg:done"} boogie_si_record_i32($i2);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := 0, $p8, $p4;
    goto $bb4;

  $bb4:
    call $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $i15, $p16, $p17, $i29 := rsxx_cleanup_dma_queue_loop_$bb4($p0, $i2, $i12, $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $i15, $p16, $p17, $i29);
    goto $bb4_last;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} list_del($p18);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i2, 1);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} rsxx_free_dma($p0, $p17);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i15, 1);
    call {:si_unique_call 1728} {:cexpr "cnt"} boogie_si_record_i32($i21);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i12);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i14 := $i29;
    goto $bb3;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i15, $p16, $p17 := $i21, $p24, $p16;
    goto $bb9_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} rsxx_complete_dma($p0, $p17, 4);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;
}



const rsxx_dma_cancel: ref;

axiom rsxx_dma_cancel == $sub.ref(0, 452769);

procedure rsxx_dma_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_dma_cancel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i17: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i28: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i39: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i50: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i61: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i72: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i83: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i94: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i105: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i116: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i127: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i138: i32;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i149: i32;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i160: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i171: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i182: i32;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i193: i32;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i204: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i215: i32;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $i225: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i226: i32;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i32;
  var $i237: i32;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i248: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i259: i32;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i64;
  var $i269: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $i275: i32;
  var $i270: i32;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $i280: i1;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $i281: i32;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $i291: i1;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i292: i32;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $i301: i64;
  var $i302: i1;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i303: i32;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $i314: i32;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $i323: i64;
  var $i324: i1;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $i325: i32;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i64;
  var $i335: i1;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i336: i32;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i32;
  var $i347: i32;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $i357: i1;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i32;
  var $i358: i32;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i368: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i369: i32;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $i379: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $i385: i32;
  var $i380: i32;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $i389: i64;
  var $i390: i1;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i32;
  var $i391: i32;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i64;
  var $i401: i1;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i402: i32;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $i411: i64;
  var $i412: i1;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $i413: i32;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i64;
  var $i423: i1;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i32;
  var $i424: i32;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i434: i1;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $i435: i32;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $i444: i64;
  var $i445: i1;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $i451: i32;
  var $i446: i32;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $i455: i64;
  var $i456: i1;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i32;
  var $i457: i32;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $i467: i1;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $i473: i32;
  var $i468: i32;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $i477: i64;
  var $i478: i1;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $i484: i32;
  var $i479: i32;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $i488: i64;
  var $i489: i1;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i490: i32;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $i506: i32;
  var $i501: i32;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i64;
  var $i511: i1;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $i517: i32;
  var $i512: i32;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $i521: i64;
  var $i522: i1;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $i528: i32;
  var $i523: i32;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $i532: i64;
  var $i533: i1;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $i539: i32;
  var $i534: i32;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $i550: i32;
  var $i545: i32;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $i554: i64;
  var $i555: i1;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $i561: i32;
  var $i556: i32;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $i565: i64;
  var $i566: i1;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $i572: i32;
  var $i567: i32;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $i576: i64;
  var $i577: i1;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $i583: i32;
  var $i578: i32;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $i587: i64;
  var $i588: i1;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i32;
  var $i589: i32;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $i598: i64;
  var $i599: i1;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $i605: i32;
  var $i600: i32;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $i609: i64;
  var $i610: i1;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $i616: i32;
  var $i611: i32;
  var $p617: ref;
  var $p618: ref;
  var $p619: ref;
  var $i620: i64;
  var $i621: i1;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $i627: i32;
  var $i622: i32;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i64;
  var $i632: i1;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i32;
  var $i633: i32;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $i642: i64;
  var $i643: i1;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $i649: i32;
  var $i644: i32;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $i653: i64;
  var $i654: i1;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $i660: i32;
  var $i655: i32;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $i664: i64;
  var $i665: i1;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i32;
  var $i666: i32;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $i675: i64;
  var $i676: i1;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i32;
  var $i677: i32;
  var $p683: ref;
  var $p684: ref;
  var $p685: ref;
  var $i686: i64;
  var $i687: i1;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $i693: i32;
  var $i688: i32;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $i697: i64;
  var $i698: i1;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $i704: i32;
  var $i699: i32;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $i708: i64;
  var $i709: i1;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $i715: i32;
  var $i710: i32;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $i719: i64;
  var $i720: i1;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $i726: i32;
  var $i721: i32;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $i730: i64;
  var $i731: i1;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $i737: i32;
  var $i732: i32;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i64;
  var $i742: i1;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $i748: i32;
  var $i743: i32;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $i752: i64;
  var $i753: i1;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $i759: i32;
  var $i754: i32;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $i763: i64;
  var $i764: i1;
  var $p767: ref;
  var $p768: ref;
  var $p769: ref;
  var $i770: i32;
  var $i765: i32;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $i774: i64;
  var $i775: i1;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $i781: i32;
  var $i776: i32;
  var $p782: ref;
  var $p783: ref;
  var $p784: ref;
  var $i785: i64;
  var $i786: i1;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $i792: i32;
  var $i787: i32;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i64;
  var $i797: i1;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $i803: i32;
  var $i798: i32;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $i807: i64;
  var $i808: i1;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $i814: i32;
  var $i809: i32;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $i818: i64;
  var $i819: i1;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $i825: i32;
  var $i820: i32;
  var $p826: ref;
  var $p827: ref;
  var $p828: ref;
  var $i829: i64;
  var $i830: i1;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $i836: i32;
  var $i831: i32;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $i840: i64;
  var $i841: i1;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $i847: i32;
  var $i842: i32;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $i851: i64;
  var $i852: i1;
  var $p855: ref;
  var $p856: ref;
  var $p857: ref;
  var $i858: i32;
  var $i853: i32;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $i862: i64;
  var $i863: i1;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $i869: i32;
  var $i864: i32;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $i874: i1;
  var $p877: ref;
  var $p878: ref;
  var $p879: ref;
  var $i880: i32;
  var $i875: i32;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $i884: i64;
  var $i885: i1;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $i891: i32;
  var $i886: i32;
  var $p892: ref;
  var $p893: ref;
  var $p894: ref;
  var $i895: i64;
  var $i896: i1;
  var $p899: ref;
  var $p900: ref;
  var $p901: ref;
  var $i902: i32;
  var $i897: i32;
  var $p903: ref;
  var $p904: ref;
  var $p905: ref;
  var $i906: i64;
  var $i907: i1;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $i913: i32;
  var $i908: i32;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $i917: i64;
  var $i918: i1;
  var $p921: ref;
  var $p922: ref;
  var $p923: ref;
  var $i924: i32;
  var $i919: i32;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $i928: i64;
  var $i929: i1;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $i935: i32;
  var $i930: i32;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $i939: i64;
  var $i940: i1;
  var $p943: ref;
  var $p944: ref;
  var $p945: ref;
  var $i946: i32;
  var $i941: i32;
  var $p947: ref;
  var $p948: ref;
  var $p949: ref;
  var $i950: i64;
  var $i951: i1;
  var $p954: ref;
  var $p955: ref;
  var $p956: ref;
  var $i957: i32;
  var $i952: i32;
  var $p958: ref;
  var $p959: ref;
  var $p960: ref;
  var $i961: i64;
  var $i962: i1;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $i968: i32;
  var $i963: i32;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $i972: i64;
  var $i973: i1;
  var $p976: ref;
  var $p977: ref;
  var $p978: ref;
  var $i979: i32;
  var $i974: i32;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $i983: i64;
  var $i984: i1;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $i990: i32;
  var $i985: i32;
  var $p991: ref;
  var $p992: ref;
  var $p993: ref;
  var $i994: i64;
  var $i995: i1;
  var $p998: ref;
  var $p999: ref;
  var $p1000: ref;
  var $i1001: i32;
  var $i996: i32;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $i1005: i64;
  var $i1006: i1;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $i1012: i32;
  var $i1007: i32;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i1016: i64;
  var $i1017: i1;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $i1023: i32;
  var $i1018: i32;
  var $p1024: ref;
  var $p1025: ref;
  var $p1026: ref;
  var $i1027: i64;
  var $i1028: i1;
  var $p1031: ref;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i32;
  var $i1029: i32;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $i1038: i64;
  var $i1039: i1;
  var $p1042: ref;
  var $p1043: ref;
  var $p1044: ref;
  var $i1045: i32;
  var $i1040: i32;
  var $p1046: ref;
  var $p1047: ref;
  var $p1048: ref;
  var $i1049: i64;
  var $i1050: i1;
  var $p1053: ref;
  var $p1054: ref;
  var $p1055: ref;
  var $i1056: i32;
  var $i1051: i32;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $i1060: i64;
  var $i1061: i1;
  var $p1064: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $i1067: i32;
  var $i1062: i32;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $i1071: i64;
  var $i1072: i1;
  var $p1075: ref;
  var $p1076: ref;
  var $p1077: ref;
  var $i1078: i32;
  var $i1073: i32;
  var $p1079: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $i1082: i64;
  var $i1083: i1;
  var $p1086: ref;
  var $p1087: ref;
  var $p1088: ref;
  var $i1089: i32;
  var $i1084: i32;
  var $p1090: ref;
  var $p1091: ref;
  var $p1092: ref;
  var $i1093: i64;
  var $i1094: i1;
  var $p1097: ref;
  var $p1098: ref;
  var $p1099: ref;
  var $i1100: i32;
  var $i1095: i32;
  var $p1101: ref;
  var $p1102: ref;
  var $p1103: ref;
  var $i1104: i64;
  var $i1105: i1;
  var $p1108: ref;
  var $p1109: ref;
  var $p1110: ref;
  var $i1111: i32;
  var $i1106: i32;
  var $p1112: ref;
  var $p1113: ref;
  var $p1114: ref;
  var $i1115: i64;
  var $i1116: i1;
  var $p1119: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $i1122: i32;
  var $i1117: i32;
  var $p1123: ref;
  var $p1124: ref;
  var $p1125: ref;
  var $i1126: i64;
  var $i1127: i1;
  var $p1130: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $i1133: i32;
  var $i1128: i32;
  var $p1134: ref;
  var $p1135: ref;
  var $p1136: ref;
  var $i1137: i64;
  var $i1138: i1;
  var $p1141: ref;
  var $p1142: ref;
  var $p1143: ref;
  var $i1144: i32;
  var $i1139: i32;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $i1148: i64;
  var $i1149: i1;
  var $p1152: ref;
  var $p1153: ref;
  var $p1154: ref;
  var $i1155: i32;
  var $i1150: i32;
  var $p1156: ref;
  var $p1157: ref;
  var $p1158: ref;
  var $i1159: i64;
  var $i1160: i1;
  var $p1163: ref;
  var $p1164: ref;
  var $p1165: ref;
  var $i1166: i32;
  var $i1161: i32;
  var $p1167: ref;
  var $p1168: ref;
  var $p1169: ref;
  var $i1170: i64;
  var $i1171: i1;
  var $p1174: ref;
  var $p1175: ref;
  var $p1176: ref;
  var $i1177: i32;
  var $i1172: i32;
  var $p1178: ref;
  var $p1179: ref;
  var $p1180: ref;
  var $i1181: i64;
  var $i1182: i1;
  var $p1185: ref;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i32;
  var $i1183: i32;
  var $p1189: ref;
  var $p1190: ref;
  var $p1191: ref;
  var $i1192: i64;
  var $i1193: i1;
  var $p1196: ref;
  var $p1197: ref;
  var $p1198: ref;
  var $i1199: i32;
  var $i1194: i32;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $i1203: i64;
  var $i1204: i1;
  var $p1207: ref;
  var $p1208: ref;
  var $p1209: ref;
  var $i1210: i32;
  var $i1205: i32;
  var $p1211: ref;
  var $p1212: ref;
  var $p1213: ref;
  var $i1214: i64;
  var $i1215: i1;
  var $p1218: ref;
  var $p1219: ref;
  var $p1220: ref;
  var $i1221: i32;
  var $i1216: i32;
  var $p1222: ref;
  var $p1223: ref;
  var $p1224: ref;
  var $i1225: i64;
  var $i1226: i1;
  var $p1229: ref;
  var $p1230: ref;
  var $p1231: ref;
  var $i1232: i32;
  var $i1227: i32;
  var $p1233: ref;
  var $p1234: ref;
  var $p1235: ref;
  var $i1236: i64;
  var $i1237: i1;
  var $p1240: ref;
  var $p1241: ref;
  var $p1242: ref;
  var $i1243: i32;
  var $i1238: i32;
  var $p1244: ref;
  var $p1245: ref;
  var $p1246: ref;
  var $i1247: i64;
  var $i1248: i1;
  var $p1251: ref;
  var $p1252: ref;
  var $p1253: ref;
  var $i1254: i32;
  var $i1249: i32;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $i1258: i64;
  var $i1259: i1;
  var $p1262: ref;
  var $p1263: ref;
  var $p1264: ref;
  var $i1265: i32;
  var $i1260: i32;
  var $p1266: ref;
  var $p1267: ref;
  var $p1268: ref;
  var $i1269: i64;
  var $i1270: i1;
  var $p1273: ref;
  var $p1274: ref;
  var $p1275: ref;
  var $i1276: i32;
  var $i1271: i32;
  var $p1277: ref;
  var $p1278: ref;
  var $p1279: ref;
  var $i1280: i64;
  var $i1281: i1;
  var $p1284: ref;
  var $p1285: ref;
  var $p1286: ref;
  var $i1287: i32;
  var $i1282: i32;
  var $p1288: ref;
  var $p1289: ref;
  var $p1290: ref;
  var $i1291: i64;
  var $i1292: i1;
  var $p1295: ref;
  var $p1296: ref;
  var $p1297: ref;
  var $i1298: i32;
  var $i1293: i32;
  var $p1299: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $i1302: i64;
  var $i1303: i1;
  var $p1306: ref;
  var $p1307: ref;
  var $p1308: ref;
  var $i1309: i32;
  var $i1304: i32;
  var $p1310: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $i1313: i64;
  var $i1314: i1;
  var $p1317: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $i1320: i32;
  var $i1315: i32;
  var $p1321: ref;
  var $p1322: ref;
  var $p1323: ref;
  var $i1324: i64;
  var $i1325: i1;
  var $p1328: ref;
  var $p1329: ref;
  var $p1330: ref;
  var $i1331: i32;
  var $i1326: i32;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $i1335: i64;
  var $i1336: i1;
  var $p1339: ref;
  var $p1340: ref;
  var $p1341: ref;
  var $i1342: i32;
  var $i1337: i32;
  var $p1343: ref;
  var $p1344: ref;
  var $p1345: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $p1350: ref;
  var $p1351: ref;
  var $p1352: ref;
  var $i1353: i32;
  var $i1348: i32;
  var $p1354: ref;
  var $p1355: ref;
  var $p1356: ref;
  var $i1357: i64;
  var $i1358: i1;
  var $p1361: ref;
  var $p1362: ref;
  var $p1363: ref;
  var $i1364: i32;
  var $i1359: i32;
  var $p1365: ref;
  var $p1366: ref;
  var $p1367: ref;
  var $i1368: i64;
  var $i1369: i1;
  var $p1372: ref;
  var $p1373: ref;
  var $p1374: ref;
  var $i1375: i32;
  var $i1370: i32;
  var $p1376: ref;
  var $p1377: ref;
  var $p1378: ref;
  var $i1379: i64;
  var $i1380: i1;
  var $p1383: ref;
  var $p1384: ref;
  var $p1385: ref;
  var $i1386: i32;
  var $i1381: i32;
  var $p1387: ref;
  var $p1388: ref;
  var $p1389: ref;
  var $i1390: i64;
  var $i1391: i1;
  var $p1394: ref;
  var $p1395: ref;
  var $p1396: ref;
  var $i1397: i32;
  var $i1392: i32;
  var $p1398: ref;
  var $p1399: ref;
  var $p1400: ref;
  var $i1401: i64;
  var $i1402: i1;
  var $p1405: ref;
  var $p1406: ref;
  var $p1407: ref;
  var $i1408: i32;
  var $i1403: i32;
  var $p1409: ref;
  var $p1410: ref;
  var $p1411: ref;
  var $i1412: i64;
  var $i1413: i1;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $i1419: i32;
  var $i1414: i32;
  var $p1420: ref;
  var $p1421: ref;
  var $p1422: ref;
  var $i1423: i64;
  var $i1424: i1;
  var $p1427: ref;
  var $p1428: ref;
  var $p1429: ref;
  var $i1430: i32;
  var $i1425: i32;
  var $p1431: ref;
  var $p1432: ref;
  var $p1433: ref;
  var $i1434: i64;
  var $i1435: i1;
  var $p1438: ref;
  var $p1439: ref;
  var $p1440: ref;
  var $i1441: i32;
  var $i1436: i32;
  var $p1442: ref;
  var $p1443: ref;
  var $p1444: ref;
  var $i1445: i64;
  var $i1446: i1;
  var $p1449: ref;
  var $p1450: ref;
  var $p1451: ref;
  var $i1452: i32;
  var $i1447: i32;
  var $p1453: ref;
  var $p1454: ref;
  var $p1455: ref;
  var $i1456: i64;
  var $i1457: i1;
  var $p1460: ref;
  var $p1461: ref;
  var $p1462: ref;
  var $i1463: i32;
  var $i1458: i32;
  var $p1464: ref;
  var $p1465: ref;
  var $p1466: ref;
  var $i1467: i64;
  var $i1468: i1;
  var $p1471: ref;
  var $p1472: ref;
  var $p1473: ref;
  var $i1474: i32;
  var $i1469: i32;
  var $p1475: ref;
  var $p1476: ref;
  var $p1477: ref;
  var $i1478: i64;
  var $i1479: i1;
  var $p1482: ref;
  var $p1483: ref;
  var $p1484: ref;
  var $i1485: i32;
  var $i1480: i32;
  var $p1486: ref;
  var $p1487: ref;
  var $p1488: ref;
  var $i1489: i64;
  var $i1490: i1;
  var $p1493: ref;
  var $p1494: ref;
  var $p1495: ref;
  var $i1496: i32;
  var $i1491: i32;
  var $p1497: ref;
  var $p1498: ref;
  var $p1499: ref;
  var $i1500: i64;
  var $i1501: i1;
  var $p1504: ref;
  var $p1505: ref;
  var $p1506: ref;
  var $i1507: i32;
  var $i1502: i32;
  var $p1508: ref;
  var $p1509: ref;
  var $p1510: ref;
  var $i1511: i64;
  var $i1512: i1;
  var $p1515: ref;
  var $p1516: ref;
  var $p1517: ref;
  var $i1518: i32;
  var $i1513: i32;
  var $p1519: ref;
  var $p1520: ref;
  var $p1521: ref;
  var $i1522: i64;
  var $i1523: i1;
  var $p1526: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $i1529: i32;
  var $i1524: i32;
  var $p1530: ref;
  var $p1531: ref;
  var $p1532: ref;
  var $i1533: i64;
  var $i1534: i1;
  var $p1537: ref;
  var $p1538: ref;
  var $p1539: ref;
  var $i1540: i32;
  var $i1535: i32;
  var $p1541: ref;
  var $p1542: ref;
  var $p1543: ref;
  var $i1544: i64;
  var $i1545: i1;
  var $p1548: ref;
  var $p1549: ref;
  var $p1550: ref;
  var $i1551: i32;
  var $i1546: i32;
  var $p1552: ref;
  var $p1553: ref;
  var $p1554: ref;
  var $i1555: i64;
  var $i1556: i1;
  var $p1559: ref;
  var $p1560: ref;
  var $p1561: ref;
  var $i1562: i32;
  var $i1557: i32;
  var $p1563: ref;
  var $p1564: ref;
  var $p1565: ref;
  var $i1566: i64;
  var $i1567: i1;
  var $p1570: ref;
  var $p1571: ref;
  var $p1572: ref;
  var $i1573: i32;
  var $i1568: i32;
  var $p1574: ref;
  var $p1575: ref;
  var $p1576: ref;
  var $i1577: i64;
  var $i1578: i1;
  var $p1581: ref;
  var $p1582: ref;
  var $p1583: ref;
  var $i1584: i32;
  var $i1579: i32;
  var $p1585: ref;
  var $p1586: ref;
  var $p1587: ref;
  var $i1588: i64;
  var $i1589: i1;
  var $p1592: ref;
  var $p1593: ref;
  var $p1594: ref;
  var $i1595: i32;
  var $i1590: i32;
  var $p1596: ref;
  var $p1597: ref;
  var $p1598: ref;
  var $i1599: i64;
  var $i1600: i1;
  var $p1603: ref;
  var $p1604: ref;
  var $p1605: ref;
  var $i1606: i32;
  var $i1601: i32;
  var $p1607: ref;
  var $p1608: ref;
  var $p1609: ref;
  var $i1610: i64;
  var $i1611: i1;
  var $p1614: ref;
  var $p1615: ref;
  var $p1616: ref;
  var $i1617: i32;
  var $i1612: i32;
  var $p1618: ref;
  var $p1619: ref;
  var $p1620: ref;
  var $i1621: i64;
  var $i1622: i1;
  var $p1625: ref;
  var $p1626: ref;
  var $p1627: ref;
  var $i1628: i32;
  var $i1623: i32;
  var $p1629: ref;
  var $p1630: ref;
  var $p1631: ref;
  var $i1632: i64;
  var $i1633: i1;
  var $p1636: ref;
  var $p1637: ref;
  var $p1638: ref;
  var $i1639: i32;
  var $i1634: i32;
  var $p1640: ref;
  var $p1641: ref;
  var $p1642: ref;
  var $i1643: i64;
  var $i1644: i1;
  var $p1647: ref;
  var $p1648: ref;
  var $p1649: ref;
  var $i1650: i32;
  var $i1645: i32;
  var $p1651: ref;
  var $p1652: ref;
  var $p1653: ref;
  var $i1654: i64;
  var $i1655: i1;
  var $p1658: ref;
  var $p1659: ref;
  var $p1660: ref;
  var $i1661: i32;
  var $i1656: i32;
  var $p1662: ref;
  var $p1663: ref;
  var $p1664: ref;
  var $i1665: i64;
  var $i1666: i1;
  var $p1669: ref;
  var $p1670: ref;
  var $p1671: ref;
  var $i1672: i32;
  var $i1667: i32;
  var $p1673: ref;
  var $p1674: ref;
  var $p1675: ref;
  var $i1676: i64;
  var $i1677: i1;
  var $p1680: ref;
  var $p1681: ref;
  var $p1682: ref;
  var $i1683: i32;
  var $i1678: i32;
  var $p1684: ref;
  var $p1685: ref;
  var $p1686: ref;
  var $i1687: i64;
  var $i1688: i1;
  var $p1691: ref;
  var $p1692: ref;
  var $p1693: ref;
  var $i1694: i32;
  var $i1689: i32;
  var $p1695: ref;
  var $p1696: ref;
  var $p1697: ref;
  var $i1698: i64;
  var $i1699: i1;
  var $p1702: ref;
  var $p1703: ref;
  var $p1704: ref;
  var $i1705: i32;
  var $i1700: i32;
  var $p1706: ref;
  var $p1707: ref;
  var $p1708: ref;
  var $i1709: i64;
  var $i1710: i1;
  var $p1713: ref;
  var $p1714: ref;
  var $p1715: ref;
  var $i1716: i32;
  var $i1711: i32;
  var $p1717: ref;
  var $p1718: ref;
  var $p1719: ref;
  var $i1720: i64;
  var $i1721: i1;
  var $p1724: ref;
  var $p1725: ref;
  var $p1726: ref;
  var $i1727: i32;
  var $i1722: i32;
  var $p1728: ref;
  var $p1729: ref;
  var $p1730: ref;
  var $i1731: i64;
  var $i1732: i1;
  var $p1735: ref;
  var $p1736: ref;
  var $p1737: ref;
  var $i1738: i32;
  var $i1733: i32;
  var $p1739: ref;
  var $p1740: ref;
  var $p1741: ref;
  var $i1742: i64;
  var $i1743: i1;
  var $p1746: ref;
  var $p1747: ref;
  var $p1748: ref;
  var $i1749: i32;
  var $i1744: i32;
  var $p1750: ref;
  var $p1751: ref;
  var $p1752: ref;
  var $i1753: i64;
  var $i1754: i1;
  var $p1757: ref;
  var $p1758: ref;
  var $p1759: ref;
  var $i1760: i32;
  var $i1755: i32;
  var $p1761: ref;
  var $p1762: ref;
  var $p1763: ref;
  var $i1764: i64;
  var $i1765: i1;
  var $p1768: ref;
  var $p1769: ref;
  var $p1770: ref;
  var $i1771: i32;
  var $i1766: i32;
  var $p1772: ref;
  var $p1773: ref;
  var $p1774: ref;
  var $i1775: i64;
  var $i1776: i1;
  var $p1779: ref;
  var $p1780: ref;
  var $p1781: ref;
  var $i1782: i32;
  var $i1777: i32;
  var $p1783: ref;
  var $p1784: ref;
  var $p1785: ref;
  var $i1786: i64;
  var $i1787: i1;
  var $p1790: ref;
  var $p1791: ref;
  var $p1792: ref;
  var $i1793: i32;
  var $i1788: i32;
  var $p1794: ref;
  var $p1795: ref;
  var $p1796: ref;
  var $i1797: i64;
  var $i1798: i1;
  var $p1801: ref;
  var $p1802: ref;
  var $p1803: ref;
  var $i1804: i32;
  var $i1799: i32;
  var $p1805: ref;
  var $p1806: ref;
  var $p1807: ref;
  var $i1808: i64;
  var $i1809: i1;
  var $p1812: ref;
  var $p1813: ref;
  var $p1814: ref;
  var $i1815: i32;
  var $i1810: i32;
  var $p1816: ref;
  var $p1817: ref;
  var $p1818: ref;
  var $i1819: i64;
  var $i1820: i1;
  var $p1823: ref;
  var $p1824: ref;
  var $p1825: ref;
  var $i1826: i32;
  var $i1821: i32;
  var $p1827: ref;
  var $p1828: ref;
  var $p1829: ref;
  var $i1830: i64;
  var $i1831: i1;
  var $p1834: ref;
  var $p1835: ref;
  var $p1836: ref;
  var $i1837: i32;
  var $i1832: i32;
  var $p1838: ref;
  var $p1839: ref;
  var $p1840: ref;
  var $i1841: i64;
  var $i1842: i1;
  var $p1845: ref;
  var $p1846: ref;
  var $p1847: ref;
  var $i1848: i32;
  var $i1843: i32;
  var $p1849: ref;
  var $p1850: ref;
  var $p1851: ref;
  var $i1852: i64;
  var $i1853: i1;
  var $p1856: ref;
  var $p1857: ref;
  var $p1858: ref;
  var $i1859: i32;
  var $i1854: i32;
  var $p1860: ref;
  var $p1861: ref;
  var $p1862: ref;
  var $i1863: i64;
  var $i1864: i1;
  var $p1867: ref;
  var $p1868: ref;
  var $p1869: ref;
  var $i1870: i32;
  var $i1865: i32;
  var $p1871: ref;
  var $p1872: ref;
  var $p1873: ref;
  var $i1874: i64;
  var $i1875: i1;
  var $p1878: ref;
  var $p1879: ref;
  var $p1880: ref;
  var $i1881: i32;
  var $i1876: i32;
  var $p1882: ref;
  var $p1883: ref;
  var $p1884: ref;
  var $i1885: i64;
  var $i1886: i1;
  var $p1889: ref;
  var $p1890: ref;
  var $p1891: ref;
  var $i1892: i32;
  var $i1887: i32;
  var $p1893: ref;
  var $p1894: ref;
  var $p1895: ref;
  var $i1896: i64;
  var $i1897: i1;
  var $p1900: ref;
  var $p1901: ref;
  var $p1902: ref;
  var $i1903: i32;
  var $i1898: i32;
  var $p1904: ref;
  var $p1905: ref;
  var $p1906: ref;
  var $i1907: i64;
  var $i1908: i1;
  var $p1911: ref;
  var $p1912: ref;
  var $p1913: ref;
  var $i1914: i32;
  var $i1909: i32;
  var $p1915: ref;
  var $p1916: ref;
  var $p1917: ref;
  var $i1918: i64;
  var $i1919: i1;
  var $p1922: ref;
  var $p1923: ref;
  var $p1924: ref;
  var $i1925: i32;
  var $i1920: i32;
  var $p1926: ref;
  var $p1927: ref;
  var $p1928: ref;
  var $i1929: i64;
  var $i1930: i1;
  var $p1933: ref;
  var $p1934: ref;
  var $p1935: ref;
  var $i1936: i32;
  var $i1931: i32;
  var $p1937: ref;
  var $p1938: ref;
  var $p1939: ref;
  var $i1940: i64;
  var $i1941: i1;
  var $p1944: ref;
  var $p1945: ref;
  var $p1946: ref;
  var $i1947: i32;
  var $i1942: i32;
  var $p1948: ref;
  var $p1949: ref;
  var $p1950: ref;
  var $i1951: i64;
  var $i1952: i1;
  var $p1955: ref;
  var $p1956: ref;
  var $p1957: ref;
  var $i1958: i32;
  var $i1953: i32;
  var $p1959: ref;
  var $p1960: ref;
  var $p1961: ref;
  var $i1962: i64;
  var $i1963: i1;
  var $p1966: ref;
  var $p1967: ref;
  var $p1968: ref;
  var $i1969: i32;
  var $i1964: i32;
  var $p1970: ref;
  var $p1971: ref;
  var $p1972: ref;
  var $i1973: i64;
  var $i1974: i1;
  var $p1977: ref;
  var $p1978: ref;
  var $p1979: ref;
  var $i1980: i32;
  var $i1975: i32;
  var $p1981: ref;
  var $p1982: ref;
  var $p1983: ref;
  var $i1984: i64;
  var $i1985: i1;
  var $p1988: ref;
  var $p1989: ref;
  var $p1990: ref;
  var $i1991: i32;
  var $i1986: i32;
  var $p1992: ref;
  var $p1993: ref;
  var $p1994: ref;
  var $i1995: i64;
  var $i1996: i1;
  var $p1999: ref;
  var $p2000: ref;
  var $p2001: ref;
  var $i2002: i32;
  var $i1997: i32;
  var $p2003: ref;
  var $p2004: ref;
  var $p2005: ref;
  var $i2006: i64;
  var $i2007: i1;
  var $p2010: ref;
  var $p2011: ref;
  var $p2012: ref;
  var $i2013: i32;
  var $i2008: i32;
  var $p2014: ref;
  var $p2015: ref;
  var $p2016: ref;
  var $i2017: i64;
  var $i2018: i1;
  var $p2021: ref;
  var $p2022: ref;
  var $p2023: ref;
  var $i2024: i32;
  var $i2019: i32;
  var $p2025: ref;
  var $p2026: ref;
  var $p2027: ref;
  var $i2028: i64;
  var $i2029: i1;
  var $p2032: ref;
  var $p2033: ref;
  var $p2034: ref;
  var $i2035: i32;
  var $i2030: i32;
  var $p2036: ref;
  var $p2037: ref;
  var $p2038: ref;
  var $i2039: i64;
  var $i2040: i1;
  var $p2043: ref;
  var $p2044: ref;
  var $p2045: ref;
  var $i2046: i32;
  var $i2041: i32;
  var $p2047: ref;
  var $p2048: ref;
  var $p2049: ref;
  var $i2050: i64;
  var $i2051: i1;
  var $p2054: ref;
  var $p2055: ref;
  var $p2056: ref;
  var $i2057: i32;
  var $i2052: i32;
  var $p2058: ref;
  var $p2059: ref;
  var $p2060: ref;
  var $i2061: i64;
  var $i2062: i1;
  var $p2065: ref;
  var $p2066: ref;
  var $p2067: ref;
  var $i2068: i32;
  var $i2063: i32;
  var $p2069: ref;
  var $p2070: ref;
  var $p2071: ref;
  var $i2072: i64;
  var $i2073: i1;
  var $p2076: ref;
  var $p2077: ref;
  var $p2078: ref;
  var $i2079: i32;
  var $i2074: i32;
  var $p2080: ref;
  var $p2081: ref;
  var $p2082: ref;
  var $i2083: i64;
  var $i2084: i1;
  var $p2087: ref;
  var $p2088: ref;
  var $p2089: ref;
  var $i2090: i32;
  var $i2085: i32;
  var $p2091: ref;
  var $p2092: ref;
  var $p2093: ref;
  var $i2094: i64;
  var $i2095: i1;
  var $p2098: ref;
  var $p2099: ref;
  var $p2100: ref;
  var $i2101: i32;
  var $i2096: i32;
  var $p2102: ref;
  var $p2103: ref;
  var $p2104: ref;
  var $i2105: i64;
  var $i2106: i1;
  var $p2109: ref;
  var $p2110: ref;
  var $p2111: ref;
  var $i2112: i32;
  var $i2107: i32;
  var $p2113: ref;
  var $p2114: ref;
  var $p2115: ref;
  var $i2116: i64;
  var $i2117: i1;
  var $p2120: ref;
  var $p2121: ref;
  var $p2122: ref;
  var $i2123: i32;
  var $i2118: i32;
  var $p2124: ref;
  var $p2125: ref;
  var $p2126: ref;
  var $i2127: i64;
  var $i2128: i1;
  var $p2131: ref;
  var $p2132: ref;
  var $p2133: ref;
  var $i2134: i32;
  var $i2129: i32;
  var $p2135: ref;
  var $p2136: ref;
  var $p2137: ref;
  var $i2138: i64;
  var $i2139: i1;
  var $p2142: ref;
  var $p2143: ref;
  var $p2144: ref;
  var $i2145: i32;
  var $i2140: i32;
  var $p2146: ref;
  var $p2147: ref;
  var $p2148: ref;
  var $i2149: i64;
  var $i2150: i1;
  var $p2153: ref;
  var $p2154: ref;
  var $p2155: ref;
  var $i2156: i32;
  var $i2151: i32;
  var $p2157: ref;
  var $p2158: ref;
  var $p2159: ref;
  var $i2160: i64;
  var $i2161: i1;
  var $p2164: ref;
  var $p2165: ref;
  var $p2166: ref;
  var $i2167: i32;
  var $i2162: i32;
  var $p2168: ref;
  var $p2169: ref;
  var $p2170: ref;
  var $i2171: i64;
  var $i2172: i1;
  var $p2175: ref;
  var $p2176: ref;
  var $p2177: ref;
  var $i2178: i32;
  var $i2173: i32;
  var $p2179: ref;
  var $p2180: ref;
  var $p2181: ref;
  var $i2182: i64;
  var $i2183: i1;
  var $p2186: ref;
  var $p2187: ref;
  var $p2188: ref;
  var $i2189: i32;
  var $i2184: i32;
  var $p2190: ref;
  var $p2191: ref;
  var $p2192: ref;
  var $i2193: i64;
  var $i2194: i1;
  var $p2197: ref;
  var $p2198: ref;
  var $p2199: ref;
  var $i2200: i32;
  var $i2195: i32;
  var $p2201: ref;
  var $p2202: ref;
  var $p2203: ref;
  var $i2204: i64;
  var $i2205: i1;
  var $p2208: ref;
  var $p2209: ref;
  var $p2210: ref;
  var $i2211: i32;
  var $i2206: i32;
  var $p2212: ref;
  var $p2213: ref;
  var $p2214: ref;
  var $i2215: i64;
  var $i2216: i1;
  var $p2219: ref;
  var $p2220: ref;
  var $p2221: ref;
  var $i2222: i32;
  var $i2217: i32;
  var $p2223: ref;
  var $p2224: ref;
  var $p2225: ref;
  var $i2226: i64;
  var $i2227: i1;
  var $p2230: ref;
  var $p2231: ref;
  var $p2232: ref;
  var $i2233: i32;
  var $i2228: i32;
  var $p2234: ref;
  var $p2235: ref;
  var $p2236: ref;
  var $i2237: i64;
  var $i2238: i1;
  var $p2241: ref;
  var $p2242: ref;
  var $p2243: ref;
  var $i2244: i32;
  var $i2239: i32;
  var $p2245: ref;
  var $p2246: ref;
  var $p2247: ref;
  var $i2248: i64;
  var $i2249: i1;
  var $p2252: ref;
  var $p2253: ref;
  var $p2254: ref;
  var $i2255: i32;
  var $i2250: i32;
  var $p2256: ref;
  var $p2257: ref;
  var $p2258: ref;
  var $i2259: i64;
  var $i2260: i1;
  var $p2263: ref;
  var $p2264: ref;
  var $p2265: ref;
  var $i2266: i32;
  var $i2261: i32;
  var $p2267: ref;
  var $p2268: ref;
  var $p2269: ref;
  var $i2270: i64;
  var $i2271: i1;
  var $p2274: ref;
  var $p2275: ref;
  var $p2276: ref;
  var $i2277: i32;
  var $i2272: i32;
  var $p2278: ref;
  var $p2279: ref;
  var $p2280: ref;
  var $i2281: i64;
  var $i2282: i1;
  var $p2285: ref;
  var $p2286: ref;
  var $p2287: ref;
  var $i2288: i32;
  var $i2283: i32;
  var $p2289: ref;
  var $p2290: ref;
  var $p2291: ref;
  var $i2292: i64;
  var $i2293: i1;
  var $p2296: ref;
  var $p2297: ref;
  var $p2298: ref;
  var $i2299: i32;
  var $i2294: i32;
  var $p2300: ref;
  var $p2301: ref;
  var $p2302: ref;
  var $i2303: i64;
  var $i2304: i1;
  var $p2307: ref;
  var $p2308: ref;
  var $p2309: ref;
  var $i2310: i32;
  var $i2305: i32;
  var $p2311: ref;
  var $p2312: ref;
  var $p2313: ref;
  var $i2314: i64;
  var $i2315: i1;
  var $p2318: ref;
  var $p2319: ref;
  var $p2320: ref;
  var $i2321: i32;
  var $i2316: i32;
  var $p2322: ref;
  var $p2323: ref;
  var $p2324: ref;
  var $i2325: i64;
  var $i2326: i1;
  var $p2329: ref;
  var $p2330: ref;
  var $p2331: ref;
  var $i2332: i32;
  var $i2327: i32;
  var $p2333: ref;
  var $p2334: ref;
  var $p2335: ref;
  var $i2336: i64;
  var $i2337: i1;
  var $p2340: ref;
  var $p2341: ref;
  var $p2342: ref;
  var $i2343: i32;
  var $i2338: i32;
  var $p2344: ref;
  var $p2345: ref;
  var $p2346: ref;
  var $i2347: i64;
  var $i2348: i1;
  var $p2351: ref;
  var $p2352: ref;
  var $p2353: ref;
  var $i2354: i32;
  var $i2349: i32;
  var $p2355: ref;
  var $p2356: ref;
  var $p2357: ref;
  var $i2358: i64;
  var $i2359: i1;
  var $p2362: ref;
  var $p2363: ref;
  var $p2364: ref;
  var $i2365: i32;
  var $i2360: i32;
  var $p2366: ref;
  var $p2367: ref;
  var $p2368: ref;
  var $i2369: i64;
  var $i2370: i1;
  var $p2373: ref;
  var $p2374: ref;
  var $p2375: ref;
  var $i2376: i32;
  var $i2371: i32;
  var $p2377: ref;
  var $p2378: ref;
  var $p2379: ref;
  var $i2380: i64;
  var $i2381: i1;
  var $p2384: ref;
  var $p2385: ref;
  var $p2386: ref;
  var $i2387: i32;
  var $i2382: i32;
  var $p2388: ref;
  var $p2389: ref;
  var $p2390: ref;
  var $i2391: i64;
  var $i2392: i1;
  var $p2395: ref;
  var $p2396: ref;
  var $p2397: ref;
  var $i2398: i32;
  var $i2393: i32;
  var $p2399: ref;
  var $p2400: ref;
  var $p2401: ref;
  var $i2402: i64;
  var $i2403: i1;
  var $p2406: ref;
  var $p2407: ref;
  var $p2408: ref;
  var $i2409: i32;
  var $i2404: i32;
  var $p2410: ref;
  var $p2411: ref;
  var $p2412: ref;
  var $i2413: i64;
  var $i2414: i1;
  var $p2417: ref;
  var $p2418: ref;
  var $p2419: ref;
  var $i2420: i32;
  var $i2415: i32;
  var $p2421: ref;
  var $p2422: ref;
  var $p2423: ref;
  var $i2424: i64;
  var $i2425: i1;
  var $p2428: ref;
  var $p2429: ref;
  var $p2430: ref;
  var $i2431: i32;
  var $i2426: i32;
  var $p2432: ref;
  var $p2433: ref;
  var $p2434: ref;
  var $i2435: i64;
  var $i2436: i1;
  var $p2439: ref;
  var $p2440: ref;
  var $p2441: ref;
  var $i2442: i32;
  var $i2437: i32;
  var $p2443: ref;
  var $p2444: ref;
  var $p2445: ref;
  var $i2446: i64;
  var $i2447: i1;
  var $p2450: ref;
  var $p2451: ref;
  var $p2452: ref;
  var $i2453: i32;
  var $i2448: i32;
  var $p2454: ref;
  var $p2455: ref;
  var $p2456: ref;
  var $i2457: i64;
  var $i2458: i1;
  var $p2461: ref;
  var $p2462: ref;
  var $p2463: ref;
  var $i2464: i32;
  var $i2459: i32;
  var $p2465: ref;
  var $p2466: ref;
  var $p2467: ref;
  var $i2468: i64;
  var $i2469: i1;
  var $p2472: ref;
  var $p2473: ref;
  var $p2474: ref;
  var $i2475: i32;
  var $i2470: i32;
  var $p2476: ref;
  var $p2477: ref;
  var $p2478: ref;
  var $i2479: i64;
  var $i2480: i1;
  var $p2483: ref;
  var $p2484: ref;
  var $p2485: ref;
  var $i2486: i32;
  var $i2481: i32;
  var $p2487: ref;
  var $p2488: ref;
  var $p2489: ref;
  var $i2490: i64;
  var $i2491: i1;
  var $p2494: ref;
  var $p2495: ref;
  var $p2496: ref;
  var $i2497: i32;
  var $i2492: i32;
  var $p2498: ref;
  var $p2499: ref;
  var $p2500: ref;
  var $i2501: i64;
  var $i2502: i1;
  var $p2505: ref;
  var $p2506: ref;
  var $p2507: ref;
  var $i2508: i32;
  var $i2503: i32;
  var $p2509: ref;
  var $p2510: ref;
  var $p2511: ref;
  var $i2512: i64;
  var $i2513: i1;
  var $p2516: ref;
  var $p2517: ref;
  var $p2518: ref;
  var $i2519: i32;
  var $i2514: i32;
  var $p2520: ref;
  var $p2521: ref;
  var $p2522: ref;
  var $i2523: i64;
  var $i2524: i1;
  var $p2527: ref;
  var $p2528: ref;
  var $p2529: ref;
  var $i2530: i32;
  var $i2525: i32;
  var $p2531: ref;
  var $p2532: ref;
  var $p2533: ref;
  var $i2534: i64;
  var $i2535: i1;
  var $p2538: ref;
  var $p2539: ref;
  var $p2540: ref;
  var $i2541: i32;
  var $i2536: i32;
  var $p2542: ref;
  var $p2543: ref;
  var $p2544: ref;
  var $i2545: i64;
  var $i2546: i1;
  var $p2549: ref;
  var $p2550: ref;
  var $p2551: ref;
  var $i2552: i32;
  var $i2547: i32;
  var $p2553: ref;
  var $p2554: ref;
  var $p2555: ref;
  var $i2556: i64;
  var $i2557: i1;
  var $p2560: ref;
  var $p2561: ref;
  var $p2562: ref;
  var $i2563: i32;
  var $i2558: i32;
  var $p2564: ref;
  var $p2565: ref;
  var $p2566: ref;
  var $i2567: i64;
  var $i2568: i1;
  var $p2571: ref;
  var $p2572: ref;
  var $p2573: ref;
  var $i2574: i32;
  var $i2569: i32;
  var $p2575: ref;
  var $p2576: ref;
  var $p2577: ref;
  var $i2578: i64;
  var $i2579: i1;
  var $p2582: ref;
  var $p2583: ref;
  var $p2584: ref;
  var $i2585: i32;
  var $i2580: i32;
  var $p2586: ref;
  var $p2587: ref;
  var $p2588: ref;
  var $i2589: i64;
  var $i2590: i1;
  var $p2593: ref;
  var $p2594: ref;
  var $p2595: ref;
  var $i2596: i32;
  var $i2591: i32;
  var $p2597: ref;
  var $p2598: ref;
  var $p2599: ref;
  var $i2600: i64;
  var $i2601: i1;
  var $p2604: ref;
  var $p2605: ref;
  var $p2606: ref;
  var $i2607: i32;
  var $i2602: i32;
  var $p2608: ref;
  var $p2609: ref;
  var $p2610: ref;
  var $i2611: i64;
  var $i2612: i1;
  var $p2615: ref;
  var $p2616: ref;
  var $p2617: ref;
  var $i2618: i32;
  var $i2613: i32;
  var $p2619: ref;
  var $p2620: ref;
  var $p2621: ref;
  var $i2622: i64;
  var $i2623: i1;
  var $p2626: ref;
  var $p2627: ref;
  var $p2628: ref;
  var $i2629: i32;
  var $i2624: i32;
  var $p2630: ref;
  var $p2631: ref;
  var $p2632: ref;
  var $i2633: i64;
  var $i2634: i1;
  var $p2637: ref;
  var $p2638: ref;
  var $p2639: ref;
  var $i2640: i32;
  var $i2635: i32;
  var $p2641: ref;
  var $p2642: ref;
  var $p2643: ref;
  var $i2644: i64;
  var $i2645: i1;
  var $p2648: ref;
  var $p2649: ref;
  var $p2650: ref;
  var $i2651: i32;
  var $i2646: i32;
  var $p2652: ref;
  var $p2653: ref;
  var $p2654: ref;
  var $i2655: i64;
  var $i2656: i1;
  var $p2659: ref;
  var $p2660: ref;
  var $p2661: ref;
  var $i2662: i32;
  var $i2657: i32;
  var $p2663: ref;
  var $p2664: ref;
  var $p2665: ref;
  var $i2666: i64;
  var $i2667: i1;
  var $p2670: ref;
  var $p2671: ref;
  var $p2672: ref;
  var $i2673: i32;
  var $i2668: i32;
  var $p2674: ref;
  var $p2675: ref;
  var $p2676: ref;
  var $i2677: i64;
  var $i2678: i1;
  var $p2681: ref;
  var $p2682: ref;
  var $p2683: ref;
  var $i2684: i32;
  var $i2679: i32;
  var $p2685: ref;
  var $p2686: ref;
  var $p2687: ref;
  var $i2688: i64;
  var $i2689: i1;
  var $p2692: ref;
  var $p2693: ref;
  var $p2694: ref;
  var $i2695: i32;
  var $i2690: i32;
  var $p2696: ref;
  var $p2697: ref;
  var $p2698: ref;
  var $i2699: i64;
  var $i2700: i1;
  var $p2703: ref;
  var $p2704: ref;
  var $p2705: ref;
  var $i2706: i32;
  var $i2701: i32;
  var $p2707: ref;
  var $p2708: ref;
  var $p2709: ref;
  var $i2710: i64;
  var $i2711: i1;
  var $p2714: ref;
  var $p2715: ref;
  var $p2716: ref;
  var $i2717: i32;
  var $i2712: i32;
  var $p2718: ref;
  var $p2719: ref;
  var $p2720: ref;
  var $i2721: i64;
  var $i2722: i1;
  var $p2725: ref;
  var $p2726: ref;
  var $p2727: ref;
  var $i2728: i32;
  var $i2723: i32;
  var $p2729: ref;
  var $p2730: ref;
  var $p2731: ref;
  var $i2732: i64;
  var $i2733: i1;
  var $p2736: ref;
  var $p2737: ref;
  var $p2738: ref;
  var $i2739: i32;
  var $i2734: i32;
  var $p2740: ref;
  var $p2741: ref;
  var $p2742: ref;
  var $i2743: i64;
  var $i2744: i1;
  var $p2747: ref;
  var $p2748: ref;
  var $p2749: ref;
  var $i2750: i32;
  var $i2745: i32;
  var $p2751: ref;
  var $p2752: ref;
  var $p2753: ref;
  var $i2754: i64;
  var $i2755: i1;
  var $p2758: ref;
  var $p2759: ref;
  var $p2760: ref;
  var $i2761: i32;
  var $i2756: i32;
  var $p2762: ref;
  var $p2763: ref;
  var $p2764: ref;
  var $i2765: i64;
  var $i2766: i1;
  var $p2769: ref;
  var $p2770: ref;
  var $p2771: ref;
  var $i2772: i32;
  var $i2767: i32;
  var $p2773: ref;
  var $p2774: ref;
  var $p2775: ref;
  var $i2776: i64;
  var $i2777: i1;
  var $p2780: ref;
  var $p2781: ref;
  var $p2782: ref;
  var $i2783: i32;
  var $i2778: i32;
  var $p2784: ref;
  var $p2785: ref;
  var $p2786: ref;
  var $i2787: i64;
  var $i2788: i1;
  var $p2791: ref;
  var $p2792: ref;
  var $p2793: ref;
  var $i2794: i32;
  var $i2789: i32;
  var $p2795: ref;
  var $p2796: ref;
  var $p2797: ref;
  var $i2798: i64;
  var $i2799: i1;
  var $p2801: ref;
  var $p2802: ref;
  var $p2803: ref;
  var $i2804: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $p3 := get_tracker_dma($p2, 0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $p14 := get_tracker_dma($p13, 1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p25 := get_tracker_dma($p24, 2);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i17;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p36 := get_tracker_dma($p35, 3);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i28;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $p47 := get_tracker_dma($p46, 4);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i39;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $p58 := get_tracker_dma($p57, 5);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i50;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p69 := get_tracker_dma($p68, 6);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i61;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $p80 := get_tracker_dma($p79, 7);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i72;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $p91 := get_tracker_dma($p90, 8);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $i83;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $p102 := get_tracker_dma($p101, 9);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i94;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p113 := get_tracker_dma($p112, 10);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $i105;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p124 := get_tracker_dma($p123, 11);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $i116;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p135 := get_tracker_dma($p134, 12);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i127;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $p146 := get_tracker_dma($p145, 13);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i149 := $i138;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $p157 := get_tracker_dma($p156, 14);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $i149;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $p168 := get_tracker_dma($p167, 15);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i171 := $i160;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $p179 := get_tracker_dma($p178, 16);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $i171;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $p190 := get_tracker_dma($p189, 17);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $i182;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $p201 := get_tracker_dma($p200, 18);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $i193;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $p212 := get_tracker_dma($p211, 19);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $i204;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p223 := get_tracker_dma($p222, 20);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i224 := $p2i.ref.i64($p223);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i225 := $ne.i64($i224, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $i215;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p234 := get_tracker_dma($p233, 21);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i235, 0);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i237 := $i226;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $p245 := get_tracker_dma($p244, 22);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p245);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i247 := $ne.i64($i246, 0);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    $i248 := $i237;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $p256 := get_tracker_dma($p255, 23);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    $i259 := $i248;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $p267 := get_tracker_dma($p266, 24);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i269 := $ne.i64($i268, 0);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $i259;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $p278 := get_tracker_dma($p277, 25);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i281 := $i270;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p289 := get_tracker_dma($p288, 26);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p289);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i291 := $ne.i64($i290, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    $i292 := $i281;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $p300 := get_tracker_dma($p299, 27);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i301 := $p2i.ref.i64($p300);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i302 := $ne.i64($i301, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $i292;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $p311 := get_tracker_dma($p310, 28);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    $i314 := $i303;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} $p322 := get_tracker_dma($p321, 29);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i324 := $ne.i64($i323, 0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $i314;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $p333 := get_tracker_dma($p332, 30);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i334 := $p2i.ref.i64($p333);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i335 := $ne.i64($i334, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    $i336 := $i325;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $p344 := get_tracker_dma($p343, 31);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i346 := $ne.i64($i345, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    $i347 := $i336;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.0, $p353);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $p355 := get_tracker_dma($p354, 32);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i356 := $p2i.ref.i64($p355);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i357 := $ne.i64($i356, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    $i358 := $i347;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $p366 := get_tracker_dma($p365, 33);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i367 := $p2i.ref.i64($p366);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i368 := $ne.i64($i367, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    $i369 := $i358;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $p377 := get_tracker_dma($p376, 34);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p377);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    $i380 := $i369;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} $p388 := get_tracker_dma($p387, 35);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i389 := $p2i.ref.i64($p388);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i390 := $ne.i64($i389, 0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    $i391 := $i380;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.0, $p397);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p399 := get_tracker_dma($p398, 36);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i400 := $p2i.ref.i64($p399);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i401 := $ne.i64($i400, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    $i402 := $i391;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.0, $p408);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $p410 := get_tracker_dma($p409, 37);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i412 := $ne.i64($i411, 0);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    $i413 := $i402;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.0, $p419);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p421 := get_tracker_dma($p420, 38);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p421);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i423 := $ne.i64($i422, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    $i424 := $i413;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $p432 := get_tracker_dma($p431, 39);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p432);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i434 := $ne.i64($i433, 0);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    $i435 := $i424;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $p443 := get_tracker_dma($p442, 40);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i444 := $p2i.ref.i64($p443);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i445 := $ne.i64($i444, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    $i446 := $i435;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.0, $p452);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $p454 := get_tracker_dma($p453, 41);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p454);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i456 := $ne.i64($i455, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    $i457 := $i446;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.0, $p463);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $p465 := get_tracker_dma($p464, 42);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i466 := $p2i.ref.i64($p465);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i467 := $ne.i64($i466, 0);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    $i468 := $i457;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p475 := $load.ref($M.0, $p474);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $p476 := get_tracker_dma($p475, 43);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i477 := $p2i.ref.i64($p476);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i478 := $ne.i64($i477, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i478} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    $i479 := $i468;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.0, $p485);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $p487 := get_tracker_dma($p486, 44);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i488 := $p2i.ref.i64($p487);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i489 := $ne.i64($i488, 0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    $i490 := $i479;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p498 := get_tracker_dma($p497, 45);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i500 := $ne.i64($i499, 0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    $i501 := $i490;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p507);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $p509 := get_tracker_dma($p508, 46);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i510 := $p2i.ref.i64($p509);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i511 := $ne.i64($i510, 0);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    $i512 := $i501;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.0, $p518);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $p520 := get_tracker_dma($p519, 47);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i521 := $p2i.ref.i64($p520);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i522 := $ne.i64($i521, 0);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    $i523 := $i512;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.0, $p529);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $p531 := get_tracker_dma($p530, 48);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i532 := $p2i.ref.i64($p531);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i533 := $ne.i64($i532, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    $i534 := $i523;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p541 := $load.ref($M.0, $p540);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $p542 := get_tracker_dma($p541, 49);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i543 := $p2i.ref.i64($p542);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i544 := $ne.i64($i543, 0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    $i545 := $i534;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p553 := get_tracker_dma($p552, 50);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i554 := $p2i.ref.i64($p553);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i555 := $ne.i64($i554, 0);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i555} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    $i556 := $i545;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.0, $p562);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p564 := get_tracker_dma($p563, 51);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i565 := $p2i.ref.i64($p564);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i566 := $ne.i64($i565, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    $i567 := $i556;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p574 := $load.ref($M.0, $p573);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $p575 := get_tracker_dma($p574, 52);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i576 := $p2i.ref.i64($p575);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i577 := $ne.i64($i576, 0);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i577} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    $i578 := $i567;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p585 := $load.ref($M.0, $p584);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $p586 := get_tracker_dma($p585, 53);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p586);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i588 := $ne.i64($i587, 0);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    $i589 := $i578;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.0, $p595);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $p597 := get_tracker_dma($p596, 54);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i598 := $p2i.ref.i64($p597);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i599 := $ne.i64($i598, 0);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i599 == 1);
    assume {:verifier.code 0} true;
    $i600 := $i589;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p607 := $load.ref($M.0, $p606);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $p608 := get_tracker_dma($p607, 55);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i609 := $p2i.ref.i64($p608);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i610 := $ne.i64($i609, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i610} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    $i611 := $i600;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.0, $p617);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $p619 := get_tracker_dma($p618, 56);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i620 := $p2i.ref.i64($p619);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i621 := $ne.i64($i620, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    $i622 := $i611;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.0, $p628);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p630 := get_tracker_dma($p629, 57);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i631 := $p2i.ref.i64($p630);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i632 := $ne.i64($i631, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i632 == 1);
    assume {:verifier.code 0} true;
    $i633 := $i622;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p640 := $load.ref($M.0, $p639);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p641 := get_tracker_dma($p640, 58);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i642 := $p2i.ref.i64($p641);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i643 := $ne.i64($i642, 0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i643} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    $i644 := $i633;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p651 := $load.ref($M.0, $p650);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $p652 := get_tracker_dma($p651, 59);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i653 := $p2i.ref.i64($p652);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i654 := $ne.i64($i653, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i654} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    $i655 := $i644;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p662 := $load.ref($M.0, $p661);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p663 := get_tracker_dma($p662, 60);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i664 := $p2i.ref.i64($p663);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i665 := $ne.i64($i664, 0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i665 == 1);
    assume {:verifier.code 0} true;
    $i666 := $i655;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.0, $p672);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $p674 := get_tracker_dma($p673, 61);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i675 := $p2i.ref.i64($p674);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i676 := $ne.i64($i675, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i676} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    $i677 := $i666;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p684 := $load.ref($M.0, $p683);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p685 := get_tracker_dma($p684, 62);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i686 := $p2i.ref.i64($p685);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i687 := $ne.i64($i686, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    $i688 := $i677;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p695 := $load.ref($M.0, $p694);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $p696 := get_tracker_dma($p695, 63);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i697 := $p2i.ref.i64($p696);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i698 := $ne.i64($i697, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    $i699 := $i688;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p706 := $load.ref($M.0, $p705);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $p707 := get_tracker_dma($p706, 64);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i708 := $p2i.ref.i64($p707);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i709 := $ne.i64($i708, 0);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    $i710 := $i699;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p717 := $load.ref($M.0, $p716);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $p718 := get_tracker_dma($p717, 65);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i719 := $p2i.ref.i64($p718);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i720 := $ne.i64($i719, 0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    $i721 := $i710;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p728 := $load.ref($M.0, $p727);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $p729 := get_tracker_dma($p728, 66);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i731 := $ne.i64($i730, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    $i732 := $i721;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p739 := $load.ref($M.0, $p738);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $p740 := get_tracker_dma($p739, 67);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i741 := $p2i.ref.i64($p740);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i742 := $ne.i64($i741, 0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    $i743 := $i732;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.0, $p749);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $p751 := get_tracker_dma($p750, 68);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i752 := $p2i.ref.i64($p751);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i753 := $ne.i64($i752, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    $i754 := $i743;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p761 := $load.ref($M.0, $p760);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $p762 := get_tracker_dma($p761, 69);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i763 := $p2i.ref.i64($p762);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i764 := $ne.i64($i763, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    $i765 := $i754;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $p773 := get_tracker_dma($p772, 70);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i774 := $p2i.ref.i64($p773);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i775 := $ne.i64($i774, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i775} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    $i776 := $i765;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p783 := $load.ref($M.0, $p782);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $p784 := get_tracker_dma($p783, 71);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i785 := $p2i.ref.i64($p784);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i786 := $ne.i64($i785, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i786} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    $i787 := $i776;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $p793);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $p795 := get_tracker_dma($p794, 72);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i796 := $p2i.ref.i64($p795);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i797 := $ne.i64($i796, 0);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i797} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i797 == 1);
    assume {:verifier.code 0} true;
    $i798 := $i787;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p805 := $load.ref($M.0, $p804);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $p806 := get_tracker_dma($p805, 73);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i807 := $p2i.ref.i64($p806);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i808 := $ne.i64($i807, 0);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i808} true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i808 == 1);
    assume {:verifier.code 0} true;
    $i809 := $i798;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p816 := $load.ref($M.0, $p815);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $p817 := get_tracker_dma($p816, 74);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i818 := $p2i.ref.i64($p817);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i819 := $ne.i64($i818, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    $i820 := $i809;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.0, $p826);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $p828 := get_tracker_dma($p827, 75);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i829 := $p2i.ref.i64($p828);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i830 := $ne.i64($i829, 0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    $i831 := $i820;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.0, $p837);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $p839 := get_tracker_dma($p838, 76);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i840 := $p2i.ref.i64($p839);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i841 := $ne.i64($i840, 0);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i841} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i841 == 1);
    assume {:verifier.code 0} true;
    $i842 := $i831;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p849 := $load.ref($M.0, $p848);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $p850 := get_tracker_dma($p849, 77);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i851 := $p2i.ref.i64($p850);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i852 := $ne.i64($i851, 0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i852} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i852 == 1);
    assume {:verifier.code 0} true;
    $i853 := $i842;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p860 := $load.ref($M.0, $p859);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $p861 := get_tracker_dma($p860, 78);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i862 := $p2i.ref.i64($p861);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i863 := $ne.i64($i862, 0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i863 == 1);
    assume {:verifier.code 0} true;
    $i864 := $i853;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p871 := $load.ref($M.0, $p870);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $p872 := get_tracker_dma($p871, 79);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i873 := $p2i.ref.i64($p872);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i874 := $ne.i64($i873, 0);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    $i875 := $i864;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.0, $p881);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $p883 := get_tracker_dma($p882, 80);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i884 := $p2i.ref.i64($p883);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i885 := $ne.i64($i884, 0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i885 == 1);
    assume {:verifier.code 0} true;
    $i886 := $i875;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p893 := $load.ref($M.0, $p892);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p894 := get_tracker_dma($p893, 81);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i895 := $p2i.ref.i64($p894);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i896 := $ne.i64($i895, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    $i897 := $i886;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p904 := $load.ref($M.0, $p903);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $p905 := get_tracker_dma($p904, 82);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i906 := $p2i.ref.i64($p905);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i907 := $ne.i64($i906, 0);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i907} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    $i908 := $i897;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p915 := $load.ref($M.0, $p914);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p916 := get_tracker_dma($p915, 83);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i917 := $p2i.ref.i64($p916);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i918 := $ne.i64($i917, 0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i918} true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    $i919 := $i908;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $p927 := get_tracker_dma($p926, 84);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i928 := $p2i.ref.i64($p927);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i929 := $ne.i64($i928, 0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i929 == 1);
    assume {:verifier.code 0} true;
    $i930 := $i919;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p937 := $load.ref($M.0, $p936);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p938 := get_tracker_dma($p937, 85);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i939 := $p2i.ref.i64($p938);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i940 := $ne.i64($i939, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i940} true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i940 == 1);
    assume {:verifier.code 0} true;
    $i941 := $i930;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p948 := $load.ref($M.0, $p947);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p949 := get_tracker_dma($p948, 86);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i950 := $p2i.ref.i64($p949);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i951 := $ne.i64($i950, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i951} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i951 == 1);
    assume {:verifier.code 0} true;
    $i952 := $i941;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p958 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p959 := $load.ref($M.0, $p958);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $p960 := get_tracker_dma($p959, 87);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i961 := $p2i.ref.i64($p960);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i962 := $ne.i64($i961, 0);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i962} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i962 == 1);
    assume {:verifier.code 0} true;
    $i963 := $i952;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p970 := $load.ref($M.0, $p969);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $p971 := get_tracker_dma($p970, 88);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i972 := $p2i.ref.i64($p971);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i973 := $ne.i64($i972, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i973} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i973 == 1);
    assume {:verifier.code 0} true;
    $i974 := $i963;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.0, $p980);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} $p982 := get_tracker_dma($p981, 89);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i983 := $p2i.ref.i64($p982);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i984 := $ne.i64($i983, 0);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i984} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i984 == 1);
    assume {:verifier.code 0} true;
    $i985 := $i974;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p991 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p992 := $load.ref($M.0, $p991);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p993 := get_tracker_dma($p992, 90);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i994 := $p2i.ref.i64($p993);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i995 := $ne.i64($i994, 0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i995} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i995 == 1);
    assume {:verifier.code 0} true;
    $i996 := $i985;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p1003 := $load.ref($M.0, $p1002);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p1004 := get_tracker_dma($p1003, 91);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i1005 := $p2i.ref.i64($p1004);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i1006 := $ne.i64($i1005, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1006} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i1006 == 1);
    assume {:verifier.code 0} true;
    $i1007 := $i996;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p1014 := $load.ref($M.0, $p1013);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $p1015 := get_tracker_dma($p1014, 92);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i1016 := $p2i.ref.i64($p1015);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i1017 := $ne.i64($i1016, 0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1017} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i1017 == 1);
    assume {:verifier.code 0} true;
    $i1018 := $i1007;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p1024 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p1025 := $load.ref($M.0, $p1024);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $p1026 := get_tracker_dma($p1025, 93);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i1027 := $p2i.ref.i64($p1026);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i1028 := $ne.i64($i1027, 0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1028} true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i1028 == 1);
    assume {:verifier.code 0} true;
    $i1029 := $i1018;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p1036 := $load.ref($M.0, $p1035);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $p1037 := get_tracker_dma($p1036, 94);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i1038 := $p2i.ref.i64($p1037);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i1039 := $ne.i64($i1038, 0);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1039} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i1039 == 1);
    assume {:verifier.code 0} true;
    $i1040 := $i1029;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p1047 := $load.ref($M.0, $p1046);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p1048 := get_tracker_dma($p1047, 95);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i1049 := $p2i.ref.i64($p1048);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i1050 := $ne.i64($i1049, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1050} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    $i1051 := $i1040;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p1058 := $load.ref($M.0, $p1057);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $p1059 := get_tracker_dma($p1058, 96);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i1060 := $p2i.ref.i64($p1059);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i1061 := $ne.i64($i1060, 0);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1061} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i1061 == 1);
    assume {:verifier.code 0} true;
    $i1062 := $i1051;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p1069 := $load.ref($M.0, $p1068);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $p1070 := get_tracker_dma($p1069, 97);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i1071 := $p2i.ref.i64($p1070);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i1072 := $ne.i64($i1071, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1072} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i1072 == 1);
    assume {:verifier.code 0} true;
    $i1073 := $i1062;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p1080 := $load.ref($M.0, $p1079);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $p1081 := get_tracker_dma($p1080, 98);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i1082 := $p2i.ref.i64($p1081);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i1083 := $ne.i64($i1082, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1083} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i1083 == 1);
    assume {:verifier.code 0} true;
    $i1084 := $i1073;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p1090 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p1091 := $load.ref($M.0, $p1090);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $p1092 := get_tracker_dma($p1091, 99);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i1093 := $p2i.ref.i64($p1092);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i1094 := $ne.i64($i1093, 0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1094} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i1094 == 1);
    assume {:verifier.code 0} true;
    $i1095 := $i1084;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p1102 := $load.ref($M.0, $p1101);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $p1103 := get_tracker_dma($p1102, 100);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i1104 := $p2i.ref.i64($p1103);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i1105 := $ne.i64($i1104, 0);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1105} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i1105 == 1);
    assume {:verifier.code 0} true;
    $i1106 := $i1095;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p1112 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p1113 := $load.ref($M.0, $p1112);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} $p1114 := get_tracker_dma($p1113, 101);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i1115 := $p2i.ref.i64($p1114);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i1116 := $ne.i64($i1115, 0);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1116} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i1116 == 1);
    assume {:verifier.code 0} true;
    $i1117 := $i1106;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p1123 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p1124 := $load.ref($M.0, $p1123);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $p1125 := get_tracker_dma($p1124, 102);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i1126 := $p2i.ref.i64($p1125);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i1127 := $ne.i64($i1126, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    $i1128 := $i1117;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p1134 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p1135 := $load.ref($M.0, $p1134);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} $p1136 := get_tracker_dma($p1135, 103);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i1137 := $p2i.ref.i64($p1136);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i1138 := $ne.i64($i1137, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1138} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i1138 == 1);
    assume {:verifier.code 0} true;
    $i1139 := $i1128;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p1145 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p1146 := $load.ref($M.0, $p1145);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $p1147 := get_tracker_dma($p1146, 104);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i1148 := $p2i.ref.i64($p1147);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i1149 := $ne.i64($i1148, 0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1149} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i1149 == 1);
    assume {:verifier.code 0} true;
    $i1150 := $i1139;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p1157 := $load.ref($M.0, $p1156);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $p1158 := get_tracker_dma($p1157, 105);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i1159 := $p2i.ref.i64($p1158);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i1160 := $ne.i64($i1159, 0);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1160} true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i1160 == 1);
    assume {:verifier.code 0} true;
    $i1161 := $i1150;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p1167 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p1168 := $load.ref($M.0, $p1167);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $p1169 := get_tracker_dma($p1168, 106);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i1170 := $p2i.ref.i64($p1169);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i1171 := $ne.i64($i1170, 0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1171} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i1171 == 1);
    assume {:verifier.code 0} true;
    $i1172 := $i1161;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p1178 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p1179 := $load.ref($M.0, $p1178);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p1180 := get_tracker_dma($p1179, 107);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i1181 := $p2i.ref.i64($p1180);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i1182 := $ne.i64($i1181, 0);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1182} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i1182 == 1);
    assume {:verifier.code 0} true;
    $i1183 := $i1172;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p1189 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p1190 := $load.ref($M.0, $p1189);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $p1191 := get_tracker_dma($p1190, 108);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i1192 := $p2i.ref.i64($p1191);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i1193 := $ne.i64($i1192, 0);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1193} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i1193 == 1);
    assume {:verifier.code 0} true;
    $i1194 := $i1183;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p1201 := $load.ref($M.0, $p1200);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $p1202 := get_tracker_dma($p1201, 109);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i1203 := $p2i.ref.i64($p1202);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i1204 := $ne.i64($i1203, 0);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1204} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i1204 == 1);
    assume {:verifier.code 0} true;
    $i1205 := $i1194;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.0, $p1211);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $p1213 := get_tracker_dma($p1212, 110);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i1214 := $p2i.ref.i64($p1213);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i1215 := $ne.i64($i1214, 0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1215} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i1215 == 1);
    assume {:verifier.code 0} true;
    $i1216 := $i1205;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p1222 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p1223 := $load.ref($M.0, $p1222);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $p1224 := get_tracker_dma($p1223, 111);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i1225 := $p2i.ref.i64($p1224);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i1226 := $ne.i64($i1225, 0);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1226} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i1226 == 1);
    assume {:verifier.code 0} true;
    $i1227 := $i1216;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p1234 := $load.ref($M.0, $p1233);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $p1235 := get_tracker_dma($p1234, 112);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i1236 := $p2i.ref.i64($p1235);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i1237 := $ne.i64($i1236, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1237} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i1237 == 1);
    assume {:verifier.code 0} true;
    $i1238 := $i1227;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p1245 := $load.ref($M.0, $p1244);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $p1246 := get_tracker_dma($p1245, 113);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i1247 := $p2i.ref.i64($p1246);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i1248 := $ne.i64($i1247, 0);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1248} true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i1248 == 1);
    assume {:verifier.code 0} true;
    $i1249 := $i1238;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p1255 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p1256 := $load.ref($M.0, $p1255);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $p1257 := get_tracker_dma($p1256, 114);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i1258 := $p2i.ref.i64($p1257);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i1259 := $ne.i64($i1258, 0);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1259} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i1259 == 1);
    assume {:verifier.code 0} true;
    $i1260 := $i1249;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p1267 := $load.ref($M.0, $p1266);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $p1268 := get_tracker_dma($p1267, 115);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i1269 := $p2i.ref.i64($p1268);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i1270 := $ne.i64($i1269, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1270} true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i1270 == 1);
    assume {:verifier.code 0} true;
    $i1271 := $i1260;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p1277 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p1278 := $load.ref($M.0, $p1277);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $p1279 := get_tracker_dma($p1278, 116);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i1280 := $p2i.ref.i64($p1279);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i1281 := $ne.i64($i1280, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1281} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i1281 == 1);
    assume {:verifier.code 0} true;
    $i1282 := $i1271;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p1289 := $load.ref($M.0, $p1288);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $p1290 := get_tracker_dma($p1289, 117);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i1291 := $p2i.ref.i64($p1290);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i1292 := $ne.i64($i1291, 0);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1292} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i1292 == 1);
    assume {:verifier.code 0} true;
    $i1293 := $i1282;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p1300 := $load.ref($M.0, $p1299);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $p1301 := get_tracker_dma($p1300, 118);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i1302 := $p2i.ref.i64($p1301);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i1303 := $ne.i64($i1302, 0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1303} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i1303 == 1);
    assume {:verifier.code 0} true;
    $i1304 := $i1293;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p1311 := $load.ref($M.0, $p1310);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $p1312 := get_tracker_dma($p1311, 119);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i1313 := $p2i.ref.i64($p1312);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i1314 := $ne.i64($i1313, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1314} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i1314 == 1);
    assume {:verifier.code 0} true;
    $i1315 := $i1304;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p1322 := $load.ref($M.0, $p1321);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $p1323 := get_tracker_dma($p1322, 120);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i1324 := $p2i.ref.i64($p1323);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i1325 := $ne.i64($i1324, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1325} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i1325 == 1);
    assume {:verifier.code 0} true;
    $i1326 := $i1315;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p1332 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p1333 := $load.ref($M.0, $p1332);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $p1334 := get_tracker_dma($p1333, 121);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i1335 := $p2i.ref.i64($p1334);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i1336 := $ne.i64($i1335, 0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1336} true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i1336 == 1);
    assume {:verifier.code 0} true;
    $i1337 := $i1326;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p1343 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p1344 := $load.ref($M.0, $p1343);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} $p1345 := get_tracker_dma($p1344, 122);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1345);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i1347 := $ne.i64($i1346, 0);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1347} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i1347 == 1);
    assume {:verifier.code 0} true;
    $i1348 := $i1337;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p1354 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p1355 := $load.ref($M.0, $p1354);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} $p1356 := get_tracker_dma($p1355, 123);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i1357 := $p2i.ref.i64($p1356);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i1358 := $ne.i64($i1357, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1358} true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i1358 == 1);
    assume {:verifier.code 0} true;
    $i1359 := $i1348;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p1366 := $load.ref($M.0, $p1365);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $p1367 := get_tracker_dma($p1366, 124);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i1368 := $p2i.ref.i64($p1367);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i1369 := $ne.i64($i1368, 0);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1369} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i1369 == 1);
    assume {:verifier.code 0} true;
    $i1370 := $i1359;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p1377 := $load.ref($M.0, $p1376);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $p1378 := get_tracker_dma($p1377, 125);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i1379 := $p2i.ref.i64($p1378);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i1380 := $ne.i64($i1379, 0);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1380} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i1380 == 1);
    assume {:verifier.code 0} true;
    $i1381 := $i1370;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p1387 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p1388 := $load.ref($M.0, $p1387);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p1389 := get_tracker_dma($p1388, 126);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i1390 := $p2i.ref.i64($p1389);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i1391 := $ne.i64($i1390, 0);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1391} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i1391 == 1);
    assume {:verifier.code 0} true;
    $i1392 := $i1381;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p1398 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p1399 := $load.ref($M.0, $p1398);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $p1400 := get_tracker_dma($p1399, 127);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i1401 := $p2i.ref.i64($p1400);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i1402 := $ne.i64($i1401, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1402} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i1402 == 1);
    assume {:verifier.code 0} true;
    $i1403 := $i1392;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p1409 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p1410 := $load.ref($M.0, $p1409);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $p1411 := get_tracker_dma($p1410, 128);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i1412 := $p2i.ref.i64($p1411);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i1413 := $ne.i64($i1412, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1413} true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i1413 == 1);
    assume {:verifier.code 0} true;
    $i1414 := $i1403;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    $p1420 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p1421 := $load.ref($M.0, $p1420);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p1422 := get_tracker_dma($p1421, 129);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i1423 := $p2i.ref.i64($p1422);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i1424 := $ne.i64($i1423, 0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1424} true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i1424 == 1);
    assume {:verifier.code 0} true;
    $i1425 := $i1414;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p1432 := $load.ref($M.0, $p1431);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $p1433 := get_tracker_dma($p1432, 130);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i1434 := $p2i.ref.i64($p1433);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i1435 := $ne.i64($i1434, 0);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1435} true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i1435 == 1);
    assume {:verifier.code 0} true;
    $i1436 := $i1425;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $p1442 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p1443 := $load.ref($M.0, $p1442);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $p1444 := get_tracker_dma($p1443, 131);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i1445 := $p2i.ref.i64($p1444);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i1446 := $ne.i64($i1445, 0);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1446} true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i1446 == 1);
    assume {:verifier.code 0} true;
    $i1447 := $i1436;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p1453 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p1454 := $load.ref($M.0, $p1453);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $p1455 := get_tracker_dma($p1454, 132);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i1456 := $p2i.ref.i64($p1455);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i1457 := $ne.i64($i1456, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1457} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i1457 == 1);
    assume {:verifier.code 0} true;
    $i1458 := $i1447;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    $p1464 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p1465 := $load.ref($M.0, $p1464);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $p1466 := get_tracker_dma($p1465, 133);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i1467 := $p2i.ref.i64($p1466);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i1468 := $ne.i64($i1467, 0);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1468} true;
    goto $bb536, $bb537;

  $bb537:
    assume !($i1468 == 1);
    assume {:verifier.code 0} true;
    $i1469 := $i1458;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p1475 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p1476 := $load.ref($M.0, $p1475);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} $p1477 := get_tracker_dma($p1476, 134);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i1478 := $p2i.ref.i64($p1477);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i1479 := $ne.i64($i1478, 0);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1479} true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i1479 == 1);
    assume {:verifier.code 0} true;
    $i1480 := $i1469;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    $p1486 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p1487 := $load.ref($M.0, $p1486);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $p1488 := get_tracker_dma($p1487, 135);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i1489 := $p2i.ref.i64($p1488);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i1490 := $ne.i64($i1489, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1490} true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i1490 == 1);
    assume {:verifier.code 0} true;
    $i1491 := $i1480;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p1498 := $load.ref($M.0, $p1497);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $p1499 := get_tracker_dma($p1498, 136);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i1500 := $p2i.ref.i64($p1499);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i1501 := $ne.i64($i1500, 0);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1501} true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i1501 == 1);
    assume {:verifier.code 0} true;
    $i1502 := $i1491;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $p1508 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p1509 := $load.ref($M.0, $p1508);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $p1510 := get_tracker_dma($p1509, 137);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i1511 := $p2i.ref.i64($p1510);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i1512 := $ne.i64($i1511, 0);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1512} true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i1512 == 1);
    assume {:verifier.code 0} true;
    $i1513 := $i1502;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p1520 := $load.ref($M.0, $p1519);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $p1521 := get_tracker_dma($p1520, 138);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i1522 := $p2i.ref.i64($p1521);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i1523 := $ne.i64($i1522, 0);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1523} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i1523 == 1);
    assume {:verifier.code 0} true;
    $i1524 := $i1513;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p1530 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p1531 := $load.ref($M.0, $p1530);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $p1532 := get_tracker_dma($p1531, 139);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i1533 := $p2i.ref.i64($p1532);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i1534 := $ne.i64($i1533, 0);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1534} true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i1534 == 1);
    assume {:verifier.code 0} true;
    $i1535 := $i1524;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p1542 := $load.ref($M.0, $p1541);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $p1543 := get_tracker_dma($p1542, 140);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i1544 := $p2i.ref.i64($p1543);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i1545 := $ne.i64($i1544, 0);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1545} true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i1545 == 1);
    assume {:verifier.code 0} true;
    $i1546 := $i1535;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p1552 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p1553 := $load.ref($M.0, $p1552);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} $p1554 := get_tracker_dma($p1553, 141);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i1555 := $p2i.ref.i64($p1554);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i1556 := $ne.i64($i1555, 0);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1556} true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i1556 == 1);
    assume {:verifier.code 0} true;
    $i1557 := $i1546;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p1563 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p1564 := $load.ref($M.0, $p1563);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p1565 := get_tracker_dma($p1564, 142);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i1566 := $p2i.ref.i64($p1565);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i1567 := $ne.i64($i1566, 0);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1567} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i1567 == 1);
    assume {:verifier.code 0} true;
    $i1568 := $i1557;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $p1574 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p1575 := $load.ref($M.0, $p1574);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} $p1576 := get_tracker_dma($p1575, 143);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i1577 := $p2i.ref.i64($p1576);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i1578 := $ne.i64($i1577, 0);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1578} true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i1578 == 1);
    assume {:verifier.code 0} true;
    $i1579 := $i1568;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p1585 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p1586 := $load.ref($M.0, $p1585);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} $p1587 := get_tracker_dma($p1586, 144);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i1588 := $p2i.ref.i64($p1587);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i1589 := $ne.i64($i1588, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1589} true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i1589 == 1);
    assume {:verifier.code 0} true;
    $i1590 := $i1579;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    $p1596 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p1597 := $load.ref($M.0, $p1596);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $p1598 := get_tracker_dma($p1597, 145);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i1599 := $p2i.ref.i64($p1598);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i1600 := $ne.i64($i1599, 0);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1600} true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i1600 == 1);
    assume {:verifier.code 0} true;
    $i1601 := $i1590;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p1607 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p1608 := $load.ref($M.0, $p1607);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} $p1609 := get_tracker_dma($p1608, 146);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i1610 := $p2i.ref.i64($p1609);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i1611 := $ne.i64($i1610, 0);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1611} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i1611 == 1);
    assume {:verifier.code 0} true;
    $i1612 := $i1601;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    $p1618 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p1619 := $load.ref($M.0, $p1618);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $p1620 := get_tracker_dma($p1619, 147);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i1621 := $p2i.ref.i64($p1620);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i1622 := $ne.i64($i1621, 0);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1622} true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i1622 == 1);
    assume {:verifier.code 0} true;
    $i1623 := $i1612;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p1629 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p1630 := $load.ref($M.0, $p1629);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $p1631 := get_tracker_dma($p1630, 148);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i1632 := $p2i.ref.i64($p1631);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i1633 := $ne.i64($i1632, 0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1633} true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i1633 == 1);
    assume {:verifier.code 0} true;
    $i1634 := $i1623;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    $p1640 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p1641 := $load.ref($M.0, $p1640);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} $p1642 := get_tracker_dma($p1641, 149);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i1643 := $p2i.ref.i64($p1642);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i1644 := $ne.i64($i1643, 0);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1644} true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i1644 == 1);
    assume {:verifier.code 0} true;
    $i1645 := $i1634;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1651 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p1652 := $load.ref($M.0, $p1651);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} $p1653 := get_tracker_dma($p1652, 150);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i1654 := $p2i.ref.i64($p1653);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i1655 := $ne.i64($i1654, 0);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1655} true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i1655 == 1);
    assume {:verifier.code 0} true;
    $i1656 := $i1645;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p1662 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p1663 := $load.ref($M.0, $p1662);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} $p1664 := get_tracker_dma($p1663, 151);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i1665 := $p2i.ref.i64($p1664);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i1666 := $ne.i64($i1665, 0);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1666} true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i1666 == 1);
    assume {:verifier.code 0} true;
    $i1667 := $i1656;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p1673 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p1674 := $load.ref($M.0, $p1673);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} $p1675 := get_tracker_dma($p1674, 152);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i1676 := $p2i.ref.i64($p1675);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i1677 := $ne.i64($i1676, 0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1677} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i1677 == 1);
    assume {:verifier.code 0} true;
    $i1678 := $i1667;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    $p1684 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p1685 := $load.ref($M.0, $p1684);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $p1686 := get_tracker_dma($p1685, 153);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i1687 := $p2i.ref.i64($p1686);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i1688 := $ne.i64($i1687, 0);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1688} true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i1688 == 1);
    assume {:verifier.code 0} true;
    $i1689 := $i1678;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    $p1695 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p1696 := $load.ref($M.0, $p1695);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $p1697 := get_tracker_dma($p1696, 154);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i1698 := $p2i.ref.i64($p1697);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i1699 := $ne.i64($i1698, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1699} true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i1699 == 1);
    assume {:verifier.code 0} true;
    $i1700 := $i1689;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    $p1706 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $p1707 := $load.ref($M.0, $p1706);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} $p1708 := get_tracker_dma($p1707, 155);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i1709 := $p2i.ref.i64($p1708);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i1710 := $ne.i64($i1709, 0);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1710} true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i1710 == 1);
    assume {:verifier.code 0} true;
    $i1711 := $i1700;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p1717 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p1718 := $load.ref($M.0, $p1717);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} $p1719 := get_tracker_dma($p1718, 156);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i1720 := $p2i.ref.i64($p1719);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i1721 := $ne.i64($i1720, 0);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1721} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i1721 == 1);
    assume {:verifier.code 0} true;
    $i1722 := $i1711;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $p1728 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p1729 := $load.ref($M.0, $p1728);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $p1730 := get_tracker_dma($p1729, 157);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i1731 := $p2i.ref.i64($p1730);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i1732 := $ne.i64($i1731, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1732} true;
    goto $bb632, $bb633;

  $bb633:
    assume !($i1732 == 1);
    assume {:verifier.code 0} true;
    $i1733 := $i1722;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $p1739 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $p1740 := $load.ref($M.0, $p1739);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} $p1741 := get_tracker_dma($p1740, 158);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i1742 := $p2i.ref.i64($p1741);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i1743 := $ne.i64($i1742, 0);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1743} true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i1743 == 1);
    assume {:verifier.code 0} true;
    $i1744 := $i1733;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $p1750 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p1751 := $load.ref($M.0, $p1750);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} $p1752 := get_tracker_dma($p1751, 159);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i1753 := $p2i.ref.i64($p1752);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i1754 := $ne.i64($i1753, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1754} true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i1754 == 1);
    assume {:verifier.code 0} true;
    $i1755 := $i1744;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p1761 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p1762 := $load.ref($M.0, $p1761);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $p1763 := get_tracker_dma($p1762, 160);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i1764 := $p2i.ref.i64($p1763);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i1765 := $ne.i64($i1764, 0);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1765} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i1765 == 1);
    assume {:verifier.code 0} true;
    $i1766 := $i1755;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    $p1772 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p1773 := $load.ref($M.0, $p1772);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $p1774 := get_tracker_dma($p1773, 161);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i1775 := $p2i.ref.i64($p1774);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i1776 := $ne.i64($i1775, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1776} true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i1776 == 1);
    assume {:verifier.code 0} true;
    $i1777 := $i1766;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1783 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p1784 := $load.ref($M.0, $p1783);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $p1785 := get_tracker_dma($p1784, 162);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i1786 := $p2i.ref.i64($p1785);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i1787 := $ne.i64($i1786, 0);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1787} true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i1787 == 1);
    assume {:verifier.code 0} true;
    $i1788 := $i1777;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $p1794 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p1795 := $load.ref($M.0, $p1794);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} $p1796 := get_tracker_dma($p1795, 163);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i1797 := $p2i.ref.i64($p1796);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i1798 := $ne.i64($i1797, 0);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1798} true;
    goto $bb656, $bb657;

  $bb657:
    assume !($i1798 == 1);
    assume {:verifier.code 0} true;
    $i1799 := $i1788;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    $p1805 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p1806 := $load.ref($M.0, $p1805);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p1807 := get_tracker_dma($p1806, 164);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i1808 := $p2i.ref.i64($p1807);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i1809 := $ne.i64($i1808, 0);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1809} true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i1809 == 1);
    assume {:verifier.code 0} true;
    $i1810 := $i1799;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $p1816 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p1817 := $load.ref($M.0, $p1816);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $p1818 := get_tracker_dma($p1817, 165);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i1819 := $p2i.ref.i64($p1818);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i1820 := $ne.i64($i1819, 0);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1820} true;
    goto $bb664, $bb665;

  $bb665:
    assume !($i1820 == 1);
    assume {:verifier.code 0} true;
    $i1821 := $i1810;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p1827 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p1828 := $load.ref($M.0, $p1827);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} $p1829 := get_tracker_dma($p1828, 166);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i1830 := $p2i.ref.i64($p1829);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i1831 := $ne.i64($i1830, 0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1831} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i1831 == 1);
    assume {:verifier.code 0} true;
    $i1832 := $i1821;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $p1838 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p1839 := $load.ref($M.0, $p1838);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} $p1840 := get_tracker_dma($p1839, 167);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i1841 := $p2i.ref.i64($p1840);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i1842 := $ne.i64($i1841, 0);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1842} true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i1842 == 1);
    assume {:verifier.code 0} true;
    $i1843 := $i1832;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p1849 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p1850 := $load.ref($M.0, $p1849);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p1851 := get_tracker_dma($p1850, 168);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i1852 := $p2i.ref.i64($p1851);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i1853 := $ne.i64($i1852, 0);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1853} true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i1853 == 1);
    assume {:verifier.code 0} true;
    $i1854 := $i1843;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p1860 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p1861 := $load.ref($M.0, $p1860);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $p1862 := get_tracker_dma($p1861, 169);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i1863 := $p2i.ref.i64($p1862);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i1864 := $ne.i64($i1863, 0);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1864} true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i1864 == 1);
    assume {:verifier.code 0} true;
    $i1865 := $i1854;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    $p1871 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p1872 := $load.ref($M.0, $p1871);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $p1873 := get_tracker_dma($p1872, 170);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i1874 := $p2i.ref.i64($p1873);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i1875 := $ne.i64($i1874, 0);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1875} true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i1875 == 1);
    assume {:verifier.code 0} true;
    $i1876 := $i1865;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    $p1882 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p1883 := $load.ref($M.0, $p1882);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p1884 := get_tracker_dma($p1883, 171);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i1885 := $p2i.ref.i64($p1884);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i1886 := $ne.i64($i1885, 0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1886} true;
    goto $bb688, $bb689;

  $bb689:
    assume !($i1886 == 1);
    assume {:verifier.code 0} true;
    $i1887 := $i1876;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p1893 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p1894 := $load.ref($M.0, $p1893);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} $p1895 := get_tracker_dma($p1894, 172);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i1896 := $p2i.ref.i64($p1895);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i1897 := $ne.i64($i1896, 0);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1897} true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i1897 == 1);
    assume {:verifier.code 0} true;
    $i1898 := $i1887;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    $p1904 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p1905 := $load.ref($M.0, $p1904);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $p1906 := get_tracker_dma($p1905, 173);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i1907 := $p2i.ref.i64($p1906);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i1908 := $ne.i64($i1907, 0);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1908} true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i1908 == 1);
    assume {:verifier.code 0} true;
    $i1909 := $i1898;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p1915 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p1916 := $load.ref($M.0, $p1915);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p1917 := get_tracker_dma($p1916, 174);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i1918 := $p2i.ref.i64($p1917);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i1919 := $ne.i64($i1918, 0);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1919} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i1919 == 1);
    assume {:verifier.code 0} true;
    $i1920 := $i1909;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    $p1926 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p1927 := $load.ref($M.0, $p1926);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $p1928 := get_tracker_dma($p1927, 175);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i1929 := $p2i.ref.i64($p1928);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i1930 := $ne.i64($i1929, 0);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1930} true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i1930 == 1);
    assume {:verifier.code 0} true;
    $i1931 := $i1920;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    $p1937 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p1938 := $load.ref($M.0, $p1937);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $p1939 := get_tracker_dma($p1938, 176);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i1940 := $p2i.ref.i64($p1939);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i1941 := $ne.i64($i1940, 0);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1941} true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i1941 == 1);
    assume {:verifier.code 0} true;
    $i1942 := $i1931;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    $p1948 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p1949 := $load.ref($M.0, $p1948);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $p1950 := get_tracker_dma($p1949, 177);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i1951 := $p2i.ref.i64($p1950);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i1952 := $ne.i64($i1951, 0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1952} true;
    goto $bb712, $bb713;

  $bb713:
    assume !($i1952 == 1);
    assume {:verifier.code 0} true;
    $i1953 := $i1942;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p1959 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p1960 := $load.ref($M.0, $p1959);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $p1961 := get_tracker_dma($p1960, 178);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i1962 := $p2i.ref.i64($p1961);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i1963 := $ne.i64($i1962, 0);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1963} true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i1963 == 1);
    assume {:verifier.code 0} true;
    $i1964 := $i1953;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $p1970 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p1971 := $load.ref($M.0, $p1970);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $p1972 := get_tracker_dma($p1971, 179);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i1973 := $p2i.ref.i64($p1972);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i1974 := $ne.i64($i1973, 0);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1974} true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i1974 == 1);
    assume {:verifier.code 0} true;
    $i1975 := $i1964;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p1981 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p1982 := $load.ref($M.0, $p1981);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $p1983 := get_tracker_dma($p1982, 180);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i1984 := $p2i.ref.i64($p1983);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i1985 := $ne.i64($i1984, 0);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1985} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i1985 == 1);
    assume {:verifier.code 0} true;
    $i1986 := $i1975;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    $p1992 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p1993 := $load.ref($M.0, $p1992);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $p1994 := get_tracker_dma($p1993, 181);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i1995 := $p2i.ref.i64($p1994);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i1996 := $ne.i64($i1995, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1996} true;
    goto $bb728, $bb729;

  $bb729:
    assume !($i1996 == 1);
    assume {:verifier.code 0} true;
    $i1997 := $i1986;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p2003 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p2004 := $load.ref($M.0, $p2003);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $p2005 := get_tracker_dma($p2004, 182);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i2006 := $p2i.ref.i64($p2005);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i2007 := $ne.i64($i2006, 0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2007} true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i2007 == 1);
    assume {:verifier.code 0} true;
    $i2008 := $i1997;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $p2014 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p2015 := $load.ref($M.0, $p2014);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} $p2016 := get_tracker_dma($p2015, 183);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i2017 := $p2i.ref.i64($p2016);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i2018 := $ne.i64($i2017, 0);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2018} true;
    goto $bb736, $bb737;

  $bb737:
    assume !($i2018 == 1);
    assume {:verifier.code 0} true;
    $i2019 := $i2008;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p2025 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p2026 := $load.ref($M.0, $p2025);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} $p2027 := get_tracker_dma($p2026, 184);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i2028 := $p2i.ref.i64($p2027);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i2029 := $ne.i64($i2028, 0);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2029} true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i2029 == 1);
    assume {:verifier.code 0} true;
    $i2030 := $i2019;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    $p2036 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p2037 := $load.ref($M.0, $p2036);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $p2038 := get_tracker_dma($p2037, 185);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i2039 := $p2i.ref.i64($p2038);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i2040 := $ne.i64($i2039, 0);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2040} true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i2040 == 1);
    assume {:verifier.code 0} true;
    $i2041 := $i2030;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p2047 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p2048 := $load.ref($M.0, $p2047);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $p2049 := get_tracker_dma($p2048, 186);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i2050 := $p2i.ref.i64($p2049);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i2051 := $ne.i64($i2050, 0);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2051} true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i2051 == 1);
    assume {:verifier.code 0} true;
    $i2052 := $i2041;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    $p2058 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p2059 := $load.ref($M.0, $p2058);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $p2060 := get_tracker_dma($p2059, 187);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i2061 := $p2i.ref.i64($p2060);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i2062 := $ne.i64($i2061, 0);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2062} true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i2062 == 1);
    assume {:verifier.code 0} true;
    $i2063 := $i2052;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $p2069 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p2070 := $load.ref($M.0, $p2069);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $p2071 := get_tracker_dma($p2070, 188);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i2072 := $p2i.ref.i64($p2071);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i2073 := $ne.i64($i2072, 0);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2073} true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i2073 == 1);
    assume {:verifier.code 0} true;
    $i2074 := $i2063;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    $p2080 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p2081 := $load.ref($M.0, $p2080);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $p2082 := get_tracker_dma($p2081, 189);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i2083 := $p2i.ref.i64($p2082);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i2084 := $ne.i64($i2083, 0);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2084} true;
    goto $bb760, $bb761;

  $bb761:
    assume !($i2084 == 1);
    assume {:verifier.code 0} true;
    $i2085 := $i2074;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $p2091 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p2092 := $load.ref($M.0, $p2091);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $p2093 := get_tracker_dma($p2092, 190);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i2094 := $p2i.ref.i64($p2093);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i2095 := $ne.i64($i2094, 0);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2095} true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i2095 == 1);
    assume {:verifier.code 0} true;
    $i2096 := $i2085;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    $p2102 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p2103 := $load.ref($M.0, $p2102);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $p2104 := get_tracker_dma($p2103, 191);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i2105 := $p2i.ref.i64($p2104);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i2106 := $ne.i64($i2105, 0);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2106} true;
    goto $bb768, $bb769;

  $bb769:
    assume !($i2106 == 1);
    assume {:verifier.code 0} true;
    $i2107 := $i2096;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p2113 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p2114 := $load.ref($M.0, $p2113);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $p2115 := get_tracker_dma($p2114, 192);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i2116 := $p2i.ref.i64($p2115);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i2117 := $ne.i64($i2116, 0);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2117} true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i2117 == 1);
    assume {:verifier.code 0} true;
    $i2118 := $i2107;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    $p2124 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p2125 := $load.ref($M.0, $p2124);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $p2126 := get_tracker_dma($p2125, 193);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i2127 := $p2i.ref.i64($p2126);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i2128 := $ne.i64($i2127, 0);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2128} true;
    goto $bb776, $bb777;

  $bb777:
    assume !($i2128 == 1);
    assume {:verifier.code 0} true;
    $i2129 := $i2118;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    $p2135 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p2136 := $load.ref($M.0, $p2135);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $p2137 := get_tracker_dma($p2136, 194);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i2138 := $p2i.ref.i64($p2137);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i2139 := $ne.i64($i2138, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2139} true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i2139 == 1);
    assume {:verifier.code 0} true;
    $i2140 := $i2129;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    $p2146 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p2147 := $load.ref($M.0, $p2146);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $p2148 := get_tracker_dma($p2147, 195);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i2149 := $p2i.ref.i64($p2148);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i2150 := $ne.i64($i2149, 0);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2150} true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i2150 == 1);
    assume {:verifier.code 0} true;
    $i2151 := $i2140;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $p2157 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p2158 := $load.ref($M.0, $p2157);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $p2159 := get_tracker_dma($p2158, 196);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i2160 := $p2i.ref.i64($p2159);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i2161 := $ne.i64($i2160, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2161} true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i2161 == 1);
    assume {:verifier.code 0} true;
    $i2162 := $i2151;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    $p2168 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p2169 := $load.ref($M.0, $p2168);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $p2170 := get_tracker_dma($p2169, 197);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i2171 := $p2i.ref.i64($p2170);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i2172 := $ne.i64($i2171, 0);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2172} true;
    goto $bb792, $bb793;

  $bb793:
    assume !($i2172 == 1);
    assume {:verifier.code 0} true;
    $i2173 := $i2162;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $p2179 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p2180 := $load.ref($M.0, $p2179);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} $p2181 := get_tracker_dma($p2180, 198);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i2182 := $p2i.ref.i64($p2181);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $i2183 := $ne.i64($i2182, 0);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2183} true;
    goto $bb796, $bb797;

  $bb797:
    assume !($i2183 == 1);
    assume {:verifier.code 0} true;
    $i2184 := $i2173;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    $p2190 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p2191 := $load.ref($M.0, $p2190);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $p2192 := get_tracker_dma($p2191, 199);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i2193 := $p2i.ref.i64($p2192);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i2194 := $ne.i64($i2193, 0);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2194} true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i2194 == 1);
    assume {:verifier.code 0} true;
    $i2195 := $i2184;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $p2201 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p2202 := $load.ref($M.0, $p2201);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} $p2203 := get_tracker_dma($p2202, 200);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i2204 := $p2i.ref.i64($p2203);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i2205 := $ne.i64($i2204, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2205} true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i2205 == 1);
    assume {:verifier.code 0} true;
    $i2206 := $i2195;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    $p2212 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p2213 := $load.ref($M.0, $p2212);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} $p2214 := get_tracker_dma($p2213, 201);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i2215 := $p2i.ref.i64($p2214);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i2216 := $ne.i64($i2215, 0);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2216} true;
    goto $bb808, $bb809;

  $bb809:
    assume !($i2216 == 1);
    assume {:verifier.code 0} true;
    $i2217 := $i2206;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    $p2223 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p2224 := $load.ref($M.0, $p2223);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $p2225 := get_tracker_dma($p2224, 202);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i2226 := $p2i.ref.i64($p2225);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i2227 := $ne.i64($i2226, 0);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2227} true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i2227 == 1);
    assume {:verifier.code 0} true;
    $i2228 := $i2217;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    $p2234 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p2235 := $load.ref($M.0, $p2234);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $p2236 := get_tracker_dma($p2235, 203);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i2237 := $p2i.ref.i64($p2236);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i2238 := $ne.i64($i2237, 0);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2238} true;
    goto $bb816, $bb817;

  $bb817:
    assume !($i2238 == 1);
    assume {:verifier.code 0} true;
    $i2239 := $i2228;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    $p2245 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p2246 := $load.ref($M.0, $p2245);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} $p2247 := get_tracker_dma($p2246, 204);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i2248 := $p2i.ref.i64($p2247);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i2249 := $ne.i64($i2248, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2249} true;
    goto $bb820, $bb821;

  $bb821:
    assume !($i2249 == 1);
    assume {:verifier.code 0} true;
    $i2250 := $i2239;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    $p2256 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p2257 := $load.ref($M.0, $p2256);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} $p2258 := get_tracker_dma($p2257, 205);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i2259 := $p2i.ref.i64($p2258);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i2260 := $ne.i64($i2259, 0);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2260} true;
    goto $bb824, $bb825;

  $bb825:
    assume !($i2260 == 1);
    assume {:verifier.code 0} true;
    $i2261 := $i2250;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    $p2267 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p2268 := $load.ref($M.0, $p2267);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} $p2269 := get_tracker_dma($p2268, 206);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i2270 := $p2i.ref.i64($p2269);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i2271 := $ne.i64($i2270, 0);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2271} true;
    goto $bb828, $bb829;

  $bb829:
    assume !($i2271 == 1);
    assume {:verifier.code 0} true;
    $i2272 := $i2261;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    $p2278 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p2279 := $load.ref($M.0, $p2278);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $p2280 := get_tracker_dma($p2279, 207);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i2281 := $p2i.ref.i64($p2280);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i2282 := $ne.i64($i2281, 0);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2282} true;
    goto $bb832, $bb833;

  $bb833:
    assume !($i2282 == 1);
    assume {:verifier.code 0} true;
    $i2283 := $i2272;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    $p2289 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $p2290 := $load.ref($M.0, $p2289);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $p2291 := get_tracker_dma($p2290, 208);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i2292 := $p2i.ref.i64($p2291);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i2293 := $ne.i64($i2292, 0);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2293} true;
    goto $bb836, $bb837;

  $bb837:
    assume !($i2293 == 1);
    assume {:verifier.code 0} true;
    $i2294 := $i2283;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    $p2300 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p2301 := $load.ref($M.0, $p2300);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $p2302 := get_tracker_dma($p2301, 209);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i2303 := $p2i.ref.i64($p2302);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i2304 := $ne.i64($i2303, 0);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2304} true;
    goto $bb840, $bb841;

  $bb841:
    assume !($i2304 == 1);
    assume {:verifier.code 0} true;
    $i2305 := $i2294;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    $p2311 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p2312 := $load.ref($M.0, $p2311);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $p2313 := get_tracker_dma($p2312, 210);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i2314 := $p2i.ref.i64($p2313);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i2315 := $ne.i64($i2314, 0);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2315} true;
    goto $bb844, $bb845;

  $bb845:
    assume !($i2315 == 1);
    assume {:verifier.code 0} true;
    $i2316 := $i2305;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    $p2322 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p2323 := $load.ref($M.0, $p2322);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $p2324 := get_tracker_dma($p2323, 211);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i2325 := $p2i.ref.i64($p2324);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i2326 := $ne.i64($i2325, 0);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2326} true;
    goto $bb848, $bb849;

  $bb849:
    assume !($i2326 == 1);
    assume {:verifier.code 0} true;
    $i2327 := $i2316;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    $p2333 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p2334 := $load.ref($M.0, $p2333);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $p2335 := get_tracker_dma($p2334, 212);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i2336 := $p2i.ref.i64($p2335);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i2337 := $ne.i64($i2336, 0);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2337} true;
    goto $bb852, $bb853;

  $bb853:
    assume !($i2337 == 1);
    assume {:verifier.code 0} true;
    $i2338 := $i2327;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    $p2344 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p2345 := $load.ref($M.0, $p2344);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $p2346 := get_tracker_dma($p2345, 213);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i2347 := $p2i.ref.i64($p2346);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i2348 := $ne.i64($i2347, 0);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2348} true;
    goto $bb856, $bb857;

  $bb857:
    assume !($i2348 == 1);
    assume {:verifier.code 0} true;
    $i2349 := $i2338;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    $p2355 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p2356 := $load.ref($M.0, $p2355);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $p2357 := get_tracker_dma($p2356, 214);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i2358 := $p2i.ref.i64($p2357);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i2359 := $ne.i64($i2358, 0);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2359} true;
    goto $bb860, $bb861;

  $bb861:
    assume !($i2359 == 1);
    assume {:verifier.code 0} true;
    $i2360 := $i2349;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    $p2366 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p2367 := $load.ref($M.0, $p2366);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $p2368 := get_tracker_dma($p2367, 215);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i2369 := $p2i.ref.i64($p2368);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i2370 := $ne.i64($i2369, 0);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2370} true;
    goto $bb864, $bb865;

  $bb865:
    assume !($i2370 == 1);
    assume {:verifier.code 0} true;
    $i2371 := $i2360;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    $p2377 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p2378 := $load.ref($M.0, $p2377);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $p2379 := get_tracker_dma($p2378, 216);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i2380 := $p2i.ref.i64($p2379);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i2381 := $ne.i64($i2380, 0);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2381} true;
    goto $bb868, $bb869;

  $bb869:
    assume !($i2381 == 1);
    assume {:verifier.code 0} true;
    $i2382 := $i2371;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    $p2388 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p2389 := $load.ref($M.0, $p2388);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} $p2390 := get_tracker_dma($p2389, 217);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i2391 := $p2i.ref.i64($p2390);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i2392 := $ne.i64($i2391, 0);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2392} true;
    goto $bb872, $bb873;

  $bb873:
    assume !($i2392 == 1);
    assume {:verifier.code 0} true;
    $i2393 := $i2382;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    $p2399 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p2400 := $load.ref($M.0, $p2399);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $p2401 := get_tracker_dma($p2400, 218);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i2402 := $p2i.ref.i64($p2401);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i2403 := $ne.i64($i2402, 0);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2403} true;
    goto $bb876, $bb877;

  $bb877:
    assume !($i2403 == 1);
    assume {:verifier.code 0} true;
    $i2404 := $i2393;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    goto $bb879;

  $bb879:
    assume {:verifier.code 0} true;
    $p2410 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p2411 := $load.ref($M.0, $p2410);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $p2412 := get_tracker_dma($p2411, 219);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i2413 := $p2i.ref.i64($p2412);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i2414 := $ne.i64($i2413, 0);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2414} true;
    goto $bb880, $bb881;

  $bb881:
    assume !($i2414 == 1);
    assume {:verifier.code 0} true;
    $i2415 := $i2404;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    $p2421 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p2422 := $load.ref($M.0, $p2421);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $p2423 := get_tracker_dma($p2422, 220);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i2424 := $p2i.ref.i64($p2423);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i2425 := $ne.i64($i2424, 0);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2425} true;
    goto $bb884, $bb885;

  $bb885:
    assume !($i2425 == 1);
    assume {:verifier.code 0} true;
    $i2426 := $i2415;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    $p2432 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p2433 := $load.ref($M.0, $p2432);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $p2434 := get_tracker_dma($p2433, 221);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i2435 := $p2i.ref.i64($p2434);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i2436 := $ne.i64($i2435, 0);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2436} true;
    goto $bb888, $bb889;

  $bb889:
    assume !($i2436 == 1);
    assume {:verifier.code 0} true;
    $i2437 := $i2426;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    $p2443 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p2444 := $load.ref($M.0, $p2443);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $p2445 := get_tracker_dma($p2444, 222);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i2446 := $p2i.ref.i64($p2445);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i2447 := $ne.i64($i2446, 0);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2447} true;
    goto $bb892, $bb893;

  $bb893:
    assume !($i2447 == 1);
    assume {:verifier.code 0} true;
    $i2448 := $i2437;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    $p2454 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p2455 := $load.ref($M.0, $p2454);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p2456 := get_tracker_dma($p2455, 223);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i2457 := $p2i.ref.i64($p2456);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i2458 := $ne.i64($i2457, 0);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2458} true;
    goto $bb896, $bb897;

  $bb897:
    assume !($i2458 == 1);
    assume {:verifier.code 0} true;
    $i2459 := $i2448;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    $p2465 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p2466 := $load.ref($M.0, $p2465);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $p2467 := get_tracker_dma($p2466, 224);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i2468 := $p2i.ref.i64($p2467);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i2469 := $ne.i64($i2468, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2469} true;
    goto $bb900, $bb901;

  $bb901:
    assume !($i2469 == 1);
    assume {:verifier.code 0} true;
    $i2470 := $i2459;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    $p2476 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p2477 := $load.ref($M.0, $p2476);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $p2478 := get_tracker_dma($p2477, 225);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i2479 := $p2i.ref.i64($p2478);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i2480 := $ne.i64($i2479, 0);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2480} true;
    goto $bb904, $bb905;

  $bb905:
    assume !($i2480 == 1);
    assume {:verifier.code 0} true;
    $i2481 := $i2470;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    $p2487 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p2488 := $load.ref($M.0, $p2487);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $p2489 := get_tracker_dma($p2488, 226);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i2490 := $p2i.ref.i64($p2489);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i2491 := $ne.i64($i2490, 0);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2491} true;
    goto $bb908, $bb909;

  $bb909:
    assume !($i2491 == 1);
    assume {:verifier.code 0} true;
    $i2492 := $i2481;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    $p2498 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p2499 := $load.ref($M.0, $p2498);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} $p2500 := get_tracker_dma($p2499, 227);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i2501 := $p2i.ref.i64($p2500);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i2502 := $ne.i64($i2501, 0);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2502} true;
    goto $bb912, $bb913;

  $bb913:
    assume !($i2502 == 1);
    assume {:verifier.code 0} true;
    $i2503 := $i2492;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    $p2509 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p2510 := $load.ref($M.0, $p2509);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $p2511 := get_tracker_dma($p2510, 228);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i2512 := $p2i.ref.i64($p2511);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i2513 := $ne.i64($i2512, 0);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2513} true;
    goto $bb916, $bb917;

  $bb917:
    assume !($i2513 == 1);
    assume {:verifier.code 0} true;
    $i2514 := $i2503;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    $p2520 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p2521 := $load.ref($M.0, $p2520);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} $p2522 := get_tracker_dma($p2521, 229);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i2523 := $p2i.ref.i64($p2522);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i2524 := $ne.i64($i2523, 0);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2524} true;
    goto $bb920, $bb921;

  $bb921:
    assume !($i2524 == 1);
    assume {:verifier.code 0} true;
    $i2525 := $i2514;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    $p2531 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p2532 := $load.ref($M.0, $p2531);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} $p2533 := get_tracker_dma($p2532, 230);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i2534 := $p2i.ref.i64($p2533);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i2535 := $ne.i64($i2534, 0);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2535} true;
    goto $bb924, $bb925;

  $bb925:
    assume !($i2535 == 1);
    assume {:verifier.code 0} true;
    $i2536 := $i2525;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    $p2542 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p2543 := $load.ref($M.0, $p2542);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $p2544 := get_tracker_dma($p2543, 231);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i2545 := $p2i.ref.i64($p2544);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i2546 := $ne.i64($i2545, 0);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2546} true;
    goto $bb928, $bb929;

  $bb929:
    assume !($i2546 == 1);
    assume {:verifier.code 0} true;
    $i2547 := $i2536;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    $p2553 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p2554 := $load.ref($M.0, $p2553);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} $p2555 := get_tracker_dma($p2554, 232);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i2556 := $p2i.ref.i64($p2555);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i2557 := $ne.i64($i2556, 0);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2557} true;
    goto $bb932, $bb933;

  $bb933:
    assume !($i2557 == 1);
    assume {:verifier.code 0} true;
    $i2558 := $i2547;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    $p2564 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p2565 := $load.ref($M.0, $p2564);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} $p2566 := get_tracker_dma($p2565, 233);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i2567 := $p2i.ref.i64($p2566);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i2568 := $ne.i64($i2567, 0);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2568} true;
    goto $bb936, $bb937;

  $bb937:
    assume !($i2568 == 1);
    assume {:verifier.code 0} true;
    $i2569 := $i2558;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    $p2575 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p2576 := $load.ref($M.0, $p2575);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $p2577 := get_tracker_dma($p2576, 234);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i2578 := $p2i.ref.i64($p2577);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i2579 := $ne.i64($i2578, 0);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2579} true;
    goto $bb940, $bb941;

  $bb941:
    assume !($i2579 == 1);
    assume {:verifier.code 0} true;
    $i2580 := $i2569;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    $p2586 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p2587 := $load.ref($M.0, $p2586);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} $p2588 := get_tracker_dma($p2587, 235);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i2589 := $p2i.ref.i64($p2588);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i2590 := $ne.i64($i2589, 0);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2590} true;
    goto $bb944, $bb945;

  $bb945:
    assume !($i2590 == 1);
    assume {:verifier.code 0} true;
    $i2591 := $i2580;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    $p2597 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p2598 := $load.ref($M.0, $p2597);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} $p2599 := get_tracker_dma($p2598, 236);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i2600 := $p2i.ref.i64($p2599);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $i2601 := $ne.i64($i2600, 0);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2601} true;
    goto $bb948, $bb949;

  $bb949:
    assume !($i2601 == 1);
    assume {:verifier.code 0} true;
    $i2602 := $i2591;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    $p2608 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $p2609 := $load.ref($M.0, $p2608);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $p2610 := get_tracker_dma($p2609, 237);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i2611 := $p2i.ref.i64($p2610);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i2612 := $ne.i64($i2611, 0);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2612} true;
    goto $bb952, $bb953;

  $bb953:
    assume !($i2612 == 1);
    assume {:verifier.code 0} true;
    $i2613 := $i2602;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    $p2619 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p2620 := $load.ref($M.0, $p2619);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} $p2621 := get_tracker_dma($p2620, 238);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i2622 := $p2i.ref.i64($p2621);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i2623 := $ne.i64($i2622, 0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2623} true;
    goto $bb956, $bb957;

  $bb957:
    assume !($i2623 == 1);
    assume {:verifier.code 0} true;
    $i2624 := $i2613;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    $p2630 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p2631 := $load.ref($M.0, $p2630);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} $p2632 := get_tracker_dma($p2631, 239);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i2633 := $p2i.ref.i64($p2632);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i2634 := $ne.i64($i2633, 0);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2634} true;
    goto $bb960, $bb961;

  $bb961:
    assume !($i2634 == 1);
    assume {:verifier.code 0} true;
    $i2635 := $i2624;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    $p2641 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p2642 := $load.ref($M.0, $p2641);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} $p2643 := get_tracker_dma($p2642, 240);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $i2644 := $p2i.ref.i64($p2643);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i2645 := $ne.i64($i2644, 0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2645} true;
    goto $bb964, $bb965;

  $bb965:
    assume !($i2645 == 1);
    assume {:verifier.code 0} true;
    $i2646 := $i2635;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    $p2652 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p2653 := $load.ref($M.0, $p2652);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} $p2654 := get_tracker_dma($p2653, 241);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i2655 := $p2i.ref.i64($p2654);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i2656 := $ne.i64($i2655, 0);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2656} true;
    goto $bb968, $bb969;

  $bb969:
    assume !($i2656 == 1);
    assume {:verifier.code 0} true;
    $i2657 := $i2646;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    $p2663 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p2664 := $load.ref($M.0, $p2663);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $p2665 := get_tracker_dma($p2664, 242);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i2666 := $p2i.ref.i64($p2665);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i2667 := $ne.i64($i2666, 0);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2667} true;
    goto $bb972, $bb973;

  $bb973:
    assume !($i2667 == 1);
    assume {:verifier.code 0} true;
    $i2668 := $i2657;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    $p2674 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $p2675 := $load.ref($M.0, $p2674);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} $p2676 := get_tracker_dma($p2675, 243);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $i2677 := $p2i.ref.i64($p2676);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i2678 := $ne.i64($i2677, 0);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2678} true;
    goto $bb976, $bb977;

  $bb977:
    assume !($i2678 == 1);
    assume {:verifier.code 0} true;
    $i2679 := $i2668;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    $p2685 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p2686 := $load.ref($M.0, $p2685);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} $p2687 := get_tracker_dma($p2686, 244);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i2688 := $p2i.ref.i64($p2687);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i2689 := $ne.i64($i2688, 0);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2689} true;
    goto $bb980, $bb981;

  $bb981:
    assume !($i2689 == 1);
    assume {:verifier.code 0} true;
    $i2690 := $i2679;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    $p2696 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p2697 := $load.ref($M.0, $p2696);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} $p2698 := get_tracker_dma($p2697, 245);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i2699 := $p2i.ref.i64($p2698);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i2700 := $ne.i64($i2699, 0);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2700} true;
    goto $bb984, $bb985;

  $bb985:
    assume !($i2700 == 1);
    assume {:verifier.code 0} true;
    $i2701 := $i2690;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    $p2707 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $p2708 := $load.ref($M.0, $p2707);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} $p2709 := get_tracker_dma($p2708, 246);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i2710 := $p2i.ref.i64($p2709);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i2711 := $ne.i64($i2710, 0);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2711} true;
    goto $bb988, $bb989;

  $bb989:
    assume !($i2711 == 1);
    assume {:verifier.code 0} true;
    $i2712 := $i2701;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    $p2718 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p2719 := $load.ref($M.0, $p2718);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} $p2720 := get_tracker_dma($p2719, 247);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i2721 := $p2i.ref.i64($p2720);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i2722 := $ne.i64($i2721, 0);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2722} true;
    goto $bb992, $bb993;

  $bb993:
    assume !($i2722 == 1);
    assume {:verifier.code 0} true;
    $i2723 := $i2712;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    $p2729 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p2730 := $load.ref($M.0, $p2729);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $p2731 := get_tracker_dma($p2730, 248);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i2732 := $p2i.ref.i64($p2731);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i2733 := $ne.i64($i2732, 0);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2733} true;
    goto $bb996, $bb997;

  $bb997:
    assume !($i2733 == 1);
    assume {:verifier.code 0} true;
    $i2734 := $i2723;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    $p2740 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p2741 := $load.ref($M.0, $p2740);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p2742 := get_tracker_dma($p2741, 249);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $i2743 := $p2i.ref.i64($p2742);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i2744 := $ne.i64($i2743, 0);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2744} true;
    goto $bb1000, $bb1001;

  $bb1001:
    assume !($i2744 == 1);
    assume {:verifier.code 0} true;
    $i2745 := $i2734;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    $p2751 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p2752 := $load.ref($M.0, $p2751);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} $p2753 := get_tracker_dma($p2752, 250);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i2754 := $p2i.ref.i64($p2753);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i2755 := $ne.i64($i2754, 0);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2755} true;
    goto $bb1004, $bb1005;

  $bb1005:
    assume !($i2755 == 1);
    assume {:verifier.code 0} true;
    $i2756 := $i2745;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    $p2762 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p2763 := $load.ref($M.0, $p2762);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} $p2764 := get_tracker_dma($p2763, 251);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i2765 := $p2i.ref.i64($p2764);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i2766 := $ne.i64($i2765, 0);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2766} true;
    goto $bb1008, $bb1009;

  $bb1009:
    assume !($i2766 == 1);
    assume {:verifier.code 0} true;
    $i2767 := $i2756;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    $p2773 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p2774 := $load.ref($M.0, $p2773);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} $p2775 := get_tracker_dma($p2774, 252);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i2776 := $p2i.ref.i64($p2775);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i2777 := $ne.i64($i2776, 0);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2777} true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume !($i2777 == 1);
    assume {:verifier.code 0} true;
    $i2778 := $i2767;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    $p2784 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p2785 := $load.ref($M.0, $p2784);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} $p2786 := get_tracker_dma($p2785, 253);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i2787 := $p2i.ref.i64($p2786);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i2788 := $ne.i64($i2787, 0);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2788} true;
    goto $bb1016, $bb1017;

  $bb1017:
    assume !($i2788 == 1);
    assume {:verifier.code 0} true;
    $i2789 := $i2778;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    $p2795 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p2796 := $load.ref($M.0, $p2795);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} $p2797 := get_tracker_dma($p2796, 254);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i2798 := $p2i.ref.i64($p2797);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i2799 := $ne.i64($i2798, 0);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2799} true;
    goto $bb1020, $bb1021;

  $bb1021:
    assume !($i2799 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i2789;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1020:
    assume $i2799 == 1;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p2801 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} atomic_dec($p2801);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} rsxx_complete_dma($p0, $p2797, 4);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p2802 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p2803 := $load.ref($M.0, $p2802);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} push_tracker($p2803, 254);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i2804 := $add.i32($i2789, 1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $i11 := $i2804;
    goto $bb1022;

  $bb1016:
    assume $i2788 == 1;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p2791 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} atomic_dec($p2791);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} rsxx_complete_dma($p0, $p2786, 4);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p2792 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p2793 := $load.ref($M.0, $p2792);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} push_tracker($p2793, 253);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i2794 := $add.i32($i2778, 1);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i2789 := $i2794;
    goto $bb1018;

  $bb1012:
    assume $i2777 == 1;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p2780 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} atomic_dec($p2780);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} rsxx_complete_dma($p0, $p2775, 4);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p2781 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $p2782 := $load.ref($M.0, $p2781);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} push_tracker($p2782, 252);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i2783 := $add.i32($i2767, 1);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i2778 := $i2783;
    goto $bb1014;

  $bb1008:
    assume $i2766 == 1;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p2769 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} atomic_dec($p2769);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} rsxx_complete_dma($p0, $p2764, 4);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p2770 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $p2771 := $load.ref($M.0, $p2770);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} push_tracker($p2771, 251);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i2772 := $add.i32($i2756, 1);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i2767 := $i2772;
    goto $bb1010;

  $bb1004:
    assume $i2755 == 1;
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p2758 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} atomic_dec($p2758);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} rsxx_complete_dma($p0, $p2753, 4);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p2759 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p2760 := $load.ref($M.0, $p2759);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} push_tracker($p2760, 250);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i2761 := $add.i32($i2745, 1);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i2756 := $i2761;
    goto $bb1006;

  $bb1000:
    assume $i2744 == 1;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $p2747 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} atomic_dec($p2747);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} rsxx_complete_dma($p0, $p2742, 4);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p2748 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p2749 := $load.ref($M.0, $p2748);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} push_tracker($p2749, 249);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i2750 := $add.i32($i2734, 1);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i2745 := $i2750;
    goto $bb1002;

  $bb996:
    assume $i2733 == 1;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p2736 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} atomic_dec($p2736);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} rsxx_complete_dma($p0, $p2731, 4);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p2737 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p2738 := $load.ref($M.0, $p2737);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} push_tracker($p2738, 248);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i2739 := $add.i32($i2723, 1);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i2734 := $i2739;
    goto $bb998;

  $bb992:
    assume $i2722 == 1;
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p2725 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} atomic_dec($p2725);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} rsxx_complete_dma($p0, $p2720, 4);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p2726 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p2727 := $load.ref($M.0, $p2726);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} push_tracker($p2727, 247);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i2728 := $add.i32($i2712, 1);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i2723 := $i2728;
    goto $bb994;

  $bb988:
    assume $i2711 == 1;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p2714 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} atomic_dec($p2714);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} rsxx_complete_dma($p0, $p2709, 4);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p2715 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p2716 := $load.ref($M.0, $p2715);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} push_tracker($p2716, 246);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i2717 := $add.i32($i2701, 1);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i2712 := $i2717;
    goto $bb990;

  $bb984:
    assume $i2700 == 1;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $p2703 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} atomic_dec($p2703);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} rsxx_complete_dma($p0, $p2698, 4);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p2704 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p2705 := $load.ref($M.0, $p2704);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} push_tracker($p2705, 245);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i2706 := $add.i32($i2690, 1);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i2701 := $i2706;
    goto $bb986;

  $bb980:
    assume $i2689 == 1;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p2692 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} atomic_dec($p2692);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} rsxx_complete_dma($p0, $p2687, 4);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p2693 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p2694 := $load.ref($M.0, $p2693);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} push_tracker($p2694, 244);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i2695 := $add.i32($i2679, 1);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i2690 := $i2695;
    goto $bb982;

  $bb976:
    assume $i2678 == 1;
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p2681 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} atomic_dec($p2681);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} rsxx_complete_dma($p0, $p2676, 4);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p2682 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $p2683 := $load.ref($M.0, $p2682);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} push_tracker($p2683, 243);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i2684 := $add.i32($i2668, 1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i2679 := $i2684;
    goto $bb978;

  $bb972:
    assume $i2667 == 1;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p2670 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} atomic_dec($p2670);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} rsxx_complete_dma($p0, $p2665, 4);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p2671 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p2672 := $load.ref($M.0, $p2671);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} push_tracker($p2672, 242);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i2673 := $add.i32($i2657, 1);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i2668 := $i2673;
    goto $bb974;

  $bb968:
    assume $i2656 == 1;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p2659 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} atomic_dec($p2659);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} rsxx_complete_dma($p0, $p2654, 4);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p2660 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p2661 := $load.ref($M.0, $p2660);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} push_tracker($p2661, 241);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i2662 := $add.i32($i2646, 1);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i2657 := $i2662;
    goto $bb970;

  $bb964:
    assume $i2645 == 1;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p2648 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} atomic_dec($p2648);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} rsxx_complete_dma($p0, $p2643, 4);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p2649 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p2650 := $load.ref($M.0, $p2649);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} push_tracker($p2650, 240);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i2651 := $add.i32($i2635, 1);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i2646 := $i2651;
    goto $bb966;

  $bb960:
    assume $i2634 == 1;
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p2637 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} atomic_dec($p2637);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} rsxx_complete_dma($p0, $p2632, 4);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p2638 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p2639 := $load.ref($M.0, $p2638);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} push_tracker($p2639, 239);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i2640 := $add.i32($i2624, 1);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i2635 := $i2640;
    goto $bb962;

  $bb956:
    assume $i2623 == 1;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p2626 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} atomic_dec($p2626);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} rsxx_complete_dma($p0, $p2621, 4);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p2627 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p2628 := $load.ref($M.0, $p2627);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} push_tracker($p2628, 238);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i2629 := $add.i32($i2613, 1);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i2624 := $i2629;
    goto $bb958;

  $bb952:
    assume $i2612 == 1;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p2615 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} atomic_dec($p2615);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} rsxx_complete_dma($p0, $p2610, 4);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p2616 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p2617 := $load.ref($M.0, $p2616);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} push_tracker($p2617, 237);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i2618 := $add.i32($i2602, 1);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i2613 := $i2618;
    goto $bb954;

  $bb948:
    assume $i2601 == 1;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p2604 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} atomic_dec($p2604);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} rsxx_complete_dma($p0, $p2599, 4);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p2605 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p2606 := $load.ref($M.0, $p2605);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} push_tracker($p2606, 236);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i2607 := $add.i32($i2591, 1);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i2602 := $i2607;
    goto $bb950;

  $bb944:
    assume $i2590 == 1;
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p2593 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} atomic_dec($p2593);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} rsxx_complete_dma($p0, $p2588, 4);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p2594 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p2595 := $load.ref($M.0, $p2594);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} push_tracker($p2595, 235);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i2596 := $add.i32($i2580, 1);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i2591 := $i2596;
    goto $bb946;

  $bb940:
    assume $i2579 == 1;
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p2582 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} atomic_dec($p2582);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} rsxx_complete_dma($p0, $p2577, 4);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p2583 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p2584 := $load.ref($M.0, $p2583);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} push_tracker($p2584, 234);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i2585 := $add.i32($i2569, 1);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i2580 := $i2585;
    goto $bb942;

  $bb936:
    assume $i2568 == 1;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p2571 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} atomic_dec($p2571);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} rsxx_complete_dma($p0, $p2566, 4);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p2572 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $p2573 := $load.ref($M.0, $p2572);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} push_tracker($p2573, 233);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i2574 := $add.i32($i2558, 1);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i2569 := $i2574;
    goto $bb938;

  $bb932:
    assume $i2557 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p2560 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} atomic_dec($p2560);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} rsxx_complete_dma($p0, $p2555, 4);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p2561 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p2562 := $load.ref($M.0, $p2561);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} push_tracker($p2562, 232);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i2563 := $add.i32($i2547, 1);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i2558 := $i2563;
    goto $bb934;

  $bb928:
    assume $i2546 == 1;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p2549 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} atomic_dec($p2549);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} rsxx_complete_dma($p0, $p2544, 4);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p2550 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p2551 := $load.ref($M.0, $p2550);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} push_tracker($p2551, 231);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i2552 := $add.i32($i2536, 1);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i2547 := $i2552;
    goto $bb930;

  $bb924:
    assume $i2535 == 1;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p2538 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} atomic_dec($p2538);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} rsxx_complete_dma($p0, $p2533, 4);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p2539 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $p2540 := $load.ref($M.0, $p2539);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} push_tracker($p2540, 230);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i2541 := $add.i32($i2525, 1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i2536 := $i2541;
    goto $bb926;

  $bb920:
    assume $i2524 == 1;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p2527 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} atomic_dec($p2527);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} rsxx_complete_dma($p0, $p2522, 4);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p2528 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p2529 := $load.ref($M.0, $p2528);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} push_tracker($p2529, 229);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i2530 := $add.i32($i2514, 1);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i2525 := $i2530;
    goto $bb922;

  $bb916:
    assume $i2513 == 1;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p2516 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} atomic_dec($p2516);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} rsxx_complete_dma($p0, $p2511, 4);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p2517 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p2518 := $load.ref($M.0, $p2517);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} push_tracker($p2518, 228);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i2519 := $add.i32($i2503, 1);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i2514 := $i2519;
    goto $bb918;

  $bb912:
    assume $i2502 == 1;
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p2505 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} atomic_dec($p2505);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} rsxx_complete_dma($p0, $p2500, 4);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p2506 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p2507 := $load.ref($M.0, $p2506);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} push_tracker($p2507, 227);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i2508 := $add.i32($i2492, 1);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i2503 := $i2508;
    goto $bb914;

  $bb908:
    assume $i2491 == 1;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p2494 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} atomic_dec($p2494);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} rsxx_complete_dma($p0, $p2489, 4);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p2495 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p2496 := $load.ref($M.0, $p2495);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} push_tracker($p2496, 226);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i2497 := $add.i32($i2481, 1);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $i2492 := $i2497;
    goto $bb910;

  $bb904:
    assume $i2480 == 1;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p2483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} atomic_dec($p2483);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} rsxx_complete_dma($p0, $p2478, 4);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p2484 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p2485 := $load.ref($M.0, $p2484);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} push_tracker($p2485, 225);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i2486 := $add.i32($i2470, 1);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i2481 := $i2486;
    goto $bb906;

  $bb900:
    assume $i2469 == 1;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p2472 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} atomic_dec($p2472);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} rsxx_complete_dma($p0, $p2467, 4);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p2473 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p2474 := $load.ref($M.0, $p2473);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} push_tracker($p2474, 224);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i2475 := $add.i32($i2459, 1);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i2470 := $i2475;
    goto $bb902;

  $bb896:
    assume $i2458 == 1;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p2461 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} atomic_dec($p2461);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} rsxx_complete_dma($p0, $p2456, 4);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p2462 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p2463 := $load.ref($M.0, $p2462);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} push_tracker($p2463, 223);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i2464 := $add.i32($i2448, 1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i2459 := $i2464;
    goto $bb898;

  $bb892:
    assume $i2447 == 1;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p2450 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} atomic_dec($p2450);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} rsxx_complete_dma($p0, $p2445, 4);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p2451 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p2452 := $load.ref($M.0, $p2451);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} push_tracker($p2452, 222);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i2453 := $add.i32($i2437, 1);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i2448 := $i2453;
    goto $bb894;

  $bb888:
    assume $i2436 == 1;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p2439 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} atomic_dec($p2439);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} rsxx_complete_dma($p0, $p2434, 4);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p2440 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $p2441 := $load.ref($M.0, $p2440);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} push_tracker($p2441, 221);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i2442 := $add.i32($i2426, 1);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i2437 := $i2442;
    goto $bb890;

  $bb884:
    assume $i2425 == 1;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p2428 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} atomic_dec($p2428);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} rsxx_complete_dma($p0, $p2423, 4);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $p2429 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p2430 := $load.ref($M.0, $p2429);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} push_tracker($p2430, 220);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i2431 := $add.i32($i2415, 1);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i2426 := $i2431;
    goto $bb886;

  $bb880:
    assume $i2414 == 1;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p2417 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} atomic_dec($p2417);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} rsxx_complete_dma($p0, $p2412, 4);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p2418 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p2419 := $load.ref($M.0, $p2418);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} push_tracker($p2419, 219);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i2420 := $add.i32($i2404, 1);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i2415 := $i2420;
    goto $bb882;

  $bb876:
    assume $i2403 == 1;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p2406 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} atomic_dec($p2406);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} rsxx_complete_dma($p0, $p2401, 4);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $p2407 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p2408 := $load.ref($M.0, $p2407);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} push_tracker($p2408, 218);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i2409 := $add.i32($i2393, 1);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i2404 := $i2409;
    goto $bb878;

  $bb872:
    assume $i2392 == 1;
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p2395 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} atomic_dec($p2395);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} rsxx_complete_dma($p0, $p2390, 4);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p2396 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p2397 := $load.ref($M.0, $p2396);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} push_tracker($p2397, 217);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i2398 := $add.i32($i2382, 1);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i2393 := $i2398;
    goto $bb874;

  $bb868:
    assume $i2381 == 1;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p2384 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} atomic_dec($p2384);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} rsxx_complete_dma($p0, $p2379, 4);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p2385 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p2386 := $load.ref($M.0, $p2385);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} push_tracker($p2386, 216);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i2387 := $add.i32($i2371, 1);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i2382 := $i2387;
    goto $bb870;

  $bb864:
    assume $i2370 == 1;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p2373 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} atomic_dec($p2373);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} rsxx_complete_dma($p0, $p2368, 4);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p2374 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p2375 := $load.ref($M.0, $p2374);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} push_tracker($p2375, 215);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i2376 := $add.i32($i2360, 1);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i2371 := $i2376;
    goto $bb866;

  $bb860:
    assume $i2359 == 1;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p2362 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} atomic_dec($p2362);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} rsxx_complete_dma($p0, $p2357, 4);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p2363 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p2364 := $load.ref($M.0, $p2363);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} push_tracker($p2364, 214);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i2365 := $add.i32($i2349, 1);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i2360 := $i2365;
    goto $bb862;

  $bb856:
    assume $i2348 == 1;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p2351 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} atomic_dec($p2351);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} rsxx_complete_dma($p0, $p2346, 4);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p2352 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $p2353 := $load.ref($M.0, $p2352);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} push_tracker($p2353, 213);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i2354 := $add.i32($i2338, 1);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i2349 := $i2354;
    goto $bb858;

  $bb852:
    assume $i2337 == 1;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $p2340 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} atomic_dec($p2340);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} rsxx_complete_dma($p0, $p2335, 4);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p2341 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p2342 := $load.ref($M.0, $p2341);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} push_tracker($p2342, 212);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i2343 := $add.i32($i2327, 1);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i2338 := $i2343;
    goto $bb854;

  $bb848:
    assume $i2326 == 1;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p2329 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} atomic_dec($p2329);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} rsxx_complete_dma($p0, $p2324, 4);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p2330 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p2331 := $load.ref($M.0, $p2330);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} push_tracker($p2331, 211);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i2332 := $add.i32($i2316, 1);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i2327 := $i2332;
    goto $bb850;

  $bb844:
    assume $i2315 == 1;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p2318 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} atomic_dec($p2318);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} rsxx_complete_dma($p0, $p2313, 4);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p2319 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p2320 := $load.ref($M.0, $p2319);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} push_tracker($p2320, 210);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i2321 := $add.i32($i2305, 1);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i2316 := $i2321;
    goto $bb846;

  $bb840:
    assume $i2304 == 1;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p2307 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} atomic_dec($p2307);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} rsxx_complete_dma($p0, $p2302, 4);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p2308 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p2309 := $load.ref($M.0, $p2308);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} push_tracker($p2309, 209);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i2310 := $add.i32($i2294, 1);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i2305 := $i2310;
    goto $bb842;

  $bb836:
    assume $i2293 == 1;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p2296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} atomic_dec($p2296);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} rsxx_complete_dma($p0, $p2291, 4);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p2297 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p2298 := $load.ref($M.0, $p2297);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} push_tracker($p2298, 208);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i2299 := $add.i32($i2283, 1);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i2294 := $i2299;
    goto $bb838;

  $bb832:
    assume $i2282 == 1;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p2285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} atomic_dec($p2285);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} rsxx_complete_dma($p0, $p2280, 4);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p2286 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p2287 := $load.ref($M.0, $p2286);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} push_tracker($p2287, 207);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i2288 := $add.i32($i2272, 1);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i2283 := $i2288;
    goto $bb834;

  $bb828:
    assume $i2271 == 1;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p2274 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} atomic_dec($p2274);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} rsxx_complete_dma($p0, $p2269, 4);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p2275 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p2276 := $load.ref($M.0, $p2275);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} push_tracker($p2276, 206);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i2277 := $add.i32($i2261, 1);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i2272 := $i2277;
    goto $bb830;

  $bb824:
    assume $i2260 == 1;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p2263 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} atomic_dec($p2263);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} rsxx_complete_dma($p0, $p2258, 4);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p2264 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p2265 := $load.ref($M.0, $p2264);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} push_tracker($p2265, 205);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i2266 := $add.i32($i2250, 1);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i2261 := $i2266;
    goto $bb826;

  $bb820:
    assume $i2249 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p2252 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} atomic_dec($p2252);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} rsxx_complete_dma($p0, $p2247, 4);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p2253 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p2254 := $load.ref($M.0, $p2253);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} push_tracker($p2254, 204);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i2255 := $add.i32($i2239, 1);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i2250 := $i2255;
    goto $bb822;

  $bb816:
    assume $i2238 == 1;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p2241 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} atomic_dec($p2241);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} rsxx_complete_dma($p0, $p2236, 4);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p2242 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p2243 := $load.ref($M.0, $p2242);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} push_tracker($p2243, 203);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i2244 := $add.i32($i2228, 1);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i2239 := $i2244;
    goto $bb818;

  $bb812:
    assume $i2227 == 1;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p2230 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} atomic_dec($p2230);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} rsxx_complete_dma($p0, $p2225, 4);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p2231 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p2232 := $load.ref($M.0, $p2231);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} push_tracker($p2232, 202);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i2233 := $add.i32($i2217, 1);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i2228 := $i2233;
    goto $bb814;

  $bb808:
    assume $i2216 == 1;
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p2219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} atomic_dec($p2219);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} rsxx_complete_dma($p0, $p2214, 4);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p2220 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p2221 := $load.ref($M.0, $p2220);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} push_tracker($p2221, 201);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i2222 := $add.i32($i2206, 1);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i2217 := $i2222;
    goto $bb810;

  $bb804:
    assume $i2205 == 1;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p2208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} atomic_dec($p2208);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} rsxx_complete_dma($p0, $p2203, 4);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p2209 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p2210 := $load.ref($M.0, $p2209);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} push_tracker($p2210, 200);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i2211 := $add.i32($i2195, 1);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i2206 := $i2211;
    goto $bb806;

  $bb800:
    assume $i2194 == 1;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p2197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} atomic_dec($p2197);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} rsxx_complete_dma($p0, $p2192, 4);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p2198 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p2199 := $load.ref($M.0, $p2198);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} push_tracker($p2199, 199);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i2200 := $add.i32($i2184, 1);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i2195 := $i2200;
    goto $bb802;

  $bb796:
    assume $i2183 == 1;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p2186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} atomic_dec($p2186);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} rsxx_complete_dma($p0, $p2181, 4);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p2187 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p2188 := $load.ref($M.0, $p2187);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} push_tracker($p2188, 198);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i2189 := $add.i32($i2173, 1);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i2184 := $i2189;
    goto $bb798;

  $bb792:
    assume $i2172 == 1;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p2175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} atomic_dec($p2175);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} rsxx_complete_dma($p0, $p2170, 4);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p2176 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p2177 := $load.ref($M.0, $p2176);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} push_tracker($p2177, 197);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i2178 := $add.i32($i2162, 1);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i2173 := $i2178;
    goto $bb794;

  $bb788:
    assume $i2161 == 1;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p2164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} atomic_dec($p2164);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} rsxx_complete_dma($p0, $p2159, 4);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p2165 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p2166 := $load.ref($M.0, $p2165);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} push_tracker($p2166, 196);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i2167 := $add.i32($i2151, 1);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i2162 := $i2167;
    goto $bb790;

  $bb784:
    assume $i2150 == 1;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p2153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} atomic_dec($p2153);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} rsxx_complete_dma($p0, $p2148, 4);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p2154 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p2155 := $load.ref($M.0, $p2154);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} push_tracker($p2155, 195);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i2156 := $add.i32($i2140, 1);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i2151 := $i2156;
    goto $bb786;

  $bb780:
    assume $i2139 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p2142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} atomic_dec($p2142);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} rsxx_complete_dma($p0, $p2137, 4);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p2143 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p2144 := $load.ref($M.0, $p2143);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} push_tracker($p2144, 194);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i2145 := $add.i32($i2129, 1);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i2140 := $i2145;
    goto $bb782;

  $bb776:
    assume $i2128 == 1;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p2131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} atomic_dec($p2131);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} rsxx_complete_dma($p0, $p2126, 4);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p2132 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p2133 := $load.ref($M.0, $p2132);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} push_tracker($p2133, 193);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i2134 := $add.i32($i2118, 1);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i2129 := $i2134;
    goto $bb778;

  $bb772:
    assume $i2117 == 1;
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p2120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} atomic_dec($p2120);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} rsxx_complete_dma($p0, $p2115, 4);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p2121 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p2122 := $load.ref($M.0, $p2121);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} push_tracker($p2122, 192);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i2123 := $add.i32($i2107, 1);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i2118 := $i2123;
    goto $bb774;

  $bb768:
    assume $i2106 == 1;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p2109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} atomic_dec($p2109);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} rsxx_complete_dma($p0, $p2104, 4);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p2110 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p2111 := $load.ref($M.0, $p2110);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} push_tracker($p2111, 191);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i2112 := $add.i32($i2096, 1);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i2107 := $i2112;
    goto $bb770;

  $bb764:
    assume $i2095 == 1;
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p2098 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} atomic_dec($p2098);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} rsxx_complete_dma($p0, $p2093, 4);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p2099 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p2100 := $load.ref($M.0, $p2099);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} push_tracker($p2100, 190);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i2101 := $add.i32($i2085, 1);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i2096 := $i2101;
    goto $bb766;

  $bb760:
    assume $i2084 == 1;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p2087 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} atomic_dec($p2087);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} rsxx_complete_dma($p0, $p2082, 4);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p2088 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p2089 := $load.ref($M.0, $p2088);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} push_tracker($p2089, 189);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i2090 := $add.i32($i2074, 1);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i2085 := $i2090;
    goto $bb762;

  $bb756:
    assume $i2073 == 1;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p2076 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} atomic_dec($p2076);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} rsxx_complete_dma($p0, $p2071, 4);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p2077 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p2078 := $load.ref($M.0, $p2077);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} push_tracker($p2078, 188);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i2079 := $add.i32($i2063, 1);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i2074 := $i2079;
    goto $bb758;

  $bb752:
    assume $i2062 == 1;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p2065 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} atomic_dec($p2065);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} rsxx_complete_dma($p0, $p2060, 4);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p2066 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p2067 := $load.ref($M.0, $p2066);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} push_tracker($p2067, 187);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i2068 := $add.i32($i2052, 1);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i2063 := $i2068;
    goto $bb754;

  $bb748:
    assume $i2051 == 1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p2054 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} atomic_dec($p2054);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} rsxx_complete_dma($p0, $p2049, 4);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p2055 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p2056 := $load.ref($M.0, $p2055);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} push_tracker($p2056, 186);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i2057 := $add.i32($i2041, 1);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i2052 := $i2057;
    goto $bb750;

  $bb744:
    assume $i2040 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p2043 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} atomic_dec($p2043);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} rsxx_complete_dma($p0, $p2038, 4);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p2044 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p2045 := $load.ref($M.0, $p2044);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} push_tracker($p2045, 185);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i2046 := $add.i32($i2030, 1);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i2041 := $i2046;
    goto $bb746;

  $bb740:
    assume $i2029 == 1;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p2032 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} atomic_dec($p2032);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} rsxx_complete_dma($p0, $p2027, 4);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p2033 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p2034 := $load.ref($M.0, $p2033);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} push_tracker($p2034, 184);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i2035 := $add.i32($i2019, 1);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i2030 := $i2035;
    goto $bb742;

  $bb736:
    assume $i2018 == 1;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p2021 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} atomic_dec($p2021);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} rsxx_complete_dma($p0, $p2016, 4);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p2022 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p2023 := $load.ref($M.0, $p2022);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} push_tracker($p2023, 183);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i2024 := $add.i32($i2008, 1);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i2019 := $i2024;
    goto $bb738;

  $bb732:
    assume $i2007 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p2010 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} atomic_dec($p2010);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} rsxx_complete_dma($p0, $p2005, 4);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p2011 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p2012 := $load.ref($M.0, $p2011);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} push_tracker($p2012, 182);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i2013 := $add.i32($i1997, 1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i2008 := $i2013;
    goto $bb734;

  $bb728:
    assume $i1996 == 1;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $p1999 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} atomic_dec($p1999);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} rsxx_complete_dma($p0, $p1994, 4);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p2000 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p2001 := $load.ref($M.0, $p2000);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} push_tracker($p2001, 181);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i2002 := $add.i32($i1986, 1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i1997 := $i2002;
    goto $bb730;

  $bb724:
    assume $i1985 == 1;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p1988 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} atomic_dec($p1988);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} rsxx_complete_dma($p0, $p1983, 4);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p1989 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p1990 := $load.ref($M.0, $p1989);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} push_tracker($p1990, 180);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i1991 := $add.i32($i1975, 1);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i1986 := $i1991;
    goto $bb726;

  $bb720:
    assume $i1974 == 1;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p1977 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} atomic_dec($p1977);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} rsxx_complete_dma($p0, $p1972, 4);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p1978 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p1979 := $load.ref($M.0, $p1978);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} push_tracker($p1979, 179);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i1980 := $add.i32($i1964, 1);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i1975 := $i1980;
    goto $bb722;

  $bb716:
    assume $i1963 == 1;
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p1966 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} atomic_dec($p1966);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} rsxx_complete_dma($p0, $p1961, 4);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p1967 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p1968 := $load.ref($M.0, $p1967);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} push_tracker($p1968, 178);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i1969 := $add.i32($i1953, 1);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i1964 := $i1969;
    goto $bb718;

  $bb712:
    assume $i1952 == 1;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p1955 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} atomic_dec($p1955);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} rsxx_complete_dma($p0, $p1950, 4);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p1956 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p1957 := $load.ref($M.0, $p1956);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} push_tracker($p1957, 177);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i1958 := $add.i32($i1942, 1);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i1953 := $i1958;
    goto $bb714;

  $bb708:
    assume $i1941 == 1;
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p1944 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} atomic_dec($p1944);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} rsxx_complete_dma($p0, $p1939, 4);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p1945 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p1946 := $load.ref($M.0, $p1945);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} push_tracker($p1946, 176);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i1947 := $add.i32($i1931, 1);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i1942 := $i1947;
    goto $bb710;

  $bb704:
    assume $i1930 == 1;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p1933 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} atomic_dec($p1933);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} rsxx_complete_dma($p0, $p1928, 4);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p1934 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p1935 := $load.ref($M.0, $p1934);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} push_tracker($p1935, 175);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i1936 := $add.i32($i1920, 1);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i1931 := $i1936;
    goto $bb706;

  $bb700:
    assume $i1919 == 1;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p1922 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} atomic_dec($p1922);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} rsxx_complete_dma($p0, $p1917, 4);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p1923 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p1924 := $load.ref($M.0, $p1923);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} push_tracker($p1924, 174);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i1925 := $add.i32($i1909, 1);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i1920 := $i1925;
    goto $bb702;

  $bb696:
    assume $i1908 == 1;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p1911 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} atomic_dec($p1911);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} rsxx_complete_dma($p0, $p1906, 4);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p1912 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p1913 := $load.ref($M.0, $p1912);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} push_tracker($p1913, 173);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i1914 := $add.i32($i1898, 1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i1909 := $i1914;
    goto $bb698;

  $bb692:
    assume $i1897 == 1;
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p1900 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} atomic_dec($p1900);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} rsxx_complete_dma($p0, $p1895, 4);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p1901 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p1902 := $load.ref($M.0, $p1901);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} push_tracker($p1902, 172);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i1903 := $add.i32($i1887, 1);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i1898 := $i1903;
    goto $bb694;

  $bb688:
    assume $i1886 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p1889 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} atomic_dec($p1889);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} rsxx_complete_dma($p0, $p1884, 4);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p1890 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p1891 := $load.ref($M.0, $p1890);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} push_tracker($p1891, 171);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i1892 := $add.i32($i1876, 1);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i1887 := $i1892;
    goto $bb690;

  $bb684:
    assume $i1875 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p1878 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} atomic_dec($p1878);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} rsxx_complete_dma($p0, $p1873, 4);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p1879 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p1880 := $load.ref($M.0, $p1879);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} push_tracker($p1880, 170);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i1881 := $add.i32($i1865, 1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i1876 := $i1881;
    goto $bb686;

  $bb680:
    assume $i1864 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p1867 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} atomic_dec($p1867);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} rsxx_complete_dma($p0, $p1862, 4);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p1868 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $p1869 := $load.ref($M.0, $p1868);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} push_tracker($p1869, 169);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i1870 := $add.i32($i1854, 1);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i1865 := $i1870;
    goto $bb682;

  $bb676:
    assume $i1853 == 1;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p1856 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} atomic_dec($p1856);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} rsxx_complete_dma($p0, $p1851, 4);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p1857 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p1858 := $load.ref($M.0, $p1857);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} push_tracker($p1858, 168);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i1859 := $add.i32($i1843, 1);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i1854 := $i1859;
    goto $bb678;

  $bb672:
    assume $i1842 == 1;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p1845 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} atomic_dec($p1845);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} rsxx_complete_dma($p0, $p1840, 4);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p1846 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p1847 := $load.ref($M.0, $p1846);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} push_tracker($p1847, 167);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i1848 := $add.i32($i1832, 1);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i1843 := $i1848;
    goto $bb674;

  $bb668:
    assume $i1831 == 1;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p1834 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} atomic_dec($p1834);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} rsxx_complete_dma($p0, $p1829, 4);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p1835 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p1836 := $load.ref($M.0, $p1835);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} push_tracker($p1836, 166);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i1837 := $add.i32($i1821, 1);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i1832 := $i1837;
    goto $bb670;

  $bb664:
    assume $i1820 == 1;
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p1823 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} atomic_dec($p1823);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} rsxx_complete_dma($p0, $p1818, 4);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $p1824 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $p1825 := $load.ref($M.0, $p1824);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} push_tracker($p1825, 165);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i1826 := $add.i32($i1810, 1);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i1821 := $i1826;
    goto $bb666;

  $bb660:
    assume $i1809 == 1;
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p1812 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} atomic_dec($p1812);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} rsxx_complete_dma($p0, $p1807, 4);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p1813 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p1814 := $load.ref($M.0, $p1813);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} push_tracker($p1814, 164);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i1815 := $add.i32($i1799, 1);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i1810 := $i1815;
    goto $bb662;

  $bb656:
    assume $i1798 == 1;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p1801 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} atomic_dec($p1801);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} rsxx_complete_dma($p0, $p1796, 4);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p1802 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p1803 := $load.ref($M.0, $p1802);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} push_tracker($p1803, 163);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i1804 := $add.i32($i1788, 1);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i1799 := $i1804;
    goto $bb658;

  $bb652:
    assume $i1787 == 1;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p1790 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} atomic_dec($p1790);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} rsxx_complete_dma($p0, $p1785, 4);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p1792 := $load.ref($M.0, $p1791);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} push_tracker($p1792, 162);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i1793 := $add.i32($i1777, 1);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i1788 := $i1793;
    goto $bb654;

  $bb648:
    assume $i1776 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p1779 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} atomic_dec($p1779);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} rsxx_complete_dma($p0, $p1774, 4);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p1780 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p1781 := $load.ref($M.0, $p1780);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} push_tracker($p1781, 161);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i1782 := $add.i32($i1766, 1);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i1777 := $i1782;
    goto $bb650;

  $bb644:
    assume $i1765 == 1;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p1768 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} atomic_dec($p1768);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} rsxx_complete_dma($p0, $p1763, 4);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p1769 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p1770 := $load.ref($M.0, $p1769);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} push_tracker($p1770, 160);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i1771 := $add.i32($i1755, 1);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i1766 := $i1771;
    goto $bb646;

  $bb640:
    assume $i1754 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p1757 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} atomic_dec($p1757);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} rsxx_complete_dma($p0, $p1752, 4);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p1758 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p1759 := $load.ref($M.0, $p1758);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} push_tracker($p1759, 159);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i1760 := $add.i32($i1744, 1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i1755 := $i1760;
    goto $bb642;

  $bb636:
    assume $i1743 == 1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p1746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} atomic_dec($p1746);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} rsxx_complete_dma($p0, $p1741, 4);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p1747 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $p1748 := $load.ref($M.0, $p1747);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} push_tracker($p1748, 158);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i1749 := $add.i32($i1733, 1);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i1744 := $i1749;
    goto $bb638;

  $bb632:
    assume $i1732 == 1;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p1735 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} atomic_dec($p1735);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} rsxx_complete_dma($p0, $p1730, 4);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $p1736 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $p1737 := $load.ref($M.0, $p1736);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} push_tracker($p1737, 157);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i1738 := $add.i32($i1722, 1);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i1733 := $i1738;
    goto $bb634;

  $bb628:
    assume $i1721 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p1724 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} atomic_dec($p1724);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} rsxx_complete_dma($p0, $p1719, 4);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p1726 := $load.ref($M.0, $p1725);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} push_tracker($p1726, 156);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i1727 := $add.i32($i1711, 1);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i1722 := $i1727;
    goto $bb630;

  $bb624:
    assume $i1710 == 1;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p1713 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} atomic_dec($p1713);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} rsxx_complete_dma($p0, $p1708, 4);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p1714 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p1715 := $load.ref($M.0, $p1714);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} push_tracker($p1715, 155);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i1716 := $add.i32($i1700, 1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i1711 := $i1716;
    goto $bb626;

  $bb620:
    assume $i1699 == 1;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p1702 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} atomic_dec($p1702);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} rsxx_complete_dma($p0, $p1697, 4);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p1703 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p1704 := $load.ref($M.0, $p1703);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} push_tracker($p1704, 154);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i1705 := $add.i32($i1689, 1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i1700 := $i1705;
    goto $bb622;

  $bb616:
    assume $i1688 == 1;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p1691 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} atomic_dec($p1691);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} rsxx_complete_dma($p0, $p1686, 4);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p1692 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p1693 := $load.ref($M.0, $p1692);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} push_tracker($p1693, 153);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i1694 := $add.i32($i1678, 1);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i1689 := $i1694;
    goto $bb618;

  $bb612:
    assume $i1677 == 1;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p1680 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} atomic_dec($p1680);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} rsxx_complete_dma($p0, $p1675, 4);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p1681 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $p1682 := $load.ref($M.0, $p1681);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} push_tracker($p1682, 152);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i1683 := $add.i32($i1667, 1);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i1678 := $i1683;
    goto $bb614;

  $bb608:
    assume $i1666 == 1;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p1669 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} atomic_dec($p1669);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} rsxx_complete_dma($p0, $p1664, 4);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p1670 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p1671 := $load.ref($M.0, $p1670);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} push_tracker($p1671, 151);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i1672 := $add.i32($i1656, 1);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i1667 := $i1672;
    goto $bb610;

  $bb604:
    assume $i1655 == 1;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p1658 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} atomic_dec($p1658);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} rsxx_complete_dma($p0, $p1653, 4);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p1659 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p1660 := $load.ref($M.0, $p1659);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} push_tracker($p1660, 150);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i1661 := $add.i32($i1645, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i1656 := $i1661;
    goto $bb606;

  $bb600:
    assume $i1644 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} atomic_dec($p1647);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} rsxx_complete_dma($p0, $p1642, 4);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p1648 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p1649 := $load.ref($M.0, $p1648);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} push_tracker($p1649, 149);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i1650 := $add.i32($i1634, 1);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i1645 := $i1650;
    goto $bb602;

  $bb596:
    assume $i1633 == 1;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p1636 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} atomic_dec($p1636);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} rsxx_complete_dma($p0, $p1631, 4);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p1637 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p1638 := $load.ref($M.0, $p1637);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} push_tracker($p1638, 148);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i1639 := $add.i32($i1623, 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i1634 := $i1639;
    goto $bb598;

  $bb592:
    assume $i1622 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p1625 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} atomic_dec($p1625);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} rsxx_complete_dma($p0, $p1620, 4);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p1626 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p1627 := $load.ref($M.0, $p1626);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} push_tracker($p1627, 147);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i1628 := $add.i32($i1612, 1);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i1623 := $i1628;
    goto $bb594;

  $bb588:
    assume $i1611 == 1;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $p1614 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} atomic_dec($p1614);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} rsxx_complete_dma($p0, $p1609, 4);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p1615 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p1616 := $load.ref($M.0, $p1615);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} push_tracker($p1616, 146);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i1617 := $add.i32($i1601, 1);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i1612 := $i1617;
    goto $bb590;

  $bb584:
    assume $i1600 == 1;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p1603 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} atomic_dec($p1603);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} rsxx_complete_dma($p0, $p1598, 4);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p1604 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p1605 := $load.ref($M.0, $p1604);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} push_tracker($p1605, 145);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i1606 := $add.i32($i1590, 1);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i1601 := $i1606;
    goto $bb586;

  $bb580:
    assume $i1589 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p1592 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} atomic_dec($p1592);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} rsxx_complete_dma($p0, $p1587, 4);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p1593 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p1594 := $load.ref($M.0, $p1593);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} push_tracker($p1594, 144);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i1595 := $add.i32($i1579, 1);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i1590 := $i1595;
    goto $bb582;

  $bb576:
    assume $i1578 == 1;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} atomic_dec($p1581);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} rsxx_complete_dma($p0, $p1576, 4);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p1582 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p1583 := $load.ref($M.0, $p1582);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} push_tracker($p1583, 143);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i1584 := $add.i32($i1568, 1);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i1579 := $i1584;
    goto $bb578;

  $bb572:
    assume $i1567 == 1;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p1570 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} atomic_dec($p1570);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} rsxx_complete_dma($p0, $p1565, 4);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p1571 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p1572 := $load.ref($M.0, $p1571);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} push_tracker($p1572, 142);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i1573 := $add.i32($i1557, 1);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i1568 := $i1573;
    goto $bb574;

  $bb568:
    assume $i1556 == 1;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p1559 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} atomic_dec($p1559);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} rsxx_complete_dma($p0, $p1554, 4);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p1560 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p1561 := $load.ref($M.0, $p1560);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} push_tracker($p1561, 141);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i1562 := $add.i32($i1546, 1);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i1557 := $i1562;
    goto $bb570;

  $bb564:
    assume $i1545 == 1;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} atomic_dec($p1548);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} rsxx_complete_dma($p0, $p1543, 4);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p1549 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p1550 := $load.ref($M.0, $p1549);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} push_tracker($p1550, 140);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i1551 := $add.i32($i1535, 1);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i1546 := $i1551;
    goto $bb566;

  $bb560:
    assume $i1534 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} atomic_dec($p1537);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} rsxx_complete_dma($p0, $p1532, 4);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p1538 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p1539 := $load.ref($M.0, $p1538);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} push_tracker($p1539, 139);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i1540 := $add.i32($i1524, 1);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i1535 := $i1540;
    goto $bb562;

  $bb556:
    assume $i1523 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} atomic_dec($p1526);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} rsxx_complete_dma($p0, $p1521, 4);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p1528 := $load.ref($M.0, $p1527);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} push_tracker($p1528, 138);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i1529 := $add.i32($i1513, 1);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i1524 := $i1529;
    goto $bb558;

  $bb552:
    assume $i1512 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p1515 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} atomic_dec($p1515);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} rsxx_complete_dma($p0, $p1510, 4);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p1517 := $load.ref($M.0, $p1516);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} push_tracker($p1517, 137);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i1518 := $add.i32($i1502, 1);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i1513 := $i1518;
    goto $bb554;

  $bb548:
    assume $i1501 == 1;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p1504 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} atomic_dec($p1504);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} rsxx_complete_dma($p0, $p1499, 4);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p1505 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p1506 := $load.ref($M.0, $p1505);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} push_tracker($p1506, 136);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i1507 := $add.i32($i1491, 1);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i1502 := $i1507;
    goto $bb550;

  $bb544:
    assume $i1490 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} atomic_dec($p1493);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} rsxx_complete_dma($p0, $p1488, 4);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p1494 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p1495 := $load.ref($M.0, $p1494);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} push_tracker($p1495, 135);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i1496 := $add.i32($i1480, 1);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i1491 := $i1496;
    goto $bb546;

  $bb540:
    assume $i1479 == 1;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p1482 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} atomic_dec($p1482);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} rsxx_complete_dma($p0, $p1477, 4);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p1484 := $load.ref($M.0, $p1483);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} push_tracker($p1484, 134);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i1485 := $add.i32($i1469, 1);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i1480 := $i1485;
    goto $bb542;

  $bb536:
    assume $i1468 == 1;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} atomic_dec($p1471);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} rsxx_complete_dma($p0, $p1466, 4);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p1472 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p1473 := $load.ref($M.0, $p1472);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} push_tracker($p1473, 133);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i1474 := $add.i32($i1458, 1);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i1469 := $i1474;
    goto $bb538;

  $bb532:
    assume $i1457 == 1;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} atomic_dec($p1460);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} rsxx_complete_dma($p0, $p1455, 4);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p1461 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p1462 := $load.ref($M.0, $p1461);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} push_tracker($p1462, 132);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i1463 := $add.i32($i1447, 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i1458 := $i1463;
    goto $bb534;

  $bb528:
    assume $i1446 == 1;
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p1449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} atomic_dec($p1449);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} rsxx_complete_dma($p0, $p1444, 4);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p1451 := $load.ref($M.0, $p1450);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} push_tracker($p1451, 131);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i1452 := $add.i32($i1436, 1);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i1447 := $i1452;
    goto $bb530;

  $bb524:
    assume $i1435 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} atomic_dec($p1438);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} rsxx_complete_dma($p0, $p1433, 4);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p1439 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p1440 := $load.ref($M.0, $p1439);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} push_tracker($p1440, 130);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i1441 := $add.i32($i1425, 1);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i1436 := $i1441;
    goto $bb526;

  $bb520:
    assume $i1424 == 1;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p1427 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} atomic_dec($p1427);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} rsxx_complete_dma($p0, $p1422, 4);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p1428 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p1429 := $load.ref($M.0, $p1428);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} push_tracker($p1429, 129);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i1430 := $add.i32($i1414, 1);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i1425 := $i1430;
    goto $bb522;

  $bb516:
    assume $i1413 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p1416 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} atomic_dec($p1416);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} rsxx_complete_dma($p0, $p1411, 4);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p1417 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p1418 := $load.ref($M.0, $p1417);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} push_tracker($p1418, 128);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i1419 := $add.i32($i1403, 1);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i1414 := $i1419;
    goto $bb518;

  $bb512:
    assume $i1402 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p1405 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} atomic_dec($p1405);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} rsxx_complete_dma($p0, $p1400, 4);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p1406 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p1407 := $load.ref($M.0, $p1406);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} push_tracker($p1407, 127);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i1408 := $add.i32($i1392, 1);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i1403 := $i1408;
    goto $bb514;

  $bb508:
    assume $i1391 == 1;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p1394 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} atomic_dec($p1394);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} rsxx_complete_dma($p0, $p1389, 4);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p1396 := $load.ref($M.0, $p1395);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} push_tracker($p1396, 126);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i1397 := $add.i32($i1381, 1);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i1392 := $i1397;
    goto $bb510;

  $bb504:
    assume $i1380 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} atomic_dec($p1383);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} rsxx_complete_dma($p0, $p1378, 4);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p1384 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p1385 := $load.ref($M.0, $p1384);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} push_tracker($p1385, 125);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i1386 := $add.i32($i1370, 1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i1381 := $i1386;
    goto $bb506;

  $bb500:
    assume $i1369 == 1;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p1372 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} atomic_dec($p1372);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} rsxx_complete_dma($p0, $p1367, 4);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.0, $p1373);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} push_tracker($p1374, 124);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i1375 := $add.i32($i1359, 1);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i1370 := $i1375;
    goto $bb502;

  $bb496:
    assume $i1358 == 1;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} atomic_dec($p1361);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} rsxx_complete_dma($p0, $p1356, 4);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p1362 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p1363 := $load.ref($M.0, $p1362);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} push_tracker($p1363, 123);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i1364 := $add.i32($i1348, 1);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i1359 := $i1364;
    goto $bb498;

  $bb492:
    assume $i1347 == 1;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} atomic_dec($p1350);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} rsxx_complete_dma($p0, $p1345, 4);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.0, $p1351);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} push_tracker($p1352, 122);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i1353 := $add.i32($i1337, 1);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i1348 := $i1353;
    goto $bb494;

  $bb488:
    assume $i1336 == 1;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} atomic_dec($p1339);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} rsxx_complete_dma($p0, $p1334, 4);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p1340 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p1341 := $load.ref($M.0, $p1340);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} push_tracker($p1341, 121);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i1342 := $add.i32($i1326, 1);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i1337 := $i1342;
    goto $bb490;

  $bb484:
    assume $i1325 == 1;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} atomic_dec($p1328);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} rsxx_complete_dma($p0, $p1323, 4);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p1330 := $load.ref($M.0, $p1329);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} push_tracker($p1330, 120);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i1331 := $add.i32($i1315, 1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i1326 := $i1331;
    goto $bb486;

  $bb480:
    assume $i1314 == 1;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} atomic_dec($p1317);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} rsxx_complete_dma($p0, $p1312, 4);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p1319 := $load.ref($M.0, $p1318);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} push_tracker($p1319, 119);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i1320 := $add.i32($i1304, 1);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i1315 := $i1320;
    goto $bb482;

  $bb476:
    assume $i1303 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p1306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} atomic_dec($p1306);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} rsxx_complete_dma($p0, $p1301, 4);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p1308 := $load.ref($M.0, $p1307);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} push_tracker($p1308, 118);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i1309 := $add.i32($i1293, 1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i1304 := $i1309;
    goto $bb478;

  $bb472:
    assume $i1292 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} atomic_dec($p1295);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} rsxx_complete_dma($p0, $p1290, 4);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p1296 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p1297 := $load.ref($M.0, $p1296);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} push_tracker($p1297, 117);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i1298 := $add.i32($i1282, 1);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i1293 := $i1298;
    goto $bb474;

  $bb468:
    assume $i1281 == 1;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} atomic_dec($p1284);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} rsxx_complete_dma($p0, $p1279, 4);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p1285 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p1286 := $load.ref($M.0, $p1285);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} push_tracker($p1286, 116);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i1287 := $add.i32($i1271, 1);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i1282 := $i1287;
    goto $bb470;

  $bb464:
    assume $i1270 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p1273 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} atomic_dec($p1273);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} rsxx_complete_dma($p0, $p1268, 4);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p1275 := $load.ref($M.0, $p1274);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} push_tracker($p1275, 115);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i1276 := $add.i32($i1260, 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i1271 := $i1276;
    goto $bb466;

  $bb460:
    assume $i1259 == 1;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p1262 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} atomic_dec($p1262);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} rsxx_complete_dma($p0, $p1257, 4);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p1264 := $load.ref($M.0, $p1263);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} push_tracker($p1264, 114);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i1265 := $add.i32($i1249, 1);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i1260 := $i1265;
    goto $bb462;

  $bb456:
    assume $i1248 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} atomic_dec($p1251);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} rsxx_complete_dma($p0, $p1246, 4);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p1252 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p1253 := $load.ref($M.0, $p1252);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} push_tracker($p1253, 113);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i1254 := $add.i32($i1238, 1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i1249 := $i1254;
    goto $bb458;

  $bb452:
    assume $i1237 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p1240 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} atomic_dec($p1240);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} rsxx_complete_dma($p0, $p1235, 4);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p1242 := $load.ref($M.0, $p1241);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} push_tracker($p1242, 112);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i1243 := $add.i32($i1227, 1);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i1238 := $i1243;
    goto $bb454;

  $bb448:
    assume $i1226 == 1;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p1229 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} atomic_dec($p1229);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} rsxx_complete_dma($p0, $p1224, 4);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p1231 := $load.ref($M.0, $p1230);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} push_tracker($p1231, 111);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i1232 := $add.i32($i1216, 1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i1227 := $i1232;
    goto $bb450;

  $bb444:
    assume $i1215 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p1218 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} atomic_dec($p1218);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} rsxx_complete_dma($p0, $p1213, 4);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p1220 := $load.ref($M.0, $p1219);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} push_tracker($p1220, 110);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i1221 := $add.i32($i1205, 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i1216 := $i1221;
    goto $bb446;

  $bb440:
    assume $i1204 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p1207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} atomic_dec($p1207);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} rsxx_complete_dma($p0, $p1202, 4);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p1209 := $load.ref($M.0, $p1208);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} push_tracker($p1209, 109);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i1210 := $add.i32($i1194, 1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i1205 := $i1210;
    goto $bb442;

  $bb436:
    assume $i1193 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} atomic_dec($p1196);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} rsxx_complete_dma($p0, $p1191, 4);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p1198 := $load.ref($M.0, $p1197);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} push_tracker($p1198, 108);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i1199 := $add.i32($i1183, 1);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i1194 := $i1199;
    goto $bb438;

  $bb432:
    assume $i1182 == 1;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} atomic_dec($p1185);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} rsxx_complete_dma($p0, $p1180, 4);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p1187 := $load.ref($M.0, $p1186);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} push_tracker($p1187, 107);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i1188 := $add.i32($i1172, 1);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i1183 := $i1188;
    goto $bb434;

  $bb428:
    assume $i1171 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p1174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} atomic_dec($p1174);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} rsxx_complete_dma($p0, $p1169, 4);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p1176 := $load.ref($M.0, $p1175);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} push_tracker($p1176, 106);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i1177 := $add.i32($i1161, 1);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i1172 := $i1177;
    goto $bb430;

  $bb424:
    assume $i1160 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p1163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} atomic_dec($p1163);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} rsxx_complete_dma($p0, $p1158, 4);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p1164 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p1165 := $load.ref($M.0, $p1164);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} push_tracker($p1165, 105);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i1166 := $add.i32($i1150, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i1161 := $i1166;
    goto $bb426;

  $bb420:
    assume $i1149 == 1;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} atomic_dec($p1152);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} rsxx_complete_dma($p0, $p1147, 4);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p1153 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p1154 := $load.ref($M.0, $p1153);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} push_tracker($p1154, 104);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i1155 := $add.i32($i1139, 1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i1150 := $i1155;
    goto $bb422;

  $bb416:
    assume $i1138 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p1141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} atomic_dec($p1141);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} rsxx_complete_dma($p0, $p1136, 4);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p1142 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p1143 := $load.ref($M.0, $p1142);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} push_tracker($p1143, 103);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i1144 := $add.i32($i1128, 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i1139 := $i1144;
    goto $bb418;

  $bb412:
    assume $i1127 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} atomic_dec($p1130);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} rsxx_complete_dma($p0, $p1125, 4);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p1132 := $load.ref($M.0, $p1131);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} push_tracker($p1132, 102);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i1133 := $add.i32($i1117, 1);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i1128 := $i1133;
    goto $bb414;

  $bb408:
    assume $i1116 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} atomic_dec($p1119);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} rsxx_complete_dma($p0, $p1114, 4);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p1121 := $load.ref($M.0, $p1120);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} push_tracker($p1121, 101);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i1122 := $add.i32($i1106, 1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i1117 := $i1122;
    goto $bb410;

  $bb404:
    assume $i1105 == 1;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} atomic_dec($p1108);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} rsxx_complete_dma($p0, $p1103, 4);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p1110 := $load.ref($M.0, $p1109);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} push_tracker($p1110, 100);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i1111 := $add.i32($i1095, 1);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i1106 := $i1111;
    goto $bb406;

  $bb400:
    assume $i1094 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} atomic_dec($p1097);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} rsxx_complete_dma($p0, $p1092, 4);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p1098 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p1099 := $load.ref($M.0, $p1098);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} push_tracker($p1099, 99);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i1100 := $add.i32($i1084, 1);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i1095 := $i1100;
    goto $bb402;

  $bb396:
    assume $i1083 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} atomic_dec($p1086);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} rsxx_complete_dma($p0, $p1081, 4);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p1088 := $load.ref($M.0, $p1087);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} push_tracker($p1088, 98);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i1089 := $add.i32($i1073, 1);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i1084 := $i1089;
    goto $bb398;

  $bb392:
    assume $i1072 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} atomic_dec($p1075);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} rsxx_complete_dma($p0, $p1070, 4);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p1077 := $load.ref($M.0, $p1076);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} push_tracker($p1077, 97);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i1078 := $add.i32($i1062, 1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i1073 := $i1078;
    goto $bb394;

  $bb388:
    assume $i1061 == 1;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} atomic_dec($p1064);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} rsxx_complete_dma($p0, $p1059, 4);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p1066 := $load.ref($M.0, $p1065);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} push_tracker($p1066, 96);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i1067 := $add.i32($i1051, 1);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i1062 := $i1067;
    goto $bb390;

  $bb384:
    assume $i1050 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} atomic_dec($p1053);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} rsxx_complete_dma($p0, $p1048, 4);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p1055 := $load.ref($M.0, $p1054);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} push_tracker($p1055, 95);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i1056 := $add.i32($i1040, 1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i1051 := $i1056;
    goto $bb386;

  $bb380:
    assume $i1039 == 1;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p1042 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} atomic_dec($p1042);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} rsxx_complete_dma($p0, $p1037, 4);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p1044 := $load.ref($M.0, $p1043);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} push_tracker($p1044, 94);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i1045 := $add.i32($i1029, 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i1040 := $i1045;
    goto $bb382;

  $bb376:
    assume $i1028 == 1;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} atomic_dec($p1031);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} rsxx_complete_dma($p0, $p1026, 4);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p1033 := $load.ref($M.0, $p1032);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} push_tracker($p1033, 93);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i1034 := $add.i32($i1018, 1);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i1029 := $i1034;
    goto $bb378;

  $bb372:
    assume $i1017 == 1;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} atomic_dec($p1020);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} rsxx_complete_dma($p0, $p1015, 4);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p1022 := $load.ref($M.0, $p1021);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} push_tracker($p1022, 92);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i1023 := $add.i32($i1007, 1);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i1018 := $i1023;
    goto $bb374;

  $bb368:
    assume $i1006 == 1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} atomic_dec($p1009);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} rsxx_complete_dma($p0, $p1004, 4);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p1011 := $load.ref($M.0, $p1010);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} push_tracker($p1011, 91);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i1012 := $add.i32($i996, 1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i1007 := $i1012;
    goto $bb370;

  $bb364:
    assume $i995 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} atomic_dec($p998);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} rsxx_complete_dma($p0, $p993, 4);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p1000 := $load.ref($M.0, $p999);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} push_tracker($p1000, 90);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i1001 := $add.i32($i985, 1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i996 := $i1001;
    goto $bb366;

  $bb360:
    assume $i984 == 1;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} atomic_dec($p987);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} rsxx_complete_dma($p0, $p982, 4);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p989 := $load.ref($M.0, $p988);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} push_tracker($p989, 89);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i990 := $add.i32($i974, 1);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i985 := $i990;
    goto $bb362;

  $bb356:
    assume $i973 == 1;
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} atomic_dec($p976);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} rsxx_complete_dma($p0, $p971, 4);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p978 := $load.ref($M.0, $p977);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} push_tracker($p978, 88);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i979 := $add.i32($i963, 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i974 := $i979;
    goto $bb358;

  $bb352:
    assume $i962 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} atomic_dec($p965);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} rsxx_complete_dma($p0, $p960, 4);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p967 := $load.ref($M.0, $p966);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} push_tracker($p967, 87);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i968 := $add.i32($i952, 1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i963 := $i968;
    goto $bb354;

  $bb348:
    assume $i951 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p954 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} atomic_dec($p954);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} rsxx_complete_dma($p0, $p949, 4);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p956 := $load.ref($M.0, $p955);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} push_tracker($p956, 86);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i957 := $add.i32($i941, 1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i952 := $i957;
    goto $bb350;

  $bb344:
    assume $i940 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} atomic_dec($p943);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} rsxx_complete_dma($p0, $p938, 4);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p944 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p945 := $load.ref($M.0, $p944);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} push_tracker($p945, 85);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i946 := $add.i32($i930, 1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i941 := $i946;
    goto $bb346;

  $bb340:
    assume $i929 == 1;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} atomic_dec($p932);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} rsxx_complete_dma($p0, $p927, 4);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p934 := $load.ref($M.0, $p933);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} push_tracker($p934, 84);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i935 := $add.i32($i919, 1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i930 := $i935;
    goto $bb342;

  $bb336:
    assume $i918 == 1;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} atomic_dec($p921);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} rsxx_complete_dma($p0, $p916, 4);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p923 := $load.ref($M.0, $p922);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} push_tracker($p923, 83);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i924 := $add.i32($i908, 1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i919 := $i924;
    goto $bb338;

  $bb332:
    assume $i907 == 1;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} atomic_dec($p910);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} rsxx_complete_dma($p0, $p905, 4);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.0, $p911);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} push_tracker($p912, 82);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i913 := $add.i32($i897, 1);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i908 := $i913;
    goto $bb334;

  $bb328:
    assume $i896 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} atomic_dec($p899);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} rsxx_complete_dma($p0, $p894, 4);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p901 := $load.ref($M.0, $p900);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} push_tracker($p901, 81);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i902 := $add.i32($i886, 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i897 := $i902;
    goto $bb330;

  $bb324:
    assume $i885 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} atomic_dec($p888);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} rsxx_complete_dma($p0, $p883, 4);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} push_tracker($p890, 80);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i891 := $add.i32($i875, 1);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i886 := $i891;
    goto $bb326;

  $bb320:
    assume $i874 == 1;
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} atomic_dec($p877);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} rsxx_complete_dma($p0, $p872, 4);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p879 := $load.ref($M.0, $p878);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} push_tracker($p879, 79);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i880 := $add.i32($i864, 1);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i875 := $i880;
    goto $bb322;

  $bb316:
    assume $i863 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} atomic_dec($p866);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} rsxx_complete_dma($p0, $p861, 4);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p868 := $load.ref($M.0, $p867);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} push_tracker($p868, 78);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i869 := $add.i32($i853, 1);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i864 := $i869;
    goto $bb318;

  $bb312:
    assume $i852 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} atomic_dec($p855);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} rsxx_complete_dma($p0, $p850, 4);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p857 := $load.ref($M.0, $p856);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} push_tracker($p857, 77);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i858 := $add.i32($i842, 1);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i853 := $i858;
    goto $bb314;

  $bb308:
    assume $i841 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} atomic_dec($p844);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} rsxx_complete_dma($p0, $p839, 4);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p846 := $load.ref($M.0, $p845);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} push_tracker($p846, 76);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i847 := $add.i32($i831, 1);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i842 := $i847;
    goto $bb310;

  $bb304:
    assume $i830 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} atomic_dec($p833);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} rsxx_complete_dma($p0, $p828, 4);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} push_tracker($p835, 75);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i836 := $add.i32($i820, 1);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i831 := $i836;
    goto $bb306;

  $bb300:
    assume $i819 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} atomic_dec($p822);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} rsxx_complete_dma($p0, $p817, 4);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.0, $p823);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} push_tracker($p824, 74);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i825 := $add.i32($i809, 1);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i820 := $i825;
    goto $bb302;

  $bb296:
    assume $i808 == 1;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} atomic_dec($p811);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} rsxx_complete_dma($p0, $p806, 4);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p813 := $load.ref($M.0, $p812);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} push_tracker($p813, 73);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i814 := $add.i32($i798, 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i809 := $i814;
    goto $bb298;

  $bb292:
    assume $i797 == 1;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} atomic_dec($p800);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} rsxx_complete_dma($p0, $p795, 4);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.0, $p801);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} push_tracker($p802, 72);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i803 := $add.i32($i787, 1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i798 := $i803;
    goto $bb294;

  $bb288:
    assume $i786 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} atomic_dec($p789);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} rsxx_complete_dma($p0, $p784, 4);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p791 := $load.ref($M.0, $p790);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} push_tracker($p791, 71);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i792 := $add.i32($i776, 1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i787 := $i792;
    goto $bb290;

  $bb284:
    assume $i775 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} atomic_dec($p778);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} rsxx_complete_dma($p0, $p773, 4);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p780 := $load.ref($M.0, $p779);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} push_tracker($p780, 70);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i781 := $add.i32($i765, 1);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i776 := $i781;
    goto $bb286;

  $bb280:
    assume $i764 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} atomic_dec($p767);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} rsxx_complete_dma($p0, $p762, 4);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p769 := $load.ref($M.0, $p768);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} push_tracker($p769, 69);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i770 := $add.i32($i754, 1);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i765 := $i770;
    goto $bb282;

  $bb276:
    assume $i753 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} atomic_dec($p756);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} rsxx_complete_dma($p0, $p751, 4);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p758 := $load.ref($M.0, $p757);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} push_tracker($p758, 68);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i759 := $add.i32($i743, 1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i754 := $i759;
    goto $bb278;

  $bb272:
    assume $i742 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} atomic_dec($p745);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} rsxx_complete_dma($p0, $p740, 4);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p747 := $load.ref($M.0, $p746);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} push_tracker($p747, 67);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i748 := $add.i32($i732, 1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i743 := $i748;
    goto $bb274;

  $bb268:
    assume $i731 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} atomic_dec($p734);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} rsxx_complete_dma($p0, $p729, 4);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.0, $p735);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} push_tracker($p736, 66);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i737 := $add.i32($i721, 1);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i732 := $i737;
    goto $bb270;

  $bb264:
    assume $i720 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} atomic_dec($p723);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} rsxx_complete_dma($p0, $p718, 4);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p725 := $load.ref($M.0, $p724);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} push_tracker($p725, 65);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i726 := $add.i32($i710, 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i721 := $i726;
    goto $bb266;

  $bb260:
    assume $i709 == 1;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} atomic_dec($p712);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} rsxx_complete_dma($p0, $p707, 4);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.0, $p713);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} push_tracker($p714, 64);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i715 := $add.i32($i699, 1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i710 := $i715;
    goto $bb262;

  $bb256:
    assume $i698 == 1;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} atomic_dec($p701);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} rsxx_complete_dma($p0, $p696, 4);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p703 := $load.ref($M.0, $p702);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} push_tracker($p703, 63);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i704 := $add.i32($i688, 1);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i699 := $i704;
    goto $bb258;

  $bb252:
    assume $i687 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} atomic_dec($p690);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} rsxx_complete_dma($p0, $p685, 4);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.0, $p691);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} push_tracker($p692, 62);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i693 := $add.i32($i677, 1);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i688 := $i693;
    goto $bb254;

  $bb248:
    assume $i676 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} atomic_dec($p679);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} rsxx_complete_dma($p0, $p674, 4);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p681 := $load.ref($M.0, $p680);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} push_tracker($p681, 61);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i682 := $add.i32($i666, 1);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i677 := $i682;
    goto $bb250;

  $bb244:
    assume $i665 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} atomic_dec($p668);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} rsxx_complete_dma($p0, $p663, 4);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} push_tracker($p670, 60);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i671 := $add.i32($i655, 1);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i666 := $i671;
    goto $bb246;

  $bb240:
    assume $i654 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} atomic_dec($p657);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} rsxx_complete_dma($p0, $p652, 4);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.0, $p658);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} push_tracker($p659, 59);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i660 := $add.i32($i644, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i655 := $i660;
    goto $bb242;

  $bb236:
    assume $i643 == 1;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} atomic_dec($p646);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} rsxx_complete_dma($p0, $p641, 4);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p648 := $load.ref($M.0, $p647);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} push_tracker($p648, 58);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i649 := $add.i32($i633, 1);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i644 := $i649;
    goto $bb238;

  $bb232:
    assume $i632 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} atomic_dec($p635);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} rsxx_complete_dma($p0, $p630, 4);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} push_tracker($p637, 57);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i638 := $add.i32($i622, 1);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i633 := $i638;
    goto $bb234;

  $bb228:
    assume $i621 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} atomic_dec($p624);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} rsxx_complete_dma($p0, $p619, 4);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.0, $p625);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} push_tracker($p626, 56);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i627 := $add.i32($i611, 1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i622 := $i627;
    goto $bb230;

  $bb224:
    assume $i610 == 1;
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} atomic_dec($p613);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} rsxx_complete_dma($p0, $p608, 4);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p615 := $load.ref($M.0, $p614);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} push_tracker($p615, 55);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i616 := $add.i32($i600, 1);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i611 := $i616;
    goto $bb226;

  $bb220:
    assume $i599 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} atomic_dec($p602);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} rsxx_complete_dma($p0, $p597, 4);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p604 := $load.ref($M.0, $p603);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} push_tracker($p604, 54);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i605 := $add.i32($i589, 1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i600 := $i605;
    goto $bb222;

  $bb216:
    assume $i588 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} atomic_dec($p591);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} rsxx_complete_dma($p0, $p586, 4);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.0, $p592);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} push_tracker($p593, 53);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i594 := $add.i32($i578, 1);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i589 := $i594;
    goto $bb218;

  $bb212:
    assume $i577 == 1;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} atomic_dec($p580);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} rsxx_complete_dma($p0, $p575, 4);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.0, $p581);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} push_tracker($p582, 52);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i583 := $add.i32($i567, 1);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i578 := $i583;
    goto $bb214;

  $bb208:
    assume $i566 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} atomic_dec($p569);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} rsxx_complete_dma($p0, $p564, 4);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p571 := $load.ref($M.0, $p570);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} push_tracker($p571, 51);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i572 := $add.i32($i556, 1);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i567 := $i572;
    goto $bb210;

  $bb204:
    assume $i555 == 1;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} atomic_dec($p558);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} rsxx_complete_dma($p0, $p553, 4);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.0, $p559);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} push_tracker($p560, 50);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i561 := $add.i32($i545, 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i556 := $i561;
    goto $bb206;

  $bb200:
    assume $i544 == 1;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} atomic_dec($p547);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} rsxx_complete_dma($p0, $p542, 4);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p549 := $load.ref($M.0, $p548);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} push_tracker($p549, 49);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i550 := $add.i32($i534, 1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i545 := $i550;
    goto $bb202;

  $bb196:
    assume $i533 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} atomic_dec($p536);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} rsxx_complete_dma($p0, $p531, 4);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p538 := $load.ref($M.0, $p537);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} push_tracker($p538, 48);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i539 := $add.i32($i523, 1);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i534 := $i539;
    goto $bb198;

  $bb192:
    assume $i522 == 1;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} atomic_dec($p525);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} rsxx_complete_dma($p0, $p520, 4);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} push_tracker($p527, 47);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i528 := $add.i32($i512, 1);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i523 := $i528;
    goto $bb194;

  $bb188:
    assume $i511 == 1;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} atomic_dec($p514);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} rsxx_complete_dma($p0, $p509, 4);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p516 := $load.ref($M.0, $p515);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} push_tracker($p516, 46);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i517 := $add.i32($i501, 1);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i512 := $i517;
    goto $bb190;

  $bb184:
    assume $i500 == 1;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} atomic_dec($p503);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} rsxx_complete_dma($p0, $p498, 4);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.0, $p504);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} push_tracker($p505, 45);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i506 := $add.i32($i490, 1);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i501 := $i506;
    goto $bb186;

  $bb180:
    assume $i489 == 1;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} atomic_dec($p492);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} rsxx_complete_dma($p0, $p487, 4);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p494 := $load.ref($M.0, $p493);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} push_tracker($p494, 44);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i495 := $add.i32($i479, 1);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i490 := $i495;
    goto $bb182;

  $bb176:
    assume $i478 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} atomic_dec($p481);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} rsxx_complete_dma($p0, $p476, 4);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p483 := $load.ref($M.0, $p482);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} push_tracker($p483, 43);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i484 := $add.i32($i468, 1);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i479 := $i484;
    goto $bb178;

  $bb172:
    assume $i467 == 1;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} atomic_dec($p470);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} rsxx_complete_dma($p0, $p465, 4);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} push_tracker($p472, 42);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i473 := $add.i32($i457, 1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i468 := $i473;
    goto $bb174;

  $bb168:
    assume $i456 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} atomic_dec($p459);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} rsxx_complete_dma($p0, $p454, 4);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.0, $p460);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} push_tracker($p461, 41);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i462 := $add.i32($i446, 1);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i457 := $i462;
    goto $bb170;

  $bb164:
    assume $i445 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} atomic_dec($p448);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} rsxx_complete_dma($p0, $p443, 4);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} push_tracker($p450, 40);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i451 := $add.i32($i435, 1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i446 := $i451;
    goto $bb166;

  $bb160:
    assume $i434 == 1;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} atomic_dec($p437);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} rsxx_complete_dma($p0, $p432, 4);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} push_tracker($p439, 39);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i440 := $add.i32($i424, 1);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i435 := $i440;
    goto $bb162;

  $bb156:
    assume $i423 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} atomic_dec($p426);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} rsxx_complete_dma($p0, $p421, 4);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.0, $p427);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} push_tracker($p428, 38);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i429 := $add.i32($i413, 1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i424 := $i429;
    goto $bb158;

  $bb152:
    assume $i412 == 1;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} atomic_dec($p415);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} rsxx_complete_dma($p0, $p410, 4);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.0, $p416);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} push_tracker($p417, 37);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i418 := $add.i32($i402, 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i413 := $i418;
    goto $bb154;

  $bb148:
    assume $i401 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} atomic_dec($p404);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} rsxx_complete_dma($p0, $p399, 4);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} push_tracker($p406, 36);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i407 := $add.i32($i391, 1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i402 := $i407;
    goto $bb150;

  $bb144:
    assume $i390 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} atomic_dec($p393);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} rsxx_complete_dma($p0, $p388, 4);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} push_tracker($p395, 35);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i396 := $add.i32($i380, 1);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i391 := $i396;
    goto $bb146;

  $bb140:
    assume $i379 == 1;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} atomic_dec($p382);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} rsxx_complete_dma($p0, $p377, 4);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.0, $p383);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} push_tracker($p384, 34);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i385 := $add.i32($i369, 1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i380 := $i385;
    goto $bb142;

  $bb136:
    assume $i368 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} atomic_dec($p371);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} rsxx_complete_dma($p0, $p366, 4);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p373 := $load.ref($M.0, $p372);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} push_tracker($p373, 33);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i374 := $add.i32($i358, 1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i369 := $i374;
    goto $bb138;

  $bb132:
    assume $i357 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} atomic_dec($p360);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} rsxx_complete_dma($p0, $p355, 4);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} push_tracker($p362, 32);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i347, 1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i358 := $i363;
    goto $bb134;

  $bb128:
    assume $i346 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} atomic_dec($p349);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} rsxx_complete_dma($p0, $p344, 4);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} push_tracker($p351, 31);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i352 := $add.i32($i336, 1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i347 := $i352;
    goto $bb130;

  $bb124:
    assume $i335 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} atomic_dec($p338);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} rsxx_complete_dma($p0, $p333, 4);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} push_tracker($p340, 30);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i341 := $add.i32($i325, 1);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i336 := $i341;
    goto $bb126;

  $bb120:
    assume $i324 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} atomic_dec($p327);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} rsxx_complete_dma($p0, $p322, 4);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} push_tracker($p329, 29);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i314, 1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i325 := $i330;
    goto $bb122;

  $bb116:
    assume $i313 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} atomic_dec($p316);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} rsxx_complete_dma($p0, $p311, 4);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} push_tracker($p318, 28);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i303, 1);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i314 := $i319;
    goto $bb118;

  $bb112:
    assume $i302 == 1;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} atomic_dec($p305);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} rsxx_complete_dma($p0, $p300, 4);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} push_tracker($p307, 27);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i308 := $add.i32($i292, 1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i303 := $i308;
    goto $bb114;

  $bb108:
    assume $i291 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} atomic_dec($p294);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} rsxx_complete_dma($p0, $p289, 4);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} push_tracker($p296, 26);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i297 := $add.i32($i281, 1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i292 := $i297;
    goto $bb110;

  $bb104:
    assume $i280 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} atomic_dec($p283);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} rsxx_complete_dma($p0, $p278, 4);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} push_tracker($p285, 25);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i286 := $add.i32($i270, 1);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i281 := $i286;
    goto $bb106;

  $bb100:
    assume $i269 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} atomic_dec($p272);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} rsxx_complete_dma($p0, $p267, 4);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} push_tracker($p274, 24);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i275 := $add.i32($i259, 1);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i270 := $i275;
    goto $bb102;

  $bb96:
    assume $i258 == 1;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} atomic_dec($p261);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} rsxx_complete_dma($p0, $p256, 4);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} push_tracker($p263, 23);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i264 := $add.i32($i248, 1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i259 := $i264;
    goto $bb98;

  $bb92:
    assume $i247 == 1;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} atomic_dec($p250);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} rsxx_complete_dma($p0, $p245, 4);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} push_tracker($p252, 22);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i253 := $add.i32($i237, 1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i248 := $i253;
    goto $bb94;

  $bb88:
    assume $i236 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} atomic_dec($p239);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} rsxx_complete_dma($p0, $p234, 4);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} push_tracker($p241, 21);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i226, 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i237 := $i242;
    goto $bb90;

  $bb84:
    assume $i225 == 1;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} atomic_dec($p228);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} rsxx_complete_dma($p0, $p223, 4);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} push_tracker($p230, 20);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i231 := $add.i32($i215, 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i226 := $i231;
    goto $bb86;

  $bb80:
    assume $i214 == 1;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} atomic_dec($p217);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} rsxx_complete_dma($p0, $p212, 4);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} push_tracker($p219, 19);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i204, 1);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i215 := $i220;
    goto $bb82;

  $bb76:
    assume $i203 == 1;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} atomic_dec($p206);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} rsxx_complete_dma($p0, $p201, 4);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} push_tracker($p208, 18);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i193, 1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i204 := $i209;
    goto $bb78;

  $bb72:
    assume $i192 == 1;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} atomic_dec($p195);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} rsxx_complete_dma($p0, $p190, 4);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} push_tracker($p197, 17);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i182, 1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i193 := $i198;
    goto $bb74;

  $bb68:
    assume $i181 == 1;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} atomic_dec($p184);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} rsxx_complete_dma($p0, $p179, 4);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} push_tracker($p186, 16);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i171, 1);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i182 := $i187;
    goto $bb70;

  $bb64:
    assume $i170 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} atomic_dec($p173);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} rsxx_complete_dma($p0, $p168, 4);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} push_tracker($p175, 15);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i160, 1);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i171 := $i176;
    goto $bb66;

  $bb60:
    assume $i159 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} atomic_dec($p162);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} rsxx_complete_dma($p0, $p157, 4);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} push_tracker($p164, 14);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i165 := $add.i32($i149, 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i160 := $i165;
    goto $bb62;

  $bb56:
    assume $i148 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} atomic_dec($p151);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} rsxx_complete_dma($p0, $p146, 4);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} push_tracker($p153, 13);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i138, 1);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i149 := $i154;
    goto $bb58;

  $bb52:
    assume $i137 == 1;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} atomic_dec($p140);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} rsxx_complete_dma($p0, $p135, 4);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} push_tracker($p142, 12);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i127, 1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i138 := $i143;
    goto $bb54;

  $bb48:
    assume $i126 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} atomic_dec($p129);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} rsxx_complete_dma($p0, $p124, 4);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} push_tracker($p131, 11);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i116, 1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i127 := $i132;
    goto $bb50;

  $bb44:
    assume $i115 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} atomic_dec($p118);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} rsxx_complete_dma($p0, $p113, 4);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} push_tracker($p120, 10);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i105, 1);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i116 := $i121;
    goto $bb46;

  $bb40:
    assume $i104 == 1;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} atomic_dec($p107);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} rsxx_complete_dma($p0, $p102, 4);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} push_tracker($p109, 9);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i94, 1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i105 := $i110;
    goto $bb42;

  $bb36:
    assume $i93 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} atomic_dec($p96);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} rsxx_complete_dma($p0, $p91, 4);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} push_tracker($p98, 8);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i83, 1);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i94 := $i99;
    goto $bb38;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} atomic_dec($p85);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} rsxx_complete_dma($p0, $p80, 4);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} push_tracker($p87, 7);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i72, 1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i83 := $i88;
    goto $bb34;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} atomic_dec($p74);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} rsxx_complete_dma($p0, $p69, 4);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} push_tracker($p76, 6);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i61, 1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i72 := $i77;
    goto $bb30;

  $bb24:
    assume $i60 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} atomic_dec($p63);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} rsxx_complete_dma($p0, $p58, 4);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} push_tracker($p65, 5);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i50, 1);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i61 := $i66;
    goto $bb26;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} atomic_dec($p52);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} rsxx_complete_dma($p0, $p47, 4);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} push_tracker($p54, 4);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i39, 1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i50 := $i55;
    goto $bb22;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} atomic_dec($p41);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} rsxx_complete_dma($p0, $p36, 4);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} push_tracker($p43, 3);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i28, 1);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i39 := $i44;
    goto $bb18;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} atomic_dec($p30);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} rsxx_complete_dma($p0, $p25, 4);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} push_tracker($p32, 2);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i17, 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i28 := $i33;
    goto $bb14;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} atomic_dec($p19);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} rsxx_complete_dma($p0, $p14, 4);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} push_tracker($p21, 1);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i10, 1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i17 := $i22;
    goto $bb10;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} atomic_dec($p7);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} rsxx_complete_dma($p0, $p3, 4);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} push_tracker($p9, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 453801);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    return;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 454833);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2750} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 455865);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2753} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    return;
}



const get_tracker_dma: ref;

axiom get_tracker_dma == $sub.ref(0, 456897);

procedure get_tracker_dma($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_tracker_dma($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} {:cexpr "get_tracker_dma:arg:tag"} boogie_si_record_i32($i1);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref($i2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 457929);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 2755} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_complete_dma: ref;

axiom rsxx_complete_dma == $sub.ref(0, 458961);

procedure rsxx_complete_dma($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_complete_dma($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} {:cexpr "rsxx_complete_dma:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i2, 2);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i2, 4);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} rsxx_free_dma($p0, $p1);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(0, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i2, 0);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 2757} devirtbounce.3($p32, $p34, $p36, $i38);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(56, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(56, 1));
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(52, 1));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(52, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(48, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(480, 1)), $mul.ref(48, 1));
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const push_tracker: ref;

axiom push_tracker == $sub.ref(0, 459993);

procedure push_tracker($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation push_tracker($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} {:cexpr "push_tracker:arg:tag"} boogie_si_record_i32($i1);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} spin_lock($p2);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref($i5, 16)), $mul.ref(0, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i4);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref($i10, 16)), $mul.ref(8, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} spin_unlock($p14);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 461025);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} _raw_spin_lock($p2);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 462057);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} _raw_spin_unlock($p2);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 463089);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 464121);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_free_dma: ref;

axiom rsxx_free_dma == $sub.ref(0, 465153);

procedure rsxx_free_dma($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rsxx_free_dma($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 112);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $M.39;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} kmem_cache_free($p27, $p28);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(0, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} $i12 := pci_dma_mapping_error($p9, $i11);
    call {:si_unique_call 2765} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $i14 := get_dma_size($p1);
    call {:si_unique_call 2767} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(0, 1));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i14);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 128);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then 1 else 2);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} pci_unmap_page($p18, $i20, $i21, $i26);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_dma_mapping_error: ref;

axiom pci_dma_mapping_error == $sub.ref(0, 466185);

procedure pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} {:cexpr "pci_dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} $i3 := dma_mapping_error($p2, $i1);
    call {:si_unique_call 2772} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_dma_size: ref;

axiom get_dma_size == $sub.ref(0, 467217);

procedure get_dma_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_dma_size($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i9 := 4096;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 9);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const pci_unmap_page: ref;

axiom pci_unmap_page == $sub.ref(0, 468249);

procedure pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} {:cexpr "pci_unmap_page:arg:dma_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 2774} {:cexpr "pci_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2775} {:cexpr "pci_unmap_page:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} dma_unmap_page($p7, $i1, $i2, $i3);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 469281);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2778} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2779} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} $p4 := get_dma_ops($p0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 2782} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2784} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 2786} devirtbounce.4($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 2785} devirtbounce(0, .str.172, 96, 12);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 470313);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2789} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 471345);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 472377);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2792} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2793} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2794} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    return;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 473409);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} $p2 := get_dma_ops($p0);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 2798} $i9 := devirtbounce.5($p8, $p0, $i1);
    call {:si_unique_call 2799} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 474441);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 475473);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_3: ref;

axiom call_and_disable_all_3 == $sub.ref(0, 476505);

procedure call_and_disable_all_3($i0: i32);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation call_and_disable_all_3($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} {:cexpr "call_and_disable_all_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.27;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.29;
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p12 := $M.30;
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} call_and_disable_work_3($p12);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p9 := $M.28;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} call_and_disable_work_3($p9);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p6 := $M.26;
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} call_and_disable_work_3($p6);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p3 := $M.24;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} call_and_disable_work_3($p3);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const call_and_disable_work_3: ref;

axiom call_and_disable_work_3 == $sub.ref(0, 477537);

procedure call_and_disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation call_and_disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.25;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i11 := $M.25;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.27;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i19 := $M.27;
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.29;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i27 := $M.29;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p30 := $M.30;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} creg_cmd_done($p0);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 2813} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p22 := $M.28;
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} creg_cmd_done($p0);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 2811} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p14 := $M.26;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} creg_cmd_done($p0);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 2809} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $p6 := $M.24;
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} creg_cmd_done($p0);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 2807} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const creg_cmd_done: ref;

axiom creg_cmd_done == $sub.ref(0, 478569);

procedure creg_cmd_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation creg_cmd_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i48: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 240), 1184));
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} $i5 := ldv_del_timer_sync_90($p4);
    call {:si_unique_call 2815} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} spin_lock_bh($p16);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} spin_unlock_bh($p23);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p19);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(16, 1));
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(76, 1));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} $i32 := ioread32($p31);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(196, 1)), $mul.ref(0, 1));
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i32);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(196, 1)), $mul.ref(0, 1));
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 3);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 2);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 224);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i53;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i48 := $i79;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p86 := $M.6;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p19);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} kmem_cache_free($p86, $p87);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} spin_lock_bh($p89);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(72, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} creg_kick_queue($p2);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} spin_unlock_bh($p93);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    call {:si_unique_call 2827} devirtbounce.1($p85, $p2, $p19, $i48);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(16, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(72, 1));
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} $i60 := ioread32($p59);
    call {:si_unique_call 2822} {:cexpr "tmp___0"} boogie_si_record_i32($i60);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, $i60);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} $i78 := copy_from_creg_data($p2, $i60, $p75, $i77);
    call {:si_unique_call 2826} {:cexpr "st"} boogie_si_record_i32($i78);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb23;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(0, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} dev_err.ref.ref($p73, .str.143);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 5);
    goto $bb10;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(0, 1));
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} dev_err.ref.ref($p67, .str.142);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 5);
    goto $bb10;

  $bb11:
    assume $i52 == 1;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 5);
    goto $bb13;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(0, 1));
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} dev_err.ref.ref($p47, .str.141);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 5);
    goto $bb10;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(0, 1));
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} dev_err.ref.ref($p28, .str.140);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(196, 1)), $mul.ref(4, 1));
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 1184)), $mul.ref(144, 1)), $mul.ref(196, 1)), $mul.ref(4, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_del_timer_sync_90: ref;

axiom ldv_del_timer_sync_90 == $sub.ref(0, 479601);

procedure ldv_del_timer_sync_90($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_del_timer_sync_90($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} $i1 := del_timer_sync($p0);
    call {:si_unique_call 2833} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} disable_suitable_timer_6($p0);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 480633);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);



procedure dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    return;
}



const copy_from_creg_data: ref;

axiom copy_from_creg_data == $sub.ref(0, 481665);

procedure copy_from_creg_data($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation copy_from_creg_data($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i13: i1;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i14: i32;
  var $i15: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} {:cexpr "copy_from_creg_data:arg:cnt8"} boogie_si_record_i32($i1);
    call {:si_unique_call 2836} {:cexpr "copy_from_creg_data:arg:stream"} boogie_si_record_i32($i3);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 2838} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i1, 0);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i14, $i15 := 0, $i1;
    goto $bb8;

  $bb8:
    call $i16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i14, $i15 := copy_from_creg_data_loop_$bb8($p0, $i3, $p4, $i16, $i17, $p18, $p19, $i20, $p21, $i22, $i23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $i35, $i14, $i15);
    goto $bb8_last;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i3, 0);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $i25 := CREG_DATA($i14);
    call {:si_unique_call 2843} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i25);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 1));
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} $i30 := ioread32($p29);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i14);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p4, $mul.ref($i31, 4));
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i14, 1);
    call {:si_unique_call 2845} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i15, $sub.i32(0, 4));
    call {:si_unique_call 2846} {:cexpr "cnt8"} boogie_si_record_i32($i34);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 0);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i33, $i34;
    goto $bb13_dummy;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} $i17 := CREG_DATA($i14);
    call {:si_unique_call 2840} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i17);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 1));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} $i22 := ioread32be($p21);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i14);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p4, $mul.ref($i23, 4));
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10506;
}



const ioread32be: ref;

axiom ioread32be == $sub.ref(0, 482697);

procedure ioread32be($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32be($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2847} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 2848} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 483729);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 484761);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    return;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 485793);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 486825);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} dev_set_drvdata($p2, $p1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    return;
}



const ida_pre_get: ref;

axiom ida_pre_get == $sub.ref(0, 487857);

procedure ida_pre_get($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ida_pre_get($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2851} {:cexpr "ida_pre_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2852} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ida_get_new: ref;

axiom ida_get_new == $sub.ref(0, 488889);

procedure ida_get_new($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ida_get_new($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} $i2 := ida_get_new_above($p0, 0, $p1);
    call {:si_unique_call 2855} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 489921);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2856} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 490953);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_dma_max_seg_size: ref;

axiom pci_set_dma_max_seg_size == $sub.ref(0, 491985);

procedure pci_set_dma_max_seg_size($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_max_seg_size($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2858} {:cexpr "pci_set_dma_max_seg_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2859} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 493017);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 2863} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 494049);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2864} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 495081);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2867} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} $p3 := external_alloc();
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 496113);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 497145);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} _raw_spin_lock_irq($p2);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 498177);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} _raw_spin_unlock_irq($p2);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_msi_exact: ref;

axiom pci_enable_msi_exact == $sub.ref(0, 499209);

procedure pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} {:cexpr "pci_enable_msi_exact:arg:nvec"} boogie_si_record_i32($i1);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} $i2 := pci_enable_msi_range($p0, $i1, $i1);
    call {:si_unique_call 2873} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const rsxx_isr: ref;

axiom rsxx_isr == $sub.ref(0, 500241);

procedure rsxx_isr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_isr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i11: i32;
  var $i12: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i72: i32;
  var $i73: i32;
  var $i39: i32;
  var $i40: i32;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i21: i32;
  var $p94: ref;
  var $i95: i1;
  var $i96: i32;
  var vslice_dummy_var_648: i1;
  var vslice_dummy_var_649: i1;
  var vslice_dummy_var_650: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} {:cexpr "rsxx_isr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} spin_lock($p3);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2877} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    call $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i12, $p22, $p23, $p24, $i25, $i26, $i27, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i41, $i42, $i43, $i72, $i73, $i39, $i40, $i74, $i75, $p77, $p78, $p80, $i82, $i83, $i84, $i85, $p86, $p87, $p88, $i90, $i91, $i92, $i93, vslice_dummy_var_648, vslice_dummy_var_649, vslice_dummy_var_650 := rsxx_isr_loop_$bb4($p2, $p4, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i12, $p22, $p23, $p24, $i25, $i26, $i27, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i41, $i42, $i43, $i72, $i73, $i39, $i40, $i74, $i75, $p77, $p78, $p80, $i82, $i83, $i84, $i85, $p86, $p87, $p88, $i90, $i91, $i92, $i93, vslice_dummy_var_648, vslice_dummy_var_649, vslice_dummy_var_650);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(16, 1));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} $i25 := ioread32($p24);
    call {:si_unique_call 2882} {:cexpr "isr"} boogie_si_record_i32($i25);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $sub.i32(0, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i27 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(96, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $i25);
    call {:si_unique_call 2884} {:cexpr "isr"} boogie_si_record_i32($i33);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i35 := $i12;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i12, 0;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i33, 2);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i39;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i33, 8);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i91 := $i83;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i40, 0);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i13, $i93 := $i91, $i91;
    assume true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i21 := $i93;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} spin_unlock($p94);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i21, 0);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $r := $i96;
    return;

  $bb5:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p4);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2879} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i20 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb7_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i21 := $i11;
    goto $bb8;

  $bb33:
    assume $i85 == 1;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(824, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} vslice_dummy_var_650 := queue_work($p87, $p88);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} rsxx_disable_ier_and_isr($p2, 8);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i83, 1);
    call {:si_unique_call 2899} {:cexpr "handled"} boogie_si_record_i32($i90);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb35;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} vslice_dummy_var_649 := queue_work($p78, $p80);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i39, 1);
    call {:si_unique_call 2896} {:cexpr "handled"} boogie_si_record_i32($i82);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb32;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i41, $i42, $i43 := 0, 0, $i12;
    goto $bb19;

  $bb19:
    call $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i41, $i42, $i43, $i72, $i73, vslice_dummy_var_648 := rsxx_isr_loop_$bb19($p2, $i33, $p36, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i41, $i42, $i43, $i72, $i73, vslice_dummy_var_648);
    goto $bb19_last;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} $i44 := CR_INTR_DMA($i41);
    call {:si_unique_call 2886} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $i33);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i67, $i68 := $i43, $i42;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i41, 1);
    call {:si_unique_call 2894} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p36);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, $i69);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i67, $i68;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i72, $i73;
    goto $bb18;

  $bb27:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i41, $i42, $i43 := $i69, $i68, $i67;
    goto $bb27_dummy;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} $i47 := CR_INTR_DMA($i41);
    call {:si_unique_call 2888} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, $i47);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i42;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i41);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 712)), $mul.ref(256, 1));
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i41);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref($i62, 712)), $mul.ref(264, 1));
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} vslice_dummy_var_648 := queue_work($p59, $p64);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i43, 1);
    call {:si_unique_call 2893} {:cexpr "handled"} boogie_si_record_i32($i66);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i67, $i68 := $i66, $i53;
    goto $bb26;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} $i52 := CR_INTR_DMA($i41);
    call {:si_unique_call 2890} {:cexpr "tmp___0"} boogie_si_record_i32($i52);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rsxx_disable_ier($p2, $i52);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb25;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb8;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} _dev_info.ref.ref($p30, .str.39);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i21 := $i27;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb27_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10651;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ldv_request_irq_45: ref;

axiom ldv_request_irq_45 == $sub.ref(0, 501273);

procedure ldv_request_irq_45($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.55, $M.31, $M.34, $M.56, $M.33, $M.36, $M.57, $M.35, $M.38, $M.58, $M.37;



implementation ldv_request_irq_45($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} {:cexpr "ldv_request_irq_45:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 2901} {:cexpr "ldv_request_irq_45:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 2903} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} $i6 := reg_check_1($p1);
    call {:si_unique_call 2905} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const rsxx_creg_setup: ref;

axiom rsxx_creg_setup == $sub.ref(0, 502305);

procedure rsxx_creg_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $CurrAddr;



implementation rsxx_creg_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i64;
  var $i16: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_651: ref;
  var vslice_dummy_var_652: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} $p8 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.20, 131082, 1, $p1, .str.19, .str.21);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} __init_work($p18, 0);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 137438953408);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 2914} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p23, $p24, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1)), $mul.ref(32, 1));
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} lockdep_init_map($p27, .str.22, $p2, 0);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} INIT_LIST_HEAD($p30);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, creg_cmd_done);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(336, 1));
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} __mutex_init($p35, .str.23, $p4);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} INIT_LIST_HEAD($p37);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} vslice_dummy_var_651 := spinlock_check($p39);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} __raw_spin_lock_init($p44, .str.24, $p5);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p0);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} vslice_dummy_var_652 := reg_timer_6($p46, creg_cmd_timed_out, $i47);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const rsxx_compatibility_check: ref;

axiom rsxx_compatibility_check == $sub.ref(0, 503337);

procedure rsxx_compatibility_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation rsxx_compatibility_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var vslice_dummy_var_653: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} vslice_dummy_var_653 := pci_read_config_byte($p3, 8, $p1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.40, $p1);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 4);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;
}



const rsxx_load_config: ref;

axiom rsxx_load_config == $sub.ref(0, 504369);

procedure rsxx_load_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.7, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_load_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i24;
  var $i116: i24;
  var $i117: i24;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i24;
  var $i139: i24;
  var $i140: i24;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p153: ref;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i24;
  var $i162: i24;
  var $i163: i24;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i64;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i24;
  var $i185: i24;
  var $i186: i24;
  var $p187: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i64;
  var $i191: i64;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i24;
  var $i208: i24;
  var $i209: i24;
  var $p210: ref;
  var $p211: ref;
  var $i212: i8;
  var $i213: i64;
  var $i214: i64;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p223: ref;
  var $i224: i32;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i24;
  var $i232: i24;
  var $i233: i24;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i64;
  var $i238: i64;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p247: ref;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i24;
  var $i256: i24;
  var $i257: i24;
  var $p258: ref;
  var $p259: ref;
  var $i260: i8;
  var $i261: i64;
  var $i262: i64;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p271: ref;
  var $i272: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} $i12 := rsxx_creg_read($p0, $sub.i32(0, 1342177280), 36, $p11, 1);
    goto SeqInstr_1912, SeqInstr_1913;

  SeqInstr_1913:
    assume assertsPassed;
    goto SeqInstr_1914;

  SeqInstr_1914:
    call {:si_unique_call 2934} {:cexpr "st"} boogie_si_record_i32($i12);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} config_hdr_be_to_cpu($p19);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 4);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} _dev_info.ref.ref($p58, .str.4);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} initialize_config($p59);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} $i60 := rsxx_save_config($p0);
    goto SeqInstr_1915, SeqInstr_1916;

  SeqInstr_1916:
    assume assertsPassed;
    goto SeqInstr_1917;

  SeqInstr_1917:
    call {:si_unique_call 2949} {:cexpr "st"} boogie_si_record_i32($i60);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 1);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p63, .str.5);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p64, .str.6);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p65, .str.7);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p66, .str.8);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.45, $p68);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 191);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p68, $i71);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p72, 0);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.46, $p73);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 2944} {:cexpr "tmp"} boogie_si_record_i64($i77);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p86, .str.5);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p87, .str.6);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p88, .str.7);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p89, .str.9);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.45, $p91);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 193);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p91, $i94);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p95, 0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.46, $p96);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 2952} {:cexpr "tmp___0"} boogie_si_record_i64($i100);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p109, .str.5);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p110, .str.6);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p111, .str.7);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p112, .str.10);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i115 := $load.i24($M.45, $p114);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i116 := $and.i24($i115, $sub.i24(0, 262144));
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i117 := $or.i24($i116, 195);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p114, $i117);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p118, 0);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.46, $p119);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i64($i120);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i121, 1);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 2955} {:cexpr "tmp___1"} boogie_si_record_i64($i123);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p132, .str.5);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p133, .str.6);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p134, .str.7);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p135, .str.11);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i138 := $load.i24($M.45, $p137);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i139 := $and.i24($i138, $sub.i24(0, 262144));
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i140 := $or.i24($i139, 197);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p137, $i140);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p141, 0);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.46, $p142);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i64($i143);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i145 := $and.i64($i144, 1);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} $i146 := ldv__builtin_expect($i145, 0);
    call {:si_unique_call 2958} {:cexpr "tmp___2"} boogie_si_record_i64($i146);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p155, .str.5);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p156, .str.6);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p157, .str.7);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p158, .str.12);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i161 := $load.i24($M.45, $p160);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i162 := $and.i24($i161, $sub.i24(0, 262144));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i163 := $or.i24($i162, 199);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p160, $i163);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p164, 0);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.46, $p165);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i64($i166);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i168 := $and.i64($i167, 1);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} $i169 := ldv__builtin_expect($i168, 0);
    call {:si_unique_call 2961} {:cexpr "tmp___3"} boogie_si_record_i64($i169);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p178, .str.5);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p179, .str.6);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p180, .str.7);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p181, .str.13);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i184 := $load.i24($M.45, $p183);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i185 := $and.i24($i184, $sub.i24(0, 262144));
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i186 := $or.i24($i185, 201);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p183, $i186);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p187, 0);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.46, $p188);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i64($i189);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $i191 := $and.i64($i190, 1);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $i192 := ldv__builtin_expect($i191, 0);
    call {:si_unique_call 2964} {:cexpr "tmp___4"} boogie_si_record_i64($i192);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p201, .str.5);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p202, .str.6);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p203, .str.7);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p204, .str.14);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i207 := $load.i24($M.45, $p206);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i208 := $and.i24($i207, $sub.i24(0, 262144));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i209 := $or.i24($i208, 203);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p206, $i209);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p210, 0);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.46, $p211);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i64($i212);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i214 := $and.i64($i213, 1);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} $i215 := ldv__builtin_expect($i214, 0);
    call {:si_unique_call 2967} {:cexpr "tmp___5"} boogie_si_record_i64($i215);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i216 := $ne.i64($i215, 0);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p225, .str.5);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p226, .str.6);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p227, .str.7);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p228, .str.15);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i231 := $load.i24($M.45, $p230);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i232 := $and.i24($i231, $sub.i24(0, 262144));
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i233 := $or.i24($i232, 205);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p230, $i233);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p234, 0);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.46, $p235);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i64($i236);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i238 := $and.i64($i237, 1);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} $i239 := ldv__builtin_expect($i238, 0);
    call {:si_unique_call 2970} {:cexpr "tmp___6"} boogie_si_record_i64($i239);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p249, .str.5);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p250, .str.6);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p251, .str.7);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p252, .str.16);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $i255 := $load.i24($M.45, $p254);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i256 := $and.i24($i255, $sub.i24(0, 262144));
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i257 := $or.i24($i256, 207);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p254, $i257);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p258, 0);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.46, $p259);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i64($i260);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i262 := $and.i64($i261, 1);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} $i263 := ldv__builtin_expect($i262, 0);
    call {:si_unique_call 2973} {:cexpr "tmp___7"} boogie_si_record_i64($i263);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i264 := $ne.i64($i263, 0);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb41:
    assume $i264 == 1;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p266, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p267, .str.16, $i272);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i240 == 1;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p247);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p243, .str.15, $i248);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i216 == 1;
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p218, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p219, .str.14, $i224);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i193 == 1;
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p196, .str.13, $i200);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i170 == 1;
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p173, .str.12, $i177);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i147 == 1;
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p150, .str.11, $i154);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i124 == 1;
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p127, .str.10, $i131);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i101 == 1;
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p104, .str.9, $i108);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p81, .str.8, $i85);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i17 := $i60;
    goto $bb3;

  SeqInstr_1915:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} dev_err.ref.ref.i32($p51, .str.3, $i55);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} config_data_swab($p25);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} $i27 := config_data_crc32($p26);
    call {:si_unique_call 2939} {:cexpr "crc"} boogie_si_record_i32($i27);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, $i27);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} config_data_le_to_cpu($p43);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} dev_err.ref.ref($p35, .str.1);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} _dev_info.ref.ref.i32.i32($p38, .str.2, $i42, $i27);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} dev_err.ref.ref($p16, .str);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $i17 := $i12;
    goto $bb3;

  SeqInstr_1912:
    assume !assertsPassed;
    return;
}



const rsxx_get_num_targets: ref;

axiom rsxx_get_num_targets == $sub.ref(0, 505401);

procedure rsxx_get_num_targets($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_get_num_targets($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} $i3 := rsxx_creg_read($p0, $sub.i32(0, 2147471360), 4, $p2, 0);
    goto SeqInstr_1918, SeqInstr_1919;

  SeqInstr_1919:
    assume assertsPassed;
    goto SeqInstr_1920;

  SeqInstr_1920:
    call {:si_unique_call 2976} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1918:
    assume !assertsPassed;
    return;
}



const rsxx_dma_setup: ref;

axiom rsxx_dma_setup == $sub.ref(0, 506433);

procedure rsxx_dma_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.23, $M.25, $M.27, $M.29;



implementation rsxx_dma_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i9: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i27: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i58: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i71: i32;
  var $i67: i32;
  var vslice_dummy_var_654: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} _dev_info.ref.ref.i32($p3, .str.36, $i5);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1152, 1));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} rsxx_dma_queue_reset($p0);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1156, 1));
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 0);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb27;

  $bb27:
    call $p59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $i58 := rsxx_dma_setup_loop_$bb27($p0, $p55, $p59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $i58);
    goto $bb27_last;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} $p60 := spinlock_check($p59);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} $i61 := _raw_spin_lock_irqsave($p60);
    call {:si_unique_call 2986} {:cexpr "flags"} boogie_si_record_i64($i61);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} $i62 := CR_INTR_DMA($i58);
    call {:si_unique_call 2988} {:cexpr "tmp___0"} boogie_si_record_i32($i62);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} rsxx_enable_ier_and_isr($p0, $i62);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} spin_unlock_irqrestore($p63, $i61);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i58, 1);
    call {:si_unique_call 2991} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p55);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i65, $i64);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i64;
    goto $bb29_dummy;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} vslice_dummy_var_654 := rsxx_dma_configure($p0);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    call $p28, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p41, $p42, $p43, $i44, $p46, $i47, $i48, $i49, $i27 := rsxx_dma_setup_loop_$bb12($p0, $p24, $p28, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p41, $p42, $p43, $i44, $p46, $i47, $i48, $i49, $i27);
    goto $bb12_last;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i27);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 712));
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} $i34 := rsxx_dma_ctrl_init($p29, $p33);
    call {:si_unique_call 2981} {:cexpr "st"} boogie_si_record_i32($i34);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i27);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref($i39, 712)), $mul.ref(0, 1));
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p0);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i27);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 712)), $mul.ref(8, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i27);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i27, 1);
    call {:si_unique_call 2982} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p24);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, $i47);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i47;
    goto $bb18_dummy;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, 0);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i67 := $i36;
    goto $bb32;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb36;

  $bb36:
    call $p72, $p73, $i74, $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p98, $p99, $i100, $i101, $p102, $p103, $p105, $p106, $p108, $i109, $p111, $p112, $i113, $i114, $p115, $p116, $p118, $p119, $p121, $i122, $i123, $i124, $i125, $i71 := rsxx_dma_setup_loop_$bb36($p0, $p68, $p72, $p73, $i74, $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p98, $p99, $i100, $i101, $p102, $p103, $p105, $p106, $p108, $i109, $p111, $p112, $i113, $i114, $p115, $p116, $p118, $p119, $p121, $i122, $i123, $i124, $i125, $i71);
    goto $bb36_last;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i71);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(472, 1));
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i71, 1);
    call {:si_unique_call 2997} {:cexpr "i"} boogie_si_record_i32($i123);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p68);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, $i123);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i125 == 1);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb53:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i71 := $i123;
    goto $bb53_dummy;

  $bb50:
    assume $i114 == 1;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} pci_free_consistent($p116, 4096, $p119, $i122);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i101 == 1;
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} pci_free_consistent($p103, 4096, $p106, $i109);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i93 == 1;
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(472, 1));
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} vfree($p96);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i86 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} ldv_destroy_workqueue_179($p88);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $0.ref);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i79 == 1;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ldv_destroy_workqueue_178($p81);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p73, $mul.ref($i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $0.ref);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $p19, $i20, $i21, $i22, $i9 := rsxx_dma_setup_loop_$bb4($p0, $p6, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $p19, $i20, $i21, $i22, $i9);
    goto $bb4_last;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, 4096);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p11, $mul.ref($i13, 1));
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i9);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 712)), $mul.ref(16, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p14);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i9, 1);
    call {:si_unique_call 2978} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p6);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i20);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb6_dummy;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11225;

  $bb53_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11244;

  $bb18_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11175;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11147;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 507465);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2999} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} $p5 := external_alloc();
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3002} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} $p5 := external_alloc();
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 508497);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 509529);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    return;
}



const card_event_handler: ref;

axiom card_event_handler == $sub.ref(0, 510561);

procedure card_event_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.49, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation card_event_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var vslice_dummy_var_655: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 824), 1184));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(8, 1));
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 3008} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(24, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} $p12 := spinlock_check($p11);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 3011} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} rsxx_enable_ier_and_isr($p3, 8);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(24, 1));
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} spin_unlock_irqrestore($p14, $i13);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} $i15 := rsxx_get_card_state($p3, $p1);
    goto SeqInstr_1921, SeqInstr_1922;

  SeqInstr_1922:
    assume assertsPassed;
    goto SeqInstr_1923;

  SeqInstr_1923:
    call {:si_unique_call 3015} {:cexpr "st"} boogie_si_record_i32($i15);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(904, 1));
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p1);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i21, $i22);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(144, 1)), $mul.ref(196, 1)), $mul.ref(0, 1));
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 8);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} vslice_dummy_var_655 := rsxx_read_hw_log($p3);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p1);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} card_state_change($p3, $i24);
    goto SeqInstr_1924, SeqInstr_1925;

  SeqInstr_1925:
    assume assertsPassed;
    goto SeqInstr_1926;

  SeqInstr_1926:
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1924:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 824), 1184)), $mul.ref(0, 1));
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} _dev_info.ref.ref($p19, .str.40);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1921:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_setup_dev: ref;

axiom rsxx_setup_dev == $sub.ref(0, 511593);

procedure rsxx_setup_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rsxx_setup_dev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i5: i32;
  var vslice_dummy_var_656: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(920, 1));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} __mutex_init($p2, .str.28, $p1);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} $i6 := register_blkdev(0, .str.5);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} $p14 := blk_alloc_queue(208);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $M.47;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} $p26 := alloc_disk($i25);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} blk_queue_make_request($p56, rsxx_make_request);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} blk_queue_bounce_limit($p58, $sub.i64(0, 1));
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $i61 := $M.48;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} blk_queue_max_hw_sectors($p60, $i61);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} blk_queue_physical_block_size($p63, 4096);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} queue_flag_set_unlocked(12, $p65);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} queue_flag_clear_unlocked(16, $p67);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} $i68 := rsxx_discard_supported($p0);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 3040} {:cexpr "tmp"} boogie_si_record_i8($i69);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 4208)), $mul.ref(2496, 1));
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p0);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1084, 1));
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} vslice_dummy_var_656 := snprintf.ref.i64.ref.i32($p94, 32, .str.32, $i96);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 1752)), $mul.ref(1696, 1));
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p100);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 1752)), $mul.ref(0, 1));
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i105);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 1752)), $mul.ref(4, 1));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 0);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 1752)), $mul.ref(1664, 1));
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, rsxx_fops);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, $p0);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p120);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} queue_flag_set_unlocked(14, $p72);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} blk_queue_max_discard_sectors($p74, 8);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(56, 1));
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 4096);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p80, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(60, 1));
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 4096);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 4208)), $mul.ref(3488, 1)), $mul.ref(73, 1));
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 1);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    call {:si_unique_call 3030} {:cexpr "blk_size"} boogie_si_record_i16($i46);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i46);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} blk_queue_dma_alignment($p48, $i50);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i46);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} blk_queue_logical_block_size($p52, $i54);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} dev_err.ref.ref($p34, .str.31);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1096, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} blk_cleanup_queue($p36);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} unregister_blkdev($i38, .str.5);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} dev_err.ref.ref($p22, .str.30);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1088, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} unregister_blkdev($i24, .str.5);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} dev_err.ref.ref($p13, .str.29);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const rsxx_card_state_to_str: ref;

axiom rsxx_card_state_to_str == $sub.ref(0, 512625);

procedure rsxx_card_state_to_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation rsxx_card_state_to_str($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    call {:si_unique_call 3045} {:cexpr "rsxx_card_state_to_str:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 8));
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p2, .str.45);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(1, 8));
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p3, .str.46);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(2, 8));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p4, .str.47);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(3, 8));
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p5, .str.48);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 8));
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p6, .str.49);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(5, 8));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p7, .str.50);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(6, 8));
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p8, .str.51);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(7, 8));
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p9, .str.52);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 8));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p10, .str.53);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(9, 8));
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p11, .str.54);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} $i12 := ffs($i0);
    call {:si_unique_call 3047} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref($i13, 8));
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.49, $p14);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;
}



const ssleep: ref;

axiom ssleep == $sub.ref(0, 513657);

procedure ssleep($i0: i32);
  free requires assertsPassed;



implementation ssleep($i0: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} {:cexpr "ssleep:arg:seconds"} boogie_si_record_i32($i0);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 1000);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} msleep($i1);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_get_card_size8: ref;

axiom rsxx_get_card_size8 == $sub.ref(0, 514689);

procedure rsxx_get_card_size8($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_get_card_size8($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} $i4 := rsxx_creg_read($p0, $sub.i32(0, 2147479540), 4, $p3, 0);
    goto SeqInstr_1927, SeqInstr_1928;

  SeqInstr_1928:
    assume assertsPassed;
    goto SeqInstr_1929;

  SeqInstr_1929:
    call {:si_unique_call 3052} {:cexpr "st"} boogie_si_record_i32($i4);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p2);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 4096);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i9);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  SeqInstr_1927:
    assume !assertsPassed;
    return;
}



const rsxx_attach_dev: ref;

axiom rsxx_attach_dev == $sub.ref(0, 515721);

procedure rsxx_attach_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed;



implementation rsxx_attach_dev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(920, 1));
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} ldv_mutex_lock_133($p1);
    goto SeqInstr_1930, SeqInstr_1931;

  SeqInstr_1931:
    assume assertsPassed;
    goto SeqInstr_1932;

  SeqInstr_1932:
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(920, 1));
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} ldv_mutex_unlock_134($p17);
    goto SeqInstr_1933, SeqInstr_1934;

  SeqInstr_1934:
    assume assertsPassed;
    goto SeqInstr_1935;

  SeqInstr_1935:
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1933:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} set_capacity($p13, 0);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} add_disk($p15);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1080, 1));
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i64($i10, 9);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} set_capacity($p8, $i11);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1930:
    assume !assertsPassed;
    return;
}



const rsxx_debugfs_dev_new: ref;

axiom rsxx_debugfs_dev_new == $sub.ref(0, 516753);

procedure rsxx_debugfs_dev_new($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_debugfs_dev_new($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} $p5 := debugfs_create_dir($p4, $0.ref);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} $i10 := IS_ERR_OR_NULL($p9);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 3060} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} $p16 := debugfs_create_file(.str.105, 292, $p14, $p15, debugfs_stats_fops);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} $i18 := IS_ERR_OR_NULL($p17);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 3063} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} $p24 := debugfs_create_file(.str.106, 292, $p22, $p23, debugfs_pci_regs_fops);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} $i26 := IS_ERR_OR_NULL($p25);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 3067} {:cexpr "tmp___1"} boogie_si_record_i8($i27);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} $p32 := debugfs_create_file(.str.107, 420, $p30, $p31, debugfs_cram_fops);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} $i34 := IS_ERR_OR_NULL($p33);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 3071} {:cexpr "tmp___2"} boogie_si_record_i8($i35);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} debugfs_remove($p24);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} debugfs_remove($p16);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} debugfs_remove($p38);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1176, 1));
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_destroy_workqueue_46: ref;

axiom ldv_destroy_workqueue_46 == $sub.ref(0, 517785);

procedure ldv_destroy_workqueue_46($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} destroy_workqueue($p0);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} call_and_disable_all_3(2);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_47: ref;

axiom ldv_destroy_workqueue_47 == $sub.ref(0, 518817);

procedure ldv_destroy_workqueue_47($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} destroy_workqueue($p0);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} call_and_disable_all_3(2);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_48: ref;

axiom ldv_free_irq_48 == $sub.ref(0, 519849);

procedure ldv_free_irq_48($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.31, $M.33, $M.35, $M.37;



implementation ldv_free_irq_48($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} {:cexpr "ldv_free_irq_48:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} free_irq($i0, $p1);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    return;
}



const ida_remove: ref;

axiom ida_remove == $sub.ref(0, 520881);

procedure ida_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ida_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} {:cexpr "ida_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    return;
}



const debugfs_create_dir: ref;

axiom debugfs_create_dir == $sub.ref(0, 521913);

procedure debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_dir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} $p2 := external_alloc();
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const IS_ERR_OR_NULL: ref;

axiom IS_ERR_OR_NULL == $sub.ref(0, 522945);

procedure IS_ERR_OR_NULL($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR_OR_NULL($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} $i1 := ldv_is_err_or_null($p0);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3083} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debugfs_create_file: ref;

axiom debugfs_create_file == $sub.ref(0, 523977);

procedure debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation debugfs_create_file($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} {:cexpr "debugfs_create_file:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} $p5 := external_alloc();
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const debugfs_remove: ref;

axiom debugfs_remove == $sub.ref(0, 525009);

procedure debugfs_remove($p0: ref);
  free requires assertsPassed;



implementation debugfs_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    return;
}



const ldv_is_err_or_null: ref;

axiom ldv_is_err_or_null == $sub.ref(0, 526041);

procedure ldv_is_err_or_null($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err_or_null($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i3: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} $i4 := ldv_is_err($p0);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 3087} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i3, 0);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 527073);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_133: ref;

axiom ldv_mutex_lock_133 == $sub.ref(0, 528105);

procedure ldv_mutex_lock_133($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_lock_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} ldv_mutex_lock_dev_lock_of_rsxx_cardinfo($p0);
    goto SeqInstr_1936, SeqInstr_1937;

  SeqInstr_1937:
    assume assertsPassed;
    goto SeqInstr_1938;

  SeqInstr_1938:
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} mutex_lock($p0);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1936:
    assume !assertsPassed;
    return;
}



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 529137);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    return;
}



const add_disk: ref;

axiom add_disk == $sub.ref(0, 530169);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_134: ref;

axiom ldv_mutex_unlock_134 == $sub.ref(0, 531201);

procedure ldv_mutex_unlock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_mutex_unlock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} ldv_mutex_unlock_dev_lock_of_rsxx_cardinfo($p0);
    goto SeqInstr_1939, SeqInstr_1940;

  SeqInstr_1940:
    assume assertsPassed;
    goto SeqInstr_1941;

  SeqInstr_1941:
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} mutex_unlock($p0);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1939:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 532233);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    return;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 533265);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 3095} $i1 := devirtbounce.6(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 3096} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 534297);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    return;
}



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 535329);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3097} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3098} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_alloc_queue: ref;

axiom blk_alloc_queue == $sub.ref(0, 536361);

procedure blk_alloc_queue($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_alloc_queue($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} {:cexpr "blk_alloc_queue:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} $p1 := external_alloc();
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 537393);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} $p1 := external_alloc();
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_queue_dma_alignment: ref;

axiom blk_queue_dma_alignment == $sub.ref(0, 538425);

procedure blk_queue_dma_alignment($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_dma_alignment($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} {:cexpr "blk_queue_dma_alignment:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_logical_block_size: ref;

axiom blk_queue_logical_block_size == $sub.ref(0, 539457);

procedure blk_queue_logical_block_size($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_logical_block_size($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} {:cexpr "blk_queue_logical_block_size:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_make_request: ref;

axiom rsxx_make_request == $sub.ref(0, 540489);

procedure rsxx_make_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_make_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4208)), $mul.ref(2496, 1));
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} __might_sleep(.str.145, 151, 0);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} $i11 := get_capacity($p10);
    call {:si_unique_call 3110} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i32($i17, 9);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i14, $i19);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64($i20, $i11);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 3112} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(1152, 1));
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 3114} {:cexpr "tmp___1"} boogie_si_record_i64($i34);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $M.50;
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} $p44 := kmem_cache_alloc($p43, 208);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p1);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} atomic_set($p49, 0);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} atomic_set($p50, 0);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, jiffies);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 3120} {:cexpr "tmp___3"} boogie_si_record_i64($i58);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p60, .str.5);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p61, .str.147);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p62, .str.145);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p63, .str.148);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.45, $p65);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 190);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p65, $i68);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p69, 0);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.46, $p70);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 3123} {:cexpr "tmp___4"} boogie_si_record_i64($i74);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p45);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} $i94 := rsxx_dma_queue_bio($p5, $p1, $p92, bio_dma_done_cb, $p93);
    call {:si_unique_call 3126} {:cexpr "st"} boogie_si_record_i32($i94);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p96 := $M.50;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p45);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} kmem_cache_free($p96, $p97);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i8 := $i94;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} bio_endio($p1, $i8);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 1);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i84 := (if $i83 == 1 then 87 else 82);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i88 := $shl.i64($i87, 9);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.i32($p2, $p78, .str.148, $i84, $p45, $i88, $i91);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} disk_stats_start($p5, $p1);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} dev_err.ref.ref($p42, .str.146);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const blk_queue_make_request: ref;

axiom blk_queue_make_request == $sub.ref(0, 541521);

procedure blk_queue_make_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation blk_queue_make_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_bounce_limit: ref;

axiom blk_queue_bounce_limit == $sub.ref(0, 542553);

procedure blk_queue_bounce_limit($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation blk_queue_bounce_limit($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} {:cexpr "blk_queue_bounce_limit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_hw_sectors: ref;

axiom blk_queue_max_hw_sectors == $sub.ref(0, 543585);

procedure blk_queue_max_hw_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_hw_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} {:cexpr "blk_queue_max_hw_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_physical_block_size: ref;

axiom blk_queue_physical_block_size == $sub.ref(0, 544617);

procedure blk_queue_physical_block_size($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_physical_block_size($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} {:cexpr "blk_queue_physical_block_size:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 545649);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} __set_bit($i2, $p3);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    return;
}



const queue_flag_clear_unlocked: ref;

axiom queue_flag_clear_unlocked == $sub.ref(0, 546681);

procedure queue_flag_clear_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_clear_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} {:cexpr "queue_flag_clear_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4208)), $mul.ref(2504, 1));
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} __clear_bit($i2, $p3);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_discard_supported: ref;

axiom rsxx_discard_supported == $sub.ref(0, 547713);

procedure rsxx_discard_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation rsxx_discard_supported($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_657: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} vslice_dummy_var_657 := pci_read_config_byte($p3, 8, $p1);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.40, $p1);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 1);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const blk_queue_max_discard_sectors: ref;

axiom blk_queue_max_discard_sectors == $sub.ref(0, 548745);

procedure blk_queue_max_discard_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_discard_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} {:cexpr "blk_queue_max_discard_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 549777);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 550809);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 3140} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 551841);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3141} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3142} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3143} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 3144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 552873);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 3146} devirtbounce.7(0, $p1, $i0, $p1);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 553905);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 3148} devirtbounce.7(0, $p1, $i0, $p1);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 554937);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3150} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    return;
}



const get_capacity: ref;

axiom get_capacity == $sub.ref(0, 555969);

procedure get_capacity($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_capacity($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 557001);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    return;
}



const disk_stats_start: ref;

axiom disk_stats_start == $sub.ref(0, 558033);

procedure disk_stats_start($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation disk_stats_start($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 9);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1752)), $mul.ref(72, 1));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} generic_start_io_acct($i5, $i10, $p13);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 559065);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref, p.8: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    return;
}



const bio_dma_done_cb: ref;

axiom bio_dma_done_cb == $sub.ref(0, 560097);

procedure bio_dma_done_cb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation bio_dma_done_cb($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} {:cexpr "bio_dma_done_cb:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i2, 0);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} $i7 := atomic_dec_and_test($p6);
    call {:si_unique_call 3156} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} $i21 := atomic_read($p20);
    call {:si_unique_call 3159} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i21, 0);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} bio_endio($p23, $i25);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $p26 := $M.50;
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} kmem_cache_free($p26, $p27);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} disk_stats_complete($p0, $p17, $i19);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} atomic_set($p5, 1);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_dma_queue_bio: ref;

axiom rsxx_dma_queue_bio == $sub.ref(0, 561129);

procedure rsxx_dma_queue_bio($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.51, $M.52, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_dma_queue_bio($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i17: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $i34: i32;
  var $i35: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i64;
  var $i100: i64;
  var $i66: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i60: i64;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i64;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p148: ref;
  var $i149: i64;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $p198: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i147: i32;
  var $i44: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $p214: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i207: i32;
  var $i203: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_658: i1;
  var vslice_dummy_var_659: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} $p5 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} $p7 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} $p8 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 9);
    call {:si_unique_call 3167} {:cexpr "addr8"} boogie_si_record_i64($i13);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} atomic_set($p2, 0);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 128);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p7);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p54);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 3172} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p55, $p56, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i146 := $sgt.i32($i145, 0);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i203 := 0;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $r := $i203;
    return;

  $bb49:
    assume $i146 == 1;
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i147 := 0;
    goto $bb52;

  $bb52:
    call $p148, $i149, $p150, $i151, $i152, $p153, $p154, $i155, $p157, $p158, $p159, $i160, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $p170, $i171, $p174, $p175, $i176, $p177, $p178, $p179, $i180, $p182, $p183, $p184, $i185, $p187, $p188, $p189, $i190, $p192, $p193, $p194, $p195, $i196, $p198, $i200, $i201, $i202, $i147, vslice_dummy_var_658 := rsxx_dma_queue_bio_loop_$bb52($p0, $p5, $p8, $p144, $p148, $i149, $p150, $i151, $i152, $p153, $p154, $i155, $p157, $p158, $p159, $i160, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $p170, $i171, $p174, $p175, $i176, $p177, $p178, $p179, $i180, $p182, $p183, $p184, $i185, $p187, $p188, $p189, $i190, $p192, $p193, $p194, $p195, $i196, $p198, $i200, $i201, $i202, $i147, vslice_dummy_var_658);
    goto $bb52_last;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p5);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i147);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p148, $mul.ref($i149, 16));
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} $i151 := list_empty($p150);
    call {:si_unique_call 3201} {:cexpr "tmp___1"} boogie_si_record_i32($i151);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i147, 1);
    call {:si_unique_call 3206} {:cexpr "i"} boogie_si_record_i32($i200);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p144);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i202 := $sgt.i32($i201, $i200);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i202 == 1);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb57:
    assume $i202 == 1;
    assume {:verifier.code 0} true;
    $i147 := $i200;
    goto $bb57_dummy;

  $bb54:
    assume $i152 == 1;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i147);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p154, $mul.ref($i155, 712)), $mul.ref(80, 1));
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} spin_lock_bh($p157);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i147);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p159, $mul.ref($i160, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i147);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i165, 4));
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.51, $p166);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i164, $i167);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i147);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p170, $mul.ref($i171, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, $i168);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p5);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i147);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p175, $mul.ref($i176, 16));
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i147);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p179, $mul.ref($i180, 712)), $mul.ref(152, 1));
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} list_splice_tail($p177, $p182);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i147);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p184, $mul.ref($i185, 712)), $mul.ref(80, 1));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} spin_unlock_bh($p187);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i147);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p189, $mul.ref($i190, 712)), $mul.ref(168, 1));
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i147);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p195, $mul.ref($i196, 712)), $mul.ref(176, 1));
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} vslice_dummy_var_658 := queue_work___0($p193, $p198);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb24:
    assume $i59 == 1;
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i60 := $i13;
    goto $bb27;

  $bb27:
    call $p61, $i62, $p63, $i64, $i65, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i67, $i68, $i69, $i100, $i66, $p101, $i102, $i103, $i104, $i60, $p105, $i106, $p107, $p108, $p109, $i110, $i111, $p113, $i114, $p115, $i116, $i117, $p118, $p119, $p120, $i121, $i122, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p136, $i137, $p138, $i139, $i140, $p141, $p142, $p143, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14 := rsxx_dma_queue_bio_loop_$bb27($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p57, $p61, $i62, $p63, $i64, $i65, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i67, $i68, $i69, $i100, $i66, $p101, $i102, $i103, $i104, $i60, $p105, $i106, $p107, $p108, $p109, $i110, $i111, $p113, $i114, $p115, $i116, $i117, $p118, $p119, $p120, $i121, $i122, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p136, $i137, $p138, $i139, $i140, $p141, $p142, $p143, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14);
    goto $bb27_last;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    call {:si_unique_call 3182} {:cexpr "_min1___0"} boogie_si_record_i32($i106);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i110);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p108, $mul.ref($i111, 16)), $mul.ref(8, 1));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32($i114, $i116);
    call {:si_unique_call 3183} {:cexpr "_min2___0"} boogie_si_record_i32($i117);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i121);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p119, $mul.ref($i122, 16)), $mul.ref(0, 1));
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $M.52 := $store.ref($M.52, $p126, $p125);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $i127 := $ult.i32($i106, $i117);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i127 == 1);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $i128 := $i117;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p129, $i128);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $i134 := $zext.i32.i64($i133);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p131, $mul.ref($i134, 16)), $mul.ref(12, 1));
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i137, $i139);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p141, $i140);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p6);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p9);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.52;
    cmdloc_dummy_var_13 := $M.52;
    call {:si_unique_call 3199} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p142, $p143, 16, $zext.i32.i64(8), 0 == 1);
    $M.52 := cmdloc_dummy_var_14;
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.52, $p61);
    call {:si_unique_call 3184} {:cexpr "bv_len"} boogie_si_record_i32($i62);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.52, $p63);
    call {:si_unique_call 3185} {:cexpr "bv_off"} boogie_si_record_i32($i64);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i62, 0);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i66 := $i60;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.52, $p101);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} bio_advance_iter($p1, $p7, $i102);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p57);
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i104 == 1);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb43:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i60 := $i66;
    goto $bb43_dummy;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i64, $i62, $i60;
    goto $bb32;

  $bb32:
    call $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i67, $i68, $i69, $i100 := rsxx_dma_queue_bio_loop_$bb32($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p8, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i78, $p79, $p80, $i81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i67, $i68, $i69, $i100);
    goto $bb32_last;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} $i70 := rsxx_get_dma_tgt($p0, $i69);
    call {:si_unique_call 3187} {:cexpr "tmp___0"} boogie_si_record_i32($i70);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} $i71 := rsxx_addr8_to_laddr($i69, $p0);
    call {:si_unique_call 3189} {:cexpr "laddr"} boogie_si_record_i32($i71);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i69);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 4095);
    call {:si_unique_call 3190} {:cexpr "dma_off"} boogie_si_record_i32($i73);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(4096, $i73);
    call {:si_unique_call 3191} {:cexpr "_min2"} boogie_si_record_i32($i74);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i75 := $ult.i32($i68, $i74);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i75 == 1);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i76 := $i74;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p5);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i70);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p77, $mul.ref($i78, 16));
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.52, $p84);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} $i86 := rsxx_queue_dma($p0, $p79, $i83, $i73, $i76, $i71, $p85, $i67, $p3, $p4);
    call {:si_unique_call 3193} {:cexpr "st"} boogie_si_record_i32($i86);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i88 := $i86;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i70);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i89, 4));
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.51, $p90);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i70);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i93, 4));
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p94, $i92);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} atomic_inc($p2);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i76);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, $i69);
    call {:si_unique_call 3195} {:cexpr "addr8"} boogie_si_record_i64($i96);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i67, $i76);
    call {:si_unique_call 3196} {:cexpr "bv_off"} boogie_si_record_i32($i97);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i98 := $sub.i32($i68, $i76);
    call {:si_unique_call 3197} {:cexpr "bv_len"} boogie_si_record_i32($i98);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $i100 := $i96;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i66 := $i100;
    goto $bb31;

  $bb40:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i97, $i98, $i96;
    goto $bb40_dummy;

  $bb37:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i44 := $i88;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i206 := $sgt.i32($i205, 0);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i203 := $i44;
    goto $bb60;

  $bb61:
    assume $i206 == 1;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i207 := 0;
    goto $bb64;

  $bb64:
    call $p208, $p209, $i210, $p211, $p212, $i213, $p214, $i216, $i217, $i218, $i207, vslice_dummy_var_659 := rsxx_dma_queue_bio_loop_$bb64($p0, $p5, $p204, $p208, $p209, $i210, $p211, $p212, $i213, $p214, $i216, $i217, $i218, $i207, vslice_dummy_var_659);
    goto $bb64_last;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i207);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p209, $mul.ref($i210, 712));
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p5);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i207);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p212, $mul.ref($i213, 16));
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} vslice_dummy_var_659 := rsxx_cleanup_dma_queue($p211, $p214, 0);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    $i216 := $add.i32($i207, 1);
    call {:si_unique_call 3208} {:cexpr "i"} boogie_si_record_i32($i216);
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.0, $p204);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i218 := $sgt.i32($i217, $i216);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i218 == 1);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb66:
    assume $i218 == 1;
    assume {:verifier.code 0} true;
    $i207 := $i216;
    goto $bb66_dummy;

  $bb34:
    assume $i75 == 1;
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i76 := $i68;
    goto $bb36;

  $bb45:
    assume $i127 == 1;
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i128 := $i106;
    goto $bb47;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 3171} {:cexpr "bv_len"} boogie_si_record_i32($i32);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i32, $i13;
    goto $bb14;

  $bb14:
    call $i36, $i37, $p38, $i39, $p40, $i41, $i42, $i43, $i45, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i34, $i35 := rsxx_dma_queue_bio_loop_$bb14($p0, $p2, $p3, $p4, $p5, $p8, $i36, $i37, $p38, $i39, $p40, $i41, $i42, $i43, $i45, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i34, $i35);
    goto $bb14_last;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} $i36 := rsxx_get_dma_tgt($p0, $i35);
    call {:si_unique_call 3174} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} $i37 := rsxx_addr8_to_laddr($i35, $p0);
    call {:si_unique_call 3176} {:cexpr "laddr"} boogie_si_record_i32($i37);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i36);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 16));
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} $i41 := rsxx_queue_discard($p0, $p40, $i37, $p3, $p4);
    call {:si_unique_call 3178} {:cexpr "st"} boogie_si_record_i32($i41);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i36);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i45, 4));
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.51, $p46);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i36);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i49, 4));
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p50, $i48);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} atomic_inc($p2);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i35, 4096);
    call {:si_unique_call 3180} {:cexpr "addr8"} boogie_si_record_i64($i51);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i34, 4096);
    call {:si_unique_call 3181} {:cexpr "bv_len"} boogie_si_record_i32($i52);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i52, $i51;
    goto $bb20_dummy;

  $bb16:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb18;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb4;

  $bb4:
    call $p18, $i19, $p20, $i21, $p22, $i23, $i24, $i25, $i17 := rsxx_dma_queue_bio_loop_$bb4($p5, $p8, $p14, $p18, $i19, $p20, $i21, $p22, $i23, $i24, $i25, $i17);
    goto $bb4_last;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i17);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 16));
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} INIT_LIST_HEAD($p20);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i17);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref($i21, 4));
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p22, 0);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i17, 1);
    call {:si_unique_call 3170} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p14);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i23);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb6_dummy;

  $bb57_dummy:
    assume false;
    return;

  $bb52_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12215;

  $bb40_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12137;

  $bb43_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12103;

  $bb66_dummy:
    assume false;
    return;

  $bb64_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12066;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12030;
}



const bio_endio: ref;

axiom bio_endio == $sub.ref(0, 562161);

procedure bio_endio($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bio_endio($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} {:cexpr "bio_endio:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_get_dma_tgt: ref;

axiom rsxx_get_dma_tgt == $sub.ref(0, 563193);

procedure rsxx_get_dma_tgt($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation rsxx_get_dma_tgt($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} {:cexpr "rsxx_get_dma_tgt:arg:addr8"} boogie_si_record_i64($i1);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(32, 1));
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i1, $i6);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(24, 1));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i8, $i12);
    call {:si_unique_call 3211} {:cexpr "tgt"} boogie_si_record_i32($i13);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const rsxx_addr8_to_laddr: ref;

axiom rsxx_addr8_to_laddr == $sub.ref(0, 564225);

procedure rsxx_addr8_to_laddr($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rsxx_addr8_to_laddr($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} {:cexpr "rsxx_addr8_to_laddr:arg:addr8"} boogie_si_record_i64($i0);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(8, 1));
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i0, $i6);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(16, 1));
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i7, $i10);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(0, 1));
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, $i0);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i16 := $or.i64($i11, $i15);
    call {:si_unique_call 3213} {:cexpr "tgt_addr8"} boogie_si_record_i64($i16);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64(4096);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i16, $i17);
    call {:si_unique_call 3214} {:cexpr "tgt_addr8"} boogie_si_record_i64($i18);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const rsxx_queue_discard: ref;

axiom rsxx_queue_discard == $sub.ref(0, 565257);

procedure rsxx_queue_discard($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation rsxx_queue_discard($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 3216} {:cexpr "rsxx_queue_discard:arg:laddr"} boogie_si_record_i32($i2);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p6 := $M.39;
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} $p7 := kmem_cache_alloc($p6, 208);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 112);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i2);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 0);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p3);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p4);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p23, .str.5);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p24, .str.149);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p25, .str.150);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p26, .str.151);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.45, $p28);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 636);
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p28, $i31);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p32, 0);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.46, $p33);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 3219} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} list_add_tail($p44, $p1);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p41, .str.151, $i43);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 566289);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 3222} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_queue_dma: ref;

axiom rsxx_queue_dma == $sub.ref(0, 567321);

procedure rsxx_queue_dma($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $i7: i32, $p8: ref, $p9: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation rsxx_queue_dma($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref, $i7: i32, $p8: ref, $p9: ref) returns ($r: i32)
{
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 3224} {:cexpr "rsxx_queue_dma:arg:dir"} boogie_si_record_i32($i2);
    call {:si_unique_call 3225} {:cexpr "rsxx_queue_dma:arg:dma_off"} boogie_si_record_i32($i3);
    call {:si_unique_call 3226} {:cexpr "rsxx_queue_dma:arg:dma_len"} boogie_si_record_i32($i4);
    call {:si_unique_call 3227} {:cexpr "rsxx_queue_dma:arg:laddr"} boogie_si_record_i32($i5);
    call {:si_unique_call 3228} {:cexpr "rsxx_queue_dma:arg:pg_off"} boogie_si_record_i32($i7);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $p11 := $M.39;
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} $p12 := kmem_cache_alloc($p11, 208);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i2, 0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i18 := (if $i17 == 1 then 128 else 192);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i5);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($i3, 9);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i4, 9);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p6);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i7);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p8);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p9);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p32, .str.5);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p33, .str.152);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p34, .str.150);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p35, .str.153);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.45, $p37);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 672);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p37, $i40);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p41, 0);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.46, $p42);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 3231} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} list_add_tail($p65, $p1);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i2, 0);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i52 := (if $i51 == 1 then 87 else 82);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.ref.i32($p10, $p50, .str.153, $i52, $i54, $i57, $i60, $p62, $i64);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const bio_advance_iter: ref;

axiom bio_advance_iter == $sub.ref(0, 568353);

procedure bio_advance_iter($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bio_advance_iter($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} {:cexpr "bio_advance_iter:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i2, 9);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i4, $i6);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 640);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} bvec_iter_advance($p18, $p1, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, $i2);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_splice_tail: ref;

axiom list_splice_tail == $sub.ref(0, 569385);

procedure list_splice_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_tail($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} $i2 := list_empty($p0);
    call {:si_unique_call 3237} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} __list_splice($p0, $p5, $p1);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_work___0: ref;

axiom queue_work___0 == $sub.ref(0, 570417);

procedure queue_work___0($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation queue_work___0($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} $i2 := ldv_queue_work_on_157(8192, $p0, $p1);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 3240} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_157: ref;

axiom ldv_queue_work_on_157 == $sub.ref(0, 571449);

procedure ldv_queue_work_on_157($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation ldv_queue_work_on_157($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} {:cexpr "ldv_queue_work_on_157:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 3243} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 3244} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} activate_work_3($p2, 2);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 572481);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3246} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3247} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 3248} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_3: ref;

axiom activate_work_3 == $sub.ref(0, 573513);

procedure activate_work_3($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation activate_work_3($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} {:cexpr "activate_work_3:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i2 := $M.23;
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.25;
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $M.29 := $i1;
    call {:si_unique_call 3253} {:cexpr "ldv_work_3_3"} boogie_si_record_i32($i1);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $M.27 := $i1;
    call {:si_unique_call 3252} {:cexpr "ldv_work_3_2"} boogie_si_record_i32($i1);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $M.25 := $i1;
    call {:si_unique_call 3251} {:cexpr "ldv_work_3_1"} boogie_si_record_i32($i1);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $M.24 := $p0;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $M.23 := $i1;
    call {:si_unique_call 3250} {:cexpr "ldv_work_3_0"} boogie_si_record_i32($i1);
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 574545);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    return;
}



const bvec_iter_advance: ref;

axiom bvec_iter_advance == $sub.ref(0, 575577);

procedure bvec_iter_advance($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bvec_iter_advance($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i30: i32;
  var vslice_dummy_var_660: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} {:cexpr "bvec_iter_advance:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32($i4, $i2);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 3255} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i6);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 3257} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i6, 0);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} vslice_dummy_var_660 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i2, 0);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i30 := $i2;
    goto $bb13;

  $bb13:
    call $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30 := bvec_iter_advance_loop_$bb13($p0, $p1, $p31, $i32, $p33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $p61, $i62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i30);
    goto $bb13_last;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 3265} {:cexpr "_min1___0"} boogie_si_record_i32($i32);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref($i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i38, $i40);
    call {:si_unique_call 3266} {:cexpr "_min2___0"} boogie_si_record_i32($i41);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32($i32, $i41);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i30, $i43);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i30, $i45);
    call {:si_unique_call 3267} {:cexpr "bytes"} boogie_si_record_i32($i46);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, $i45);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, $i45);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref($i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i56, $i62);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i46, 0);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i46;
    goto $bb24_dummy;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 0);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i45 := $i30;
    goto $bb20;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i43 := $i32;
    goto $bb17;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(1);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 3258} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 3260} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 3263} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} warn_slowpath_fmt.ref.i32.ref(.str.154, 211, .str.155);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12605;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 576609);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 577641);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 3270} devirtbounce.8(0, $p2, $p1, $p2);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.53, $p1);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const disk_stats_complete: ref;

axiom disk_stats_complete == $sub.ref(0, 578673);

procedure disk_stats_complete($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation disk_stats_complete($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} {:cexpr "disk_stats_complete:arg:start_time"} boogie_si_record_i64($i2);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1752)), $mul.ref(72, 1));
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} generic_end_io_acct($i6, $p9, $i2);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    return;
}



const generic_end_io_acct: ref;

axiom generic_end_io_acct == $sub.ref(0, 579705);

procedure generic_end_io_acct($i0: i32, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation generic_end_io_acct($i0: i32, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} {:cexpr "generic_end_io_acct:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 3274} {:cexpr "generic_end_io_acct:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    return;
}



const generic_start_io_acct: ref;

axiom generic_start_io_acct == $sub.ref(0, 580737);

procedure generic_start_io_acct($i0: i32, $i1: i64, $p2: ref);
  free requires assertsPassed;



implementation generic_start_io_acct($i0: i32, $i1: i64, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} {:cexpr "generic_start_io_acct:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 3276} {:cexpr "generic_start_io_acct:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    return;
}



const card_state_change: ref;

axiom card_state_change == $sub.ref(0, 581769);

procedure card_state_change($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation card_state_change($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} {:cexpr "card_state_change:arg:new_state"} boogie_si_record_i32($i1);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} $p2 := rsxx_card_state_to_str($i1);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} $p5 := rsxx_card_state_to_str($i4);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} _dev_info.ref.ref.ref.ref($p8, .str.41, $p5, $p2);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(904, 1));
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 64);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} set_capacity($p51, 0);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb12:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 128);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb17;

  $bb18:
    assume $i18 == 1;
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} dev_crit.ref.ref($p32, .str.42);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} $i34 := rsxx_get_card_size8($p0, $p33);
    goto SeqInstr_1942, SeqInstr_1943;

  SeqInstr_1943:
    assume assertsPassed;
    goto SeqInstr_1944;

  SeqInstr_1944:
    call {:si_unique_call 3285} {:cexpr "st"} boogie_si_record_i32($i34);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i41 == 1;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1104, 1));
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i64($i45, 9);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} set_capacity($p43, $i46);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i35 == 1;
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} dev_err.ref.ref($p38, .str.43);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_1942:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} dev_crit.ref.ref($p49, .str.44);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb25;

  $bb22:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb17;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb28;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb17;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb35;

  $bb32:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb17;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb38;

  $bb30:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb43;

  $bb40:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb45, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb46;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_read_hw_log: ref;

axiom rsxx_read_hw_log == $sub.ref(0, 582801);

procedure rsxx_read_hw_log($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_read_hw_log($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} $i4 := creg_queue_cmd($p0, 224, $sub.i32(0, 2147475456), 32, $p3, 1, read_hw_log_done, $0.ref);
    call {:si_unique_call 3289} {:cexpr "st"} boogie_si_record_i32($i4);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} dev_err.ref.ref($p8, .str.17);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const read_hw_log_done: ref;

axiom read_hw_log_done == $sub.ref(0, 583833);

procedure read_hw_log_done($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation read_hw_log_done($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i9: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var vslice_dummy_var_661: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} {:cexpr "read_hw_log_done:arg:st"} boogie_si_record_i32($i2);
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 8);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} vslice_dummy_var_661 := rsxx_read_hw_log($p0);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    call $p11, $p12, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $i51, $p53, $p54, $p56, $i57, $p59, $i60, $i61, $i9 := read_hw_log_done_loop_$bb8($p0, $p1, $p4, $p6, $p11, $p12, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $p22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $i51, $p53, $p54, $p56, $i57, $p59, $i60, $i61, $i9);
    goto $bb8_last;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(32, 1));
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p12, $mul.ref($i16, 1));
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, $i9);
    call {:si_unique_call 3292} {:cexpr "_min1"} boogie_si_record_i32($i20);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(128, $i23);
    call {:si_unique_call 3293} {:cexpr "_min2"} boogie_si_record_i32($i24);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i20, $i24);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i9);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p4, $mul.ref($i27, 1));
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} $i29 := substrncpy($p17, $p28, $i26);
    call {:si_unique_call 3295} {:cexpr "len"} boogie_si_record_i32($i29);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i9, $i29);
    call {:si_unique_call 3296} {:cexpr "off"} boogie_si_record_i32($i30);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $i29);
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i29);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $sub.i64(0, 1));
    $i39 := $add.i64($i16, $i38);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p12, $mul.ref($i39, 1));
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i43 == 1);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 128);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p6);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, $i30);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb22:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb22_dummy;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 1);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(32, 1));
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} hw_log_msg($p0, $p54, $i57);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb14;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12769;
}



const substrncpy: ref;

axiom substrncpy == $sub.ref(0, 584865);

procedure substrncpy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation substrncpy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i18: i32;
  var $i4: i32;
  var $i14: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} {:cexpr "substrncpy:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 3300} {:cexpr "substrncpy:arg:max_cnt"} boogie_si_record_i32($i2);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $i4;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i2, $i14);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $p5, $p6, $i7 := $p0, $p1, $i2;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $i17, $p5, $p6, $i7, $i18 := substrncpy_loop_$bb4($i8, $i9, $i10, $i11, $i12, $i13, $p15, $p16, $i17, $p5, $p6, $i7, $i18);
    goto $bb4_last;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    call {:si_unique_call 3301} {:cexpr "count"} boogie_si_record_i32($i8);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p6);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i9);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p5);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p6, $mul.ref(1, 1));
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i8, 0);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $i18 := $i8;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i4 := $i18;
    goto $bb3;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5, $p6, $i7 := $p16, $p15, $i8;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12843;
}



const hw_log_msg: ref;

axiom hw_log_msg == $sub.ref(0, 585897);

procedure hw_log_msg($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation hw_log_msg($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 3303} {:cexpr "hw_log_msg:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i2, 3);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16, $p17, $i18 := $i2, $p1, $u0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 52);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 54);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 55);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} _dev_info.ref.ref.i32.ref($p71, .str.137, $i16, $p17);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p50, .str.5);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p51, .str.138);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p52, .str.18);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p53, .str.137);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12900;

  corral_source_split_12900:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.45, $p55);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 580);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p55, $i58);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p59, 0);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.46, $p60);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 3308} {:cexpr "tmp"} boogie_si_record_i64($i64);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i65 == 1;
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} __dynamic_dev_dbg.ref.ref.ref.i32.ref($p3, $p68, .str.137, $i16, $p17);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} _dev_info.ref.ref.i32.ref($p49, .str.137, $i16, $p17);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb12:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i19, 53);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} dev_notice.ref.ref.i32.ref($p46, .str.137, $i16, $p17);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} dev_warn.ref.ref.i32.ref($p43, .str.137, $i16, $p17);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i19, 50);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} dev_err.ref.ref.i32.ref($p40, .str.137, $i16, $p17);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} dev_crit.ref.ref.i32.ref($p37, .str.137, $i16, $p17);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i19, 49);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} dev_alert.ref.ref.i32.ref($p34, .str.137, $i16, $p17);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i19, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb27:
    assume $i28 == 1;
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} dev_emerg.ref.ref.i32.ref($p31, .str.137, $i16, $p17);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p1);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 60);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 62);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 3304} {:cexpr "level"} boogie_si_record_i8($i13);
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i2, $sub.i32(0, 3));
    call {:si_unique_call 3305} {:cexpr "len"} boogie_si_record_i32($i15);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i16, $p17, $i18 := $i15, $p14, $i13;
    goto $bb8;
}



const dev_emerg: ref;

axiom dev_emerg == $sub.ref(0, 586929);

procedure dev_emerg.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_emerg.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    return;
}



const dev_alert: ref;

axiom dev_alert == $sub.ref(0, 587961);

procedure dev_alert.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_alert.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    return;
}



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 588993);

procedure dev_notice.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_notice.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_dma_queue_reset: ref;

axiom rsxx_dma_queue_reset == $sub.ref(0, 590025);

procedure rsxx_dma_queue_reset($p0: ref);
  free requires assertsPassed;



implementation rsxx_dma_queue_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} iowrite32(1, $p3);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_dma_ctrl_init: ref;

axiom rsxx_dma_ctrl_init == $sub.ref(0, 591057);

procedure rsxx_dma_ctrl_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $CurrAddr;



implementation rsxx_dma_ctrl_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i20: i32;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p460: ref;
  var $p461: ref;
  var $p462: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $p485: ref;
  var $p486: ref;
  var $p487: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p675: ref;
  var $p676: ref;
  var $p677: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $p720: ref;
  var $p721: ref;
  var $p722: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p735: ref;
  var $p736: ref;
  var $p737: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p785: ref;
  var $p786: ref;
  var $p787: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p810: ref;
  var $p811: ref;
  var $p812: ref;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p825: ref;
  var $p826: ref;
  var $p827: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p835: ref;
  var $p836: ref;
  var $p837: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $p855: ref;
  var $p856: ref;
  var $p857: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p865: ref;
  var $p866: ref;
  var $p867: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $p875: ref;
  var $p876: ref;
  var $p877: ref;
  var $p880: ref;
  var $p881: ref;
  var $p882: ref;
  var $p885: ref;
  var $p886: ref;
  var $p887: ref;
  var $p890: ref;
  var $p891: ref;
  var $p892: ref;
  var $p895: ref;
  var $p896: ref;
  var $p897: ref;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $p905: ref;
  var $p906: ref;
  var $p907: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p935: ref;
  var $p936: ref;
  var $p937: ref;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $p945: ref;
  var $p946: ref;
  var $p947: ref;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p955: ref;
  var $p956: ref;
  var $p957: ref;
  var $p960: ref;
  var $p961: ref;
  var $p962: ref;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p975: ref;
  var $p976: ref;
  var $p977: ref;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $p985: ref;
  var $p986: ref;
  var $p987: ref;
  var $p990: ref;
  var $p991: ref;
  var $p992: ref;
  var $p995: ref;
  var $p996: ref;
  var $p997: ref;
  var $p1000: ref;
  var $p1001: ref;
  var $p1002: ref;
  var $p1005: ref;
  var $p1006: ref;
  var $p1007: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1015: ref;
  var $p1016: ref;
  var $p1017: ref;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $p1025: ref;
  var $p1026: ref;
  var $p1027: ref;
  var $p1030: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1040: ref;
  var $p1041: ref;
  var $p1042: ref;
  var $p1045: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $p1050: ref;
  var $p1051: ref;
  var $p1052: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $p1070: ref;
  var $p1071: ref;
  var $p1072: ref;
  var $p1075: ref;
  var $p1076: ref;
  var $p1077: ref;
  var $p1080: ref;
  var $p1081: ref;
  var $p1082: ref;
  var $p1085: ref;
  var $p1086: ref;
  var $p1087: ref;
  var $p1090: ref;
  var $p1091: ref;
  var $p1092: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $p1097: ref;
  var $p1100: ref;
  var $p1101: ref;
  var $p1102: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1107: ref;
  var $p1110: ref;
  var $p1111: ref;
  var $p1112: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $p1117: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $p1125: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $p1135: ref;
  var $p1136: ref;
  var $p1137: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $p1142: ref;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $p1155: ref;
  var $p1156: ref;
  var $p1157: ref;
  var $p1160: ref;
  var $p1161: ref;
  var $p1162: ref;
  var $p1165: ref;
  var $p1166: ref;
  var $p1167: ref;
  var $p1170: ref;
  var $p1171: ref;
  var $p1172: ref;
  var $p1175: ref;
  var $p1176: ref;
  var $p1177: ref;
  var $p1180: ref;
  var $p1181: ref;
  var $p1182: ref;
  var $p1185: ref;
  var $p1186: ref;
  var $p1187: ref;
  var $p1190: ref;
  var $p1191: ref;
  var $p1192: ref;
  var $p1195: ref;
  var $p1196: ref;
  var $p1197: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $p1205: ref;
  var $p1206: ref;
  var $p1207: ref;
  var $p1210: ref;
  var $p1211: ref;
  var $p1212: ref;
  var $p1215: ref;
  var $p1216: ref;
  var $p1217: ref;
  var $p1220: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $p1225: ref;
  var $p1226: ref;
  var $p1227: ref;
  var $p1230: ref;
  var $p1231: ref;
  var $p1232: ref;
  var $p1235: ref;
  var $p1236: ref;
  var $p1237: ref;
  var $p1240: ref;
  var $p1241: ref;
  var $p1242: ref;
  var $p1245: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1250: ref;
  var $p1251: ref;
  var $p1252: ref;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $p1260: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $p1265: ref;
  var $p1266: ref;
  var $p1267: ref;
  var $p1270: ref;
  var $p1271: ref;
  var $p1272: ref;
  var $p1275: ref;
  var $p1276: ref;
  var $p1277: ref;
  var $p1280: ref;
  var $p1281: ref;
  var $p1282: ref;
  var $p1285: ref;
  var $p1286: ref;
  var $p1287: ref;
  var $p1290: ref;
  var $p1291: ref;
  var $p1292: ref;
  var $p1295: ref;
  var $p1296: ref;
  var $p1297: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $p1302: ref;
  var $p1305: ref;
  var $p1306: ref;
  var $p1307: ref;
  var $p1310: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $p1315: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1320: ref;
  var $p1321: ref;
  var $p1322: ref;
  var $p1325: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $p1335: ref;
  var $p1336: ref;
  var $p1337: ref;
  var $p1340: ref;
  var $p1341: ref;
  var $p1342: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $p1350: ref;
  var $p1351: ref;
  var $p1352: ref;
  var $p1355: ref;
  var $p1356: ref;
  var $p1357: ref;
  var $p1360: ref;
  var $p1361: ref;
  var $p1362: ref;
  var $p1365: ref;
  var $p1366: ref;
  var $p1367: ref;
  var $p1370: ref;
  var $p1371: ref;
  var $p1372: ref;
  var $p1375: ref;
  var $p1376: ref;
  var $p1377: ref;
  var $p1380: ref;
  var $p1381: ref;
  var $p1382: ref;
  var $p1385: ref;
  var $p1386: ref;
  var $p1387: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $p1392: ref;
  var $p1395: ref;
  var $p1396: ref;
  var $p1397: ref;
  var $p1400: ref;
  var $p1401: ref;
  var $p1402: ref;
  var $p1405: ref;
  var $p1406: ref;
  var $p1407: ref;
  var $p1410: ref;
  var $p1411: ref;
  var $p1412: ref;
  var $p1415: ref;
  var $p1416: ref;
  var $p1417: ref;
  var $p1420: ref;
  var $p1421: ref;
  var $p1422: ref;
  var $p1425: ref;
  var $p1426: ref;
  var $p1427: ref;
  var $p1430: ref;
  var $p1431: ref;
  var $p1432: ref;
  var $p1435: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $p1440: ref;
  var $p1441: ref;
  var $p1442: ref;
  var $p1445: ref;
  var $p1446: ref;
  var $p1447: ref;
  var $p1450: ref;
  var $p1451: ref;
  var $p1452: ref;
  var $p1455: ref;
  var $p1456: ref;
  var $p1457: ref;
  var $p1460: ref;
  var $p1461: ref;
  var $p1462: ref;
  var $p1465: ref;
  var $p1466: ref;
  var $p1467: ref;
  var $p1470: ref;
  var $p1471: ref;
  var $p1472: ref;
  var $p1475: ref;
  var $p1476: ref;
  var $p1477: ref;
  var $p1480: ref;
  var $p1481: ref;
  var $p1482: ref;
  var $p1485: ref;
  var $p1486: ref;
  var $p1487: ref;
  var $p1490: ref;
  var $p1491: ref;
  var $p1492: ref;
  var $p1495: ref;
  var $p1496: ref;
  var $p1497: ref;
  var $p1500: ref;
  var $p1501: ref;
  var $p1502: ref;
  var $p1505: ref;
  var $p1506: ref;
  var $p1507: ref;
  var $p1510: ref;
  var $p1511: ref;
  var $p1512: ref;
  var $p1515: ref;
  var $p1516: ref;
  var $p1517: ref;
  var $p1520: ref;
  var $p1521: ref;
  var $p1522: ref;
  var $p1525: ref;
  var $p1526: ref;
  var $p1527: ref;
  var $p1530: ref;
  var $p1531: ref;
  var $p1532: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $p1540: ref;
  var $p1541: ref;
  var $p1542: ref;
  var $p1545: ref;
  var $p1546: ref;
  var $p1547: ref;
  var $p1550: ref;
  var $p1551: ref;
  var $p1552: ref;
  var $p1555: ref;
  var $p1556: ref;
  var $p1557: ref;
  var $p1560: ref;
  var $p1561: ref;
  var $p1562: ref;
  var $p1565: ref;
  var $p1566: ref;
  var $p1567: ref;
  var $p1570: ref;
  var $p1571: ref;
  var $p1572: ref;
  var $p1575: ref;
  var $p1576: ref;
  var $p1577: ref;
  var $p1580: ref;
  var $p1581: ref;
  var $p1582: ref;
  var $p1585: ref;
  var $p1586: ref;
  var $p1587: ref;
  var $p1590: ref;
  var $p1591: ref;
  var $p1592: ref;
  var $p1595: ref;
  var $p1596: ref;
  var $p1597: ref;
  var $p1600: ref;
  var $p1601: ref;
  var $p1602: ref;
  var $p1605: ref;
  var $p1606: ref;
  var $p1607: ref;
  var $p1610: ref;
  var $p1611: ref;
  var $p1612: ref;
  var $p1615: ref;
  var $p1616: ref;
  var $p1617: ref;
  var $p1620: ref;
  var $p1621: ref;
  var $p1622: ref;
  var $p1625: ref;
  var $p1626: ref;
  var $p1627: ref;
  var $p1630: ref;
  var $p1631: ref;
  var $p1632: ref;
  var $p1635: ref;
  var $p1636: ref;
  var $p1637: ref;
  var $p1640: ref;
  var $p1641: ref;
  var $p1642: ref;
  var $p1645: ref;
  var $p1646: ref;
  var $p1647: ref;
  var $p1650: ref;
  var $p1651: ref;
  var $p1652: ref;
  var $p1655: ref;
  var $p1656: ref;
  var $p1657: ref;
  var $p1660: ref;
  var $p1661: ref;
  var $p1662: ref;
  var $p1665: ref;
  var $p1666: ref;
  var $p1667: ref;
  var $p1670: ref;
  var $p1671: ref;
  var $p1672: ref;
  var $p1675: ref;
  var $p1676: ref;
  var $p1677: ref;
  var $p1680: ref;
  var $p1681: ref;
  var $p1682: ref;
  var $p1685: ref;
  var $p1686: ref;
  var $p1687: ref;
  var $p1690: ref;
  var $p1691: ref;
  var $p1692: ref;
  var $p1695: ref;
  var $p1696: ref;
  var $p1697: ref;
  var $p1700: ref;
  var $p1701: ref;
  var $p1702: ref;
  var $p1705: ref;
  var $p1706: ref;
  var $p1707: ref;
  var $p1710: ref;
  var $p1711: ref;
  var $p1712: ref;
  var $p1715: ref;
  var $p1716: ref;
  var $p1717: ref;
  var $p1720: ref;
  var $p1721: ref;
  var $p1722: ref;
  var $p1725: ref;
  var $p1726: ref;
  var $p1727: ref;
  var $p1730: ref;
  var $p1731: ref;
  var $p1732: ref;
  var $p1735: ref;
  var $p1736: ref;
  var $p1737: ref;
  var $p1740: ref;
  var $p1741: ref;
  var $p1742: ref;
  var $p1745: ref;
  var $p1746: ref;
  var $p1747: ref;
  var $p1750: ref;
  var $p1751: ref;
  var $p1752: ref;
  var $p1755: ref;
  var $p1756: ref;
  var $p1757: ref;
  var $p1760: ref;
  var $p1761: ref;
  var $p1762: ref;
  var $p1765: ref;
  var $p1766: ref;
  var $p1767: ref;
  var $p1770: ref;
  var $p1771: ref;
  var $p1772: ref;
  var $p1775: ref;
  var $p1776: ref;
  var $p1777: ref;
  var $p1780: ref;
  var $p1781: ref;
  var $p1782: ref;
  var $p1785: ref;
  var $p1786: ref;
  var $p1787: ref;
  var $p1790: ref;
  var $p1791: ref;
  var $p1792: ref;
  var $p1795: ref;
  var $p1796: ref;
  var $p1797: ref;
  var $p1800: ref;
  var $p1801: ref;
  var $p1802: ref;
  var $p1805: ref;
  var $p1806: ref;
  var $p1807: ref;
  var $p1810: ref;
  var $p1811: ref;
  var $p1812: ref;
  var $p1815: ref;
  var $p1816: ref;
  var $p1817: ref;
  var $p1820: ref;
  var $p1821: ref;
  var $p1822: ref;
  var $p1825: ref;
  var $p1826: ref;
  var $p1827: ref;
  var $p1830: ref;
  var $p1831: ref;
  var $p1832: ref;
  var $p1835: ref;
  var $p1836: ref;
  var $p1837: ref;
  var $p1840: ref;
  var $p1841: ref;
  var $p1842: ref;
  var $p1845: ref;
  var $p1846: ref;
  var $p1847: ref;
  var $p1850: ref;
  var $p1851: ref;
  var $p1852: ref;
  var $p1855: ref;
  var $p1856: ref;
  var $p1857: ref;
  var $p1860: ref;
  var $p1861: ref;
  var $p1862: ref;
  var $p1865: ref;
  var $p1866: ref;
  var $p1867: ref;
  var $p1870: ref;
  var $p1871: ref;
  var $p1872: ref;
  var $p1875: ref;
  var $p1876: ref;
  var $p1877: ref;
  var $p1880: ref;
  var $p1881: ref;
  var $p1882: ref;
  var $p1885: ref;
  var $p1886: ref;
  var $p1887: ref;
  var $p1890: ref;
  var $p1891: ref;
  var $p1892: ref;
  var $p1895: ref;
  var $p1896: ref;
  var $p1897: ref;
  var $p1900: ref;
  var $p1901: ref;
  var $p1902: ref;
  var $p1905: ref;
  var $p1906: ref;
  var $p1907: ref;
  var $p1910: ref;
  var $p1911: ref;
  var $p1912: ref;
  var $p1915: ref;
  var $p1916: ref;
  var $p1917: ref;
  var $p1920: ref;
  var $p1921: ref;
  var $p1922: ref;
  var $p1925: ref;
  var $p1926: ref;
  var $p1927: ref;
  var $p1930: ref;
  var $p1931: ref;
  var $p1932: ref;
  var $p1935: ref;
  var $p1936: ref;
  var $p1937: ref;
  var $p1940: ref;
  var $p1941: ref;
  var $p1942: ref;
  var $p1945: ref;
  var $p1946: ref;
  var $p1947: ref;
  var $p1950: ref;
  var $p1951: ref;
  var $p1952: ref;
  var $p1955: ref;
  var $p1956: ref;
  var $p1957: ref;
  var $p1960: ref;
  var $p1961: ref;
  var $p1962: ref;
  var $p1965: ref;
  var $p1966: ref;
  var $p1967: ref;
  var $p1970: ref;
  var $p1971: ref;
  var $p1972: ref;
  var $p1975: ref;
  var $p1976: ref;
  var $p1977: ref;
  var $p1980: ref;
  var $p1981: ref;
  var $p1982: ref;
  var $p1985: ref;
  var $p1986: ref;
  var $p1987: ref;
  var $p1990: ref;
  var $p1991: ref;
  var $p1992: ref;
  var $p1995: ref;
  var $p1996: ref;
  var $p1997: ref;
  var $p2000: ref;
  var $p2001: ref;
  var $p2002: ref;
  var $p2005: ref;
  var $p2006: ref;
  var $p2007: ref;
  var $p2010: ref;
  var $p2011: ref;
  var $p2012: ref;
  var $p2015: ref;
  var $p2016: ref;
  var $p2017: ref;
  var $p2020: ref;
  var $p2021: ref;
  var $p2022: ref;
  var $p2025: ref;
  var $p2026: ref;
  var $p2027: ref;
  var $p2030: ref;
  var $p2031: ref;
  var $p2032: ref;
  var $p2035: ref;
  var $p2036: ref;
  var $p2037: ref;
  var $p2040: ref;
  var $p2041: ref;
  var $p2042: ref;
  var $p2045: ref;
  var $p2046: ref;
  var $p2047: ref;
  var $p2050: ref;
  var $p2051: ref;
  var $p2052: ref;
  var $p2055: ref;
  var $p2056: ref;
  var $p2057: ref;
  var $p2060: ref;
  var $p2061: ref;
  var $p2062: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $p2067: ref;
  var $p2070: ref;
  var $p2071: ref;
  var $p2072: ref;
  var $p2075: ref;
  var $p2076: ref;
  var $p2077: ref;
  var $p2080: ref;
  var $p2081: ref;
  var $p2082: ref;
  var $p2085: ref;
  var $p2086: ref;
  var $p2087: ref;
  var $p2090: ref;
  var $p2091: ref;
  var $p2092: ref;
  var $p2095: ref;
  var $p2096: ref;
  var $p2097: ref;
  var $p2100: ref;
  var $p2101: ref;
  var $p2102: ref;
  var $p2105: ref;
  var $p2106: ref;
  var $p2107: ref;
  var $p2110: ref;
  var $p2111: ref;
  var $p2112: ref;
  var $p2115: ref;
  var $p2116: ref;
  var $p2117: ref;
  var $p2120: ref;
  var $p2121: ref;
  var $p2122: ref;
  var $p2125: ref;
  var $p2126: ref;
  var $p2127: ref;
  var $p2130: ref;
  var $p2131: ref;
  var $p2132: ref;
  var $p2135: ref;
  var $p2136: ref;
  var $p2137: ref;
  var $p2140: ref;
  var $p2141: ref;
  var $p2142: ref;
  var $p2145: ref;
  var $p2146: ref;
  var $p2147: ref;
  var $p2150: ref;
  var $p2151: ref;
  var $p2152: ref;
  var $p2155: ref;
  var $p2156: ref;
  var $p2157: ref;
  var $p2160: ref;
  var $p2161: ref;
  var $p2162: ref;
  var $p2165: ref;
  var $p2166: ref;
  var $p2167: ref;
  var $p2170: ref;
  var $p2171: ref;
  var $p2172: ref;
  var $p2175: ref;
  var $p2176: ref;
  var $p2177: ref;
  var $p2180: ref;
  var $p2181: ref;
  var $p2182: ref;
  var $p2185: ref;
  var $p2186: ref;
  var $p2187: ref;
  var $p2190: ref;
  var $p2191: ref;
  var $p2192: ref;
  var $p2195: ref;
  var $p2196: ref;
  var $p2197: ref;
  var $p2200: ref;
  var $p2201: ref;
  var $p2202: ref;
  var $p2205: ref;
  var $p2206: ref;
  var $p2207: ref;
  var $p2210: ref;
  var $p2211: ref;
  var $p2212: ref;
  var $p2215: ref;
  var $p2216: ref;
  var $p2217: ref;
  var $p2220: ref;
  var $p2221: ref;
  var $p2222: ref;
  var $p2225: ref;
  var $p2226: ref;
  var $p2227: ref;
  var $p2230: ref;
  var $p2231: ref;
  var $p2232: ref;
  var $p2235: ref;
  var $p2236: ref;
  var $p2237: ref;
  var $p2240: ref;
  var $p2241: ref;
  var $p2242: ref;
  var $p2245: ref;
  var $p2246: ref;
  var $p2247: ref;
  var $p2250: ref;
  var $p2251: ref;
  var $p2252: ref;
  var $p2255: ref;
  var $p2256: ref;
  var $p2257: ref;
  var $p2260: ref;
  var $p2261: ref;
  var $p2262: ref;
  var $p2265: ref;
  var $p2266: ref;
  var $p2267: ref;
  var $p2270: ref;
  var $p2271: ref;
  var $p2272: ref;
  var $p2275: ref;
  var $p2276: ref;
  var $p2277: ref;
  var $p2280: ref;
  var $p2281: ref;
  var $p2282: ref;
  var $p2285: ref;
  var $p2286: ref;
  var $p2287: ref;
  var $p2290: ref;
  var $p2291: ref;
  var $p2292: ref;
  var $p2295: ref;
  var $p2296: ref;
  var $p2297: ref;
  var $p2300: ref;
  var $p2301: ref;
  var $p2302: ref;
  var $p2305: ref;
  var $p2306: ref;
  var $p2307: ref;
  var $p2310: ref;
  var $p2311: ref;
  var $p2312: ref;
  var $p2315: ref;
  var $p2316: ref;
  var $p2317: ref;
  var $p2320: ref;
  var $p2321: ref;
  var $p2322: ref;
  var $p2325: ref;
  var $p2326: ref;
  var $p2327: ref;
  var $p2330: ref;
  var $p2331: ref;
  var $p2332: ref;
  var $p2335: ref;
  var $p2336: ref;
  var $p2337: ref;
  var $p2340: ref;
  var $p2341: ref;
  var $p2342: ref;
  var $p2345: ref;
  var $p2346: ref;
  var $p2347: ref;
  var $p2350: ref;
  var $p2351: ref;
  var $p2352: ref;
  var $p2355: ref;
  var $p2356: ref;
  var $p2357: ref;
  var $p2360: ref;
  var $p2361: ref;
  var $p2362: ref;
  var $p2365: ref;
  var $p2366: ref;
  var $p2367: ref;
  var $p2370: ref;
  var $p2371: ref;
  var $p2372: ref;
  var $p2375: ref;
  var $p2376: ref;
  var $p2377: ref;
  var $p2380: ref;
  var $p2381: ref;
  var $p2382: ref;
  var $p2385: ref;
  var $p2386: ref;
  var $p2387: ref;
  var $p2390: ref;
  var $p2391: ref;
  var $p2392: ref;
  var $p2395: ref;
  var $p2396: ref;
  var $p2397: ref;
  var $p2400: ref;
  var $p2401: ref;
  var $p2402: ref;
  var $p2405: ref;
  var $p2406: ref;
  var $p2407: ref;
  var $p2410: ref;
  var $p2411: ref;
  var $p2412: ref;
  var $p2415: ref;
  var $p2416: ref;
  var $p2417: ref;
  var $p2420: ref;
  var $p2421: ref;
  var $p2422: ref;
  var $p2425: ref;
  var $p2426: ref;
  var $p2427: ref;
  var $p2430: ref;
  var $p2431: ref;
  var $p2432: ref;
  var $p2435: ref;
  var $p2436: ref;
  var $p2437: ref;
  var $p2440: ref;
  var $p2441: ref;
  var $p2442: ref;
  var $p2445: ref;
  var $p2446: ref;
  var $p2447: ref;
  var $p2450: ref;
  var $p2451: ref;
  var $p2452: ref;
  var $p2455: ref;
  var $p2456: ref;
  var $p2457: ref;
  var $p2460: ref;
  var $p2461: ref;
  var $p2462: ref;
  var $p2465: ref;
  var $p2466: ref;
  var $p2467: ref;
  var $p2470: ref;
  var $p2471: ref;
  var $p2472: ref;
  var $p2475: ref;
  var $p2476: ref;
  var $p2477: ref;
  var $p2480: ref;
  var $p2481: ref;
  var $p2482: ref;
  var $p2485: ref;
  var $p2486: ref;
  var $p2487: ref;
  var $p2490: ref;
  var $p2491: ref;
  var $p2492: ref;
  var $p2495: ref;
  var $p2496: ref;
  var $p2497: ref;
  var $p2500: ref;
  var $p2501: ref;
  var $p2502: ref;
  var $p2505: ref;
  var $p2506: ref;
  var $p2507: ref;
  var $p2510: ref;
  var $p2511: ref;
  var $p2512: ref;
  var $p2515: ref;
  var $p2516: ref;
  var $p2517: ref;
  var $p2520: ref;
  var $p2521: ref;
  var $p2522: ref;
  var $p2525: ref;
  var $p2526: ref;
  var $p2527: ref;
  var $p2530: ref;
  var $p2531: ref;
  var $p2532: ref;
  var $p2535: ref;
  var $p2536: ref;
  var $p2537: ref;
  var $p2540: ref;
  var $p2541: ref;
  var $p2542: ref;
  var $p2545: ref;
  var $p2546: ref;
  var $p2547: ref;
  var $p2550: ref;
  var $p2551: ref;
  var $p2552: ref;
  var $p2555: ref;
  var $p2556: ref;
  var $p2557: ref;
  var $p2560: ref;
  var $p2561: ref;
  var $p2562: ref;
  var $p2565: ref;
  var $p2566: ref;
  var $p2567: ref;
  var $p2570: ref;
  var $p2571: ref;
  var $p2572: ref;
  var $p2575: ref;
  var $p2576: ref;
  var $p2577: ref;
  var $p2580: ref;
  var $p2581: ref;
  var $p2582: ref;
  var $p2585: ref;
  var $p2586: ref;
  var $p2587: ref;
  var $p2590: ref;
  var $p2591: ref;
  var $p2592: ref;
  var $p2595: ref;
  var $p2596: ref;
  var $p2597: ref;
  var $p2600: ref;
  var $p2601: ref;
  var $p2602: ref;
  var $p2605: ref;
  var $p2606: ref;
  var $p2607: ref;
  var $p2610: ref;
  var $p2611: ref;
  var $p2612: ref;
  var $p2615: ref;
  var $p2616: ref;
  var $p2617: ref;
  var $p2620: ref;
  var $p2621: ref;
  var $p2622: ref;
  var $p2625: ref;
  var $p2626: ref;
  var $p2627: ref;
  var $p2630: ref;
  var $p2631: ref;
  var $p2632: ref;
  var $p2635: ref;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_662: ref;
  var vslice_dummy_var_663: ref;
  var vslice_dummy_var_664: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(480, 1));
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 3327} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p12, 0, 68, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} $p13 := vmalloc(4160);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p13);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p30, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p97, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, 2);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p102, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $0.ref);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p107, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 3);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p112, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, $0.ref);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p117, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 4);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p122, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $0.ref);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p127, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 5);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p132, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $0.ref);
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p137, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, 6);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p142, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p145, $0.ref);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, 7);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p152, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, $0.ref);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p157, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 8);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p162, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $0.ref);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p167, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, 9);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p172, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(8, 16)), $mul.ref(8, 1));
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p175, $0.ref);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p177, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, 10);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p182, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(9, 16)), $mul.ref(8, 1));
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, $0.ref);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p187, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, 11);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p192, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(10, 16)), $mul.ref(8, 1));
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p195, $0.ref);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p197, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, 12);
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p202, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(11, 16)), $mul.ref(8, 1));
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p205, $0.ref);
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p207, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 13);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p212, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(12, 16)), $mul.ref(8, 1));
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p215, $0.ref);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p217, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p220, 14);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($add.ref($p222, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(13, 16)), $mul.ref(8, 1));
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, $0.ref);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($p227, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p230, 15);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p232, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(14, 16)), $mul.ref(8, 1));
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, $0.ref);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p237, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, 16);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($add.ref($p242, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(15, 16)), $mul.ref(8, 1));
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p245, $0.ref);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p247, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(16, 16)), $mul.ref(0, 1));
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, 17);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p252, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(16, 16)), $mul.ref(8, 1));
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p255, $0.ref);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p257, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(17, 16)), $mul.ref(0, 1));
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, 18);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($add.ref($p262, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(17, 16)), $mul.ref(8, 1));
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, $0.ref);
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p267, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(18, 16)), $mul.ref(0, 1));
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p270, 19);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($p272, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(18, 16)), $mul.ref(8, 1));
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, $0.ref);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref($add.ref($p277, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(19, 16)), $mul.ref(0, 1));
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, 20);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p282, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(19, 16)), $mul.ref(8, 1));
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $0.ref);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($add.ref($p287, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(20, 16)), $mul.ref(0, 1));
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, 21);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($add.ref($p292, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(20, 16)), $mul.ref(8, 1));
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p295, $0.ref);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p297, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(21, 16)), $mul.ref(0, 1));
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p300, 22);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($add.ref($p302, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(21, 16)), $mul.ref(8, 1));
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p305, $0.ref);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($add.ref($p307, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(22, 16)), $mul.ref(0, 1));
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p310, 23);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($p312, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(22, 16)), $mul.ref(8, 1));
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p315, $0.ref);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($add.ref($p317, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(23, 16)), $mul.ref(0, 1));
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, 24);
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($add.ref($p322, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(23, 16)), $mul.ref(8, 1));
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p325, $0.ref);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p327, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(24, 16)), $mul.ref(0, 1));
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p330, 25);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($add.ref($p332, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p335, $0.ref);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($add.ref($p337, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(25, 16)), $mul.ref(0, 1));
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p340, 26);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.0, $p341);
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($add.ref($p342, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(25, 16)), $mul.ref(8, 1));
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p345, $0.ref);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($add.ref($p347, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(26, 16)), $mul.ref(0, 1));
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p350, 27);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($add.ref($p352, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(26, 16)), $mul.ref(8, 1));
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p355, $0.ref);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.0, $p356);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($add.ref($p357, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(27, 16)), $mul.ref(0, 1));
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p360, 28);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.0, $p361);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($add.ref($p362, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(27, 16)), $mul.ref(8, 1));
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p365, $0.ref);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($add.ref($p367, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(28, 16)), $mul.ref(0, 1));
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p370, 29);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($add.ref($p372, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(28, 16)), $mul.ref(8, 1));
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p375, $0.ref);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($add.ref($p377, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(29, 16)), $mul.ref(0, 1));
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p380, 30);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.0, $p381);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($add.ref($p382, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(29, 16)), $mul.ref(8, 1));
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p385, $0.ref);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p387, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(30, 16)), $mul.ref(0, 1));
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p390, 31);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.0, $p391);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($add.ref($p392, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(30, 16)), $mul.ref(8, 1));
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p395, $0.ref);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.0, $p396);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($add.ref($p397, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(31, 16)), $mul.ref(0, 1));
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p400, 32);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($add.ref($p402, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(31, 16)), $mul.ref(8, 1));
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p405, $0.ref);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.0, $p406);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($add.ref($add.ref($p407, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(32, 16)), $mul.ref(0, 1));
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p410, 33);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($add.ref($p412, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(32, 16)), $mul.ref(8, 1));
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p415, $0.ref);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.0, $p416);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($add.ref($p417, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(33, 16)), $mul.ref(0, 1));
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p420, 34);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($add.ref($p422, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(33, 16)), $mul.ref(8, 1));
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p425, $0.ref);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p427, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(34, 16)), $mul.ref(0, 1));
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p430, 35);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p432, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(34, 16)), $mul.ref(8, 1));
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p435, $0.ref);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.0, $p436);
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($add.ref($p437, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(35, 16)), $mul.ref(0, 1));
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p440, 36);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($add.ref($p442, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(35, 16)), $mul.ref(8, 1));
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p445, $0.ref);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($add.ref($p447, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(36, 16)), $mul.ref(0, 1));
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p450, 37);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.0, $p451);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($add.ref($p452, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(36, 16)), $mul.ref(8, 1));
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, $0.ref);
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p457, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(37, 16)), $mul.ref(0, 1));
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p460, 38);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $p462 := $load.ref($M.0, $p461);
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($add.ref($p462, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(37, 16)), $mul.ref(8, 1));
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p465, $0.ref);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($add.ref($p467, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(38, 16)), $mul.ref(0, 1));
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p470, 39);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($add.ref($p472, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(38, 16)), $mul.ref(8, 1));
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p475, $0.ref);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p476);
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p477, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(39, 16)), $mul.ref(0, 1));
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p480, 40);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p481);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($add.ref($p482, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(39, 16)), $mul.ref(8, 1));
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p485, $0.ref);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $p487 := $load.ref($M.0, $p486);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($add.ref($p487, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(40, 16)), $mul.ref(0, 1));
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p490, 41);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($add.ref($p492, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(40, 16)), $mul.ref(8, 1));
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p495, $0.ref);
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($add.ref($add.ref($p497, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(41, 16)), $mul.ref(0, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p500, 42);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $p502 := $load.ref($M.0, $p501);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($add.ref($p502, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(41, 16)), $mul.ref(8, 1));
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p505, $0.ref);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $p507 := $load.ref($M.0, $p506);
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($add.ref($p507, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(42, 16)), $mul.ref(0, 1));
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p510, 43);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.0, $p511);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($add.ref($p512, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(42, 16)), $mul.ref(8, 1));
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p515, $0.ref);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $p517 := $load.ref($M.0, $p516);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($add.ref($p517, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(43, 16)), $mul.ref(0, 1));
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p520, 44);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $p522 := $load.ref($M.0, $p521);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($add.ref($p522, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(43, 16)), $mul.ref(8, 1));
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p525, $0.ref);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($add.ref($p527, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(44, 16)), $mul.ref(0, 1));
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p530, 45);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.0, $p531);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($add.ref($p532, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(44, 16)), $mul.ref(8, 1));
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p535, $0.ref);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    $p537 := $load.ref($M.0, $p536);
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p537, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(45, 16)), $mul.ref(0, 1));
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p540, 46);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($add.ref($p542, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(45, 16)), $mul.ref(8, 1));
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p545, $0.ref);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.0, $p546);
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($add.ref($p547, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(46, 16)), $mul.ref(0, 1));
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p550, 47);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($add.ref($p552, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(46, 16)), $mul.ref(8, 1));
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p555, $0.ref);
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $p557 := $load.ref($M.0, $p556);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($add.ref($p557, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(47, 16)), $mul.ref(0, 1));
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p560, 48);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p562, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(47, 16)), $mul.ref(8, 1));
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p565, $0.ref);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $p567 := $load.ref($M.0, $p566);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($add.ref($p567, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(48, 16)), $mul.ref(0, 1));
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p570, 49);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.0, $p571);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($add.ref($add.ref($p572, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(48, 16)), $mul.ref(8, 1));
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p575, $0.ref);
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $p577 := $load.ref($M.0, $p576);
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($add.ref($p577, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(49, 16)), $mul.ref(0, 1));
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p580, 50);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.0, $p581);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($add.ref($p582, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(49, 16)), $mul.ref(8, 1));
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p585, $0.ref);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $p587 := $load.ref($M.0, $p586);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($add.ref($add.ref($p587, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(50, 16)), $mul.ref(0, 1));
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p590, 51);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.0, $p591);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($add.ref($add.ref($p592, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(50, 16)), $mul.ref(8, 1));
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p595, $0.ref);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $p597 := $load.ref($M.0, $p596);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p597, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(51, 16)), $mul.ref(0, 1));
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p600, 52);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.0, $p601);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($add.ref($p602, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(51, 16)), $mul.ref(8, 1));
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p605, $0.ref);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    $p607 := $load.ref($M.0, $p606);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($add.ref($add.ref($p607, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(52, 16)), $mul.ref(0, 1));
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p610, 53);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($add.ref($p612, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(52, 16)), $mul.ref(8, 1));
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p615, $0.ref);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.0, $p616);
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($add.ref($add.ref($p617, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(53, 16)), $mul.ref(0, 1));
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p620, 54);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $p622 := $load.ref($M.0, $p621);
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($add.ref($p622, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(53, 16)), $mul.ref(8, 1));
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p625, $0.ref);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p627, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(54, 16)), $mul.ref(0, 1));
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p630, 55);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.0, $p631);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($add.ref($p632, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(54, 16)), $mul.ref(8, 1));
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p635, $0.ref);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $p637 := $load.ref($M.0, $p636);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($add.ref($add.ref($p637, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(55, 16)), $mul.ref(0, 1));
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p640, 56);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.0, $p641);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($add.ref($p642, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(55, 16)), $mul.ref(8, 1));
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p645, $0.ref);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.0, $p646);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($add.ref($p647, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(56, 16)), $mul.ref(0, 1));
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p650, 57);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.0, $p651);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($add.ref($add.ref($p652, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(56, 16)), $mul.ref(8, 1));
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p655, $0.ref);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.0, $p656);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($add.ref($p657, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(57, 16)), $mul.ref(0, 1));
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p660, 58);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $p662 := $load.ref($M.0, $p661);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($add.ref($p662, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(57, 16)), $mul.ref(8, 1));
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p665, $0.ref);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($add.ref($add.ref($p667, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(58, 16)), $mul.ref(0, 1));
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p670, 59);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.0, $p671);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($add.ref($p672, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(58, 16)), $mul.ref(8, 1));
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p675, $0.ref);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $p677 := $load.ref($M.0, $p676);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($add.ref($add.ref($p677, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(59, 16)), $mul.ref(0, 1));
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p680, 60);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $p682 := $load.ref($M.0, $p681);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($add.ref($add.ref($p682, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(59, 16)), $mul.ref(8, 1));
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p685, $0.ref);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $p687 := $load.ref($M.0, $p686);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($add.ref($p687, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(60, 16)), $mul.ref(0, 1));
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p690, 61);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.0, $p691);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($add.ref($add.ref($p692, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(60, 16)), $mul.ref(8, 1));
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p695, $0.ref);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($add.ref($add.ref($p697, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(61, 16)), $mul.ref(0, 1));
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p700, 62);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($add.ref($add.ref($p702, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(61, 16)), $mul.ref(8, 1));
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p705, $0.ref);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $p707 := $load.ref($M.0, $p706);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($add.ref($add.ref($p707, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(62, 16)), $mul.ref(0, 1));
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p710, 63);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.0, $p711);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($add.ref($add.ref($p712, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(62, 16)), $mul.ref(8, 1));
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p715, $0.ref);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $p717 := $load.ref($M.0, $p716);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($add.ref($add.ref($p717, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(63, 16)), $mul.ref(0, 1));
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p720, 64);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.0, $p721);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($add.ref($add.ref($p722, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(63, 16)), $mul.ref(8, 1));
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p725, $0.ref);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $p727 := $load.ref($M.0, $p726);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($add.ref($add.ref($p727, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(64, 16)), $mul.ref(0, 1));
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p730, 65);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $p732 := $load.ref($M.0, $p731);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($add.ref($add.ref($p732, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(64, 16)), $mul.ref(8, 1));
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p735, $0.ref);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.0, $p736);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($add.ref($add.ref($p737, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(65, 16)), $mul.ref(0, 1));
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p740, 66);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.0, $p741);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($add.ref($add.ref($p742, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(65, 16)), $mul.ref(8, 1));
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p745, $0.ref);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $p747 := $load.ref($M.0, $p746);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($add.ref($p747, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(66, 16)), $mul.ref(0, 1));
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p750, 67);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($add.ref($add.ref($p752, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(66, 16)), $mul.ref(8, 1));
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p755, $0.ref);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.0, $p756);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($add.ref($add.ref($p757, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(67, 16)), $mul.ref(0, 1));
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p760, 68);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.0, $p761);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($add.ref($add.ref($p762, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(67, 16)), $mul.ref(8, 1));
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p765, $0.ref);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $p767 := $load.ref($M.0, $p766);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($add.ref($add.ref($p767, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(68, 16)), $mul.ref(0, 1));
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p770, 69);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($add.ref($add.ref($p772, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(68, 16)), $mul.ref(8, 1));
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p775, $0.ref);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    $p777 := $load.ref($M.0, $p776);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($add.ref($add.ref($p777, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(69, 16)), $mul.ref(0, 1));
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p780, 70);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($add.ref($add.ref($p782, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(69, 16)), $mul.ref(8, 1));
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p785, $0.ref);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.0, $p786);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($add.ref($add.ref($p787, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(70, 16)), $mul.ref(0, 1));
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p790, 71);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($add.ref($p792, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(70, 16)), $mul.ref(8, 1));
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p795, $0.ref);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $p800 := $add.ref($add.ref($add.ref($add.ref($p797, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(71, 16)), $mul.ref(0, 1));
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p800, 72);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.0, $p801);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($add.ref($add.ref($p802, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(71, 16)), $mul.ref(8, 1));
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p805, $0.ref);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $p807 := $load.ref($M.0, $p806);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($add.ref($add.ref($p807, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(72, 16)), $mul.ref(0, 1));
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p810, 73);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.0, $p811);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($add.ref($add.ref($p812, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(72, 16)), $mul.ref(8, 1));
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p815, $0.ref);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $p817 := $load.ref($M.0, $p816);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($add.ref($add.ref($p817, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(73, 16)), $mul.ref(0, 1));
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p820, 74);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    $p822 := $load.ref($M.0, $p821);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($add.ref($p822, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(73, 16)), $mul.ref(8, 1));
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p825, $0.ref);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.0, $p826);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($add.ref($add.ref($p827, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(74, 16)), $mul.ref(0, 1));
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p830, 75);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $p832 := $load.ref($M.0, $p831);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($add.ref($add.ref($add.ref($p832, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(74, 16)), $mul.ref(8, 1));
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p835, $0.ref);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $p837 := $load.ref($M.0, $p836);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p837, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(75, 16)), $mul.ref(0, 1));
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, 76);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($add.ref($add.ref($p842, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(75, 16)), $mul.ref(8, 1));
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p845, $0.ref);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    $p847 := $load.ref($M.0, $p846);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($add.ref($add.ref($p847, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(76, 16)), $mul.ref(0, 1));
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p850, 77);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $p852 := $load.ref($M.0, $p851);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($add.ref($p852, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(76, 16)), $mul.ref(8, 1));
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p855, $0.ref);
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $p857 := $load.ref($M.0, $p856);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($add.ref($add.ref($p857, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(77, 16)), $mul.ref(0, 1));
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p860, 78);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.0, $p861);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($add.ref($add.ref($p862, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(77, 16)), $mul.ref(8, 1));
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p865, $0.ref);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $p867 := $load.ref($M.0, $p866);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($add.ref($add.ref($p867, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(78, 16)), $mul.ref(0, 1));
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p870, 79);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.0, $p871);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($add.ref($add.ref($add.ref($p872, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(78, 16)), $mul.ref(8, 1));
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p875, $0.ref);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $p877 := $load.ref($M.0, $p876);
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($add.ref($add.ref($p877, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(79, 16)), $mul.ref(0, 1));
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p880, 80);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.0, $p881);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($add.ref($add.ref($p882, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(79, 16)), $mul.ref(8, 1));
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p885, $0.ref);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $p887 := $load.ref($M.0, $p886);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($add.ref($add.ref($p887, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(80, 16)), $mul.ref(0, 1));
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p890, 81);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p892 := $load.ref($M.0, $p891);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($add.ref($add.ref($p892, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(80, 16)), $mul.ref(8, 1));
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p895, $0.ref);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $p897 := $load.ref($M.0, $p896);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($add.ref($add.ref($p897, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(81, 16)), $mul.ref(0, 1));
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p900, 82);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $p902 := $load.ref($M.0, $p901);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($add.ref($add.ref($p902, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(81, 16)), $mul.ref(8, 1));
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p905, $0.ref);
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    $p907 := $load.ref($M.0, $p906);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref($add.ref($add.ref($p907, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(82, 16)), $mul.ref(0, 1));
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p910, 83);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.0, $p911);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($add.ref($add.ref($p912, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(82, 16)), $mul.ref(8, 1));
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p915, $0.ref);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $p917 := $load.ref($M.0, $p916);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($add.ref($add.ref($p917, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(83, 16)), $mul.ref(0, 1));
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p920, 84);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    $p922 := $load.ref($M.0, $p921);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($add.ref($add.ref($p922, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(83, 16)), $mul.ref(8, 1));
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p925, $0.ref);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $p927 := $load.ref($M.0, $p926);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($add.ref($add.ref($p927, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(84, 16)), $mul.ref(0, 1));
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p930, 85);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.0, $p931);
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($add.ref($add.ref($p932, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(84, 16)), $mul.ref(8, 1));
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p935, $0.ref);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $p937 := $load.ref($M.0, $p936);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($add.ref($add.ref($p937, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(85, 16)), $mul.ref(0, 1));
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p940, 86);
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $p942 := $load.ref($M.0, $p941);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($add.ref($add.ref($p942, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(85, 16)), $mul.ref(8, 1));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p945, $0.ref);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $p947 := $load.ref($M.0, $p946);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($add.ref($add.ref($p947, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(86, 16)), $mul.ref(0, 1));
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p950, 87);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $p952 := $load.ref($M.0, $p951);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($add.ref($add.ref($p952, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(86, 16)), $mul.ref(8, 1));
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p955, $0.ref);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $p957 := $load.ref($M.0, $p956);
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($add.ref($add.ref($p957, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(87, 16)), $mul.ref(0, 1));
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p960, 88);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.0, $p961);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($add.ref($add.ref($add.ref($p962, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(87, 16)), $mul.ref(8, 1));
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p965, $0.ref);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $p967 := $load.ref($M.0, $p966);
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $p970 := $add.ref($add.ref($add.ref($add.ref($p967, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(88, 16)), $mul.ref(0, 1));
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p970, 89);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    $p972 := $load.ref($M.0, $p971);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($add.ref($add.ref($p972, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(88, 16)), $mul.ref(8, 1));
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p975, $0.ref);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $p977 := $load.ref($M.0, $p976);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($add.ref($add.ref($p977, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(89, 16)), $mul.ref(0, 1));
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p980, 90);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $p982 := $load.ref($M.0, $p981);
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($add.ref($add.ref($add.ref($p982, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(89, 16)), $mul.ref(8, 1));
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p985, $0.ref);
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p987 := $load.ref($M.0, $p986);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($add.ref($add.ref($p987, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(90, 16)), $mul.ref(0, 1));
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p990, 91);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $p991 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $p992 := $load.ref($M.0, $p991);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($add.ref($add.ref($add.ref($p992, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(90, 16)), $mul.ref(8, 1));
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p995, $0.ref);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $p997 := $load.ref($M.0, $p996);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $p1000 := $add.ref($add.ref($add.ref($add.ref($p997, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(91, 16)), $mul.ref(0, 1));
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1000, 92);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.0, $p1001);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($add.ref($add.ref($add.ref($p1002, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(91, 16)), $mul.ref(8, 1));
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1005, $0.ref);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $p1007 := $load.ref($M.0, $p1006);
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($add.ref($add.ref($p1007, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(92, 16)), $mul.ref(0, 1));
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1010, 93);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $p1012 := $load.ref($M.0, $p1011);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $p1015 := $add.ref($add.ref($add.ref($add.ref($p1012, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(92, 16)), $mul.ref(8, 1));
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1015, $0.ref);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p1016 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $p1017 := $load.ref($M.0, $p1016);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($add.ref($add.ref($p1017, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(93, 16)), $mul.ref(0, 1));
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1020, 94);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $p1022 := $load.ref($M.0, $p1021);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($add.ref($add.ref($add.ref($p1022, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(93, 16)), $mul.ref(8, 1));
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1025, $0.ref);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $p1027 := $load.ref($M.0, $p1026);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($add.ref($add.ref($add.ref($p1027, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(94, 16)), $mul.ref(0, 1));
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1030, 95);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $p1032 := $load.ref($M.0, $p1031);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($add.ref($add.ref($p1032, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(94, 16)), $mul.ref(8, 1));
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1035, $0.ref);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $p1037 := $load.ref($M.0, $p1036);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($add.ref($add.ref($add.ref($p1037, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(95, 16)), $mul.ref(0, 1));
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1040, 96);
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p1042 := $load.ref($M.0, $p1041);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($add.ref($add.ref($add.ref($p1042, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(95, 16)), $mul.ref(8, 1));
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1045, $0.ref);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $p1047 := $load.ref($M.0, $p1046);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $p1050 := $add.ref($add.ref($add.ref($add.ref($p1047, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(96, 16)), $mul.ref(0, 1));
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1050, 97);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $p1052 := $load.ref($M.0, $p1051);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($add.ref($add.ref($p1052, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(96, 16)), $mul.ref(8, 1));
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1055, $0.ref);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $p1057 := $load.ref($M.0, $p1056);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($add.ref($add.ref($p1057, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(97, 16)), $mul.ref(0, 1));
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1060, 98);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $p1062 := $load.ref($M.0, $p1061);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($add.ref($add.ref($p1062, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(97, 16)), $mul.ref(8, 1));
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1065, $0.ref);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $p1067 := $load.ref($M.0, $p1066);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($add.ref($add.ref($p1067, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(98, 16)), $mul.ref(0, 1));
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1070, 99);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.0, $p1071);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($add.ref($add.ref($p1072, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(98, 16)), $mul.ref(8, 1));
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1075, $0.ref);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $p1077 := $load.ref($M.0, $p1076);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($add.ref($add.ref($p1077, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(99, 16)), $mul.ref(0, 1));
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1080, 100);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $p1082 := $load.ref($M.0, $p1081);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    $p1085 := $add.ref($add.ref($add.ref($add.ref($p1082, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(99, 16)), $mul.ref(8, 1));
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1085, $0.ref);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $p1087 := $load.ref($M.0, $p1086);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $p1090 := $add.ref($add.ref($add.ref($add.ref($p1087, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(100, 16)), $mul.ref(0, 1));
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1090, 101);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    $p1092 := $load.ref($M.0, $p1091);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($add.ref($add.ref($p1092, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(100, 16)), $mul.ref(8, 1));
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1095, $0.ref);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p1096 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $p1097 := $load.ref($M.0, $p1096);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($add.ref($add.ref($add.ref($p1097, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(101, 16)), $mul.ref(0, 1));
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1100, 102);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    $p1102 := $load.ref($M.0, $p1101);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($add.ref($add.ref($p1102, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(101, 16)), $mul.ref(8, 1));
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1105, $0.ref);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p1106 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $p1107 := $load.ref($M.0, $p1106);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $p1110 := $add.ref($add.ref($add.ref($add.ref($p1107, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(102, 16)), $mul.ref(0, 1));
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1110, 103);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $p1111 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $p1112 := $load.ref($M.0, $p1111);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $p1115 := $add.ref($add.ref($add.ref($add.ref($p1112, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(102, 16)), $mul.ref(8, 1));
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1115, $0.ref);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $p1117 := $load.ref($M.0, $p1116);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($add.ref($add.ref($add.ref($p1117, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(103, 16)), $mul.ref(0, 1));
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1120, 104);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.0, $p1121);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref($add.ref($p1122, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(103, 16)), $mul.ref(8, 1));
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1125, $0.ref);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p1126 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $p1127 := $load.ref($M.0, $p1126);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($add.ref($add.ref($p1127, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(104, 16)), $mul.ref(0, 1));
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1130, 105);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $p1132 := $load.ref($M.0, $p1131);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($add.ref($add.ref($add.ref($p1132, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(104, 16)), $mul.ref(8, 1));
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1135, $0.ref);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p1136 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p1137 := $load.ref($M.0, $p1136);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($add.ref($add.ref($p1137, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(105, 16)), $mul.ref(0, 1));
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1140, 106);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $p1141 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.0, $p1141);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $p1145 := $add.ref($add.ref($add.ref($add.ref($p1142, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(105, 16)), $mul.ref(8, 1));
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1145, $0.ref);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $p1147 := $load.ref($M.0, $p1146);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($add.ref($add.ref($add.ref($p1147, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(106, 16)), $mul.ref(0, 1));
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1150, 107);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $p1151 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $p1152 := $load.ref($M.0, $p1151);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($add.ref($add.ref($p1152, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(106, 16)), $mul.ref(8, 1));
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1155, $0.ref);
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $p1157 := $load.ref($M.0, $p1156);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $p1160 := $add.ref($add.ref($add.ref($add.ref($p1157, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(107, 16)), $mul.ref(0, 1));
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1160, 108);
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $p1162 := $load.ref($M.0, $p1161);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($add.ref($add.ref($add.ref($p1162, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(107, 16)), $mul.ref(8, 1));
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1165, $0.ref);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p1166 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $p1167 := $load.ref($M.0, $p1166);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $p1170 := $add.ref($add.ref($add.ref($add.ref($p1167, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(108, 16)), $mul.ref(0, 1));
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1170, 109);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $p1171 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $p1172 := $load.ref($M.0, $p1171);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($add.ref($add.ref($add.ref($p1172, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(108, 16)), $mul.ref(8, 1));
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1175, $0.ref);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $p1177 := $load.ref($M.0, $p1176);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $p1180 := $add.ref($add.ref($add.ref($add.ref($p1177, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(109, 16)), $mul.ref(0, 1));
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1180, 110);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $p1181 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $p1182 := $load.ref($M.0, $p1181);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $p1185 := $add.ref($add.ref($add.ref($add.ref($p1182, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(109, 16)), $mul.ref(8, 1));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1185, $0.ref);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $p1187 := $load.ref($M.0, $p1186);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $p1190 := $add.ref($add.ref($add.ref($add.ref($p1187, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(110, 16)), $mul.ref(0, 1));
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1190, 111);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $p1192 := $load.ref($M.0, $p1191);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $p1195 := $add.ref($add.ref($add.ref($add.ref($p1192, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(110, 16)), $mul.ref(8, 1));
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1195, $0.ref);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $p1197 := $load.ref($M.0, $p1196);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($add.ref($add.ref($p1197, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(111, 16)), $mul.ref(0, 1));
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1200, 112);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $p1201 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $p1202 := $load.ref($M.0, $p1201);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($add.ref($add.ref($p1202, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(111, 16)), $mul.ref(8, 1));
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1205, $0.ref);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p1206 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $p1207 := $load.ref($M.0, $p1206);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($add.ref($add.ref($add.ref($p1207, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(112, 16)), $mul.ref(0, 1));
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1210, 113);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.0, $p1211);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    $p1215 := $add.ref($add.ref($add.ref($add.ref($p1212, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(112, 16)), $mul.ref(8, 1));
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1215, $0.ref);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $p1217 := $load.ref($M.0, $p1216);
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($add.ref($add.ref($add.ref($p1217, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(113, 16)), $mul.ref(0, 1));
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1220, 114);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $p1222 := $load.ref($M.0, $p1221);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $p1225 := $add.ref($add.ref($add.ref($add.ref($p1222, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(113, 16)), $mul.ref(8, 1));
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1225, $0.ref);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p1226 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $p1227 := $load.ref($M.0, $p1226);
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($add.ref($add.ref($p1227, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(114, 16)), $mul.ref(0, 1));
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1230, 115);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $p1231 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $p1232 := $load.ref($M.0, $p1231);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $p1235 := $add.ref($add.ref($add.ref($add.ref($p1232, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(114, 16)), $mul.ref(8, 1));
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1235, $0.ref);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $p1237 := $load.ref($M.0, $p1236);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $p1240 := $add.ref($add.ref($add.ref($add.ref($p1237, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(115, 16)), $mul.ref(0, 1));
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1240, 116);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $p1242 := $load.ref($M.0, $p1241);
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $p1245 := $add.ref($add.ref($add.ref($add.ref($p1242, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(115, 16)), $mul.ref(8, 1));
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1245, $0.ref);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p1246 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p1247 := $load.ref($M.0, $p1246);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $p1250 := $add.ref($add.ref($add.ref($add.ref($p1247, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(116, 16)), $mul.ref(0, 1));
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1250, 117);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p1252 := $load.ref($M.0, $p1251);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $p1255 := $add.ref($add.ref($add.ref($add.ref($p1252, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(116, 16)), $mul.ref(8, 1));
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1255, $0.ref);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $p1257 := $load.ref($M.0, $p1256);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($add.ref($add.ref($p1257, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(117, 16)), $mul.ref(0, 1));
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1260, 118);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $p1262 := $load.ref($M.0, $p1261);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $p1265 := $add.ref($add.ref($add.ref($add.ref($p1262, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(117, 16)), $mul.ref(8, 1));
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1265, $0.ref);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    $p1267 := $load.ref($M.0, $p1266);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($add.ref($add.ref($p1267, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(118, 16)), $mul.ref(0, 1));
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1270, 119);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $p1271 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $p1272 := $load.ref($M.0, $p1271);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $p1275 := $add.ref($add.ref($add.ref($add.ref($p1272, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(118, 16)), $mul.ref(8, 1));
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1275, $0.ref);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $p1277 := $load.ref($M.0, $p1276);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $p1280 := $add.ref($add.ref($add.ref($add.ref($p1277, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(119, 16)), $mul.ref(0, 1));
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1280, 120);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $p1282 := $load.ref($M.0, $p1281);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $p1285 := $add.ref($add.ref($add.ref($add.ref($p1282, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(119, 16)), $mul.ref(8, 1));
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1285, $0.ref);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p1286 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    $p1287 := $load.ref($M.0, $p1286);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $p1290 := $add.ref($add.ref($add.ref($add.ref($p1287, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(120, 16)), $mul.ref(0, 1));
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1290, 121);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $p1292 := $load.ref($M.0, $p1291);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($add.ref($add.ref($p1292, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(120, 16)), $mul.ref(8, 1));
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1295, $0.ref);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p1296 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    $p1297 := $load.ref($M.0, $p1296);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($add.ref($add.ref($add.ref($p1297, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(121, 16)), $mul.ref(0, 1));
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1300, 122);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    $p1301 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $p1302 := $load.ref($M.0, $p1301);
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $p1305 := $add.ref($add.ref($add.ref($add.ref($p1302, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(121, 16)), $mul.ref(8, 1));
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1305, $0.ref);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p1306 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $p1307 := $load.ref($M.0, $p1306);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($add.ref($add.ref($p1307, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(122, 16)), $mul.ref(0, 1));
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1310, 123);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $p1312 := $load.ref($M.0, $p1311);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $p1315 := $add.ref($add.ref($add.ref($add.ref($p1312, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(122, 16)), $mul.ref(8, 1));
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1315, $0.ref);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $p1317 := $load.ref($M.0, $p1316);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($add.ref($add.ref($p1317, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(123, 16)), $mul.ref(0, 1));
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1320, 124);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $p1322 := $load.ref($M.0, $p1321);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $p1325 := $add.ref($add.ref($add.ref($add.ref($p1322, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(123, 16)), $mul.ref(8, 1));
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1325, $0.ref);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $p1327 := $load.ref($M.0, $p1326);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($add.ref($add.ref($p1327, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(124, 16)), $mul.ref(0, 1));
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1330, 125);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $p1332 := $load.ref($M.0, $p1331);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($add.ref($add.ref($p1332, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(124, 16)), $mul.ref(8, 1));
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1335, $0.ref);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p1336 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $p1337 := $load.ref($M.0, $p1336);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $p1340 := $add.ref($add.ref($add.ref($add.ref($p1337, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(125, 16)), $mul.ref(0, 1));
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1340, 126);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $p1342 := $load.ref($M.0, $p1341);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($add.ref($add.ref($add.ref($p1342, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(125, 16)), $mul.ref(8, 1));
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1345, $0.ref);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $p1347 := $load.ref($M.0, $p1346);
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $p1350 := $add.ref($add.ref($add.ref($add.ref($p1347, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(126, 16)), $mul.ref(0, 1));
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1350, 127);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.0, $p1351);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $p1355 := $add.ref($add.ref($add.ref($add.ref($p1352, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(126, 16)), $mul.ref(8, 1));
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1355, $0.ref);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p1356 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    $p1357 := $load.ref($M.0, $p1356);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    $p1360 := $add.ref($add.ref($add.ref($add.ref($p1357, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(127, 16)), $mul.ref(0, 1));
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1360, 128);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $p1362 := $load.ref($M.0, $p1361);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($add.ref($add.ref($add.ref($p1362, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(127, 16)), $mul.ref(8, 1));
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1365, $0.ref);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p1366 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $p1367 := $load.ref($M.0, $p1366);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $p1370 := $add.ref($add.ref($add.ref($add.ref($p1367, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(128, 16)), $mul.ref(0, 1));
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1370, 129);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $p1371 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $p1372 := $load.ref($M.0, $p1371);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    $p1375 := $add.ref($add.ref($add.ref($add.ref($p1372, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(128, 16)), $mul.ref(8, 1));
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1375, $0.ref);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    $p1377 := $load.ref($M.0, $p1376);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $p1380 := $add.ref($add.ref($add.ref($add.ref($p1377, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(129, 16)), $mul.ref(0, 1));
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1380, 130);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    $p1381 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $p1382 := $load.ref($M.0, $p1381);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $p1385 := $add.ref($add.ref($add.ref($add.ref($p1382, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(129, 16)), $mul.ref(8, 1));
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1385, $0.ref);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $p1387 := $load.ref($M.0, $p1386);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($add.ref($add.ref($add.ref($p1387, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(130, 16)), $mul.ref(0, 1));
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1390, 131);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    $p1391 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $p1392 := $load.ref($M.0, $p1391);
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($add.ref($add.ref($p1392, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(130, 16)), $mul.ref(8, 1));
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1395, $0.ref);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p1396 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $p1397 := $load.ref($M.0, $p1396);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $p1400 := $add.ref($add.ref($add.ref($add.ref($p1397, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(131, 16)), $mul.ref(0, 1));
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1400, 132);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $p1401 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $p1402 := $load.ref($M.0, $p1401);
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 0} true;
    $p1405 := $add.ref($add.ref($add.ref($add.ref($p1402, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(131, 16)), $mul.ref(8, 1));
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1405, $0.ref);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p1406 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $p1407 := $load.ref($M.0, $p1406);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    $p1410 := $add.ref($add.ref($add.ref($add.ref($p1407, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(132, 16)), $mul.ref(0, 1));
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1410, 133);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $p1411 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $p1412 := $load.ref($M.0, $p1411);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $p1415 := $add.ref($add.ref($add.ref($add.ref($p1412, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(132, 16)), $mul.ref(8, 1));
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1415, $0.ref);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p1416 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $p1417 := $load.ref($M.0, $p1416);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $p1420 := $add.ref($add.ref($add.ref($add.ref($p1417, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(133, 16)), $mul.ref(0, 1));
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1420, 134);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    $p1421 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $p1422 := $load.ref($M.0, $p1421);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($add.ref($add.ref($p1422, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(133, 16)), $mul.ref(8, 1));
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1425, $0.ref);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p1426 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $p1427 := $load.ref($M.0, $p1426);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $p1430 := $add.ref($add.ref($add.ref($add.ref($p1427, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(134, 16)), $mul.ref(0, 1));
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1430, 135);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $p1432 := $load.ref($M.0, $p1431);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $p1435 := $add.ref($add.ref($add.ref($add.ref($p1432, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(134, 16)), $mul.ref(8, 1));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1435, $0.ref);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $p1437 := $load.ref($M.0, $p1436);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($add.ref($add.ref($add.ref($p1437, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(135, 16)), $mul.ref(0, 1));
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1440, 136);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $p1441 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $p1442 := $load.ref($M.0, $p1441);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $p1445 := $add.ref($add.ref($add.ref($add.ref($p1442, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(135, 16)), $mul.ref(8, 1));
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1445, $0.ref);
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $p1447 := $load.ref($M.0, $p1446);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($add.ref($add.ref($add.ref($p1447, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(136, 16)), $mul.ref(0, 1));
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1450, 137);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $p1451 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    $p1452 := $load.ref($M.0, $p1451);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    $p1455 := $add.ref($add.ref($add.ref($add.ref($p1452, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(136, 16)), $mul.ref(8, 1));
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1455, $0.ref);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p1456 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $p1457 := $load.ref($M.0, $p1456);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($add.ref($add.ref($p1457, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(137, 16)), $mul.ref(0, 1));
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1460, 138);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $p1461 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    $p1462 := $load.ref($M.0, $p1461);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    $p1465 := $add.ref($add.ref($add.ref($add.ref($p1462, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(137, 16)), $mul.ref(8, 1));
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1465, $0.ref);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p1466 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $p1467 := $load.ref($M.0, $p1466);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $p1470 := $add.ref($add.ref($add.ref($add.ref($p1467, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(138, 16)), $mul.ref(0, 1));
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1470, 139);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $p1472 := $load.ref($M.0, $p1471);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $p1475 := $add.ref($add.ref($add.ref($add.ref($p1472, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(138, 16)), $mul.ref(8, 1));
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1475, $0.ref);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p1476 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $p1477 := $load.ref($M.0, $p1476);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $p1480 := $add.ref($add.ref($add.ref($add.ref($p1477, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(139, 16)), $mul.ref(0, 1));
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1480, 140);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $p1481 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $p1482 := $load.ref($M.0, $p1481);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($add.ref($p1482, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(139, 16)), $mul.ref(8, 1));
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1485, $0.ref);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p1486 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $p1487 := $load.ref($M.0, $p1486);
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    $p1490 := $add.ref($add.ref($add.ref($add.ref($p1487, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(140, 16)), $mul.ref(0, 1));
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1490, 141);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $p1491 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    $p1492 := $load.ref($M.0, $p1491);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $p1495 := $add.ref($add.ref($add.ref($add.ref($p1492, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(140, 16)), $mul.ref(8, 1));
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1495, $0.ref);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p1496 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    $p1497 := $load.ref($M.0, $p1496);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $p1500 := $add.ref($add.ref($add.ref($add.ref($p1497, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(141, 16)), $mul.ref(0, 1));
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1500, 142);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $p1501 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $p1502 := $load.ref($M.0, $p1501);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    $p1505 := $add.ref($add.ref($add.ref($add.ref($p1502, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(141, 16)), $mul.ref(8, 1));
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1505, $0.ref);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $p1507 := $load.ref($M.0, $p1506);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $p1510 := $add.ref($add.ref($add.ref($add.ref($p1507, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(142, 16)), $mul.ref(0, 1));
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1510, 143);
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $p1511 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $p1512 := $load.ref($M.0, $p1511);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $p1515 := $add.ref($add.ref($add.ref($add.ref($p1512, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(142, 16)), $mul.ref(8, 1));
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1515, $0.ref);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p1516 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $p1517 := $load.ref($M.0, $p1516);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $p1520 := $add.ref($add.ref($add.ref($add.ref($p1517, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(143, 16)), $mul.ref(0, 1));
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1520, 144);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $p1522 := $load.ref($M.0, $p1521);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    $p1525 := $add.ref($add.ref($add.ref($add.ref($p1522, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(143, 16)), $mul.ref(8, 1));
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1525, $0.ref);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $p1527 := $load.ref($M.0, $p1526);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $p1530 := $add.ref($add.ref($add.ref($add.ref($p1527, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(144, 16)), $mul.ref(0, 1));
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1530, 145);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $p1531 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $p1532 := $load.ref($M.0, $p1531);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($add.ref($add.ref($add.ref($p1532, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(144, 16)), $mul.ref(8, 1));
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1535, $0.ref);
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    $p1537 := $load.ref($M.0, $p1536);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $p1540 := $add.ref($add.ref($add.ref($add.ref($p1537, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(145, 16)), $mul.ref(0, 1));
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1540, 146);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $p1542 := $load.ref($M.0, $p1541);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $p1545 := $add.ref($add.ref($add.ref($add.ref($p1542, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(145, 16)), $mul.ref(8, 1));
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1545, $0.ref);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p1546 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $p1547 := $load.ref($M.0, $p1546);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $p1550 := $add.ref($add.ref($add.ref($add.ref($p1547, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(146, 16)), $mul.ref(0, 1));
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1550, 147);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $p1551 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    $p1552 := $load.ref($M.0, $p1551);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $p1555 := $add.ref($add.ref($add.ref($add.ref($p1552, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(146, 16)), $mul.ref(8, 1));
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1555, $0.ref);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p1556 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $p1557 := $load.ref($M.0, $p1556);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $p1560 := $add.ref($add.ref($add.ref($add.ref($p1557, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(147, 16)), $mul.ref(0, 1));
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1560, 148);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $p1561 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $p1562 := $load.ref($M.0, $p1561);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    $p1565 := $add.ref($add.ref($add.ref($add.ref($p1562, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(147, 16)), $mul.ref(8, 1));
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1565, $0.ref);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $p1567 := $load.ref($M.0, $p1566);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $p1570 := $add.ref($add.ref($add.ref($add.ref($p1567, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(148, 16)), $mul.ref(0, 1));
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1570, 149);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $p1571 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $p1572 := $load.ref($M.0, $p1571);
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $p1575 := $add.ref($add.ref($add.ref($add.ref($p1572, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(148, 16)), $mul.ref(8, 1));
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1575, $0.ref);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p1576 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    $p1577 := $load.ref($M.0, $p1576);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $p1580 := $add.ref($add.ref($add.ref($add.ref($p1577, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(149, 16)), $mul.ref(0, 1));
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1580, 150);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $p1581 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $p1582 := $load.ref($M.0, $p1581);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $p1585 := $add.ref($add.ref($add.ref($add.ref($p1582, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(149, 16)), $mul.ref(8, 1));
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1585, $0.ref);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p1586 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $p1587 := $load.ref($M.0, $p1586);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $p1590 := $add.ref($add.ref($add.ref($add.ref($p1587, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(150, 16)), $mul.ref(0, 1));
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1590, 151);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $p1591 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $p1592 := $load.ref($M.0, $p1591);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $p1595 := $add.ref($add.ref($add.ref($add.ref($p1592, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(150, 16)), $mul.ref(8, 1));
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1595, $0.ref);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p1596 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $p1597 := $load.ref($M.0, $p1596);
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    $p1600 := $add.ref($add.ref($add.ref($add.ref($p1597, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(151, 16)), $mul.ref(0, 1));
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1600, 152);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $p1601 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $p1602 := $load.ref($M.0, $p1601);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    $p1605 := $add.ref($add.ref($add.ref($add.ref($p1602, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(151, 16)), $mul.ref(8, 1));
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1605, $0.ref);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p1606 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $p1607 := $load.ref($M.0, $p1606);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $p1610 := $add.ref($add.ref($add.ref($add.ref($p1607, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(152, 16)), $mul.ref(0, 1));
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1610, 153);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $p1611 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $p1612 := $load.ref($M.0, $p1611);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    $p1615 := $add.ref($add.ref($add.ref($add.ref($p1612, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(152, 16)), $mul.ref(8, 1));
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1615, $0.ref);
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p1616 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    $p1617 := $load.ref($M.0, $p1616);
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $p1620 := $add.ref($add.ref($add.ref($add.ref($p1617, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(153, 16)), $mul.ref(0, 1));
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1620, 154);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $p1621 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $p1622 := $load.ref($M.0, $p1621);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    $p1625 := $add.ref($add.ref($add.ref($add.ref($p1622, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(153, 16)), $mul.ref(8, 1));
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1625, $0.ref);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p1626 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $p1627 := $load.ref($M.0, $p1626);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $p1630 := $add.ref($add.ref($add.ref($add.ref($p1627, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(154, 16)), $mul.ref(0, 1));
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1630, 155);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $p1631 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $p1632 := $load.ref($M.0, $p1631);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    $p1635 := $add.ref($add.ref($add.ref($add.ref($p1632, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(154, 16)), $mul.ref(8, 1));
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1635, $0.ref);
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p1636 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $p1637 := $load.ref($M.0, $p1636);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $p1640 := $add.ref($add.ref($add.ref($add.ref($p1637, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(155, 16)), $mul.ref(0, 1));
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1640, 156);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $p1642 := $load.ref($M.0, $p1641);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $p1645 := $add.ref($add.ref($add.ref($add.ref($p1642, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(155, 16)), $mul.ref(8, 1));
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1645, $0.ref);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p1646 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    $p1647 := $load.ref($M.0, $p1646);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($add.ref($add.ref($p1647, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(156, 16)), $mul.ref(0, 1));
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1650, 157);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $p1651 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $p1652 := $load.ref($M.0, $p1651);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $p1655 := $add.ref($add.ref($add.ref($add.ref($p1652, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(156, 16)), $mul.ref(8, 1));
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1655, $0.ref);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p1656 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $p1657 := $load.ref($M.0, $p1656);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    $p1660 := $add.ref($add.ref($add.ref($add.ref($p1657, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(157, 16)), $mul.ref(0, 1));
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1660, 158);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $p1661 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $p1662 := $load.ref($M.0, $p1661);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $p1665 := $add.ref($add.ref($add.ref($add.ref($p1662, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(157, 16)), $mul.ref(8, 1));
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1665, $0.ref);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p1666 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $p1667 := $load.ref($M.0, $p1666);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $p1670 := $add.ref($add.ref($add.ref($add.ref($p1667, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(158, 16)), $mul.ref(0, 1));
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1670, 159);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $p1671 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $p1672 := $load.ref($M.0, $p1671);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $p1675 := $add.ref($add.ref($add.ref($add.ref($p1672, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(158, 16)), $mul.ref(8, 1));
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1675, $0.ref);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p1676 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    $p1677 := $load.ref($M.0, $p1676);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    $p1680 := $add.ref($add.ref($add.ref($add.ref($p1677, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(159, 16)), $mul.ref(0, 1));
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1680, 160);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $p1681 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $p1682 := $load.ref($M.0, $p1681);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $p1685 := $add.ref($add.ref($add.ref($add.ref($p1682, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(159, 16)), $mul.ref(8, 1));
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1685, $0.ref);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p1686 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    $p1687 := $load.ref($M.0, $p1686);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $p1690 := $add.ref($add.ref($add.ref($add.ref($p1687, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(160, 16)), $mul.ref(0, 1));
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1690, 161);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $p1691 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $p1692 := $load.ref($M.0, $p1691);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $p1695 := $add.ref($add.ref($add.ref($add.ref($p1692, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(160, 16)), $mul.ref(8, 1));
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1695, $0.ref);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p1696 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $p1697 := $load.ref($M.0, $p1696);
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $p1700 := $add.ref($add.ref($add.ref($add.ref($p1697, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(161, 16)), $mul.ref(0, 1));
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1700, 162);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    $p1702 := $load.ref($M.0, $p1701);
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $p1705 := $add.ref($add.ref($add.ref($add.ref($p1702, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(161, 16)), $mul.ref(8, 1));
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1705, $0.ref);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p1706 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    $p1707 := $load.ref($M.0, $p1706);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $p1710 := $add.ref($add.ref($add.ref($add.ref($p1707, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(162, 16)), $mul.ref(0, 1));
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1710, 163);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $p1711 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $p1712 := $load.ref($M.0, $p1711);
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $p1715 := $add.ref($add.ref($add.ref($add.ref($p1712, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(162, 16)), $mul.ref(8, 1));
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1715, $0.ref);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p1716 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $p1717 := $load.ref($M.0, $p1716);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $p1720 := $add.ref($add.ref($add.ref($add.ref($p1717, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(163, 16)), $mul.ref(0, 1));
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1720, 164);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $p1721 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $p1722 := $load.ref($M.0, $p1721);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($add.ref($add.ref($add.ref($p1722, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(163, 16)), $mul.ref(8, 1));
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1725, $0.ref);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p1726 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $p1727 := $load.ref($M.0, $p1726);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $p1730 := $add.ref($add.ref($add.ref($add.ref($p1727, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(164, 16)), $mul.ref(0, 1));
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1730, 165);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $p1731 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    $p1732 := $load.ref($M.0, $p1731);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $p1735 := $add.ref($add.ref($add.ref($add.ref($p1732, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(164, 16)), $mul.ref(8, 1));
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1735, $0.ref);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p1736 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    $p1737 := $load.ref($M.0, $p1736);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $p1740 := $add.ref($add.ref($add.ref($add.ref($p1737, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(165, 16)), $mul.ref(0, 1));
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1740, 166);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $p1741 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $p1742 := $load.ref($M.0, $p1741);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $p1745 := $add.ref($add.ref($add.ref($add.ref($p1742, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(165, 16)), $mul.ref(8, 1));
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1745, $0.ref);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p1746 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $p1747 := $load.ref($M.0, $p1746);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $p1750 := $add.ref($add.ref($add.ref($add.ref($p1747, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(166, 16)), $mul.ref(0, 1));
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1750, 167);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $p1751 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $p1752 := $load.ref($M.0, $p1751);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $p1755 := $add.ref($add.ref($add.ref($add.ref($p1752, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(166, 16)), $mul.ref(8, 1));
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1755, $0.ref);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p1756 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    $p1757 := $load.ref($M.0, $p1756);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $p1760 := $add.ref($add.ref($add.ref($add.ref($p1757, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(167, 16)), $mul.ref(0, 1));
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1760, 168);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $p1761 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $p1762 := $load.ref($M.0, $p1761);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    $p1765 := $add.ref($add.ref($add.ref($add.ref($p1762, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(167, 16)), $mul.ref(8, 1));
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1765, $0.ref);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p1766 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    $p1767 := $load.ref($M.0, $p1766);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    $p1770 := $add.ref($add.ref($add.ref($add.ref($p1767, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(168, 16)), $mul.ref(0, 1));
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1770, 169);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $p1771 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    $p1772 := $load.ref($M.0, $p1771);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    $p1775 := $add.ref($add.ref($add.ref($add.ref($p1772, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(168, 16)), $mul.ref(8, 1));
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1775, $0.ref);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p1776 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $p1777 := $load.ref($M.0, $p1776);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $p1780 := $add.ref($add.ref($add.ref($add.ref($p1777, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(169, 16)), $mul.ref(0, 1));
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1780, 170);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $p1781 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    $p1782 := $load.ref($M.0, $p1781);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $p1785 := $add.ref($add.ref($add.ref($add.ref($p1782, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(169, 16)), $mul.ref(8, 1));
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1785, $0.ref);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p1786 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    $p1787 := $load.ref($M.0, $p1786);
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $p1790 := $add.ref($add.ref($add.ref($add.ref($p1787, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(170, 16)), $mul.ref(0, 1));
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1790, 171);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $p1792 := $load.ref($M.0, $p1791);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $p1795 := $add.ref($add.ref($add.ref($add.ref($p1792, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(170, 16)), $mul.ref(8, 1));
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1795, $0.ref);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p1796 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $p1797 := $load.ref($M.0, $p1796);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    $p1800 := $add.ref($add.ref($add.ref($add.ref($p1797, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(171, 16)), $mul.ref(0, 1));
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1800, 172);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $p1801 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    $p1802 := $load.ref($M.0, $p1801);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $p1805 := $add.ref($add.ref($add.ref($add.ref($p1802, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(171, 16)), $mul.ref(8, 1));
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1805, $0.ref);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p1806 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    $p1807 := $load.ref($M.0, $p1806);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $p1810 := $add.ref($add.ref($add.ref($add.ref($p1807, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(172, 16)), $mul.ref(0, 1));
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1810, 173);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    $p1811 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    $p1812 := $load.ref($M.0, $p1811);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $p1815 := $add.ref($add.ref($add.ref($add.ref($p1812, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(172, 16)), $mul.ref(8, 1));
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1815, $0.ref);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p1816 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $p1817 := $load.ref($M.0, $p1816);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $p1820 := $add.ref($add.ref($add.ref($add.ref($p1817, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(173, 16)), $mul.ref(0, 1));
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1820, 174);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $p1821 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $p1822 := $load.ref($M.0, $p1821);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $p1825 := $add.ref($add.ref($add.ref($add.ref($p1822, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(173, 16)), $mul.ref(8, 1));
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1825, $0.ref);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p1826 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    $p1827 := $load.ref($M.0, $p1826);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    $p1830 := $add.ref($add.ref($add.ref($add.ref($p1827, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(174, 16)), $mul.ref(0, 1));
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1830, 175);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $p1831 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $p1832 := $load.ref($M.0, $p1831);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    $p1835 := $add.ref($add.ref($add.ref($add.ref($p1832, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(174, 16)), $mul.ref(8, 1));
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1835, $0.ref);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p1836 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $p1837 := $load.ref($M.0, $p1836);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $p1840 := $add.ref($add.ref($add.ref($add.ref($p1837, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(175, 16)), $mul.ref(0, 1));
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1840, 176);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $p1841 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $p1842 := $load.ref($M.0, $p1841);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $p1845 := $add.ref($add.ref($add.ref($add.ref($p1842, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(175, 16)), $mul.ref(8, 1));
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1845, $0.ref);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p1846 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $p1847 := $load.ref($M.0, $p1846);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $p1850 := $add.ref($add.ref($add.ref($add.ref($p1847, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(176, 16)), $mul.ref(0, 1));
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1850, 177);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $p1851 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    $p1852 := $load.ref($M.0, $p1851);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    $p1855 := $add.ref($add.ref($add.ref($add.ref($p1852, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(176, 16)), $mul.ref(8, 1));
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1855, $0.ref);
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p1856 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $p1857 := $load.ref($M.0, $p1856);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $p1860 := $add.ref($add.ref($add.ref($add.ref($p1857, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(177, 16)), $mul.ref(0, 1));
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1860, 178);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $p1861 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    $p1862 := $load.ref($M.0, $p1861);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    $p1865 := $add.ref($add.ref($add.ref($add.ref($p1862, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(177, 16)), $mul.ref(8, 1));
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1865, $0.ref);
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p1866 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $p1867 := $load.ref($M.0, $p1866);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $p1870 := $add.ref($add.ref($add.ref($add.ref($p1867, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(178, 16)), $mul.ref(0, 1));
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1870, 179);
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    $p1871 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $p1872 := $load.ref($M.0, $p1871);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    $p1875 := $add.ref($add.ref($add.ref($add.ref($p1872, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(178, 16)), $mul.ref(8, 1));
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1875, $0.ref);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p1876 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $p1877 := $load.ref($M.0, $p1876);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $p1880 := $add.ref($add.ref($add.ref($add.ref($p1877, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(179, 16)), $mul.ref(0, 1));
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1880, 180);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $p1881 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    $p1882 := $load.ref($M.0, $p1881);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    $p1885 := $add.ref($add.ref($add.ref($add.ref($p1882, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(179, 16)), $mul.ref(8, 1));
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1885, $0.ref);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p1886 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    $p1887 := $load.ref($M.0, $p1886);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    $p1890 := $add.ref($add.ref($add.ref($add.ref($p1887, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(180, 16)), $mul.ref(0, 1));
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1890, 181);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    $p1891 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    $p1892 := $load.ref($M.0, $p1891);
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    $p1895 := $add.ref($add.ref($add.ref($add.ref($p1892, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(180, 16)), $mul.ref(8, 1));
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1895, $0.ref);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p1896 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    $p1897 := $load.ref($M.0, $p1896);
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $p1900 := $add.ref($add.ref($add.ref($add.ref($p1897, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(181, 16)), $mul.ref(0, 1));
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1900, 182);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    $p1901 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $p1902 := $load.ref($M.0, $p1901);
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $p1905 := $add.ref($add.ref($add.ref($add.ref($p1902, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(181, 16)), $mul.ref(8, 1));
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1905, $0.ref);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p1906 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $p1907 := $load.ref($M.0, $p1906);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    $p1910 := $add.ref($add.ref($add.ref($add.ref($p1907, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(182, 16)), $mul.ref(0, 1));
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1910, 183);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    $p1911 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    $p1912 := $load.ref($M.0, $p1911);
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $p1915 := $add.ref($add.ref($add.ref($add.ref($p1912, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(182, 16)), $mul.ref(8, 1));
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1915, $0.ref);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p1916 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $p1917 := $load.ref($M.0, $p1916);
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $p1920 := $add.ref($add.ref($add.ref($add.ref($p1917, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(183, 16)), $mul.ref(0, 1));
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1920, 184);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    $p1921 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $p1922 := $load.ref($M.0, $p1921);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $p1925 := $add.ref($add.ref($add.ref($add.ref($p1922, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(183, 16)), $mul.ref(8, 1));
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1925, $0.ref);
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p1926 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    $p1927 := $load.ref($M.0, $p1926);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    $p1930 := $add.ref($add.ref($add.ref($add.ref($p1927, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(184, 16)), $mul.ref(0, 1));
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1930, 185);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $p1931 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $p1932 := $load.ref($M.0, $p1931);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    $p1935 := $add.ref($add.ref($add.ref($add.ref($p1932, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(184, 16)), $mul.ref(8, 1));
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1935, $0.ref);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p1936 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    $p1937 := $load.ref($M.0, $p1936);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    $p1940 := $add.ref($add.ref($add.ref($add.ref($p1937, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(185, 16)), $mul.ref(0, 1));
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1940, 186);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    $p1941 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    $p1942 := $load.ref($M.0, $p1941);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $p1945 := $add.ref($add.ref($add.ref($add.ref($p1942, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(185, 16)), $mul.ref(8, 1));
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1945, $0.ref);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p1946 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $p1947 := $load.ref($M.0, $p1946);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $p1950 := $add.ref($add.ref($add.ref($add.ref($p1947, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(186, 16)), $mul.ref(0, 1));
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1950, 187);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $p1951 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $p1952 := $load.ref($M.0, $p1951);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $p1955 := $add.ref($add.ref($add.ref($add.ref($p1952, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(186, 16)), $mul.ref(8, 1));
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1955, $0.ref);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p1956 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $p1957 := $load.ref($M.0, $p1956);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $p1960 := $add.ref($add.ref($add.ref($add.ref($p1957, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(187, 16)), $mul.ref(0, 1));
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1960, 188);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    $p1961 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    $p1962 := $load.ref($M.0, $p1961);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    $p1965 := $add.ref($add.ref($add.ref($add.ref($p1962, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(187, 16)), $mul.ref(8, 1));
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1965, $0.ref);
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p1966 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $p1967 := $load.ref($M.0, $p1966);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $p1970 := $add.ref($add.ref($add.ref($add.ref($p1967, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(188, 16)), $mul.ref(0, 1));
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1970, 189);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $p1971 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    $p1972 := $load.ref($M.0, $p1971);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $p1975 := $add.ref($add.ref($add.ref($add.ref($p1972, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(188, 16)), $mul.ref(8, 1));
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1975, $0.ref);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p1976 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    $p1977 := $load.ref($M.0, $p1976);
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $p1980 := $add.ref($add.ref($add.ref($add.ref($p1977, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(189, 16)), $mul.ref(0, 1));
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1980, 190);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $p1981 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $p1982 := $load.ref($M.0, $p1981);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $p1985 := $add.ref($add.ref($add.ref($add.ref($p1982, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(189, 16)), $mul.ref(8, 1));
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1985, $0.ref);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p1986 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    $p1987 := $load.ref($M.0, $p1986);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $p1990 := $add.ref($add.ref($add.ref($add.ref($p1987, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(190, 16)), $mul.ref(0, 1));
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1990, 191);
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $p1991 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $p1992 := $load.ref($M.0, $p1991);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $p1995 := $add.ref($add.ref($add.ref($add.ref($p1992, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(190, 16)), $mul.ref(8, 1));
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1995, $0.ref);
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p1996 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $p1997 := $load.ref($M.0, $p1996);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    $p2000 := $add.ref($add.ref($add.ref($add.ref($p1997, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(191, 16)), $mul.ref(0, 1));
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2000, 192);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    $p2001 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $p2002 := $load.ref($M.0, $p2001);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $p2005 := $add.ref($add.ref($add.ref($add.ref($p2002, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(191, 16)), $mul.ref(8, 1));
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2005, $0.ref);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p2006 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    $p2007 := $load.ref($M.0, $p2006);
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    $p2010 := $add.ref($add.ref($add.ref($add.ref($p2007, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(192, 16)), $mul.ref(0, 1));
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2010, 193);
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $p2011 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $p2012 := $load.ref($M.0, $p2011);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $p2015 := $add.ref($add.ref($add.ref($add.ref($p2012, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(192, 16)), $mul.ref(8, 1));
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2015, $0.ref);
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p2016 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $p2017 := $load.ref($M.0, $p2016);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $p2020 := $add.ref($add.ref($add.ref($add.ref($p2017, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(193, 16)), $mul.ref(0, 1));
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2020, 194);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $p2021 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    $p2022 := $load.ref($M.0, $p2021);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $p2025 := $add.ref($add.ref($add.ref($add.ref($p2022, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(193, 16)), $mul.ref(8, 1));
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2025, $0.ref);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p2026 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    $p2027 := $load.ref($M.0, $p2026);
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $p2030 := $add.ref($add.ref($add.ref($add.ref($p2027, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(194, 16)), $mul.ref(0, 1));
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2030, 195);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    $p2031 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    $p2032 := $load.ref($M.0, $p2031);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $p2035 := $add.ref($add.ref($add.ref($add.ref($p2032, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(194, 16)), $mul.ref(8, 1));
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2035, $0.ref);
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p2036 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $p2037 := $load.ref($M.0, $p2036);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $p2040 := $add.ref($add.ref($add.ref($add.ref($p2037, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(195, 16)), $mul.ref(0, 1));
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2040, 196);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    $p2041 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $p2042 := $load.ref($M.0, $p2041);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    $p2045 := $add.ref($add.ref($add.ref($add.ref($p2042, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(195, 16)), $mul.ref(8, 1));
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2045, $0.ref);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p2046 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    $p2047 := $load.ref($M.0, $p2046);
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $p2050 := $add.ref($add.ref($add.ref($add.ref($p2047, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(196, 16)), $mul.ref(0, 1));
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2050, 197);
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $p2051 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    $p2052 := $load.ref($M.0, $p2051);
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $p2055 := $add.ref($add.ref($add.ref($add.ref($p2052, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(196, 16)), $mul.ref(8, 1));
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2055, $0.ref);
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p2056 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    $p2057 := $load.ref($M.0, $p2056);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $p2060 := $add.ref($add.ref($add.ref($add.ref($p2057, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(197, 16)), $mul.ref(0, 1));
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2060, 198);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    $p2061 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    $p2062 := $load.ref($M.0, $p2061);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $p2065 := $add.ref($add.ref($add.ref($add.ref($p2062, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(197, 16)), $mul.ref(8, 1));
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2065, $0.ref);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p2066 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    $p2067 := $load.ref($M.0, $p2066);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    $p2070 := $add.ref($add.ref($add.ref($add.ref($p2067, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(198, 16)), $mul.ref(0, 1));
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2070, 199);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $p2071 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    $p2072 := $load.ref($M.0, $p2071);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $p2075 := $add.ref($add.ref($add.ref($add.ref($p2072, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(198, 16)), $mul.ref(8, 1));
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2075, $0.ref);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p2076 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $p2077 := $load.ref($M.0, $p2076);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $p2080 := $add.ref($add.ref($add.ref($add.ref($p2077, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(199, 16)), $mul.ref(0, 1));
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2080, 200);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $p2081 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $p2082 := $load.ref($M.0, $p2081);
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $p2085 := $add.ref($add.ref($add.ref($add.ref($p2082, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(199, 16)), $mul.ref(8, 1));
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2085, $0.ref);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p2086 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    $p2087 := $load.ref($M.0, $p2086);
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $p2090 := $add.ref($add.ref($add.ref($add.ref($p2087, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(200, 16)), $mul.ref(0, 1));
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2090, 201);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $p2091 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $p2092 := $load.ref($M.0, $p2091);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    $p2095 := $add.ref($add.ref($add.ref($add.ref($p2092, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(200, 16)), $mul.ref(8, 1));
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2095, $0.ref);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p2096 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $p2097 := $load.ref($M.0, $p2096);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $p2100 := $add.ref($add.ref($add.ref($add.ref($p2097, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(201, 16)), $mul.ref(0, 1));
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2100, 202);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $p2101 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $p2102 := $load.ref($M.0, $p2101);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    $p2105 := $add.ref($add.ref($add.ref($add.ref($p2102, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(201, 16)), $mul.ref(8, 1));
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2105, $0.ref);
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p2106 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $p2107 := $load.ref($M.0, $p2106);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $p2110 := $add.ref($add.ref($add.ref($add.ref($p2107, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(202, 16)), $mul.ref(0, 1));
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2110, 203);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    $p2111 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $p2112 := $load.ref($M.0, $p2111);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $p2115 := $add.ref($add.ref($add.ref($add.ref($p2112, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(202, 16)), $mul.ref(8, 1));
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2115, $0.ref);
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p2116 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $p2117 := $load.ref($M.0, $p2116);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $p2120 := $add.ref($add.ref($add.ref($add.ref($p2117, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(203, 16)), $mul.ref(0, 1));
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2120, 204);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $p2121 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $p2122 := $load.ref($M.0, $p2121);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    $p2125 := $add.ref($add.ref($add.ref($add.ref($p2122, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(203, 16)), $mul.ref(8, 1));
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2125, $0.ref);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p2126 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $p2127 := $load.ref($M.0, $p2126);
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $p2130 := $add.ref($add.ref($add.ref($add.ref($p2127, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(204, 16)), $mul.ref(0, 1));
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2130, 205);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $p2131 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    $p2132 := $load.ref($M.0, $p2131);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    $p2135 := $add.ref($add.ref($add.ref($add.ref($p2132, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(204, 16)), $mul.ref(8, 1));
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2135, $0.ref);
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p2136 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $p2137 := $load.ref($M.0, $p2136);
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $p2140 := $add.ref($add.ref($add.ref($add.ref($p2137, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(205, 16)), $mul.ref(0, 1));
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2140, 206);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    $p2141 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $p2142 := $load.ref($M.0, $p2141);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $p2145 := $add.ref($add.ref($add.ref($add.ref($p2142, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(205, 16)), $mul.ref(8, 1));
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2145, $0.ref);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p2146 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $p2147 := $load.ref($M.0, $p2146);
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $p2150 := $add.ref($add.ref($add.ref($add.ref($p2147, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(206, 16)), $mul.ref(0, 1));
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2150, 207);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    $p2151 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $p2152 := $load.ref($M.0, $p2151);
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $p2155 := $add.ref($add.ref($add.ref($add.ref($p2152, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(206, 16)), $mul.ref(8, 1));
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2155, $0.ref);
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p2156 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $p2157 := $load.ref($M.0, $p2156);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $p2160 := $add.ref($add.ref($add.ref($add.ref($p2157, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(207, 16)), $mul.ref(0, 1));
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2160, 208);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $p2161 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $p2162 := $load.ref($M.0, $p2161);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    $p2165 := $add.ref($add.ref($add.ref($add.ref($p2162, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(207, 16)), $mul.ref(8, 1));
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2165, $0.ref);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p2166 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $p2167 := $load.ref($M.0, $p2166);
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $p2170 := $add.ref($add.ref($add.ref($add.ref($p2167, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(208, 16)), $mul.ref(0, 1));
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2170, 209);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $p2171 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $p2172 := $load.ref($M.0, $p2171);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $p2175 := $add.ref($add.ref($add.ref($add.ref($p2172, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(208, 16)), $mul.ref(8, 1));
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2175, $0.ref);
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p2176 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $p2177 := $load.ref($M.0, $p2176);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    $p2180 := $add.ref($add.ref($add.ref($add.ref($p2177, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(209, 16)), $mul.ref(0, 1));
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2180, 210);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    $p2181 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    $p2182 := $load.ref($M.0, $p2181);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    $p2185 := $add.ref($add.ref($add.ref($add.ref($p2182, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(209, 16)), $mul.ref(8, 1));
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2185, $0.ref);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p2186 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    $p2187 := $load.ref($M.0, $p2186);
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    $p2190 := $add.ref($add.ref($add.ref($add.ref($p2187, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(210, 16)), $mul.ref(0, 1));
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2190, 211);
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    $p2191 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $p2192 := $load.ref($M.0, $p2191);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    $p2195 := $add.ref($add.ref($add.ref($add.ref($p2192, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(210, 16)), $mul.ref(8, 1));
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2195, $0.ref);
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p2196 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $p2197 := $load.ref($M.0, $p2196);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $p2200 := $add.ref($add.ref($add.ref($add.ref($p2197, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(211, 16)), $mul.ref(0, 1));
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2200, 212);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $p2201 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14977;

  corral_source_split_14977:
    assume {:verifier.code 0} true;
    $p2202 := $load.ref($M.0, $p2201);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    $p2205 := $add.ref($add.ref($add.ref($add.ref($p2202, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(211, 16)), $mul.ref(8, 1));
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2205, $0.ref);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p2206 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $p2207 := $load.ref($M.0, $p2206);
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $p2210 := $add.ref($add.ref($add.ref($add.ref($p2207, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(212, 16)), $mul.ref(0, 1));
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2210, 213);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    $p2211 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    $p2212 := $load.ref($M.0, $p2211);
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $p2215 := $add.ref($add.ref($add.ref($add.ref($p2212, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(212, 16)), $mul.ref(8, 1));
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2215, $0.ref);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p2216 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $p2217 := $load.ref($M.0, $p2216);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $p2220 := $add.ref($add.ref($add.ref($add.ref($p2217, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(213, 16)), $mul.ref(0, 1));
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2220, 214);
    goto corral_source_split_14994;

  corral_source_split_14994:
    assume {:verifier.code 0} true;
    $p2221 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $p2222 := $load.ref($M.0, $p2221);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $p2225 := $add.ref($add.ref($add.ref($add.ref($p2222, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(213, 16)), $mul.ref(8, 1));
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2225, $0.ref);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p2226 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $p2227 := $load.ref($M.0, $p2226);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $p2230 := $add.ref($add.ref($add.ref($add.ref($p2227, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(214, 16)), $mul.ref(0, 1));
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2230, 215);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $p2231 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $p2232 := $load.ref($M.0, $p2231);
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    $p2235 := $add.ref($add.ref($add.ref($add.ref($p2232, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(214, 16)), $mul.ref(8, 1));
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2235, $0.ref);
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p2236 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $p2237 := $load.ref($M.0, $p2236);
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    $p2240 := $add.ref($add.ref($add.ref($add.ref($p2237, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(215, 16)), $mul.ref(0, 1));
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2240, 216);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $p2241 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $p2242 := $load.ref($M.0, $p2241);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $p2245 := $add.ref($add.ref($add.ref($add.ref($p2242, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(215, 16)), $mul.ref(8, 1));
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2245, $0.ref);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p2246 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $p2247 := $load.ref($M.0, $p2246);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $p2250 := $add.ref($add.ref($add.ref($add.ref($p2247, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(216, 16)), $mul.ref(0, 1));
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2250, 217);
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $p2251 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $p2252 := $load.ref($M.0, $p2251);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    $p2255 := $add.ref($add.ref($add.ref($add.ref($p2252, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(216, 16)), $mul.ref(8, 1));
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2255, $0.ref);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p2256 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $p2257 := $load.ref($M.0, $p2256);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $p2260 := $add.ref($add.ref($add.ref($add.ref($p2257, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(217, 16)), $mul.ref(0, 1));
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2260, 218);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $p2261 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    $p2262 := $load.ref($M.0, $p2261);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    $p2265 := $add.ref($add.ref($add.ref($add.ref($p2262, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(217, 16)), $mul.ref(8, 1));
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2265, $0.ref);
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p2266 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $p2267 := $load.ref($M.0, $p2266);
    goto corral_source_split_15037;

  corral_source_split_15037:
    assume {:verifier.code 0} true;
    $p2270 := $add.ref($add.ref($add.ref($add.ref($p2267, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(218, 16)), $mul.ref(0, 1));
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2270, 219);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    $p2271 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $p2272 := $load.ref($M.0, $p2271);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    $p2275 := $add.ref($add.ref($add.ref($add.ref($p2272, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(218, 16)), $mul.ref(8, 1));
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2275, $0.ref);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p2276 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $p2277 := $load.ref($M.0, $p2276);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $p2280 := $add.ref($add.ref($add.ref($add.ref($p2277, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(219, 16)), $mul.ref(0, 1));
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2280, 220);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $p2281 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    $p2282 := $load.ref($M.0, $p2281);
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    $p2285 := $add.ref($add.ref($add.ref($add.ref($p2282, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(219, 16)), $mul.ref(8, 1));
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2285, $0.ref);
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p2286 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    $p2287 := $load.ref($M.0, $p2286);
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    $p2290 := $add.ref($add.ref($add.ref($add.ref($p2287, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(220, 16)), $mul.ref(0, 1));
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2290, 221);
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $p2291 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    $p2292 := $load.ref($M.0, $p2291);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $p2295 := $add.ref($add.ref($add.ref($add.ref($p2292, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(220, 16)), $mul.ref(8, 1));
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2295, $0.ref);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p2296 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    $p2297 := $load.ref($M.0, $p2296);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $p2300 := $add.ref($add.ref($add.ref($add.ref($p2297, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(221, 16)), $mul.ref(0, 1));
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2300, 222);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    $p2301 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    $p2302 := $load.ref($M.0, $p2301);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    $p2305 := $add.ref($add.ref($add.ref($add.ref($p2302, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(221, 16)), $mul.ref(8, 1));
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2305, $0.ref);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p2306 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $p2307 := $load.ref($M.0, $p2306);
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    $p2310 := $add.ref($add.ref($add.ref($add.ref($p2307, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(222, 16)), $mul.ref(0, 1));
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2310, 223);
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $p2311 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $p2312 := $load.ref($M.0, $p2311);
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    $p2315 := $add.ref($add.ref($add.ref($add.ref($p2312, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(222, 16)), $mul.ref(8, 1));
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2315, $0.ref);
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p2316 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    $p2317 := $load.ref($M.0, $p2316);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    $p2320 := $add.ref($add.ref($add.ref($add.ref($p2317, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(223, 16)), $mul.ref(0, 1));
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2320, 224);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $p2321 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $p2322 := $load.ref($M.0, $p2321);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    $p2325 := $add.ref($add.ref($add.ref($add.ref($p2322, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(223, 16)), $mul.ref(8, 1));
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2325, $0.ref);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p2326 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $p2327 := $load.ref($M.0, $p2326);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $p2330 := $add.ref($add.ref($add.ref($add.ref($p2327, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(224, 16)), $mul.ref(0, 1));
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2330, 225);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $p2331 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    $p2332 := $load.ref($M.0, $p2331);
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    $p2335 := $add.ref($add.ref($add.ref($add.ref($p2332, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(224, 16)), $mul.ref(8, 1));
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2335, $0.ref);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p2336 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $p2337 := $load.ref($M.0, $p2336);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    $p2340 := $add.ref($add.ref($add.ref($add.ref($p2337, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(225, 16)), $mul.ref(0, 1));
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2340, 226);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    $p2341 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    $p2342 := $load.ref($M.0, $p2341);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    $p2345 := $add.ref($add.ref($add.ref($add.ref($p2342, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(225, 16)), $mul.ref(8, 1));
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2345, $0.ref);
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p2346 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    $p2347 := $load.ref($M.0, $p2346);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    $p2350 := $add.ref($add.ref($add.ref($add.ref($p2347, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(226, 16)), $mul.ref(0, 1));
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2350, 227);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $p2351 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $p2352 := $load.ref($M.0, $p2351);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $p2355 := $add.ref($add.ref($add.ref($add.ref($p2352, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(226, 16)), $mul.ref(8, 1));
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2355, $0.ref);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p2356 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $p2357 := $load.ref($M.0, $p2356);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $p2360 := $add.ref($add.ref($add.ref($add.ref($p2357, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(227, 16)), $mul.ref(0, 1));
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2360, 228);
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $p2361 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $p2362 := $load.ref($M.0, $p2361);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    $p2365 := $add.ref($add.ref($add.ref($add.ref($p2362, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(227, 16)), $mul.ref(8, 1));
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2365, $0.ref);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p2366 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $p2367 := $load.ref($M.0, $p2366);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    $p2370 := $add.ref($add.ref($add.ref($add.ref($p2367, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(228, 16)), $mul.ref(0, 1));
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2370, 229);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    $p2371 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $p2372 := $load.ref($M.0, $p2371);
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $p2375 := $add.ref($add.ref($add.ref($add.ref($p2372, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(228, 16)), $mul.ref(8, 1));
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2375, $0.ref);
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p2376 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $p2377 := $load.ref($M.0, $p2376);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $p2380 := $add.ref($add.ref($add.ref($add.ref($p2377, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(229, 16)), $mul.ref(0, 1));
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2380, 230);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    $p2381 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $p2382 := $load.ref($M.0, $p2381);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $p2385 := $add.ref($add.ref($add.ref($add.ref($p2382, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(229, 16)), $mul.ref(8, 1));
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2385, $0.ref);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p2386 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $p2387 := $load.ref($M.0, $p2386);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $p2390 := $add.ref($add.ref($add.ref($add.ref($p2387, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(230, 16)), $mul.ref(0, 1));
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2390, 231);
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $p2391 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $p2392 := $load.ref($M.0, $p2391);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    $p2395 := $add.ref($add.ref($add.ref($add.ref($p2392, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(230, 16)), $mul.ref(8, 1));
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2395, $0.ref);
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p2396 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    $p2397 := $load.ref($M.0, $p2396);
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    $p2400 := $add.ref($add.ref($add.ref($add.ref($p2397, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(231, 16)), $mul.ref(0, 1));
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2400, 232);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $p2401 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    $p2402 := $load.ref($M.0, $p2401);
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $p2405 := $add.ref($add.ref($add.ref($add.ref($p2402, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(231, 16)), $mul.ref(8, 1));
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2405, $0.ref);
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p2406 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15162;

  corral_source_split_15162:
    assume {:verifier.code 0} true;
    $p2407 := $load.ref($M.0, $p2406);
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $p2410 := $add.ref($add.ref($add.ref($add.ref($p2407, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(232, 16)), $mul.ref(0, 1));
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2410, 233);
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $p2411 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $p2412 := $load.ref($M.0, $p2411);
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    $p2415 := $add.ref($add.ref($add.ref($add.ref($p2412, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(232, 16)), $mul.ref(8, 1));
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2415, $0.ref);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p2416 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    $p2417 := $load.ref($M.0, $p2416);
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    $p2420 := $add.ref($add.ref($add.ref($add.ref($p2417, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(233, 16)), $mul.ref(0, 1));
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2420, 234);
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    $p2421 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    $p2422 := $load.ref($M.0, $p2421);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $p2425 := $add.ref($add.ref($add.ref($add.ref($p2422, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(233, 16)), $mul.ref(8, 1));
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2425, $0.ref);
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p2426 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    $p2427 := $load.ref($M.0, $p2426);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $p2430 := $add.ref($add.ref($add.ref($add.ref($p2427, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(234, 16)), $mul.ref(0, 1));
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2430, 235);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    $p2431 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    $p2432 := $load.ref($M.0, $p2431);
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    $p2435 := $add.ref($add.ref($add.ref($add.ref($p2432, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(234, 16)), $mul.ref(8, 1));
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2435, $0.ref);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p2436 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    $p2437 := $load.ref($M.0, $p2436);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    $p2440 := $add.ref($add.ref($add.ref($add.ref($p2437, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(235, 16)), $mul.ref(0, 1));
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2440, 236);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    $p2441 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    $p2442 := $load.ref($M.0, $p2441);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    $p2445 := $add.ref($add.ref($add.ref($add.ref($p2442, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(235, 16)), $mul.ref(8, 1));
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2445, $0.ref);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p2446 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    $p2447 := $load.ref($M.0, $p2446);
    goto corral_source_split_15199;

  corral_source_split_15199:
    assume {:verifier.code 0} true;
    $p2450 := $add.ref($add.ref($add.ref($add.ref($p2447, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(236, 16)), $mul.ref(0, 1));
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2450, 237);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $p2451 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    $p2452 := $load.ref($M.0, $p2451);
    goto corral_source_split_15203;

  corral_source_split_15203:
    assume {:verifier.code 0} true;
    $p2455 := $add.ref($add.ref($add.ref($add.ref($p2452, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(236, 16)), $mul.ref(8, 1));
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2455, $0.ref);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p2456 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    $p2457 := $load.ref($M.0, $p2456);
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    $p2460 := $add.ref($add.ref($add.ref($add.ref($p2457, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(237, 16)), $mul.ref(0, 1));
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2460, 238);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    $p2461 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15211;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    $p2462 := $load.ref($M.0, $p2461);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    $p2465 := $add.ref($add.ref($add.ref($add.ref($p2462, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(237, 16)), $mul.ref(8, 1));
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2465, $0.ref);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p2466 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $p2467 := $load.ref($M.0, $p2466);
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $p2470 := $add.ref($add.ref($add.ref($add.ref($p2467, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(238, 16)), $mul.ref(0, 1));
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2470, 239);
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 0} true;
    $p2471 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    $p2472 := $load.ref($M.0, $p2471);
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $p2475 := $add.ref($add.ref($add.ref($add.ref($p2472, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(238, 16)), $mul.ref(8, 1));
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2475, $0.ref);
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p2476 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $p2477 := $load.ref($M.0, $p2476);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    $p2480 := $add.ref($add.ref($add.ref($add.ref($p2477, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(239, 16)), $mul.ref(0, 1));
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2480, 240);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $p2481 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $p2482 := $load.ref($M.0, $p2481);
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $p2485 := $add.ref($add.ref($add.ref($add.ref($p2482, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(239, 16)), $mul.ref(8, 1));
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2485, $0.ref);
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p2486 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $p2487 := $load.ref($M.0, $p2486);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    $p2490 := $add.ref($add.ref($add.ref($add.ref($p2487, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(240, 16)), $mul.ref(0, 1));
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2490, 241);
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $p2491 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $p2492 := $load.ref($M.0, $p2491);
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    $p2495 := $add.ref($add.ref($add.ref($add.ref($p2492, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(240, 16)), $mul.ref(8, 1));
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2495, $0.ref);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p2496 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $p2497 := $load.ref($M.0, $p2496);
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $p2500 := $add.ref($add.ref($add.ref($add.ref($p2497, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(241, 16)), $mul.ref(0, 1));
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2500, 242);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $p2501 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    $p2502 := $load.ref($M.0, $p2501);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    $p2505 := $add.ref($add.ref($add.ref($add.ref($p2502, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(241, 16)), $mul.ref(8, 1));
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2505, $0.ref);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p2506 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $p2507 := $load.ref($M.0, $p2506);
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    $p2510 := $add.ref($add.ref($add.ref($add.ref($p2507, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(242, 16)), $mul.ref(0, 1));
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2510, 243);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    $p2511 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $p2512 := $load.ref($M.0, $p2511);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    $p2515 := $add.ref($add.ref($add.ref($add.ref($p2512, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(242, 16)), $mul.ref(8, 1));
    goto corral_source_split_15258;

  corral_source_split_15258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2515, $0.ref);
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p2516 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    $p2517 := $load.ref($M.0, $p2516);
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $p2520 := $add.ref($add.ref($add.ref($add.ref($p2517, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(243, 16)), $mul.ref(0, 1));
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2520, 244);
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    $p2521 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $p2522 := $load.ref($M.0, $p2521);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $p2525 := $add.ref($add.ref($add.ref($add.ref($p2522, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(243, 16)), $mul.ref(8, 1));
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2525, $0.ref);
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p2526 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $p2527 := $load.ref($M.0, $p2526);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    $p2530 := $add.ref($add.ref($add.ref($add.ref($p2527, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(244, 16)), $mul.ref(0, 1));
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2530, 245);
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    $p2531 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    $p2532 := $load.ref($M.0, $p2531);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    $p2535 := $add.ref($add.ref($add.ref($add.ref($p2532, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(244, 16)), $mul.ref(8, 1));
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2535, $0.ref);
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p2536 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    $p2537 := $load.ref($M.0, $p2536);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $p2540 := $add.ref($add.ref($add.ref($add.ref($p2537, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(245, 16)), $mul.ref(0, 1));
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2540, 246);
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $p2541 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    $p2542 := $load.ref($M.0, $p2541);
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $p2545 := $add.ref($add.ref($add.ref($add.ref($p2542, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(245, 16)), $mul.ref(8, 1));
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2545, $0.ref);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p2546 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    $p2547 := $load.ref($M.0, $p2546);
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    $p2550 := $add.ref($add.ref($add.ref($add.ref($p2547, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(246, 16)), $mul.ref(0, 1));
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2550, 247);
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    $p2551 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    $p2552 := $load.ref($M.0, $p2551);
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    $p2555 := $add.ref($add.ref($add.ref($add.ref($p2552, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(246, 16)), $mul.ref(8, 1));
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2555, $0.ref);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p2556 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15297;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    $p2557 := $load.ref($M.0, $p2556);
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    $p2560 := $add.ref($add.ref($add.ref($add.ref($p2557, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(247, 16)), $mul.ref(0, 1));
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2560, 248);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    $p2561 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    $p2562 := $load.ref($M.0, $p2561);
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    $p2565 := $add.ref($add.ref($add.ref($add.ref($p2562, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(247, 16)), $mul.ref(8, 1));
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2565, $0.ref);
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p2566 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    $p2567 := $load.ref($M.0, $p2566);
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    $p2570 := $add.ref($add.ref($add.ref($add.ref($p2567, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(248, 16)), $mul.ref(0, 1));
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2570, 249);
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $p2571 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $p2572 := $load.ref($M.0, $p2571);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    $p2575 := $add.ref($add.ref($add.ref($add.ref($p2572, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(248, 16)), $mul.ref(8, 1));
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2575, $0.ref);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p2576 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $p2577 := $load.ref($M.0, $p2576);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $p2580 := $add.ref($add.ref($add.ref($add.ref($p2577, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(249, 16)), $mul.ref(0, 1));
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2580, 250);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    $p2581 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $p2582 := $load.ref($M.0, $p2581);
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $p2585 := $add.ref($add.ref($add.ref($add.ref($p2582, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(249, 16)), $mul.ref(8, 1));
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2585, $0.ref);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p2586 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $p2587 := $load.ref($M.0, $p2586);
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $p2590 := $add.ref($add.ref($add.ref($add.ref($p2587, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(250, 16)), $mul.ref(0, 1));
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2590, 251);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    $p2591 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $p2592 := $load.ref($M.0, $p2591);
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    $p2595 := $add.ref($add.ref($add.ref($add.ref($p2592, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(250, 16)), $mul.ref(8, 1));
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2595, $0.ref);
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p2596 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    $p2597 := $load.ref($M.0, $p2596);
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $p2600 := $add.ref($add.ref($add.ref($add.ref($p2597, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(251, 16)), $mul.ref(0, 1));
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2600, 252);
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $p2601 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    $p2602 := $load.ref($M.0, $p2601);
    goto corral_source_split_15338;

  corral_source_split_15338:
    assume {:verifier.code 0} true;
    $p2605 := $add.ref($add.ref($add.ref($add.ref($p2602, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(251, 16)), $mul.ref(8, 1));
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2605, $0.ref);
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p2606 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $p2607 := $load.ref($M.0, $p2606);
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    $p2610 := $add.ref($add.ref($add.ref($add.ref($p2607, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(252, 16)), $mul.ref(0, 1));
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2610, 253);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    $p2611 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    $p2612 := $load.ref($M.0, $p2611);
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $p2615 := $add.ref($add.ref($add.ref($add.ref($p2612, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(252, 16)), $mul.ref(8, 1));
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2615, $0.ref);
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p2616 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    $p2617 := $load.ref($M.0, $p2616);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $p2620 := $add.ref($add.ref($add.ref($add.ref($p2617, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(253, 16)), $mul.ref(0, 1));
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2620, 254);
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    $p2621 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $p2622 := $load.ref($M.0, $p2621);
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $p2625 := $add.ref($add.ref($add.ref($add.ref($p2622, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(253, 16)), $mul.ref(8, 1));
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2625, $0.ref);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p2626 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $p2627 := $load.ref($M.0, $p2626);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    $p2630 := $add.ref($add.ref($add.ref($add.ref($p2627, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(254, 16)), $mul.ref(0, 1));
    goto corral_source_split_15362;

  corral_source_split_15362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2630, 255);
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $p2631 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    $p2632 := $load.ref($M.0, $p2631);
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    $p2635 := $add.ref($add.ref($add.ref($add.ref($p2632, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(254, 16)), $mul.ref(8, 1));
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2635, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 80)), $mul.ref(80, 1)), $mul.ref(254, 16)), $mul.ref(0, 1));
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $sub.i32(0, 1));
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} vslice_dummy_var_662 := spinlock_check($p41);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(472, 1));
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} __raw_spin_lock_init($p47, .str.163, $p2);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(80, 1));
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} vslice_dummy_var_663 := spinlock_check($p48);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} __raw_spin_lock_init($p52, .str.164, $p3);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(552, 1));
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} __mutex_init($p53, .str.165, $p4);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(152, 1));
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} INIT_LIST_HEAD($p54);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(344, 1));
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p1);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} vslice_dummy_var_664 := reg_timer_6($p55, dma_engine_stalled, $i56);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} $p58 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.167, 131074, 1, $p5, .str.166);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(168, 1));
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p58);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(168, 1));
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} $p64 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.169, 131074, 1, $p6, .str.168);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(256, 1));
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p64);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(256, 1));
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(176, 1));
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} __init_work($p70, 0);
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, 137438953408);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p8);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 3339} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p74, $p75, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(176, 1)), $mul.ref(32, 1));
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} lockdep_init_map($p77, .str.170, $p7, 0);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(176, 1)), $mul.ref(8, 1));
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} INIT_LIST_HEAD($p79);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(176, 1)), $mul.ref(24, 1));
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, rsxx_schedule_issue);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(264, 1));
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} __init_work($p82, 0);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, 137438953408);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p10);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 3343} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p86, $p87, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(264, 1)), $mul.ref(32, 1));
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} lockdep_init_map($p89, .str.171, $p9, 0);
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} INIT_LIST_HEAD($p91);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, rsxx_schedule_done);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} $i94 := rsxx_hw_buffers_init($p0, $p1);
    call {:si_unique_call 3347} {:cexpr "st"} boogie_si_record_i32($i94);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb15:
    assume $i95 == 1;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $i20 := $i94;
    goto $bb3;

  $bb12:
    assume $i69 == 1;
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  $bb9:
    assume $i63 == 1;
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;
}



const rsxx_dma_configure: ref;

axiom rsxx_dma_configure == $sub.ref(0, 592089);

procedure rsxx_dma_configure($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation rsxx_dma_configure($p0: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $p9: ref;
  var $i10: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} $i16 := dma_intr_coal_val($i5, $i10, $i15);
    call {:si_unique_call 3349} {:cexpr "intr_coal"} boogie_si_record_i32($i16);
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(112, 1));
    goto corral_source_split_15378;

  corral_source_split_15378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} iowrite32($i16, $p19);
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} $i24 := rsxx_dma_stripe_setup($p0, $i23);
    call {:si_unique_call 3352} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;
}



const ldv_destroy_workqueue_178: ref;

axiom ldv_destroy_workqueue_178 == $sub.ref(0, 593121);

procedure ldv_destroy_workqueue_178($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_178($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} destroy_workqueue($p0);
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} call_and_disable_all_3(2);
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_179: ref;

axiom ldv_destroy_workqueue_179 == $sub.ref(0, 594153);

procedure ldv_destroy_workqueue_179($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29, $M.0, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation ldv_destroy_workqueue_179($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} destroy_workqueue($p0);
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} call_and_disable_all_3(2);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    return;
}



const dma_intr_coal_val: ref;

axiom dma_intr_coal_val == $sub.ref(0, 595185);

procedure dma_intr_coal_val($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_intr_coal_val($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} {:cexpr "dma_intr_coal_val:arg:mode"} boogie_si_record_i32($i0);
    call {:si_unique_call 3358} {:cexpr "dma_intr_coal_val:arg:count"} boogie_si_record_i32($i1);
    call {:si_unique_call 3359} {:cexpr "dma_intr_coal_val:arg:latency"} boogie_si_record_i32($i2);
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i32($i2, 64);
    call {:si_unique_call 3360} {:cexpr "latency_units"} boogie_si_record_i32($i3);
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i1, 16);
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 33488896);
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i3, 65535);
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i7, $i8);
    goto corral_source_split_15403;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const rsxx_dma_stripe_setup: ref;

axiom rsxx_dma_stripe_setup == $sub.ref(0, 596217);

procedure rsxx_dma_stripe_setup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation rsxx_dma_stripe_setup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i24;
  var $i118: i24;
  var $i119: i24;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $i154: i64;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 3366} {:cexpr "rsxx_dma_stripe_setup:arg:stripe_size8"} boogie_si_record_i32($i1);
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} $i8 := is_power_of_2($i7);
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 3368} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i1, 1);
    goto corral_source_split_15424;

  corral_source_split_15424:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(0, 1));
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i18);
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(0, 1));
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    $i24 := $xor.i64($i23, $sub.i64(0, 1));
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(16, 1));
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i24);
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} $i29 := ffs($i28);
    call {:si_unique_call 3371} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(8, 1));
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i31);
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_15440;

  corral_source_split_15440:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $sub.i32(0, 1));
    goto corral_source_split_15442;

  corral_source_split_15442:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(24, 1));
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i37);
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} $i40 := ffs($i1);
    call {:si_unique_call 3373} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, $sub.i32(0, 1));
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(32, 1));
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i42);
    goto corral_source_split_15450;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p45, .str.5);
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p46, .str.157);
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p47, .str.150);
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p48, .str.158);
    goto corral_source_split_15458;

  corral_source_split_15458:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.45, $p50);
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 881);
    goto corral_source_split_15463;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p50, $i53);
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p54, 0);
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.46, $p55);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_15469;

  corral_source_split_15469:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 3375} {:cexpr "tmp___3"} boogie_si_record_i64($i59);
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p67, .str.5);
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p68, .str.157);
    goto corral_source_split_15485;

  corral_source_split_15485:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p69, .str.150);
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p70, .str.159);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.45, $p72);
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 883);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p72, $i75);
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p76, 0);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.46, $p77);
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 3378} {:cexpr "tmp___4"} boogie_si_record_i64($i81);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p89, .str.5);
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p90, .str.157);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p91, .str.150);
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p92, .str.160);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.45, $p94);
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 885);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p94, $i97);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p98, 0);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.46, $p99);
    goto corral_source_split_15530;

  corral_source_split_15530:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 3381} {:cexpr "tmp___5"} boogie_si_record_i64($i103);
    goto corral_source_split_15533;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15544;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p111, .str.5);
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15546;

  corral_source_split_15546:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p112, .str.157);
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15548;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p113, .str.150);
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p114, .str.161);
    goto corral_source_split_15551;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    $i117 := $load.i24($M.45, $p116);
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    $i118 := $and.i24($i117, $sub.i24(0, 262144));
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    $i119 := $or.i24($i118, 887);
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p116, $i119);
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15558;

  corral_source_split_15558:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p120, 0);
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.46, $p121);
    goto corral_source_split_15561;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i64($i122);
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 1);
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} $i125 := ldv__builtin_expect($i124, 0);
    call {:si_unique_call 3384} {:cexpr "tmp___6"} boogie_si_record_i64($i125);
    goto corral_source_split_15564;

  corral_source_split_15564:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p133, .str.5);
    goto corral_source_split_15576;

  corral_source_split_15576:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    $M.42 := $store.ref($M.42, $p134, .str.157);
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    $M.43 := $store.ref($M.43, $p135, .str.150);
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    $M.44 := $store.ref($M.44, $p136, .str.162);
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_15584;

  corral_source_split_15584:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.45, $p138);
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 889);
    goto corral_source_split_15587;

  corral_source_split_15587:
    assume {:verifier.code 0} true;
    $M.45 := $store.i24($M.45, $p138, $i141);
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p142, 0);
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.46, $p143);
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_15593;

  corral_source_split_15593:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 3387} {:cexpr "tmp___7"} boogie_si_record_i64($i147);
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_15596;

  corral_source_split_15596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb20:
    assume $i148 == 1;
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15599;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(32, 1));
    goto corral_source_split_15602;

  corral_source_split_15602:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_15603;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} __dynamic_dev_dbg.ref.ref.ref.i64($p6, $p151, .str.162, $i154);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i126 == 1;
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15570;

  corral_source_split_15570:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(24, 1));
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_15572;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} __dynamic_dev_dbg.ref.ref.ref.i64($p5, $p129, .str.161, $i132);
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i104 == 1;
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_15538;

  corral_source_split_15538:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(16, 1));
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} __dynamic_dev_dbg.ref.ref.ref.i64($p4, $p107, .str.160, $i110);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i82 == 1;
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(8, 1));
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} __dynamic_dev_dbg.ref.ref.ref.i64($p3, $p85, .str.159, $i88);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i60 == 1;
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15475;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1112, 1)), $mul.ref(0, 1));
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} __dynamic_dev_dbg.ref.ref.ref.i64($p2, $p63, .str.158, $i66);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} dev_err.ref.ref($p15, .str.156);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const is_power_of_2: ref;

axiom is_power_of_2 == $sub.ref(0, 597249);

procedure is_power_of_2($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_power_of_2($i0: i64) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} {:cexpr "is_power_of_2:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $i0);
    goto corral_source_split_15611;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 598281);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 599313);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_15615;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} $p1 := external_alloc();
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dma_engine_stalled: ref;

axiom dma_engine_stalled == $sub.ref(0, 600345);

procedure dma_engine_stalled($i0: i64);



const reg_timer_6: ref;

axiom reg_timer_6 == $sub.ref(0, 601377);

procedure reg_timer_6($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation reg_timer_6($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} {:cexpr "reg_timer_6:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(creg_cmd_timed_out));
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} activate_suitable_timer_6($p0, $i2);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_schedule_issue: ref;

axiom rsxx_schedule_issue == $sub.ref(0, 602409);

procedure rsxx_schedule_issue($p0: ref);



const rsxx_schedule_done: ref;

axiom rsxx_schedule_done == $sub.ref(0, 603441);

procedure rsxx_schedule_done($p0: ref);



const rsxx_hw_buffers_init: ref;

axiom rsxx_hw_buffers_init == $sub.ref(0, 604473);

procedure rsxx_hw_buffers_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_hw_buffers_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p90: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i22: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} $p4 := pci_alloc_consistent($p0, 4096, $p3);
    goto corral_source_split_15627;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p4);
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} $p9 := pci_alloc_consistent($p0, 4096, $p8);
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_15635;

  corral_source_split_15635:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_15642;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_15648;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 3396} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p25, $sub.i8(0, 84), 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_15651;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(48, 1));
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} iowrite32($i29, $p32);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    $i36 := $lshr.i64($i35, 32);
    goto corral_source_split_15659;

  corral_source_split_15659:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15661;

  corral_source_split_15661:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(52, 1));
    goto corral_source_split_15663;

  corral_source_split_15663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} iowrite32($i37, $p40);
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_15665;

  corral_source_split_15665:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 3399} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p43, $sub.i8(0, 125), 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_15667;

  corral_source_split_15667:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_15669;

  corral_source_split_15669:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15671;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(32, 1));
    goto corral_source_split_15673;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} iowrite32($i47, $p50);
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i64($i53, 32);
    goto corral_source_split_15677;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15679;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(36, 1));
    goto corral_source_split_15681;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} iowrite32($i55, $p58);
    goto corral_source_split_15682;

  corral_source_split_15682:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15683;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_15684;

  corral_source_split_15684:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(56, 1));
    goto corral_source_split_15685;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} $i62 := ioread32($p61);
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15687;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15689;

  corral_source_split_15689:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i67, 255);
    goto corral_source_split_15691;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_15700;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_15702;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(56, 1));
    goto corral_source_split_15703;

  corral_source_split_15703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} iowrite32($i75, $p78);
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15705;

  corral_source_split_15705:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15707;

  corral_source_split_15707:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(60, 1));
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} iowrite32($i81, $p84);
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15711;

  corral_source_split_15711:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(40, 1));
    goto corral_source_split_15713;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} $i88 := ioread32($p87);
    goto corral_source_split_15714;

  corral_source_split_15714:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_15715;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i88);
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_15718;

  corral_source_split_15718:
    assume {:verifier.code 0} true;
    $i94 := $ugt.i32($i93, 255);
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_15727;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15729;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(40, 1));
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} iowrite32($i101, $p104);
    goto corral_source_split_15732;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_15733;

  corral_source_split_15733:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(16, 1));
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(44, 1));
    goto corral_source_split_15737;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} iowrite32($i107, $p110);
    goto corral_source_split_15738;

  corral_source_split_15738:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb11:
    assume $i94 == 1;
    goto corral_source_split_15721;

  corral_source_split_15721:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15723;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_15724;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} dev_crit.ref.ref.i32($p95, .str.35, $i98);
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i68 == 1;
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15694;

  corral_source_split_15694:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 712)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_15695;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} dev_crit.ref.ref.i32($p69, .str.34, $i72);
    goto corral_source_split_15697;

  corral_source_split_15697:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 605505);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_15741;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15749;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15745;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 606537);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 3413} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_15752;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} $p5 := external_alloc();
    goto corral_source_split_15753;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv_mutex_lock_176: ref;

axiom ldv_mutex_lock_176 == $sub.ref(0, 607569);

procedure ldv_mutex_lock_176($p0: ref);



const rsxx_dma_done: ref;

axiom rsxx_dma_done == $sub.ref(0, 608601);

procedure rsxx_dma_done($p0: ref);



const ldv_mutex_unlock_177: ref;

axiom ldv_mutex_unlock_177 == $sub.ref(0, 609633);

procedure ldv_mutex_unlock_177($p0: ref);



const ldv_mutex_unlock_work_lock_of_rsxx_dma_ctrl: ref;

axiom ldv_mutex_unlock_work_lock_of_rsxx_dma_ctrl == $sub.ref(0, 610665);

procedure ldv_mutex_unlock_work_lock_of_rsxx_dma_ctrl($p0: ref);



const rsxx_disable_ier: ref;

axiom rsxx_disable_ier == $sub.ref(0, 611697);

procedure rsxx_disable_ier($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_disable_ier($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} {:cexpr "rsxx_disable_ier:arg:intr"} boogie_si_record_i32($i1);
    goto corral_source_split_15755;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_15756;

  corral_source_split_15756:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15757;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_15758;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_15759;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 3417} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_15761;

  corral_source_split_15761:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_15766;

  corral_source_split_15766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} __disable_intr($p9, $i1);
    goto corral_source_split_15767;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_15769;

  corral_source_split_15769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_15771;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(20, 1));
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} iowrite32($i11, $p14);
    goto corral_source_split_15773;

  corral_source_split_15773:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_15764;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_172: ref;

axiom ldv_mod_timer_172 == $sub.ref(0, 612729);

procedure ldv_mod_timer_172($p0: ref, $i1: i64) returns ($r: i32);



const rsxx_handle_dma_error: ref;

axiom rsxx_handle_dma_error == $sub.ref(0, 613761);

procedure rsxx_handle_dma_error($p0: ref, $p1: ref, $i2: i8);



const dma_intr_coal_auto_tune: ref;

axiom dma_intr_coal_auto_tune == $sub.ref(0, 614793);

procedure dma_intr_coal_auto_tune($p0: ref);



const ldv_del_timer_sync_173: ref;

axiom ldv_del_timer_sync_173 == $sub.ref(0, 615825);

procedure ldv_del_timer_sync_173($p0: ref) returns ($r: i32);



const rsxx_enable_ier: ref;

axiom rsxx_enable_ier == $sub.ref(0, 616857);

procedure rsxx_enable_ier($p0: ref, $i1: i32);



const rsxx_requeue_dma: ref;

axiom rsxx_requeue_dma == $sub.ref(0, 617889);

procedure rsxx_requeue_dma($p0: ref, $p1: ref);



const list_add: ref;

axiom list_add == $sub.ref(0, 618921);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15775;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_15777;

  corral_source_split_15777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} __list_add($p0, $p1, $p3);
    goto corral_source_split_15778;

  corral_source_split_15778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_work_lock_of_rsxx_dma_ctrl: ref;

axiom ldv_mutex_lock_work_lock_of_rsxx_dma_ctrl == $sub.ref(0, 619953);

procedure ldv_mutex_lock_work_lock_of_rsxx_dma_ctrl($p0: ref);



const ldv_mutex_lock_174: ref;

axiom ldv_mutex_lock_174 == $sub.ref(0, 620985);

procedure ldv_mutex_lock_174($p0: ref);



const rsxx_issue_dmas: ref;

axiom rsxx_issue_dmas == $sub.ref(0, 622017);

procedure rsxx_issue_dmas($p0: ref);



const ldv_mutex_unlock_175: ref;

axiom ldv_mutex_unlock_175 == $sub.ref(0, 623049);

procedure ldv_mutex_unlock_175($p0: ref);



const pop_tracker: ref;

axiom pop_tracker == $sub.ref(0, 624081);

procedure pop_tracker($p0: ref) returns ($r: i32);



const pci_map_page: ref;

axiom pci_map_page == $sub.ref(0, 625113);

procedure pci_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);



const set_tracker_dma: ref;

axiom set_tracker_dma == $sub.ref(0, 626145);

procedure set_tracker_dma($p0: ref, $i1: i32, $p2: ref);



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 627177);

procedure atomic_add($i0: i32, $p1: ref);



const ldv_mod_timer_170: ref;

axiom ldv_mod_timer_170 == $sub.ref(0, 628209);

procedure ldv_mod_timer_170($p0: ref, $i1: i64) returns ($r: i32);



const ldv_del_timer_sync_171: ref;

axiom ldv_del_timer_sync_171 == $sub.ref(0, 629241);

procedure ldv_del_timer_sync_171($p0: ref) returns ($r: i32);



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 630273);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 631305);

procedure lowmem_page_address($p0: ref) returns ($r: ref);



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 632337);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 633369);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);



const creg_cmd_timed_out: ref;

axiom creg_cmd_timed_out == $sub.ref(0, 634401);

procedure creg_cmd_timed_out($i0: i64);



const ldv_mod_timer_169: ref;

axiom ldv_mod_timer_169 == $sub.ref(0, 635433);

procedure ldv_mod_timer_169($p0: ref, $i1: i64) returns ($r: i32);



const config_hdr_be_to_cpu: ref;

axiom config_hdr_be_to_cpu == $sub.ref(0, 636465);

procedure config_hdr_be_to_cpu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation config_hdr_be_to_cpu($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_15781;

  corral_source_split_15781:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} $i3 := __fswab32($i2);
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_15784;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_15785;

  corral_source_split_15785:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_15787;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} $i7 := __fswab32($i6);
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_15789;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_15790;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    return;
}



const config_data_swab: ref;

axiom config_data_swab == $sub.ref(0, 637497);

procedure config_data_swab($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation config_data_swab($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_15793;

  corral_source_split_15793:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15794;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} $i4 := __fswab32($i3);
    call {:si_unique_call 3424} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_15797;

  corral_source_split_15797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i4);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_15801;

  corral_source_split_15801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} $i7 := __fswab32($i6);
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15803;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} $i11 := __fswab32($i10);
    goto corral_source_split_15808;

  corral_source_split_15808:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} $i15 := __fswab32($i14);
    goto corral_source_split_15814;

  corral_source_split_15814:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15815;

  corral_source_split_15815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_15816;

  corral_source_split_15816:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15818;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_15819;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} $i19 := __fswab32($i18);
    goto corral_source_split_15820;

  corral_source_split_15820:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15821;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} $i23 := __fswab32($i22);
    goto corral_source_split_15826;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15827;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15830;

  corral_source_split_15830:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} $i27 := __fswab32($i26);
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15833;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const config_data_crc32: ref;

axiom config_data_crc32 == $sub.ref(0, 638529);

procedure config_data_crc32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation config_data_crc32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15835;

  corral_source_split_15835:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15837;

  corral_source_split_15837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} $i3 := crc32_le($sub.i32(0, 1), $p2, 28);
    call {:si_unique_call 3432} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15838;

  corral_source_split_15838:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_15839;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const config_data_le_to_cpu: ref;

axiom config_data_le_to_cpu == $sub.ref(0, 639561);

procedure config_data_le_to_cpu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation config_data_le_to_cpu($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_15842;

  corral_source_split_15842:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i3);
    goto corral_source_split_15846;

  corral_source_split_15846:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_15849;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_15851;

  corral_source_split_15851:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15853;

  corral_source_split_15853:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_15859;

  corral_source_split_15859:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_15861;

  corral_source_split_15861:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15863;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_15864;

  corral_source_split_15864:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15865;

  corral_source_split_15865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15870;

  corral_source_split_15870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_15871;

  corral_source_split_15871:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15873;

  corral_source_split_15873:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15875;

  corral_source_split_15875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const initialize_config: ref;

axiom initialize_config == $sub.ref(0, 640593);

procedure initialize_config($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation initialize_config($p0: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p13: ref;
  var $p16: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15877;

  corral_source_split_15877:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 4);
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 4096);
    goto corral_source_split_15881;

  corral_source_split_15881:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_15882;

  corral_source_split_15882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 4096);
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_15885;

  corral_source_split_15885:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $sub.i32(0, 1));
    goto corral_source_split_15887;

  corral_source_split_15887:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_15889;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_save_config: ref;

axiom rsxx_save_config == $sub.ref(0, 641625);

procedure rsxx_save_config($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_save_config($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i19: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} $p1 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    goto corral_source_split_15895;

  corral_source_split_15895:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(104, 1));
    goto corral_source_split_15897;

  corral_source_split_15897:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 3434} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p2, $p4, 36, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_15899;

  corral_source_split_15899:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_15901;

  corral_source_split_15901:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 4);
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_15903;

  corral_source_split_15903:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 3436} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} config_data_cpu_to_le($p1);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} $i20 := config_data_crc32($p1);
    goto corral_source_split_15919;

  corral_source_split_15919:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i20);
    goto corral_source_split_15921;

  corral_source_split_15921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} config_data_swab($p1);
    goto corral_source_split_15922;

  corral_source_split_15922:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} config_hdr_cpu_to_be($p23);
    goto corral_source_split_15924;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} $i25 := rsxx_creg_write($p0, $sub.i32(0, 1342177280), 36, $p24, 1);
    goto SeqInstr_1945, SeqInstr_1946;

  SeqInstr_1946:
    assume assertsPassed;
    goto SeqInstr_1947;

  SeqInstr_1947:
    call {:si_unique_call 3443} {:cexpr "st"} boogie_si_record_i32($i25);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_15927;

  corral_source_split_15927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15916;

  corral_source_split_15916:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_15929;

  corral_source_split_15929:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb3;

  SeqInstr_1945:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_15908;

  corral_source_split_15908:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_15911;

  corral_source_split_15911:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_15913;

  corral_source_split_15913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} dev_err.ref.ref.i32($p15, .str.38, $i18);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;
}



const config_data_cpu_to_le: ref;

axiom config_data_cpu_to_le == $sub.ref(0, 642657);

procedure config_data_cpu_to_le($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation config_data_cpu_to_le($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15931;

  corral_source_split_15931:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 36)), $mul.ref(8, 1));
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15933;

  corral_source_split_15933:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_15935;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i3);
    goto corral_source_split_15936;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15938;

  corral_source_split_15938:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_15939;

  corral_source_split_15939:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_15940;

  corral_source_split_15940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_15941;

  corral_source_split_15941:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15943;

  corral_source_split_15943:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_15944;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(2, 4));
    goto corral_source_split_15945;

  corral_source_split_15945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_15946;

  corral_source_split_15946:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15948;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_15949;

  corral_source_split_15949:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(3, 4));
    goto corral_source_split_15950;

  corral_source_split_15950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_15951;

  corral_source_split_15951:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15953;

  corral_source_split_15953:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_15954;

  corral_source_split_15954:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p2, $mul.ref(4, 4));
    goto corral_source_split_15955;

  corral_source_split_15955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_15956;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15958;

  corral_source_split_15958:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_15959;

  corral_source_split_15959:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref(5, 4));
    goto corral_source_split_15960;

  corral_source_split_15960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_15961;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15963;

  corral_source_split_15963:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_15964;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(6, 4));
    goto corral_source_split_15965;

  corral_source_split_15965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const config_hdr_cpu_to_be: ref;

axiom config_hdr_cpu_to_be == $sub.ref(0, 643689);

procedure config_hdr_cpu_to_be($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation config_hdr_cpu_to_be($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15967;

  corral_source_split_15967:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_15968;

  corral_source_split_15968:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_15969;

  corral_source_split_15969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} $i3 := __fswab32($i2);
    goto corral_source_split_15970;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_15971;

  corral_source_split_15971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_15972;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_15973;

  corral_source_split_15973:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_15974;

  corral_source_split_15974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} $i7 := __fswab32($i6);
    goto corral_source_split_15975;

  corral_source_split_15975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_15976;

  corral_source_split_15976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_15977;

  corral_source_split_15977:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 644721);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_15979;

  corral_source_split_15979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} $i1 := __arch_swab32($i0);
    call {:si_unique_call 3448} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15980;

  corral_source_split_15980:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 645753);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 3450} $i1 := devirtbounce.12(0, $i0);
    call {:si_unique_call 3451} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_15982;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 646785);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3452} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 3453} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_15984;

  corral_source_split_15984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3454} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 3455} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_15985;

  corral_source_split_15985:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 647817);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 3457} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_15987;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 3459} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_15988;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 648849);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15990;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_15991;

  corral_source_split_15991:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(rsxx_isr));
    goto corral_source_split_15992;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15996;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15994;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 649881);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.32, $M.55, $M.31, $M.34, $M.56, $M.33, $M.36, $M.57, $M.35, $M.38, $M.58, $M.37;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_15998;

  corral_source_split_15998:
    assume {:verifier.code 0} true;
    $i2 := $M.31;
    goto corral_source_split_15999;

  corral_source_split_15999:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_16000;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.33;
    goto corral_source_split_16007;

  corral_source_split_16007:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_16008;

  corral_source_split_16008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.35;
    goto corral_source_split_16015;

  corral_source_split_16015:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_16016;

  corral_source_split_16016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.37;
    goto corral_source_split_16023;

  corral_source_split_16023:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_16024;

  corral_source_split_16024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_16026;

  corral_source_split_16026:
    assume {:verifier.code 0} true;
    $M.38 := $i0;
    call {:si_unique_call 3467} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_16027;

  corral_source_split_16027:
    assume {:verifier.code 0} true;
    $M.58 := $p1;
    goto corral_source_split_16028;

  corral_source_split_16028:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 3468} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_16029;

  corral_source_split_16029:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_16018;

  corral_source_split_16018:
    assume {:verifier.code 0} true;
    $M.36 := $i0;
    call {:si_unique_call 3465} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_16019;

  corral_source_split_16019:
    assume {:verifier.code 0} true;
    $M.57 := $p1;
    goto corral_source_split_16020;

  corral_source_split_16020:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 3466} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_16021;

  corral_source_split_16021:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_16010;

  corral_source_split_16010:
    assume {:verifier.code 0} true;
    $M.34 := $i0;
    call {:si_unique_call 3463} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_16011;

  corral_source_split_16011:
    assume {:verifier.code 0} true;
    $M.56 := $p1;
    goto corral_source_split_16012;

  corral_source_split_16012:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 3464} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_16013;

  corral_source_split_16013:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16002;

  corral_source_split_16002:
    assume {:verifier.code 0} true;
    $M.32 := $i0;
    call {:si_unique_call 3461} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_16003;

  corral_source_split_16003:
    assume {:verifier.code 0} true;
    $M.55 := $p1;
    goto corral_source_split_16004;

  corral_source_split_16004:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 3462} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_16005;

  corral_source_split_16005:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 650913);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3469} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 3470} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_16031;

  corral_source_split_16031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3471} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 3472} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_16032;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 651945);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16034;

  corral_source_split_16034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} $i2 := ldv_queue_work_on_33(8192, $p0, $p1);
    goto corral_source_split_16035;

  corral_source_split_16035:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 3474} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_16036;

  corral_source_split_16036:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_16037;

  corral_source_split_16037:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_33: ref;

axiom ldv_queue_work_on_33 == $sub.ref(0, 652977);

procedure ldv_queue_work_on_33($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation ldv_queue_work_on_33($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} {:cexpr "ldv_queue_work_on_33:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_16039;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_16040;

  corral_source_split_16040:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 3477} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_16041;

  corral_source_split_16041:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_16042;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 3478} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_16043;

  corral_source_split_16043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} activate_work_3($p2, 2);
    goto corral_source_split_16044;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_16045;

  corral_source_split_16045:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 654009);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3480} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 3481} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_16047;

  corral_source_split_16047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3482} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3483} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_16048;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 655041);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16050;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 656073);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16052;

  corral_source_split_16052:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 657105);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3484} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_16054;

  corral_source_split_16054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3485} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3486} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_16055;

  corral_source_split_16055:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ida_get_new_above: ref;

axiom ida_get_new_above == $sub.ref(0, 658137);

procedure ida_get_new_above($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ida_get_new_above($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3487} {:cexpr "ida_get_new_above:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_16057;

  corral_source_split_16057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3488} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3489} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_16058;

  corral_source_split_16058:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 659169);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16060;

  corral_source_split_16060:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_16061;

  corral_source_split_16061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_16062;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_error_detected: ref;

axiom rsxx_error_detected == $sub.ref(0, 660201);

procedure rsxx_error_detected($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.51, $M.52, $CurrAddr, $M.9, $M.11, $M.13, $M.15, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_error_detected($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} {:cexpr "rsxx_error_detected:arg:error"} boogie_si_record_i32($i1);
    goto corral_source_split_16064;

  corral_source_split_16064:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_16065;

  corral_source_split_16065:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_16066;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_16067;

  corral_source_split_16067:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 2);
    goto corral_source_split_16068;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 3);
    goto corral_source_split_16074;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} $i8 := rsxx_eeh_frozen($p0);
    call {:si_unique_call 3493} {:cexpr "st"} boogie_si_record_i32($i8);
    goto corral_source_split_16079;

  corral_source_split_16079:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_16080;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16072;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_16082;

  corral_source_split_16082:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16083;

  corral_source_split_16083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} dev_err.ref.ref($p10, .str.131);
    goto corral_source_split_16084;

  corral_source_split_16084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} rsxx_eeh_failure($p0);
    goto corral_source_split_16085;

  corral_source_split_16085:
    assume {:verifier.code 0} true;
    $i6 := 4;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_16076;

  corral_source_split_16076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} rsxx_eeh_failure($p0);
    goto corral_source_split_16077;

  corral_source_split_16077:
    assume {:verifier.code 0} true;
    $i6 := 4;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_16070;

  corral_source_split_16070:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;
}



const rsxx_slot_reset: ref;

axiom rsxx_slot_reset == $sub.ref(0, 661233);

procedure rsxx_slot_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.51, $M.52;



implementation rsxx_slot_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i11: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i41: i32;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p133: ref;
  var $i134: i64;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i84: i32;
  var $i80: i32;
  var vslice_dummy_var_665: i32;
  var vslice_dummy_var_666: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16087;

  corral_source_split_16087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_16088;

  corral_source_split_16088:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_16089;

  corral_source_split_16089:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16090;

  corral_source_split_16090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} dev_warn.ref.ref($p3, .str.126);
    goto corral_source_split_16091;

  corral_source_split_16091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} $i4 := pci_enable_device($p0);
    call {:si_unique_call 3499} {:cexpr "st"} boogie_si_record_i32($i4);
    goto corral_source_split_16092;

  corral_source_split_16092:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_16093;

  corral_source_split_16093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} pci_set_master($p0);
    goto corral_source_split_16099;

  corral_source_split_16099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} $i6 := rsxx_eeh_fifo_flush_poll($p2);
    call {:si_unique_call 3503} {:cexpr "st"} boogie_si_record_i32($i6);
    goto corral_source_split_16100;

  corral_source_split_16100:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_16101;

  corral_source_split_16101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} rsxx_dma_queue_reset($p2);
    goto corral_source_split_16105;

  corral_source_split_16105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16106;

  corral_source_split_16106:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_16107;

  corral_source_split_16107:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_16108;

  corral_source_split_16108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(140, 1));
    goto corral_source_split_16133;

  corral_source_split_16133:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_16134;

  corral_source_split_16134:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_16135;

  corral_source_split_16135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16140;

  corral_source_split_16140:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_16141;

  corral_source_split_16141:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(16, 1));
    goto corral_source_split_16142;

  corral_source_split_16142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} $i28 := ioread32($p27);
    call {:si_unique_call 3510} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_16143;

  corral_source_split_16143:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_16144;

  corral_source_split_16144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_16145;

  corral_source_split_16145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_16146;

  corral_source_split_16146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} $p31 := spinlock_check($p30);
    goto corral_source_split_16147;

  corral_source_split_16147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} $i32 := _raw_spin_lock_irqsave($p31);
    call {:si_unique_call 3513} {:cexpr "flags"} boogie_si_record_i64($i32);
    goto corral_source_split_16148;

  corral_source_split_16148:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16149;

  corral_source_split_16149:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_16150;

  corral_source_split_16150:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 8);
    goto corral_source_split_16151;

  corral_source_split_16151:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_16152;

  corral_source_split_16152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    goto corral_source_split_16157;

  corral_source_split_16157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} rsxx_enable_ier_and_isr($p2, 63);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_16159;

  corral_source_split_16159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} spin_unlock_irqrestore($p37, $i32);
    goto corral_source_split_16160;

  corral_source_split_16160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} rsxx_kick_creg_queue($p2);
    goto corral_source_split_16161;

  corral_source_split_16161:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16162;

  corral_source_split_16162:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_16163;

  corral_source_split_16163:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 0);
    goto corral_source_split_16164;

  corral_source_split_16164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16217;

  corral_source_split_16217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} _dev_info.ref.ref($p79, .str.127);
    goto corral_source_split_16218;

  corral_source_split_16218:
    assume {:verifier.code 0} true;
    $i80 := 5;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_16220;

  corral_source_split_16220:
    assume {:verifier.code 0} true;
    $r := $i80;
    return;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_16166;

  corral_source_split_16166:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb29;

  $bb29:
    call $p42, $p43, $i44, $p46, $p47, $p48, $i49, $p51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $i61, $p63, $p64, $p65, $i66, $p68, $p69, $p70, $p71, $i72, $p74, $i76, $i77, $i78, $i41, vslice_dummy_var_666 := rsxx_slot_reset_loop_$bb29($p2, $p38, $p42, $p43, $i44, $p46, $p47, $p48, $i49, $p51, $i52, $i53, $p54, $p55, $i56, $p58, $p59, $p60, $i61, $p63, $p64, $p65, $i66, $p68, $p69, $p70, $p71, $i72, $p74, $i76, $i77, $i78, $i41, vslice_dummy_var_666);
    goto $bb29_last;

  corral_source_split_16168:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16170;

  corral_source_split_16170:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_16171;

  corral_source_split_16171:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i41);
    goto corral_source_split_16172;

  corral_source_split_16172:
    assume {:verifier.code 0} true;
    goto corral_source_split_16173;

  corral_source_split_16173:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 712)), $mul.ref(80, 1));
    goto corral_source_split_16174;

  corral_source_split_16174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} spin_lock($p46);
    goto corral_source_split_16175;

  corral_source_split_16175:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16176;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_16177;

  corral_source_split_16177:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i41);
    goto corral_source_split_16178;

  corral_source_split_16178:
    assume {:verifier.code 0} true;
    goto corral_source_split_16179;

  corral_source_split_16179:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p48, $mul.ref($i49, 712)), $mul.ref(152, 1));
    goto corral_source_split_16180;

  corral_source_split_16180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} $i52 := list_empty($p51);
    call {:si_unique_call 3520} {:cexpr "tmp___2"} boogie_si_record_i32($i52);
    goto corral_source_split_16181;

  corral_source_split_16181:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_16182;

  corral_source_split_16182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16196;

  corral_source_split_16196:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_16197;

  corral_source_split_16197:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i41);
    goto corral_source_split_16198;

  corral_source_split_16198:
    assume {:verifier.code 0} true;
    goto corral_source_split_16199;

  corral_source_split_16199:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p60, $mul.ref($i61, 712)), $mul.ref(80, 1));
    goto corral_source_split_16200;

  corral_source_split_16200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} spin_unlock($p63);
    goto corral_source_split_16201;

  corral_source_split_16201:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16202;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_16203;

  corral_source_split_16203:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i41);
    goto corral_source_split_16204;

  corral_source_split_16204:
    assume {:verifier.code 0} true;
    goto corral_source_split_16205;

  corral_source_split_16205:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 712)), $mul.ref(168, 1));
    goto corral_source_split_16206;

  corral_source_split_16206:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_16207;

  corral_source_split_16207:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16208;

  corral_source_split_16208:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_16209;

  corral_source_split_16209:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i41);
    goto corral_source_split_16210;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    goto corral_source_split_16211;

  corral_source_split_16211:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref($i72, 712)), $mul.ref(176, 1));
    goto corral_source_split_16212;

  corral_source_split_16212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} vslice_dummy_var_666 := queue_work($p69, $p74);
    goto corral_source_split_16213;

  corral_source_split_16213:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i41, 1);
    call {:si_unique_call 3522} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_16192;

  corral_source_split_16192:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p38);
    goto corral_source_split_16193;

  corral_source_split_16193:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i76);
    goto corral_source_split_16194;

  corral_source_split_16194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i78 == 1);
    goto corral_source_split_16215;

  corral_source_split_16215:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i76;
    goto $bb35_dummy;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_16184;

  corral_source_split_16184:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16185;

  corral_source_split_16185:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_16186;

  corral_source_split_16186:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i41);
    goto corral_source_split_16187;

  corral_source_split_16187:
    assume {:verifier.code 0} true;
    goto corral_source_split_16188;

  corral_source_split_16188:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 712)), $mul.ref(80, 1));
    goto corral_source_split_16189;

  corral_source_split_16189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} spin_unlock($p58);
    goto corral_source_split_16190;

  corral_source_split_16190:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_16154;

  corral_source_split_16154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} rsxx_enable_ier_and_isr($p2, 1023);
    goto corral_source_split_16155;

  corral_source_split_16155:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_16137;

  corral_source_split_16137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} vslice_dummy_var_665 := rsxx_dma_configure($p2);
    goto corral_source_split_16138;

  corral_source_split_16138:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_16110;

  corral_source_split_16110:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    call $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i11 := rsxx_slot_reset_loop_$bb11($p0, $p2, $p8, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i11);
    goto $bb11_last;

  corral_source_split_16112:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16114;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_16115;

  corral_source_split_16115:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_16116;

  corral_source_split_16116:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 712));
    goto corral_source_split_16117;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} $i16 := rsxx_hw_buffers_init($p0, $p15);
    call {:si_unique_call 3506} {:cexpr "st"} boogie_si_record_i32($i16);
    goto corral_source_split_16118;

  corral_source_split_16118:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_16119;

  corral_source_split_16119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i11, 1);
    call {:si_unique_call 3507} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_16127;

  corral_source_split_16127:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p8);
    goto corral_source_split_16128;

  corral_source_split_16128:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i18);
    goto corral_source_split_16129;

  corral_source_split_16129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    goto corral_source_split_16131;

  corral_source_split_16131:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb17_dummy;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_16121;

  corral_source_split_16121:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16123;

  corral_source_split_16123:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_16124;

  corral_source_split_16124:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 0);
    goto corral_source_split_16125;

  corral_source_split_16125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} rsxx_eeh_failure($p0);
    goto corral_source_split_16097;

  corral_source_split_16097:
    assume {:verifier.code 0} true;
    $i80 := 4;
    goto $bb38;

  $bb39:
    assume $i83 == 1;
    goto corral_source_split_16222;

  corral_source_split_16222:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb42;

  $bb42:
    call $p85, $p86, $i87, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p101, $p102, $p103, $p104, $i105, $p108, $i109, $p110, $p111, $i112, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $i123, $p126, $p127, $p128, $p129, $i130, $p133, $i134, $i135, $i136, $i137, $i84 := rsxx_slot_reset_loop_$bb42($p2, $p81, $p85, $p86, $i87, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p101, $p102, $p103, $p104, $i105, $p108, $i109, $p110, $p111, $i112, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $i123, $p126, $p127, $p128, $p129, $i130, $p133, $i134, $i135, $i136, $i137, $i84);
    goto $bb42_last;

  corral_source_split_16224:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16226;

  corral_source_split_16226:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_16227;

  corral_source_split_16227:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i84);
    goto corral_source_split_16228;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    goto corral_source_split_16229;

  corral_source_split_16229:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p86, $mul.ref($i87, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16230;

  corral_source_split_16230:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_16231;

  corral_source_split_16231:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_16232;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_16233;

  corral_source_split_16233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16252;

  corral_source_split_16252:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_16253;

  corral_source_split_16253:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i84);
    goto corral_source_split_16254;

  corral_source_split_16254:
    assume {:verifier.code 0} true;
    goto corral_source_split_16255;

  corral_source_split_16255:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p111, $mul.ref($i112, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16256;

  corral_source_split_16256:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_16257;

  corral_source_split_16257:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_16258;

  corral_source_split_16258:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_16259;

  corral_source_split_16259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i84, 1);
    call {:si_unique_call 3528} {:cexpr "i"} boogie_si_record_i32($i135);
    goto corral_source_split_16278;

  corral_source_split_16278:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p81);
    goto corral_source_split_16279;

  corral_source_split_16279:
    assume {:verifier.code 0} true;
    $i137 := $sgt.i32($i136, $i135);
    goto corral_source_split_16280;

  corral_source_split_16280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i137 == 1);
    goto corral_source_split_16282;

  corral_source_split_16282:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb50:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i84 := $i135;
    goto $bb50_dummy;

  $bb47:
    assume $i118 == 1;
    goto corral_source_split_16261;

  corral_source_split_16261:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16262;

  corral_source_split_16262:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_16263;

  corral_source_split_16263:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16264;

  corral_source_split_16264:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_16265;

  corral_source_split_16265:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i84);
    goto corral_source_split_16266;

  corral_source_split_16266:
    assume {:verifier.code 0} true;
    goto corral_source_split_16267;

  corral_source_split_16267:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p122, $mul.ref($i123, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16268;

  corral_source_split_16268:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_16269;

  corral_source_split_16269:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16270;

  corral_source_split_16270:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_16271;

  corral_source_split_16271:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i84);
    goto corral_source_split_16272;

  corral_source_split_16272:
    assume {:verifier.code 0} true;
    goto corral_source_split_16273;

  corral_source_split_16273:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p129, $mul.ref($i130, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_16274;

  corral_source_split_16274:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.0, $p133);
    goto corral_source_split_16275;

  corral_source_split_16275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} pci_free_consistent($p120, 4096, $p127, $i134);
    goto corral_source_split_16276;

  corral_source_split_16276:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i93 == 1;
    goto corral_source_split_16235;

  corral_source_split_16235:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16236;

  corral_source_split_16236:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_16237;

  corral_source_split_16237:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16238;

  corral_source_split_16238:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_16239;

  corral_source_split_16239:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i84);
    goto corral_source_split_16240;

  corral_source_split_16240:
    assume {:verifier.code 0} true;
    goto corral_source_split_16241;

  corral_source_split_16241:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p97, $mul.ref($i98, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16242;

  corral_source_split_16242:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_16243;

  corral_source_split_16243:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16244;

  corral_source_split_16244:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_16245;

  corral_source_split_16245:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i84);
    goto corral_source_split_16246;

  corral_source_split_16246:
    assume {:verifier.code 0} true;
    goto corral_source_split_16247;

  corral_source_split_16247:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p104, $mul.ref($i105, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_16248;

  corral_source_split_16248:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_16249;

  corral_source_split_16249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} pci_free_consistent($p95, 4096, $p102, $i109);
    goto corral_source_split_16250;

  corral_source_split_16250:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_16103;

  corral_source_split_16103:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_16095;

  corral_source_split_16095:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16168;

  $bb50_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16224;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16112;
}



const rsxx_eeh_fifo_flush_poll: ref;

axiom rsxx_eeh_fifo_flush_poll == $sub.ref(0, 662265);

procedure rsxx_eeh_fifo_flush_poll($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rsxx_eeh_fifo_flush_poll($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16284;

  corral_source_split_16284:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16286;

  corral_source_split_16286:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_16287;

  corral_source_split_16287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(184, 1));
    goto corral_source_split_16288;

  corral_source_split_16288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} $i4 := ioread32($p3);
    call {:si_unique_call 3530} {:cexpr "status"} boogie_si_record_i32($i4);
    goto corral_source_split_16289;

  corral_source_split_16289:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 2);
    goto corral_source_split_16290;

  corral_source_split_16290:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_16291;

  corral_source_split_16291:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_16303;

  corral_source_split_16303:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_16304;

  corral_source_split_16304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_16312;

  corral_source_split_16312:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_16306;

  corral_source_split_16306:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16307;

  corral_source_split_16307:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_16308;

  corral_source_split_16308:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16309;

  corral_source_split_16309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} dev_warn.ref.ref($p12, .str.128);
    goto corral_source_split_16310;

  corral_source_split_16310:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_16293;

  corral_source_split_16293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} ssleep(1);
    goto corral_source_split_16294;

  corral_source_split_16294:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16296;

  corral_source_split_16296:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_16297;

  corral_source_split_16297:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(184, 1));
    goto corral_source_split_16298;

  corral_source_split_16298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} $i17 := ioread32($p16);
    goto corral_source_split_16299;

  corral_source_split_16299:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 2);
    goto corral_source_split_16300;

  corral_source_split_16300:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_16301;

  corral_source_split_16301:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_16314;

  corral_source_split_16314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} ssleep(1);
    goto corral_source_split_16315;

  corral_source_split_16315:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16317;

  corral_source_split_16317:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_16318;

  corral_source_split_16318:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(184, 1));
    goto corral_source_split_16319;

  corral_source_split_16319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} $i23 := ioread32($p22);
    goto corral_source_split_16320;

  corral_source_split_16320:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2);
    goto corral_source_split_16321;

  corral_source_split_16321:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_16322;

  corral_source_split_16322:
    assume {:verifier.code 0} true;
    $i7 := $i23;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_16324;

  corral_source_split_16324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} ssleep(1);
    goto corral_source_split_16325;

  corral_source_split_16325:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16327;

  corral_source_split_16327:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_16328;

  corral_source_split_16328:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(184, 1));
    goto corral_source_split_16329;

  corral_source_split_16329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} $i29 := ioread32($p28);
    goto corral_source_split_16330;

  corral_source_split_16330:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 2);
    goto corral_source_split_16331;

  corral_source_split_16331:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_16332;

  corral_source_split_16332:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb5;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_16334;

  corral_source_split_16334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} ssleep(1);
    goto corral_source_split_16335;

  corral_source_split_16335:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16337;

  corral_source_split_16337:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_16338;

  corral_source_split_16338:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(184, 1));
    goto corral_source_split_16339;

  corral_source_split_16339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} $i35 := ioread32($p34);
    goto corral_source_split_16340;

  corral_source_split_16340:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 2);
    goto corral_source_split_16341;

  corral_source_split_16341:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_16342;

  corral_source_split_16342:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    assume {:branchcond $i37} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb5;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_16344;

  corral_source_split_16344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} ssleep(1);
    goto corral_source_split_16345;

  corral_source_split_16345:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16347;

  corral_source_split_16347:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_16348;

  corral_source_split_16348:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(184, 1));
    goto corral_source_split_16349;

  corral_source_split_16349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} $i41 := ioread32($p40);
    goto corral_source_split_16350;

  corral_source_split_16350:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 2);
    goto corral_source_split_16351;

  corral_source_split_16351:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_16352;

  corral_source_split_16352:
    assume {:verifier.code 0} true;
    $i7 := $i41;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb5;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_16354;

  corral_source_split_16354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} ssleep(1);
    goto corral_source_split_16355;

  corral_source_split_16355:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16357;

  corral_source_split_16357:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_16358;

  corral_source_split_16358:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(184, 1));
    goto corral_source_split_16359;

  corral_source_split_16359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} $i47 := ioread32($p46);
    goto corral_source_split_16360;

  corral_source_split_16360:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 2);
    goto corral_source_split_16361;

  corral_source_split_16361:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_16362;

  corral_source_split_16362:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb5;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_16364;

  corral_source_split_16364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} ssleep(1);
    goto corral_source_split_16365;

  corral_source_split_16365:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16367;

  corral_source_split_16367:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_16368;

  corral_source_split_16368:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(184, 1));
    goto corral_source_split_16369;

  corral_source_split_16369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} $i53 := ioread32($p52);
    goto corral_source_split_16370;

  corral_source_split_16370:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 2);
    goto corral_source_split_16371;

  corral_source_split_16371:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_16372;

  corral_source_split_16372:
    assume {:verifier.code 0} true;
    $i7 := $i53;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb5;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_16374;

  corral_source_split_16374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} ssleep(1);
    goto corral_source_split_16375;

  corral_source_split_16375:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16377;

  corral_source_split_16377:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_16378;

  corral_source_split_16378:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(184, 1));
    goto corral_source_split_16379;

  corral_source_split_16379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} $i59 := ioread32($p58);
    goto corral_source_split_16380;

  corral_source_split_16380:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 2);
    goto corral_source_split_16381;

  corral_source_split_16381:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_16382;

  corral_source_split_16382:
    assume {:verifier.code 0} true;
    $i7 := $i59;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb5;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_16384;

  corral_source_split_16384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} ssleep(1);
    goto corral_source_split_16385;

  corral_source_split_16385:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_16387;

  corral_source_split_16387:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_16388;

  corral_source_split_16388:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(184, 1));
    goto corral_source_split_16389;

  corral_source_split_16389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} $i65 := ioread32($p64);
    goto corral_source_split_16390;

  corral_source_split_16390:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 2);
    goto corral_source_split_16391;

  corral_source_split_16391:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_16392;

  corral_source_split_16392:
    assume {:verifier.code 0} true;
    $i7 := $i65;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb5;

  $bb37:
    assume $i67 == 1;
    goto corral_source_split_16394;

  corral_source_split_16394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} ssleep(1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb11;
}



const rsxx_kick_creg_queue: ref;

axiom rsxx_kick_creg_queue == $sub.ref(0, 663297);

procedure rsxx_kick_creg_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_kick_creg_queue($p0: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16396;

  corral_source_split_16396:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_16397;

  corral_source_split_16397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} spin_lock_bh($p2);
    goto corral_source_split_16398;

  corral_source_split_16398:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_16399;

  corral_source_split_16399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} $i5 := list_empty($p4);
    call {:si_unique_call 3553} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_16400;

  corral_source_split_16400:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_16401;

  corral_source_split_16401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_16406;

  corral_source_split_16406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} spin_unlock_bh($p8);
    goto corral_source_split_16407;

  corral_source_split_16407:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_16403;

  corral_source_split_16403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} creg_kick_queue($p0);
    goto corral_source_split_16404;

  corral_source_split_16404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_eeh_failure: ref;

axiom rsxx_eeh_failure == $sub.ref(0, 664329);

procedure rsxx_eeh_failure($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_eeh_failure($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16409;

  corral_source_split_16409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_16410;

  corral_source_split_16410:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_16411;

  corral_source_split_16411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16412;

  corral_source_split_16412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} dev_err.ref.ref($p3, .str.129);
    goto corral_source_split_16413;

  corral_source_split_16413:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_16414;

  corral_source_split_16414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_16415;

  corral_source_split_16415:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(8, 1));
    goto corral_source_split_16416;

  corral_source_split_16416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_16417;

  corral_source_split_16417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16418;

  corral_source_split_16418:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_16419;

  corral_source_split_16419:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_16420;

  corral_source_split_16420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_16422;

  corral_source_split_16422:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $p23, $i24, $p25, $p26, $i27, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p44, $i45, $i46, $i47, $i48, $i9 := rsxx_eeh_failure_loop_$bb4($p2, $p6, $p10, $p11, $i12, $p14, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $p23, $i24, $p25, $p26, $i27, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $p44, $i45, $i46, $i47, $i48, $i9);
    goto $bb4_last;

  corral_source_split_16424:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16426;

  corral_source_split_16426:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_16427;

  corral_source_split_16427:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_16428;

  corral_source_split_16428:
    assume {:verifier.code 0} true;
    goto corral_source_split_16429;

  corral_source_split_16429:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 712)), $mul.ref(80, 1));
    goto corral_source_split_16430;

  corral_source_split_16430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} spin_lock_bh($p14);
    goto corral_source_split_16431;

  corral_source_split_16431:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16432;

  corral_source_split_16432:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_16433;

  corral_source_split_16433:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i9);
    goto corral_source_split_16434;

  corral_source_split_16434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 712));
    goto corral_source_split_16435;

  corral_source_split_16435:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16436;

  corral_source_split_16436:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_16437;

  corral_source_split_16437:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    goto corral_source_split_16438;

  corral_source_split_16438:
    assume {:verifier.code 0} true;
    goto corral_source_split_16439;

  corral_source_split_16439:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 712)), $mul.ref(152, 1));
    goto corral_source_split_16440;

  corral_source_split_16440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} $i24 := rsxx_cleanup_dma_queue($p18, $p23, 1);
    call {:si_unique_call 3560} {:cexpr "cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_16441;

  corral_source_split_16441:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16442;

  corral_source_split_16442:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_16443;

  corral_source_split_16443:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i9);
    goto corral_source_split_16444;

  corral_source_split_16444:
    assume {:verifier.code 0} true;
    goto corral_source_split_16445;

  corral_source_split_16445:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 712)), $mul.ref(80, 1));
    goto corral_source_split_16446;

  corral_source_split_16446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} spin_unlock_bh($p29);
    goto corral_source_split_16447;

  corral_source_split_16447:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16448;

  corral_source_split_16448:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_16449;

  corral_source_split_16449:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i9);
    goto corral_source_split_16450;

  corral_source_split_16450:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 712));
    goto corral_source_split_16451;

  corral_source_split_16451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} $i34 := rsxx_dma_cancel($p33);
    call {:si_unique_call 3563} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_16452;

  corral_source_split_16452:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $i24);
    call {:si_unique_call 3564} {:cexpr "cnt"} boogie_si_record_i32($i35);
    goto corral_source_split_16453;

  corral_source_split_16453:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_16454;

  corral_source_split_16454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i9, 1);
    call {:si_unique_call 3566} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_16468;

  corral_source_split_16468:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p6);
    goto corral_source_split_16469;

  corral_source_split_16469:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, $i46);
    goto corral_source_split_16470;

  corral_source_split_16470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    goto corral_source_split_16472;

  corral_source_split_16472:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb9_dummy;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_16456;

  corral_source_split_16456:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16457;

  corral_source_split_16457:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_16458;

  corral_source_split_16458:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16459;

  corral_source_split_16459:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16460;

  corral_source_split_16460:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_16461;

  corral_source_split_16461:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i9);
    goto corral_source_split_16462;

  corral_source_split_16462:
    assume {:verifier.code 0} true;
    goto corral_source_split_16463;

  corral_source_split_16463:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 712)), $mul.ref(8, 1));
    goto corral_source_split_16464;

  corral_source_split_16464:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_16465;

  corral_source_split_16465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} _dev_info.ref.ref.i32.i32($p39, .str.130, $i35, $i45);
    goto corral_source_split_16466;

  corral_source_split_16466:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16424;
}



const rsxx_eeh_frozen: ref;

axiom rsxx_eeh_frozen == $sub.ref(0, 665361);

procedure rsxx_eeh_frozen($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.12, $M.14, $CurrAddr;



implementation rsxx_eeh_frozen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i11: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16474;

  corral_source_split_16474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_16475;

  corral_source_split_16475:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_16476;

  corral_source_split_16476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16477;

  corral_source_split_16477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} dev_warn.ref.ref($p3, .str.132);
    goto corral_source_split_16478;

  corral_source_split_16478:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(12, 1));
    goto corral_source_split_16479;

  corral_source_split_16479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_16480;

  corral_source_split_16480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} rsxx_mask_interrupts($p2);
    call {:si_unique_call 3570} devirtbounce.9(0);
    goto corral_source_split_16481;

  corral_source_split_16481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} pci_disable_device($p0);
    goto corral_source_split_16482;

  corral_source_split_16482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} $i5 := rsxx_eeh_save_issued_dmas($p2);
    call {:si_unique_call 3573} {:cexpr "st"} boogie_si_record_i32($i5);
    goto corral_source_split_16483;

  corral_source_split_16483:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_16484;

  corral_source_split_16484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} rsxx_eeh_save_issued_creg($p2);
    goto corral_source_split_16490;

  corral_source_split_16490:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16491;

  corral_source_split_16491:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_16492;

  corral_source_split_16492:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_16493;

  corral_source_split_16493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16488;

  corral_source_split_16488:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_16495;

  corral_source_split_16495:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $i14, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $p24, $i25, $p28, $p29, $p30, $p31, $i32, $p35, $i36, $p37, $p38, $i39, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $i50, $p53, $p54, $p55, $p56, $i57, $p60, $i61, $i62, $i63, $i64, $i11 := rsxx_eeh_frozen_loop_$bb8($p2, $p8, $p12, $p13, $i14, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $p24, $i25, $p28, $p29, $p30, $p31, $i32, $p35, $i36, $p37, $p38, $i39, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $i50, $p53, $p54, $p55, $p56, $i57, $p60, $i61, $i62, $i63, $i64, $i11);
    goto $bb8_last;

  corral_source_split_16497:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16499;

  corral_source_split_16499:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_16500;

  corral_source_split_16500:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_16501;

  corral_source_split_16501:
    assume {:verifier.code 0} true;
    goto corral_source_split_16502;

  corral_source_split_16502:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p13, $mul.ref($i14, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16503;

  corral_source_split_16503:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_16504;

  corral_source_split_16504:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_16505;

  corral_source_split_16505:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_16506;

  corral_source_split_16506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16525;

  corral_source_split_16525:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_16526;

  corral_source_split_16526:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i11);
    goto corral_source_split_16527;

  corral_source_split_16527:
    assume {:verifier.code 0} true;
    goto corral_source_split_16528;

  corral_source_split_16528:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p38, $mul.ref($i39, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16529;

  corral_source_split_16529:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_16530;

  corral_source_split_16530:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_16531;

  corral_source_split_16531:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_16532;

  corral_source_split_16532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i11, 1);
    call {:si_unique_call 3577} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_16551;

  corral_source_split_16551:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p8);
    goto corral_source_split_16552;

  corral_source_split_16552:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, $i62);
    goto corral_source_split_16553;

  corral_source_split_16553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    goto corral_source_split_16555;

  corral_source_split_16555:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i62;
    goto $bb16_dummy;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_16534;

  corral_source_split_16534:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16535;

  corral_source_split_16535:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_16536;

  corral_source_split_16536:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16537;

  corral_source_split_16537:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_16538;

  corral_source_split_16538:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i11);
    goto corral_source_split_16539;

  corral_source_split_16539:
    assume {:verifier.code 0} true;
    goto corral_source_split_16540;

  corral_source_split_16540:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p49, $mul.ref($i50, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16541;

  corral_source_split_16541:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_16542;

  corral_source_split_16542:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16543;

  corral_source_split_16543:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_16544;

  corral_source_split_16544:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i11);
    goto corral_source_split_16545;

  corral_source_split_16545:
    assume {:verifier.code 0} true;
    goto corral_source_split_16546;

  corral_source_split_16546:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p56, $mul.ref($i57, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_16547;

  corral_source_split_16547:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_16548;

  corral_source_split_16548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} pci_free_consistent($p47, 4096, $p54, $i61);
    goto corral_source_split_16549;

  corral_source_split_16549:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_16508;

  corral_source_split_16508:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16509;

  corral_source_split_16509:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_16510;

  corral_source_split_16510:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16511;

  corral_source_split_16511:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_16512;

  corral_source_split_16512:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i11);
    goto corral_source_split_16513;

  corral_source_split_16513:
    assume {:verifier.code 0} true;
    goto corral_source_split_16514;

  corral_source_split_16514:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p24, $mul.ref($i25, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16515;

  corral_source_split_16515:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_16516;

  corral_source_split_16516:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16517;

  corral_source_split_16517:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_16518;

  corral_source_split_16518:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i11);
    goto corral_source_split_16519;

  corral_source_split_16519:
    assume {:verifier.code 0} true;
    goto corral_source_split_16520;

  corral_source_split_16520:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p31, $mul.ref($i32, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_16521;

  corral_source_split_16521:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_16522;

  corral_source_split_16522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} pci_free_consistent($p22, 4096, $p29, $i36);
    goto corral_source_split_16523;

  corral_source_split_16523:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_16486;

  corral_source_split_16486:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16497;
}



const rsxx_mask_interrupts: ref;

axiom rsxx_mask_interrupts == $sub.ref(0, 666393);

procedure rsxx_mask_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_mask_interrupts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16557;

  corral_source_split_16557:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(96, 1));
    goto corral_source_split_16558;

  corral_source_split_16558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_16559;

  corral_source_split_16559:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_16560;

  corral_source_split_16560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_16561;

  corral_source_split_16561:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_eeh_save_issued_dmas: ref;

axiom rsxx_eeh_save_issued_dmas == $sub.ref(0, 667425);

procedure rsxx_eeh_save_issued_dmas($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rsxx_eeh_save_issued_dmas($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i27: i32;
  var $i28: i32;
  var $i104: i32;
  var $i105: i1;
  var $i16: i32;
  var $i17: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i13: i32;
  var $p152: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16563;

  corral_source_split_16563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16564;

  corral_source_split_16564:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_16565;

  corral_source_split_16565:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_16566;

  corral_source_split_16566:
    assume {:verifier.code 0} true;
    $i4 := $mul.i64($i3, 16);
    goto corral_source_split_16567;

  corral_source_split_16567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} $p5 := kzalloc($i4, 208);
    goto corral_source_split_16568;

  corral_source_split_16568:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_16569;

  corral_source_split_16569:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_16570;

  corral_source_split_16570:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_16571;

  corral_source_split_16571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_16577;

  corral_source_split_16577:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_16578;

  corral_source_split_16578:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_16579;

  corral_source_split_16579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p6);
    goto corral_source_split_16745;

  corral_source_split_16745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} kfree($p152);
    goto corral_source_split_16746;

  corral_source_split_16746:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16575;

  corral_source_split_16575:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_16581;

  corral_source_split_16581:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    call $i14, $p15, $p18, $p19, $i20, $p22, $p23, $p24, $i25, $i26, $p29, $i30, $i31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $p41, $p42, $i43, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $p56, $i57, $i58, $p59, $p60, $i61, $p64, $p65, $p66, $i67, $p70, $i71, $i72, $p73, $p74, $i75, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $p97, $p98, $i99, $p101, $p102, $i103, $i27, $i28, $i104, $i105, $i16, $i17, $i106, $p107, $p108, $i109, $p111, $i112, $p113, $p114, $p115, $i116, $p118, $p119, $p120, $i121, $p124, $p125, $p126, $i127, $p130, $i131, $i132, $p133, $p134, $i135, $p138, $p139, $p140, $i141, $p143, $p144, $p145, $i146, $p148, $i149, $i150, $i151, $i13 := rsxx_eeh_save_issued_dmas_loop_$bb8($p0, $p6, $p10, $i14, $p15, $p18, $p19, $i20, $p22, $p23, $p24, $i25, $i26, $p29, $i30, $i31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $p41, $p42, $i43, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $p56, $i57, $i58, $p59, $p60, $i61, $p64, $p65, $p66, $i67, $p70, $i71, $i72, $p73, $p74, $i75, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $p97, $p98, $i99, $p101, $p102, $i103, $i27, $i28, $i104, $i105, $i16, $i17, $i106, $p107, $p108, $i109, $p111, $i112, $p113, $p114, $p115, $i116, $p118, $p119, $p120, $i121, $p124, $p125, $p126, $i127, $p130, $i131, $i132, $p133, $p134, $i135, $p138, $p139, $p140, $i141, $p143, $p144, $p145, $i146, $p148, $i149, $i150, $i151, $i13);
    goto $bb8_last;

  corral_source_split_16583:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_16585;

  corral_source_split_16585:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p6, $mul.ref($i14, 16));
    goto corral_source_split_16586;

  corral_source_split_16586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} INIT_LIST_HEAD($p15);
    goto corral_source_split_16587;

  corral_source_split_16587:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, 0;
    goto $bb10;

  $bb10:
    call $p18, $p19, $i20, $p22, $p23, $p24, $i25, $i26, $p29, $i30, $i31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $p41, $p42, $i43, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $p56, $i57, $i58, $p59, $p60, $i61, $p64, $p65, $p66, $i67, $p70, $i71, $i72, $p73, $p74, $i75, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $p97, $p98, $i99, $p101, $p102, $i103, $i27, $i28, $i104, $i105, $i16, $i17, $i106 := rsxx_eeh_save_issued_dmas_loop_$bb10($p0, $p6, $p18, $p19, $i20, $p22, $p23, $p24, $i25, $i26, $p29, $i30, $i31, $i32, $p33, $p34, $i35, $p38, $i39, $i40, $p41, $p42, $i43, $p46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $p56, $i57, $i58, $p59, $p60, $i61, $p64, $p65, $p66, $i67, $p70, $i71, $i72, $p73, $p74, $i75, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $p94, $i95, $p96, $p97, $p98, $i99, $p101, $p102, $i103, $i27, $i28, $i104, $i105, $i16, $i17, $i106, $i13);
    goto $bb10_last;

  corral_source_split_16589:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16591;

  corral_source_split_16591:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_16592;

  corral_source_split_16592:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i13);
    goto corral_source_split_16593;

  corral_source_split_16593:
    assume {:verifier.code 0} true;
    goto corral_source_split_16594;

  corral_source_split_16594:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 712)), $mul.ref(472, 1));
    goto corral_source_split_16595;

  corral_source_split_16595:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_16596;

  corral_source_split_16596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} $p24 := get_tracker_dma($p23, $i17);
    goto corral_source_split_16597;

  corral_source_split_16597:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_16598;

  corral_source_split_16598:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_16599;

  corral_source_split_16599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16607;

  corral_source_split_16607:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_16608;

  corral_source_split_16608:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_16609;

  corral_source_split_16609:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 128);
    goto corral_source_split_16610;

  corral_source_split_16610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    goto corral_source_split_16627;

  corral_source_split_16627:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16628;

  corral_source_split_16628:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_16629;

  corral_source_split_16629:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_16630;

  corral_source_split_16630:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 112);
    goto corral_source_split_16631;

  corral_source_split_16631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    goto corral_source_split_16653;

  corral_source_split_16653:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16654;

  corral_source_split_16654:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_16655;

  corral_source_split_16655:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i13);
    goto corral_source_split_16656;

  corral_source_split_16656:
    assume {:verifier.code 0} true;
    goto corral_source_split_16657;

  corral_source_split_16657:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p66, $mul.ref($i67, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16658;

  corral_source_split_16658:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_16659;

  corral_source_split_16659:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, 1);
    goto corral_source_split_16660;

  corral_source_split_16660:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16661;

  corral_source_split_16661:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_16662;

  corral_source_split_16662:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i13);
    goto corral_source_split_16663;

  corral_source_split_16663:
    assume {:verifier.code 0} true;
    goto corral_source_split_16664;

  corral_source_split_16664:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p74, $mul.ref($i75, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16665;

  corral_source_split_16665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i72);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16633;

  corral_source_split_16633:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_16634;

  corral_source_split_16634:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_16635;

  corral_source_split_16635:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 112);
    goto corral_source_split_16636;

  corral_source_split_16636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_16681;

  corral_source_split_16681:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i13);
    goto corral_source_split_16682;

  corral_source_split_16682:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p6, $mul.ref($i95, 16));
    goto corral_source_split_16683;

  corral_source_split_16683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} list_add_tail($p94, $p96);
    goto corral_source_split_16684;

  corral_source_split_16684:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16685;

  corral_source_split_16685:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_16686;

  corral_source_split_16686:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i13);
    goto corral_source_split_16687;

  corral_source_split_16687:
    assume {:verifier.code 0} true;
    goto corral_source_split_16688;

  corral_source_split_16688:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p98, $mul.ref($i99, 712)), $mul.ref(472, 1));
    goto corral_source_split_16689;

  corral_source_split_16689:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_16690;

  corral_source_split_16690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} push_tracker($p102, $i17);
    goto corral_source_split_16691;

  corral_source_split_16691:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i16, 1);
    call {:si_unique_call 3587} {:cexpr "cnt"} boogie_si_record_i32($i103);
    goto corral_source_split_16692;

  corral_source_split_16692:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i17, $i103;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16603;

  corral_source_split_16603:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i27, 1);
    call {:si_unique_call 3581} {:cexpr "j"} boogie_si_record_i32($i104);
    goto corral_source_split_16604;

  corral_source_split_16604:
    assume {:verifier.code 0} true;
    $i105 := $sle.i32($i104, 254);
    goto corral_source_split_16605;

  corral_source_split_16605:
    assume {:verifier.code 0} true;
    $i106 := $i28;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16694;

  corral_source_split_16694:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_16695;

  corral_source_split_16695:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i13);
    goto corral_source_split_16696;

  corral_source_split_16696:
    assume {:verifier.code 0} true;
    goto corral_source_split_16697;

  corral_source_split_16697:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p108, $mul.ref($i109, 712)), $mul.ref(80, 1));
    goto corral_source_split_16698;

  corral_source_split_16698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} spin_lock_bh($p111);
    goto corral_source_split_16699;

  corral_source_split_16699:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i13);
    goto corral_source_split_16700;

  corral_source_split_16700:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p6, $mul.ref($i112, 16));
    goto corral_source_split_16701;

  corral_source_split_16701:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16702;

  corral_source_split_16702:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_16703;

  corral_source_split_16703:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i13);
    goto corral_source_split_16704;

  corral_source_split_16704:
    assume {:verifier.code 0} true;
    goto corral_source_split_16705;

  corral_source_split_16705:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p115, $mul.ref($i116, 712)), $mul.ref(152, 1));
    goto corral_source_split_16706;

  corral_source_split_16706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} list_splice($p113, $p118);
    goto corral_source_split_16707;

  corral_source_split_16707:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16708;

  corral_source_split_16708:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_16709;

  corral_source_split_16709:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i13);
    goto corral_source_split_16710;

  corral_source_split_16710:
    assume {:verifier.code 0} true;
    goto corral_source_split_16711;

  corral_source_split_16711:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p120, $mul.ref($i121, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_16712;

  corral_source_split_16712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} atomic_sub($i106, $p124);
    goto corral_source_split_16713;

  corral_source_split_16713:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16714;

  corral_source_split_16714:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_16715;

  corral_source_split_16715:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i13);
    goto corral_source_split_16716;

  corral_source_split_16716:
    assume {:verifier.code 0} true;
    goto corral_source_split_16717;

  corral_source_split_16717:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p126, $mul.ref($i127, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_16718;

  corral_source_split_16718:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_16719;

  corral_source_split_16719:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i131, $i106);
    goto corral_source_split_16720;

  corral_source_split_16720:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16721;

  corral_source_split_16721:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_16722;

  corral_source_split_16722:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i13);
    goto corral_source_split_16723;

  corral_source_split_16723:
    assume {:verifier.code 0} true;
    goto corral_source_split_16724;

  corral_source_split_16724:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p134, $mul.ref($i135, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_16725;

  corral_source_split_16725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i132);
    goto corral_source_split_16726;

  corral_source_split_16726:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16727;

  corral_source_split_16727:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_16728;

  corral_source_split_16728:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i13);
    goto corral_source_split_16729;

  corral_source_split_16729:
    assume {:verifier.code 0} true;
    goto corral_source_split_16730;

  corral_source_split_16730:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p140, $mul.ref($i141, 712)), $mul.ref(72, 1));
    goto corral_source_split_16731;

  corral_source_split_16731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, 0);
    goto corral_source_split_16732;

  corral_source_split_16732:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16733;

  corral_source_split_16733:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_16734;

  corral_source_split_16734:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i13);
    goto corral_source_split_16735;

  corral_source_split_16735:
    assume {:verifier.code 0} true;
    goto corral_source_split_16736;

  corral_source_split_16736:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p145, $mul.ref($i146, 712)), $mul.ref(80, 1));
    goto corral_source_split_16737;

  corral_source_split_16737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} spin_unlock_bh($p148);
    goto corral_source_split_16738;

  corral_source_split_16738:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i13, 1);
    call {:si_unique_call 3592} {:cexpr "i"} boogie_si_record_i32($i149);
    goto corral_source_split_16739;

  corral_source_split_16739:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p10);
    goto corral_source_split_16740;

  corral_source_split_16740:
    assume {:verifier.code 0} true;
    $i151 := $sgt.i32($i150, $i149);
    goto corral_source_split_16741;

  corral_source_split_16741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i151 == 1);
    goto corral_source_split_16743;

  corral_source_split_16743:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb28:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i149;
    goto $bb28_dummy;

  $bb25:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i28, $i104;
    goto $bb25_dummy;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_16667;

  corral_source_split_16667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} $i83 := get_dma_size($p24);
    call {:si_unique_call 3583} {:cexpr "tmp___0"} boogie_si_record_i32($i83);
    goto corral_source_split_16668;

  corral_source_split_16668:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16669;

  corral_source_split_16669:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_16670;

  corral_source_split_16670:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_16671;

  corral_source_split_16671:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_16672;

  corral_source_split_16672:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i83);
    goto corral_source_split_16673;

  corral_source_split_16673:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16674;

  corral_source_split_16674:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_16675;

  corral_source_split_16675:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_16676;

  corral_source_split_16676:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 128);
    goto corral_source_split_16677;

  corral_source_split_16677:
    assume {:verifier.code 0} true;
    $i93 := (if $i92 == 1 then 1 else 2);
    goto corral_source_split_16678;

  corral_source_split_16678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} pci_unmap_page($p85, $i87, $i88, $i93);
    goto corral_source_split_16679;

  corral_source_split_16679:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_16638;

  corral_source_split_16638:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16639;

  corral_source_split_16639:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_16640;

  corral_source_split_16640:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i13);
    goto corral_source_split_16641;

  corral_source_split_16641:
    assume {:verifier.code 0} true;
    goto corral_source_split_16642;

  corral_source_split_16642:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p52, $mul.ref($i53, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16643;

  corral_source_split_16643:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_16644;

  corral_source_split_16644:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 1);
    goto corral_source_split_16645;

  corral_source_split_16645:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16646;

  corral_source_split_16646:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_16647;

  corral_source_split_16647:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i13);
    goto corral_source_split_16648;

  corral_source_split_16648:
    assume {:verifier.code 0} true;
    goto corral_source_split_16649;

  corral_source_split_16649:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p60, $mul.ref($i61, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16650;

  corral_source_split_16650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i58);
    goto corral_source_split_16651;

  corral_source_split_16651:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_16612;

  corral_source_split_16612:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16613;

  corral_source_split_16613:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_16614;

  corral_source_split_16614:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i13);
    goto corral_source_split_16615;

  corral_source_split_16615:
    assume {:verifier.code 0} true;
    goto corral_source_split_16616;

  corral_source_split_16616:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p34, $mul.ref($i35, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16617;

  corral_source_split_16617:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_16618;

  corral_source_split_16618:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_16619;

  corral_source_split_16619:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16620;

  corral_source_split_16620:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_16621;

  corral_source_split_16621:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i13);
    goto corral_source_split_16622;

  corral_source_split_16622:
    assume {:verifier.code 0} true;
    goto corral_source_split_16623;

  corral_source_split_16623:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p42, $mul.ref($i43, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16624;

  corral_source_split_16624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i40);
    goto corral_source_split_16625;

  corral_source_split_16625:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_16601;

  corral_source_split_16601:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i17, $i16;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_16573;

  corral_source_split_16573:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16589;

  $bb28_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_16583;
}



const rsxx_eeh_save_issued_creg: ref;

axiom rsxx_eeh_save_issued_creg == $sub.ref(0, 668457);

procedure rsxx_eeh_save_issued_creg($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.10, $M.12, $M.14;



implementation rsxx_eeh_save_issued_creg($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_667: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16748;

  corral_source_split_16748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_16749;

  corral_source_split_16749:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_16750;

  corral_source_split_16750:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(80, 1));
    goto corral_source_split_16751;

  corral_source_split_16751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_16752;

  corral_source_split_16752:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_16753;

  corral_source_split_16753:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_16754;

  corral_source_split_16754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_16756;

  corral_source_split_16756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(208, 1));
    goto corral_source_split_16757;

  corral_source_split_16757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} vslice_dummy_var_667 := ldv_del_timer_sync_94($p9);
    goto corral_source_split_16758;

  corral_source_split_16758:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_16759;

  corral_source_split_16759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} spin_lock_bh($p12);
    goto corral_source_split_16760;

  corral_source_split_16760:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_16761;

  corral_source_split_16761:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(176, 1));
    goto corral_source_split_16762;

  corral_source_split_16762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} list_add($p13, $p15);
    goto corral_source_split_16763;

  corral_source_split_16763:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_16764;

  corral_source_split_16764:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_16765;

  corral_source_split_16765:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_16766;

  corral_source_split_16766:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_16767;

  corral_source_split_16767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_16768;

  corral_source_split_16768:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(72, 1));
    goto corral_source_split_16769;

  corral_source_split_16769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_16770;

  corral_source_split_16770:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_16771;

  corral_source_split_16771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} spin_unlock_bh($p25);
    goto corral_source_split_16772;

  corral_source_split_16772:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_del_timer_sync_94: ref;

axiom ldv_del_timer_sync_94 == $sub.ref(0, 669489);

procedure ldv_del_timer_sync_94($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_del_timer_sync_94($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16774;

  corral_source_split_16774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} $i1 := del_timer_sync($p0);
    call {:si_unique_call 3599} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_16775;

  corral_source_split_16775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} disable_suitable_timer_6($p0);
    goto corral_source_split_16776;

  corral_source_split_16776:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_splice: ref;

axiom list_splice == $sub.ref(0, 670521);

procedure list_splice($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16778;

  corral_source_split_16778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} $i2 := list_empty($p0);
    call {:si_unique_call 3602} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_16779;

  corral_source_split_16779:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_16780;

  corral_source_split_16780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16782;

  corral_source_split_16782:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_16783;

  corral_source_split_16783:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_16784;

  corral_source_split_16784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} __list_splice($p0, $p1, $p5);
    goto corral_source_split_16785;

  corral_source_split_16785:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 671553);

procedure atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_sub($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} {:cexpr "atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_16787;

  corral_source_split_16787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 3605} devirtbounce.10(0, $p2, $i0, $p2);
    goto corral_source_split_16788;

  corral_source_split_16788:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_blkdev_ioctl: ref;

axiom rsxx_blkdev_ioctl == $sub.ref(0, 672585);

procedure rsxx_blkdev_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_blkdev_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} {:cexpr "rsxx_blkdev_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 3607} {:cexpr "rsxx_blkdev_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 3608} {:cexpr "rsxx_blkdev_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_16790;

  corral_source_split_16790:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_16791;

  corral_source_split_16791:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_16792;

  corral_source_split_16792:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_16793;

  corral_source_split_16793:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.59, $p6);
    goto corral_source_split_16794;

  corral_source_split_16794:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, $sub.i32(0, 1070566879));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, $sub.i32(0, 1070566879));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 25);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_16804;

  corral_source_split_16804:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_16796;

  corral_source_split_16796:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i3);
    goto corral_source_split_16797;

  corral_source_split_16797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} $i16 := rsxx_reg_access($p8, $p15, 0);
    goto SeqInstr_1948, SeqInstr_1949;

  SeqInstr_1949:
    assume assertsPassed;
    goto SeqInstr_1950;

  SeqInstr_1950:
    call {:si_unique_call 3610} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_16798;

  corral_source_split_16798:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb9;

  SeqInstr_1948:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, $sub.i32(0, 1070566880));
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_16800;

  corral_source_split_16800:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i3);
    goto corral_source_split_16801;

  corral_source_split_16801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} $i13 := rsxx_reg_access($p8, $p12, 1);
    goto SeqInstr_1951, SeqInstr_1952;

  SeqInstr_1952:
    assume assertsPassed;
    goto SeqInstr_1953;

  SeqInstr_1953:
    call {:si_unique_call 3612} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_16802;

  corral_source_split_16802:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb9;

  SeqInstr_1951:
    assume !assertsPassed;
    return;
}



const rsxx_getgeo: ref;

axiom rsxx_getgeo == $sub.ref(0, 673617);

procedure rsxx_getgeo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rsxx_getgeo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16806;

  corral_source_split_16806:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_16807;

  corral_source_split_16807:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_16808;

  corral_source_split_16808:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_16809;

  corral_source_split_16809:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.59, $p4);
    goto corral_source_split_16810;

  corral_source_split_16810:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_16811;

  corral_source_split_16811:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_16812;

  corral_source_split_16812:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_16813;

  corral_source_split_16813:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i8, 9);
    call {:si_unique_call 3613} {:cexpr "blocks"} boogie_si_record_i64($i9);
    goto corral_source_split_16814;

  corral_source_split_16814:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 1184)), $mul.ref(912, 1));
    goto corral_source_split_16815;

  corral_source_split_16815:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_16816;

  corral_source_split_16816:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_16817;

  corral_source_split_16817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_16837;

  corral_source_split_16837:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_16838;

  corral_source_split_16838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_16839;

  corral_source_split_16839:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_16840;

  corral_source_split_16840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_16841;

  corral_source_split_16841:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_16842;

  corral_source_split_16842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_16819;

  corral_source_split_16819:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_16820;

  corral_source_split_16820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 64);
    goto corral_source_split_16821;

  corral_source_split_16821:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_16822;

  corral_source_split_16822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 16);
    goto corral_source_split_16823;

  corral_source_split_16823:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_16824;

  corral_source_split_16824:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_16825;

  corral_source_split_16825:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_16826;

  corral_source_split_16826:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_16827;

  corral_source_split_16827:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_16828;

  corral_source_split_16828:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_16829;

  corral_source_split_16829:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i17, $i20);
    call {:si_unique_call 3614} {:cexpr "__base"} boogie_si_record_i32($i21);
    goto corral_source_split_16830;

  corral_source_split_16830:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_16831;

  corral_source_split_16831:
    assume {:verifier.code 0} true;
    $i23 := $udiv.i64($i9, $i22);
    call {:si_unique_call 3615} {:cexpr "blocks"} boogie_si_record_i64($i23);
    goto corral_source_split_16832;

  corral_source_split_16832:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i23);
    goto corral_source_split_16833;

  corral_source_split_16833:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_16834;

  corral_source_split_16834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_16835;

  corral_source_split_16835:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rsxx_reg_access: ref;

axiom rsxx_reg_access == $sub.ref(0, 674649);

procedure rsxx_reg_access($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_reg_access($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    call {:si_unique_call 3617} {:cexpr "rsxx_reg_access:arg:read"} boogie_si_record_i32($i2);
    goto corral_source_split_16844;

  corral_source_split_16844:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_16845;

  corral_source_split_16845:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_16846;

  corral_source_split_16846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} $i6 := copy_from_user($p4, $p5, 48);
    call {:si_unique_call 3619} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_16847;

  corral_source_split_16847:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 3620} {:cexpr "st"} boogie_si_record_i32($i7);
    goto corral_source_split_16848;

  corral_source_split_16848:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_16849;

  corral_source_split_16849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_16855;

  corral_source_split_16855:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_16856;

  corral_source_split_16856:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 32);
    goto corral_source_split_16857;

  corral_source_split_16857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} $i13 := issue_reg_cmd($p0, $p3, $i2);
    goto SeqInstr_1954, SeqInstr_1955;

  SeqInstr_1955:
    assume assertsPassed;
    goto SeqInstr_1956;

  SeqInstr_1956:
    call {:si_unique_call 3622} {:cexpr "st"} boogie_si_record_i32($i13);
    goto corral_source_split_16861;

  corral_source_split_16861:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_16862;

  corral_source_split_16862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} __might_fault(.str.18, 695);
    goto corral_source_split_16866;

  corral_source_split_16866:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_16867;

  corral_source_split_16867:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 3624} {:cexpr "__pu_val"} boogie_si_record_i32($i16);
    goto corral_source_split_16868;

  corral_source_split_16868:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    call {:si_unique_call 3625} $i18 := devirtbounce.13(0, $i16, $p17);
    call {:si_unique_call 3626} {:cexpr "__ret_pu"} boogie_si_record_i32($i18);
    goto corral_source_split_16869;

  corral_source_split_16869:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_16871;

  corral_source_split_16871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_16875;

  corral_source_split_16875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16853;

  corral_source_split_16853:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_16877;

  corral_source_split_16877:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_16878;

  corral_source_split_16878:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_16879;

  corral_source_split_16879:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_16880;

  corral_source_split_16880:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_16881;

  corral_source_split_16881:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_16882;

  corral_source_split_16882:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_16883;

  corral_source_split_16883:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_16884;

  corral_source_split_16884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} $i28 := copy_to_user($p22, $p24, $i27);
    call {:si_unique_call 3628} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_16885;

  corral_source_split_16885:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    call {:si_unique_call 3629} {:cexpr "st"} boogie_si_record_i32($i29);
    goto corral_source_split_16886;

  corral_source_split_16886:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_16887;

  corral_source_split_16887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_16889;

  corral_source_split_16889:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_16873;

  corral_source_split_16873:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_16864;

  corral_source_split_16864:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  SeqInstr_1954:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_16859;

  corral_source_split_16859:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_16851;

  corral_source_split_16851:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;
}



const issue_reg_cmd: ref;

axiom issue_reg_cmd == $sub.ref(0, 675681);

procedure issue_reg_cmd($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation issue_reg_cmd($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} {:cexpr "issue_reg_cmd:arg:read"} boogie_si_record_i32($i2);
    goto corral_source_split_16891;

  corral_source_split_16891:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_16892;

  corral_source_split_16892:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then 224 else 192);
    call {:si_unique_call 3631} {:cexpr "op"} boogie_si_record_i32($i4);
    goto corral_source_split_16893;

  corral_source_split_16893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_16894;

  corral_source_split_16894:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_16895;

  corral_source_split_16895:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_16896;

  corral_source_split_16896:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_16897;

  corral_source_split_16897:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_16898;

  corral_source_split_16898:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_16899;

  corral_source_split_16899:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_16900;

  corral_source_split_16900:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_16901;

  corral_source_split_16901:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_16902;

  corral_source_split_16902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} $i14 := __issue_creg_rw($p0, $i4, $i6, $i8, $p10, $i12, $p13);
    goto SeqInstr_1957, SeqInstr_1958;

  SeqInstr_1958:
    assume assertsPassed;
    goto SeqInstr_1959;

  SeqInstr_1959:
    call {:si_unique_call 3633} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_16903;

  corral_source_split_16903:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_1957:
    assume !assertsPassed;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 676713);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_16905;

  corral_source_split_16905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} $p1 := calloc(1, $i0);
    goto corral_source_split_16906;

  corral_source_split_16906:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_16907;

  corral_source_split_16907:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_16908;

  corral_source_split_16908:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_16909;

  corral_source_split_16909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3636} __VERIFIER_assume($i4);
    goto corral_source_split_16910;

  corral_source_split_16910:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 677745);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.60;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 3638} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_16912;

  corral_source_split_16912:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_16913;

  corral_source_split_16913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.60;
    call {:si_unique_call 3639} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.60 := cmdloc_dummy_var_31;
    goto corral_source_split_16914;

  corral_source_split_16914:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_file_operations_12: ref;

axiom ldv_file_operations_12 == $sub.ref(0, 678777);

procedure ldv_file_operations_12();
  free requires assertsPassed;
  modifies $M.61, $M.62, $M.0, $CurrAddr;



implementation ldv_file_operations_12()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16916;

  corral_source_split_16916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_16917;

  corral_source_split_16917:
    assume {:verifier.code 0} true;
    goto corral_source_split_16918;

  corral_source_split_16918:
    assume {:verifier.code 0} true;
    $M.61 := $p0;
    goto corral_source_split_16919;

  corral_source_split_16919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_16920;

  corral_source_split_16920:
    assume {:verifier.code 0} true;
    goto corral_source_split_16921;

  corral_source_split_16921:
    assume {:verifier.code 0} true;
    $M.62 := $p2;
    goto corral_source_split_16922;

  corral_source_split_16922:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 679809);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.63, $M.65, $M.66, $M.67, $M.0, $M.49, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16924;

  corral_source_split_16924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3642} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3644} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} ldv_stop();
    goto corral_source_split_16978;

  corral_source_split_16978:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_16930;

  corral_source_split_16930:
    assume {:verifier.code 0} true;
    $i21 := $M.67;
    goto corral_source_split_16931;

  corral_source_split_16931:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_16932;

  corral_source_split_16932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_16974;

  corral_source_split_16974:
    assume {:verifier.code 0} true;
    $i23 := $M.67;
    goto corral_source_split_16975;

  corral_source_split_16975:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_16976;

  corral_source_split_16976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.67 := 4;
    call {:si_unique_call 3654} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_16969;

  corral_source_split_16969:
    assume {:verifier.code 0} true;
    $p25 := $M.64;
    goto corral_source_split_16970;

  corral_source_split_16970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} card_event_handler($p25);
    goto SeqInstr_1969, SeqInstr_1970;

  SeqInstr_1970:
    assume assertsPassed;
    goto SeqInstr_1971;

  SeqInstr_1971:
    goto corral_source_split_16971;

  corral_source_split_16971:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 3656} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_16972;

  corral_source_split_16972:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_1969:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_16926;

  corral_source_split_16926:
    assume {:verifier.code 0} true;
    $i16 := $M.66;
    goto corral_source_split_16927;

  corral_source_split_16927:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_16928;

  corral_source_split_16928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_16965;

  corral_source_split_16965:
    assume {:verifier.code 0} true;
    $i18 := $M.66;
    goto corral_source_split_16966;

  corral_source_split_16966:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_16967;

  corral_source_split_16967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.66 := 4;
    call {:si_unique_call 3651} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_16960;

  corral_source_split_16960:
    assume {:verifier.code 0} true;
    $p20 := $M.64;
    goto corral_source_split_16961;

  corral_source_split_16961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} card_event_handler($p20);
    goto SeqInstr_1966, SeqInstr_1967;

  SeqInstr_1967:
    assume assertsPassed;
    goto SeqInstr_1968;

  SeqInstr_1968:
    goto corral_source_split_16962;

  corral_source_split_16962:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 3653} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_16963;

  corral_source_split_16963:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1966:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_16934;

  corral_source_split_16934:
    assume {:verifier.code 0} true;
    $i11 := $M.65;
    goto corral_source_split_16935;

  corral_source_split_16935:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_16936;

  corral_source_split_16936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_16956;

  corral_source_split_16956:
    assume {:verifier.code 0} true;
    $i13 := $M.65;
    goto corral_source_split_16957;

  corral_source_split_16957:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_16958;

  corral_source_split_16958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.65 := 4;
    call {:si_unique_call 3648} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_16951;

  corral_source_split_16951:
    assume {:verifier.code 0} true;
    $p15 := $M.64;
    goto corral_source_split_16952;

  corral_source_split_16952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} card_event_handler($p15);
    goto SeqInstr_1963, SeqInstr_1964;

  SeqInstr_1964:
    assume assertsPassed;
    goto SeqInstr_1965;

  SeqInstr_1965:
    goto corral_source_split_16953;

  corral_source_split_16953:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 3650} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_16954;

  corral_source_split_16954:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1963:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_16938;

  corral_source_split_16938:
    assume {:verifier.code 0} true;
    $i6 := $M.63;
    goto corral_source_split_16939;

  corral_source_split_16939:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_16940;

  corral_source_split_16940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_16947;

  corral_source_split_16947:
    assume {:verifier.code 0} true;
    $i8 := $M.63;
    goto corral_source_split_16948;

  corral_source_split_16948:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_16949;

  corral_source_split_16949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.63 := 4;
    call {:si_unique_call 3645} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_16942;

  corral_source_split_16942:
    assume {:verifier.code 0} true;
    $p10 := $M.64;
    goto corral_source_split_16943;

  corral_source_split_16943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} card_event_handler($p10);
    goto SeqInstr_1960, SeqInstr_1961;

  SeqInstr_1961:
    assume assertsPassed;
    goto SeqInstr_1962;

  SeqInstr_1962:
    goto corral_source_split_16944;

  corral_source_split_16944:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 3647} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_16945;

  corral_source_split_16945:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1960:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 680841);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16980;

  corral_source_split_16980:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 681873);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.63, $M.65, $M.66, $M.67;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16982;

  corral_source_split_16982:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 3658} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_16983;

  corral_source_split_16983:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 3659} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_16984;

  corral_source_split_16984:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 3660} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_16985;

  corral_source_split_16985:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 3661} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_16986;

  corral_source_split_16986:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 682905);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.31, $M.20, $M.0, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16988;

  corral_source_split_16988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3662} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3663} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3664} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} ldv_stop();
    goto corral_source_split_17018;

  corral_source_split_17018:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_16997;

  corral_source_split_16997:
    assume {:verifier.code 0} true;
    $i18 := $M.37;
    goto corral_source_split_16998;

  corral_source_split_16998:
    assume {:verifier.code 0} true;
    $i19 := $M.38;
    goto corral_source_split_16999;

  corral_source_split_16999:
    assume {:verifier.code 0} true;
    $p20 := $M.58;
    goto corral_source_split_17000;

  corral_source_split_17000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_17001;

  corral_source_split_17001:
    assume {:verifier.code 0} true;
    $M.31 := $i21;
    call {:si_unique_call 3668} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_17002;

  corral_source_split_17002:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_16990;

  corral_source_split_16990:
    assume {:verifier.code 0} true;
    $i14 := $M.35;
    goto corral_source_split_16991;

  corral_source_split_16991:
    assume {:verifier.code 0} true;
    $i15 := $M.36;
    goto corral_source_split_16992;

  corral_source_split_16992:
    assume {:verifier.code 0} true;
    $p16 := $M.57;
    goto corral_source_split_16993;

  corral_source_split_16993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_16994;

  corral_source_split_16994:
    assume {:verifier.code 0} true;
    $M.31 := $i17;
    call {:si_unique_call 3666} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_16995;

  corral_source_split_16995:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_17004;

  corral_source_split_17004:
    assume {:verifier.code 0} true;
    $i10 := $M.33;
    goto corral_source_split_17005;

  corral_source_split_17005:
    assume {:verifier.code 0} true;
    $i11 := $M.34;
    goto corral_source_split_17006;

  corral_source_split_17006:
    assume {:verifier.code 0} true;
    $p12 := $M.56;
    goto corral_source_split_17007;

  corral_source_split_17007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_17008;

  corral_source_split_17008:
    assume {:verifier.code 0} true;
    $M.31 := $i13;
    call {:si_unique_call 3670} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_17009;

  corral_source_split_17009:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_17011;

  corral_source_split_17011:
    assume {:verifier.code 0} true;
    $i6 := $M.31;
    goto corral_source_split_17012;

  corral_source_split_17012:
    assume {:verifier.code 0} true;
    $i7 := $M.32;
    goto corral_source_split_17013;

  corral_source_split_17013:
    assume {:verifier.code 0} true;
    $p8 := $M.55;
    goto corral_source_split_17014;

  corral_source_split_17014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_17015;

  corral_source_split_17015:
    assume {:verifier.code 0} true;
    $M.31 := $i9;
    call {:si_unique_call 3672} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_17016;

  corral_source_split_17016:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 683937);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3674} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 3675} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_17020;

  corral_source_split_17020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3676} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 3678} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_17021;

  corral_source_split_17021:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_17022;

  corral_source_split_17022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_17024;

  corral_source_split_17024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3679} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 3680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 3681} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} ldv_stop();
    goto corral_source_split_17034;

  corral_source_split_17034:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_17026;

  corral_source_split_17026:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_17027;

  corral_source_split_17027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_17029;

  corral_source_split_17029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_17030;

  corral_source_split_17030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} $i8 := rsxx_isr($i1, $p2);
    call {:si_unique_call 3684} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_17031;

  corral_source_split_17031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_17032;

  corral_source_split_17032:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_initialize_pci_error_handlers_10: ref;

axiom ldv_initialize_pci_error_handlers_10 == $sub.ref(0, 684969);

procedure ldv_initialize_pci_error_handlers_10();
  free requires assertsPassed;
  modifies $M.69;



implementation ldv_initialize_pci_error_handlers_10()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17036;

  corral_source_split_17036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3687} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 3688} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_17037;

  corral_source_split_17037:
    assume {:verifier.code 0} true;
    goto corral_source_split_17038;

  corral_source_split_17038:
    assume {:verifier.code 0} true;
    $M.69 := $p0;
    goto corral_source_split_17039;

  corral_source_split_17039:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_13: ref;

axiom ldv_file_operations_13 == $sub.ref(0, 686001);

procedure ldv_file_operations_13();
  free requires assertsPassed;
  modifies $M.71, $M.0, $CurrAddr;



implementation ldv_file_operations_13()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17041;

  corral_source_split_17041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_17042;

  corral_source_split_17042:
    assume {:verifier.code 0} true;
    goto corral_source_split_17043;

  corral_source_split_17043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} $p1 := ldv_init_zalloc(504);
    goto corral_source_split_17044;

  corral_source_split_17044:
    assume {:verifier.code 0} true;
    goto corral_source_split_17045;

  corral_source_split_17045:
    assume {:verifier.code 0} true;
    $M.71 := $p1;
    goto corral_source_split_17046;

  corral_source_split_17046:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_driver_9: ref;

axiom ldv_pci_driver_9 == $sub.ref(0, 687033);

procedure ldv_pci_driver_9();
  free requires assertsPassed;
  modifies $M.72, $M.0, $CurrAddr;



implementation ldv_pci_driver_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17048;

  corral_source_split_17048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_17049;

  corral_source_split_17049:
    assume {:verifier.code 0} true;
    goto corral_source_split_17050;

  corral_source_split_17050:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_17051;

  corral_source_split_17051:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_11: ref;

axiom ldv_file_operations_11 == $sub.ref(0, 688065);

procedure ldv_file_operations_11();
  free requires assertsPassed;
  modifies $M.73, $M.74, $M.0, $CurrAddr;



implementation ldv_file_operations_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17053;

  corral_source_split_17053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_17054;

  corral_source_split_17054:
    assume {:verifier.code 0} true;
    goto corral_source_split_17055;

  corral_source_split_17055:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_17056;

  corral_source_split_17056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_17057;

  corral_source_split_17057:
    assume {:verifier.code 0} true;
    goto corral_source_split_17058;

  corral_source_split_17058:
    assume {:verifier.code 0} true;
    $M.74 := $p2;
    goto corral_source_split_17059;

  corral_source_split_17059:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 689097);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.60, $M.76, $M.79, $M.80, $M.63, $M.65, $M.66, $M.67, $M.81, $M.82, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.0, $M.91, $M.19, $M.93, $M.94, $M.95, $M.96, $M.97, $M.31, $M.98, $M.61, $M.62, $M.69, $M.71, $M.73, $M.74, $M.99, $M.37, $M.33, $M.35, $M.64, $M.32, $M.34, $M.36, $M.38, $M.55, $M.56, $M.57, $M.58, $M.72, $M.92, $M.23, $M.25, $M.27, $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.24, $M.26, $M.28, $M.30, $M.112, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.54, $M.7, $M.115, $M.114, $M.113, $M.21, $M.48, $M.47, $M.22, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.18, $M.16, $M.168, $M.39, $M.50, $M.6, $M.169, $CurrAddr, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.20, $M.49, assertsPassed, $M.51, $M.52;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $p189: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i64;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i64;
  var $i202: i32;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i1;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $i240: i1;
  var $i241: i1;
  var $i242: i1;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i64;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i64;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i64;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i284: i32;
  var vslice_dummy_var_668: ref;
  var vslice_dummy_var_669: ref;
  var vslice_dummy_var_670: ref;
  var vslice_dummy_var_671: ref;
  var vslice_dummy_var_672: ref;
  var vslice_dummy_var_673: ref;
  var vslice_dummy_var_674: ref;
  var vslice_dummy_var_675: ref;
  var vslice_dummy_var_676: ref;
  var vslice_dummy_var_677: ref;
  var vslice_dummy_var_678: i32;
  var vslice_dummy_var_679: i64;
  var vslice_dummy_var_680: i64;
  var vslice_dummy_var_681: i32;
  var vslice_dummy_var_682: i64;
  var vslice_dummy_var_683: i64;
  var vslice_dummy_var_684: i64;
  var vslice_dummy_var_685: i64;
  var vslice_dummy_var_686: i64;
  var vslice_dummy_var_687: i32;
  var vslice_dummy_var_688: i32;
  var vslice_dummy_var_689: i32;

  $bb0:
    call {:si_unique_call 3694} $initialize();
    goto corral_source_split_17061;

  corral_source_split_17061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_17062;

  corral_source_split_17062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_17063;

  corral_source_split_17063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} $p11 := ldv_init_zalloc(8);
    goto corral_source_split_17064;

  corral_source_split_17064:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_17065;

  corral_source_split_17065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} $p13 := ldv_init_zalloc(32);
    goto corral_source_split_17066;

  corral_source_split_17066:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_17067;

  corral_source_split_17067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_17068;

  corral_source_split_17068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} $p16 := ldv_init_zalloc(8);
    goto corral_source_split_17069;

  corral_source_split_17069:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_17070;

  corral_source_split_17070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_17071;

  corral_source_split_17071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_17072;

  corral_source_split_17072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} $p20 := ldv_init_zalloc(8);
    goto corral_source_split_17073;

  corral_source_split_17073:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_17074;

  corral_source_split_17074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} $p22 := ldv_init_zalloc(8);
    goto corral_source_split_17075;

  corral_source_split_17075:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_17076;

  corral_source_split_17076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} ldv_initialize();
    goto corral_source_split_17077;

  corral_source_split_17077:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_17078;

  corral_source_split_17078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} vslice_dummy_var_668 := ldv_memset($p24, 0, 8);
    goto corral_source_split_17079;

  corral_source_split_17079:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_17080;

  corral_source_split_17080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} vslice_dummy_var_669 := ldv_memset($p26, 0, 8);
    goto corral_source_split_17081;

  corral_source_split_17081:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_17082;

  corral_source_split_17082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} vslice_dummy_var_670 := ldv_memset($p28, 0, 4);
    goto corral_source_split_17083;

  corral_source_split_17083:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_17084;

  corral_source_split_17084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} vslice_dummy_var_671 := ldv_memset($p30, 0, 4);
    goto corral_source_split_17085;

  corral_source_split_17085:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_17086;

  corral_source_split_17086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} vslice_dummy_var_672 := ldv_memset($p32, 0, 8);
    goto corral_source_split_17087;

  corral_source_split_17087:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p5);
    goto corral_source_split_17088;

  corral_source_split_17088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} vslice_dummy_var_673 := ldv_memset($p34, 0, 4);
    goto corral_source_split_17089;

  corral_source_split_17089:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p6);
    goto corral_source_split_17090;

  corral_source_split_17090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} vslice_dummy_var_674 := ldv_memset($p36, 0, 8);
    goto corral_source_split_17091;

  corral_source_split_17091:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p7);
    goto corral_source_split_17092;

  corral_source_split_17092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} vslice_dummy_var_675 := ldv_memset($p38, 0, 8);
    goto corral_source_split_17093;

  corral_source_split_17093:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p8);
    goto corral_source_split_17094;

  corral_source_split_17094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} vslice_dummy_var_676 := ldv_memset($p40, 0, 8);
    goto corral_source_split_17095;

  corral_source_split_17095:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p9);
    goto corral_source_split_17096;

  corral_source_split_17096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} vslice_dummy_var_677 := ldv_memset($p42, 0, 4);
    goto corral_source_split_17097;

  corral_source_split_17097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} timer_init_6();
    goto corral_source_split_17098;

  corral_source_split_17098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_17099;

  corral_source_split_17099:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 3728} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_17100;

  corral_source_split_17100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} work_init_3();
    goto corral_source_split_17101;

  corral_source_split_17101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_17102;

  corral_source_split_17102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} timer_init_7();
    goto corral_source_split_17103;

  corral_source_split_17103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_17104;

  corral_source_split_17104:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 3733} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_17105;

  corral_source_split_17105:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 3734} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_17106;

  corral_source_split_17106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} work_init_2();
    goto corral_source_split_17107;

  corral_source_split_17107:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 3736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_17108;

  corral_source_split_17108:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 3737} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_17109;

  corral_source_split_17109:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 3738} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_17110;

  corral_source_split_17110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} work_init_4();
    goto corral_source_split_17111;

  corral_source_split_17111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_17112;

  corral_source_split_17112:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 3741} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_17113;

  corral_source_split_17113:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 3742} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_17114;

  corral_source_split_17114:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 3743} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_17115;

  corral_source_split_17115:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 3744} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_17116;

  corral_source_split_17116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} work_init_5();
    goto corral_source_split_17117;

  corral_source_split_17117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_17118;

  corral_source_split_17118:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $p71, $i73, $i74, $i75, $i76, $p77, $i78, $i80, $i81, $p82, $i83, $i84, $i86, $i87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $p188, $p189, $i191, $i192, $i193, $i194, $p195, $i196, $i198, $i199, $p200, $i201, $i202, $i204, $i205, $p206, $p207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $p246, $i247, $i249, $i250, $p251, $i252, $i254, $i255, $p256, $i257, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $i281, $i282, $p283, $i284, vslice_dummy_var_678, vslice_dummy_var_679, vslice_dummy_var_680, vslice_dummy_var_681, vslice_dummy_var_682, vslice_dummy_var_683, vslice_dummy_var_684, vslice_dummy_var_685, vslice_dummy_var_686, vslice_dummy_var_687, vslice_dummy_var_688, vslice_dummy_var_689 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p12, $p14, $p15, $p17, $p18, $p19, $p21, $p23, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $p71, $i73, $i74, $i75, $i76, $p77, $i78, $i80, $i81, $p82, $i83, $i84, $i86, $i87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $p122, $i123, $i124, $p125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $p188, $p189, $i191, $i192, $i193, $i194, $p195, $i196, $i198, $i199, $p200, $i201, $i202, $i204, $i205, $p206, $p207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $p246, $i247, $i249, $i250, $p251, $i252, $i254, $i255, $p256, $i257, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $i281, $i282, $p283, $i284, vslice_dummy_var_678, vslice_dummy_var_679, vslice_dummy_var_680, vslice_dummy_var_681, vslice_dummy_var_682, vslice_dummy_var_683, vslice_dummy_var_684, vslice_dummy_var_685, vslice_dummy_var_686, vslice_dummy_var_687, vslice_dummy_var_688, vslice_dummy_var_689);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i44, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i44, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i44, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} ldv_stop();
    goto corral_source_split_17599;

  corral_source_split_17599:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_17124;

  corral_source_split_17124:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_17120;

  corral_source_split_17120:
    assume {:verifier.code 0} true;
    $i271 := $M.88;
    goto corral_source_split_17121;

  corral_source_split_17121:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_17122;

  corral_source_split_17122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb275:
    assume $i272 == 1;
    goto corral_source_split_17576;

  corral_source_split_17576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3866} $i273 := __VERIFIER_nondet_int();
    call {:si_unique_call 3867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i273);
    call {:si_unique_call 3868} {:cexpr "tmp___14"} boogie_si_record_i32($i273);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i273, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i273, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} ldv_stop();
    goto corral_source_split_17597;

  corral_source_split_17597:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb280:
    assume $i275 == 1;
    goto corral_source_split_17578;

  corral_source_split_17578:
    assume {:verifier.code 0} true;
    $i281 := $M.88;
    goto corral_source_split_17579;

  corral_source_split_17579:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_17580;

  corral_source_split_17580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb289:
    assume $i282 == 1;
    goto corral_source_split_17591;

  corral_source_split_17591:
    assume {:verifier.code 0} true;
    $p283 := $M.69;
    goto corral_source_split_17592;

  corral_source_split_17592:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.60, $p9);
    goto corral_source_split_17593;

  corral_source_split_17593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} vslice_dummy_var_689 := rsxx_error_detected($p283, $i284);
    goto corral_source_split_17594;

  corral_source_split_17594:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3872} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17595;

  corral_source_split_17595:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb278:
    assume $i274 == 1;
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i273, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb282;

  $bb283:
    assume $i276 == 1;
    goto corral_source_split_17582;

  corral_source_split_17582:
    assume {:verifier.code 0} true;
    $i277 := $M.88;
    goto corral_source_split_17583;

  corral_source_split_17583:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 1);
    goto corral_source_split_17584;

  corral_source_split_17584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb285:
    assume $i278 == 1;
    goto corral_source_split_17586;

  corral_source_split_17586:
    assume {:verifier.code 0} true;
    $p279 := $M.69;
    goto corral_source_split_17587;

  corral_source_split_17587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} vslice_dummy_var_688 := rsxx_slot_reset($p279);
    goto corral_source_split_17588;

  corral_source_split_17588:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3870} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17589;

  corral_source_split_17589:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb7:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i44, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    goto corral_source_split_17130;

  corral_source_split_17130:
    assume {:verifier.code 0} true;
    $i236 := $M.87;
    goto corral_source_split_17131;

  corral_source_split_17131:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, 0);
    goto corral_source_split_17132;

  corral_source_split_17132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb239:
    assume $i237 == 1;
    goto corral_source_split_17516;

  corral_source_split_17516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3849} $i238 := __VERIFIER_nondet_int();
    call {:si_unique_call 3850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i238);
    call {:si_unique_call 3851} {:cexpr "tmp___13"} boogie_si_record_i32($i238);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i239 := $slt.i32($i238, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i238, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i238, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} ldv_stop();
    goto corral_source_split_17574;

  corral_source_split_17574:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb246:
    assume $i241 == 1;
    goto corral_source_split_17522;

  corral_source_split_17522:
    assume {:verifier.code 0} true;
    $i266 := $M.87;
    goto corral_source_split_17523;

  corral_source_split_17523:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 2);
    goto corral_source_split_17524;

  corral_source_split_17524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb269:
    assume $i267 == 1;
    goto corral_source_split_17567;

  corral_source_split_17567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} vslice_dummy_var_687 := ldv_release_13();
    goto corral_source_split_17568;

  corral_source_split_17568:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3863} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17569;

  corral_source_split_17569:
    assume {:verifier.code 0} true;
    $i269 := $M.85;
    goto corral_source_split_17570;

  corral_source_split_17570:
    assume {:verifier.code 0} true;
    $i270 := $sub.i32($i269, 1);
    goto corral_source_split_17571;

  corral_source_split_17571:
    assume {:verifier.code 0} true;
    $M.85 := $i270;
    call {:si_unique_call 3864} {:cexpr "ref_cnt"} boogie_si_record_i32($i270);
    goto corral_source_split_17572;

  corral_source_split_17572:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb244:
    assume $i240 == 1;
    goto corral_source_split_17518;

  corral_source_split_17518:
    assume {:verifier.code 0} true;
    $i259 := $M.87;
    goto corral_source_split_17519;

  corral_source_split_17519:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 1);
    goto corral_source_split_17520;

  corral_source_split_17520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb263:
    assume $i260 == 1;
    goto corral_source_split_17555;

  corral_source_split_17555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} $i261 := ldv_open_13();
    goto corral_source_split_17556;

  corral_source_split_17556:
    assume {:verifier.code 0} true;
    $M.99 := $i261;
    call {:si_unique_call 3859} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i261);
    goto corral_source_split_17557;

  corral_source_split_17557:
    assume {:verifier.code 0} true;
    $i262 := $M.99;
    goto corral_source_split_17558;

  corral_source_split_17558:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_17559;

  corral_source_split_17559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb265:
    assume $i263 == 1;
    goto corral_source_split_17561;

  corral_source_split_17561:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3860} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17562;

  corral_source_split_17562:
    assume {:verifier.code 0} true;
    $i264 := $M.85;
    goto corral_source_split_17563;

  corral_source_split_17563:
    assume {:verifier.code 0} true;
    $i265 := $add.i32($i264, 1);
    goto corral_source_split_17564;

  corral_source_split_17564:
    assume {:verifier.code 0} true;
    $M.85 := $i265;
    call {:si_unique_call 3861} {:cexpr "ref_cnt"} boogie_si_record_i32($i265);
    goto corral_source_split_17565;

  corral_source_split_17565:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb242:
    assume $i239 == 1;
    assume {:verifier.code 0} true;
    $i242 := $slt.i32($i238, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i242 == 1);
    goto corral_source_split_17526;

  corral_source_split_17526:
    assume {:verifier.code 0} true;
    $i254 := $M.87;
    goto corral_source_split_17527;

  corral_source_split_17527:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_17528;

  corral_source_split_17528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb260:
    assume $i255 == 1;
    goto corral_source_split_17549;

  corral_source_split_17549:
    assume {:verifier.code 0} true;
    $p256 := $M.71;
    goto corral_source_split_17550;

  corral_source_split_17550:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.60, $p8);
    goto corral_source_split_17551;

  corral_source_split_17551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} vslice_dummy_var_686 := rsxx_cram_read($p256, $p19, $i257, $p23);
    goto SeqInstr_2014, SeqInstr_2015;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  SeqInstr_2016:
    goto corral_source_split_17552;

  corral_source_split_17552:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3857} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17553;

  corral_source_split_17553:
    assume {:verifier.code 0} true;
    goto $bb262;

  SeqInstr_2014:
    assume !assertsPassed;
    return;

  $bb249:
    assume $i242 == 1;
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i238, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb248;

  $bb251:
    assume $i243 == 1;
    goto corral_source_split_17530;

  corral_source_split_17530:
    assume {:verifier.code 0} true;
    $i244 := $M.87;
    goto corral_source_split_17531;

  corral_source_split_17531:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 1);
    goto corral_source_split_17532;

  corral_source_split_17532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i249 := $M.87;
    goto corral_source_split_17540;

  corral_source_split_17540:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 2);
    goto corral_source_split_17541;

  corral_source_split_17541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb256:
    assume $i250 == 1;
    goto corral_source_split_17543;

  corral_source_split_17543:
    assume {:verifier.code 0} true;
    $p251 := $M.71;
    goto corral_source_split_17544;

  corral_source_split_17544:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.60, $p7);
    goto corral_source_split_17545;

  corral_source_split_17545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} vslice_dummy_var_685 := rsxx_cram_write($p251, $p18, $i252, $p21);
    goto SeqInstr_2011, SeqInstr_2012;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  SeqInstr_2013:
    goto corral_source_split_17546;

  corral_source_split_17546:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3855} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17547;

  corral_source_split_17547:
    assume {:verifier.code 0} true;
    goto $bb258;

  SeqInstr_2011:
    assume !assertsPassed;
    return;

  $bb253:
    assume $i245 == 1;
    goto corral_source_split_17534;

  corral_source_split_17534:
    assume {:verifier.code 0} true;
    $p246 := $M.71;
    goto corral_source_split_17535;

  corral_source_split_17535:
    assume {:verifier.code 0} true;
    $i247 := $load.i64($M.60, $p7);
    goto corral_source_split_17536;

  corral_source_split_17536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} vslice_dummy_var_684 := rsxx_cram_write($p246, $p18, $i247, $p21);
    goto SeqInstr_2008, SeqInstr_2009;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  SeqInstr_2010:
    goto corral_source_split_17537;

  corral_source_split_17537:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3853} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17538;

  corral_source_split_17538:
    assume {:verifier.code 0} true;
    goto $bb255;

  SeqInstr_2008:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_17126;

  corral_source_split_17126:
    assume {:verifier.code 0} true;
    $i219 := $M.86;
    goto corral_source_split_17127;

  corral_source_split_17127:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_17128;

  corral_source_split_17128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb209:
    assume $i220 == 1;
    goto corral_source_split_17469;

  corral_source_split_17469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3828} $i221 := __VERIFIER_nondet_int();
    call {:si_unique_call 3829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i221);
    call {:si_unique_call 3830} {:cexpr "tmp___12"} boogie_si_record_i32($i221);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i222 := $slt.i32($i221, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i221, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} ldv_stop();
    goto corral_source_split_17514;

  corral_source_split_17514:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb214:
    assume $i223 == 1;
    goto corral_source_split_17471;

  corral_source_split_17471:
    assume {:verifier.code 0} true;
    $i229 := $M.86;
    goto corral_source_split_17472;

  corral_source_split_17472:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_17473;

  corral_source_split_17473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb227:
    assume $i230 == 1;
    goto corral_source_split_17489;

  corral_source_split_17489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} $i231 := rsxx_core_init();
    goto corral_source_split_17490;

  corral_source_split_17490:
    assume {:verifier.code 0} true;
    $M.98 := $i231;
    call {:si_unique_call 3835} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i231);
    goto corral_source_split_17491;

  corral_source_split_17491:
    assume {:verifier.code 0} true;
    $i232 := $M.98;
    goto corral_source_split_17492;

  corral_source_split_17492:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_17493;

  corral_source_split_17493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i234 := $M.98;
    goto corral_source_split_17498;

  corral_source_split_17498:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_17499;

  corral_source_split_17499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i235 == 1;
    goto corral_source_split_17501;

  corral_source_split_17501:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 3837} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_17502;

  corral_source_split_17502:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 3838} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_17503;

  corral_source_split_17503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} ldv_file_operations_12();
    goto corral_source_split_17504;

  corral_source_split_17504:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3840} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17505;

  corral_source_split_17505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} ldv_initialize_pci_error_handlers_10();
    goto corral_source_split_17506;

  corral_source_split_17506:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3842} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17507;

  corral_source_split_17507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} ldv_file_operations_13();
    goto corral_source_split_17508;

  corral_source_split_17508:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 3844} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_17509;

  corral_source_split_17509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} ldv_file_operations_11();
    goto corral_source_split_17510;

  corral_source_split_17510:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 3846} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_17511;

  corral_source_split_17511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} ldv_initialize_block_device_operations_8();
    goto corral_source_split_17512;

  corral_source_split_17512:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb229:
    assume $i233 == 1;
    goto corral_source_split_17495;

  corral_source_split_17495:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 3836} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_17496;

  corral_source_split_17496:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} ldv_check_final_state();
    goto SeqInstr_2005, SeqInstr_2006;

  SeqInstr_2006:
    assume assertsPassed;
    goto SeqInstr_2007;

  SeqInstr_2007:
    goto corral_source_split_17487;

  corral_source_split_17487:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_2005:
    assume !assertsPassed;
    return;

  $bb212:
    assume $i222 == 1;
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i221, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb216;

  $bb217:
    assume $i224 == 1;
    goto corral_source_split_17475;

  corral_source_split_17475:
    assume {:verifier.code 0} true;
    $i225 := $M.86;
    goto corral_source_split_17476;

  corral_source_split_17476:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 2);
    goto corral_source_split_17477;

  corral_source_split_17477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i226 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb219:
    assume $i226 == 1;
    goto corral_source_split_17479;

  corral_source_split_17479:
    assume {:verifier.code 0} true;
    $i227 := $M.85;
    goto corral_source_split_17480;

  corral_source_split_17480:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_17481;

  corral_source_split_17481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb221;

  $bb222:
    assume $i228 == 1;
    goto corral_source_split_17483;

  corral_source_split_17483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} rsxx_core_cleanup();
    goto corral_source_split_17484;

  corral_source_split_17484:
    assume {:verifier.code 0} true;
    $M.86 := 3;
    call {:si_unique_call 3832} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_17485;

  corral_source_split_17485:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb5:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i44, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i44, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    goto corral_source_split_17142;

  corral_source_split_17142:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_17138;

  corral_source_split_17138:
    assume {:verifier.code 0} true;
    $i217 := $M.83;
    goto corral_source_split_17139;

  corral_source_split_17139:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_17140;

  corral_source_split_17140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb206:
    assume $i218 == 1;
    goto corral_source_split_17466;

  corral_source_split_17466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} choose_interrupt_1();
    goto corral_source_split_17467;

  corral_source_split_17467:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_17134;

  corral_source_split_17134:
    assume {:verifier.code 0} true;
    $i215 := $M.82;
    goto corral_source_split_17135;

  corral_source_split_17135:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_17136;

  corral_source_split_17136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb203:
    assume $i216 == 1;
    goto corral_source_split_17463;

  corral_source_split_17463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} ldv_main_exported_8();
    goto SeqInstr_2002, SeqInstr_2003;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  SeqInstr_2004:
    goto corral_source_split_17464;

  corral_source_split_17464:
    assume {:verifier.code 0} true;
    goto $bb205;

  SeqInstr_2002:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i44, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i55 == 1);
    goto corral_source_split_17148;

  corral_source_split_17148:
    assume {:verifier.code 0} true;
    $i213 := $M.81;
    goto corral_source_split_17149;

  corral_source_split_17149:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_17150;

  corral_source_split_17150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb200:
    assume $i214 == 1;
    goto corral_source_split_17460;

  corral_source_split_17460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} invoke_work_2();
    goto SeqInstr_1999, SeqInstr_2000;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  SeqInstr_2001:
    goto corral_source_split_17461;

  corral_source_split_17461:
    assume {:verifier.code 0} true;
    goto $bb202;

  SeqInstr_1999:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_17144;

  corral_source_split_17144:
    assume {:verifier.code 0} true;
    $i178 := $M.80;
    goto corral_source_split_17145;

  corral_source_split_17145:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_17146;

  corral_source_split_17146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb167:
    assume $i179 == 1;
    goto corral_source_split_17404;

  corral_source_split_17404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3810} $i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 3811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i180);
    call {:si_unique_call 3812} {:cexpr "tmp___11"} boogie_si_record_i32($i180);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} ldv_stop();
    goto corral_source_split_17458;

  corral_source_split_17458:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb174:
    assume $i183 == 1;
    goto corral_source_split_17410;

  corral_source_split_17410:
    assume {:verifier.code 0} true;
    $i204 := $M.80;
    goto corral_source_split_17411;

  corral_source_split_17411:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_17412;

  corral_source_split_17412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb191:
    assume $i205 == 1;
    goto corral_source_split_17444;

  corral_source_split_17444:
    assume {:verifier.code 0} true;
    $p206 := $M.61;
    goto corral_source_split_17445;

  corral_source_split_17445:
    assume {:verifier.code 0} true;
    $p207 := $M.62;
    goto corral_source_split_17446;

  corral_source_split_17446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} $i208 := rsxx_attr_stats_open($p206, $p207);
    goto corral_source_split_17447;

  corral_source_split_17447:
    assume {:verifier.code 0} true;
    $M.97 := $i208;
    call {:si_unique_call 3821} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i208);
    goto corral_source_split_17448;

  corral_source_split_17448:
    assume {:verifier.code 0} true;
    $i209 := $M.97;
    goto corral_source_split_17449;

  corral_source_split_17449:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_17450;

  corral_source_split_17450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb193:
    assume $i210 == 1;
    goto corral_source_split_17452;

  corral_source_split_17452:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3822} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17453;

  corral_source_split_17453:
    assume {:verifier.code 0} true;
    $i211 := $M.85;
    goto corral_source_split_17454;

  corral_source_split_17454:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i211, 1);
    goto corral_source_split_17455;

  corral_source_split_17455:
    assume {:verifier.code 0} true;
    $M.85 := $i212;
    call {:si_unique_call 3823} {:cexpr "ref_cnt"} boogie_si_record_i32($i212);
    goto corral_source_split_17456;

  corral_source_split_17456:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb172:
    assume $i182 == 1;
    goto corral_source_split_17406;

  corral_source_split_17406:
    assume {:verifier.code 0} true;
    $i198 := $M.80;
    goto corral_source_split_17407;

  corral_source_split_17407:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_17408;

  corral_source_split_17408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb188:
    assume $i199 == 1;
    goto corral_source_split_17437;

  corral_source_split_17437:
    assume {:verifier.code 0} true;
    $p200 := $M.62;
    goto corral_source_split_17438;

  corral_source_split_17438:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.60, $p4);
    goto corral_source_split_17439;

  corral_source_split_17439:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.60, $p5);
    goto corral_source_split_17440;

  corral_source_split_17440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} vslice_dummy_var_683 := seq_lseek($p200, $i201, $i202);
    goto corral_source_split_17441;

  corral_source_split_17441:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3819} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17442;

  corral_source_split_17442:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb170:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i184 == 1);
    goto corral_source_split_17414;

  corral_source_split_17414:
    assume {:verifier.code 0} true;
    $i193 := $M.80;
    goto corral_source_split_17415;

  corral_source_split_17415:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 2);
    goto corral_source_split_17416;

  corral_source_split_17416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb185:
    assume $i194 == 1;
    goto corral_source_split_17431;

  corral_source_split_17431:
    assume {:verifier.code 0} true;
    $p195 := $M.62;
    goto corral_source_split_17432;

  corral_source_split_17432:
    assume {:verifier.code 0} true;
    $i196 := $load.i64($M.60, $p6);
    goto corral_source_split_17433;

  corral_source_split_17433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} vslice_dummy_var_682 := seq_read($p195, $p15, $i196, $p17);
    goto corral_source_split_17434;

  corral_source_split_17434:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3817} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17435;

  corral_source_split_17435:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb177:
    assume $i184 == 1;
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb176;

  $bb179:
    assume $i185 == 1;
    goto corral_source_split_17418;

  corral_source_split_17418:
    assume {:verifier.code 0} true;
    $i186 := $M.80;
    goto corral_source_split_17419;

  corral_source_split_17419:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_17420;

  corral_source_split_17420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i187 == 1;
    goto corral_source_split_17422;

  corral_source_split_17422:
    assume {:verifier.code 0} true;
    $p188 := $M.61;
    goto corral_source_split_17423;

  corral_source_split_17423:
    assume {:verifier.code 0} true;
    $p189 := $M.62;
    goto corral_source_split_17424;

  corral_source_split_17424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} vslice_dummy_var_681 := single_release($p188, $p189);
    goto corral_source_split_17425;

  corral_source_split_17425:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 3814} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_17426;

  corral_source_split_17426:
    assume {:verifier.code 0} true;
    $i191 := $M.85;
    goto corral_source_split_17427;

  corral_source_split_17427:
    assume {:verifier.code 0} true;
    $i192 := $sub.i32($i191, 1);
    goto corral_source_split_17428;

  corral_source_split_17428:
    assume {:verifier.code 0} true;
    $M.85 := $i192;
    call {:si_unique_call 3815} {:cexpr "ref_cnt"} boogie_si_record_i32($i192);
    goto corral_source_split_17429;

  corral_source_split_17429:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb22:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    goto corral_source_split_17154;

  corral_source_split_17154:
    assume {:verifier.code 0} true;
    $i95 := $M.79;
    goto corral_source_split_17155;

  corral_source_split_17155:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_17156;

  corral_source_split_17156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb68:
    assume $i96 == 1;
    goto corral_source_split_17222;

  corral_source_split_17222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3765} $i97 := __VERIFIER_nondet_int();
    call {:si_unique_call 3766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i97);
    call {:si_unique_call 3767} {:cexpr "tmp___10"} boogie_si_record_i32($i97);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i97, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i97, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i97, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} ldv_stop();
    goto corral_source_split_17402;

  corral_source_split_17402:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb77:
    assume $i101 == 1;
    goto corral_source_split_17228;

  corral_source_split_17228:
    assume {:verifier.code 0} true;
    $i168 := $M.79;
    goto corral_source_split_17229;

  corral_source_split_17229:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 4);
    goto corral_source_split_17230;

  corral_source_split_17230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i173 := $M.79;
    goto corral_source_split_17390;

  corral_source_split_17390:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_17391;

  corral_source_split_17391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb158:
    assume $i174 == 1;
    goto corral_source_split_17393;

  corral_source_split_17393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} $i175 := ldv_resume_early_9();
    goto corral_source_split_17394;

  corral_source_split_17394:
    assume {:verifier.code 0} true;
    $M.96 := $i175;
    call {:si_unique_call 3807} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i175);
    goto corral_source_split_17395;

  corral_source_split_17395:
    assume {:verifier.code 0} true;
    $i176 := $M.96;
    goto corral_source_split_17396;

  corral_source_split_17396:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_17397;

  corral_source_split_17397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i177 == 1;
    goto corral_source_split_17399;

  corral_source_split_17399:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3808} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17400;

  corral_source_split_17400:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb152:
    assume $i169 == 1;
    goto corral_source_split_17381;

  corral_source_split_17381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} $i170 := ldv_resume_early_9();
    goto corral_source_split_17382;

  corral_source_split_17382:
    assume {:verifier.code 0} true;
    $M.96 := $i170;
    call {:si_unique_call 3804} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i170);
    goto corral_source_split_17383;

  corral_source_split_17383:
    assume {:verifier.code 0} true;
    $i171 := $M.96;
    goto corral_source_split_17384;

  corral_source_split_17384:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 0);
    goto corral_source_split_17385;

  corral_source_split_17385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i172 == 1;
    goto corral_source_split_17387;

  corral_source_split_17387:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3805} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17388;

  corral_source_split_17388:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb75:
    assume $i100 == 1;
    goto corral_source_split_17224;

  corral_source_split_17224:
    assume {:verifier.code 0} true;
    $i163 := $M.79;
    goto corral_source_split_17225;

  corral_source_split_17225:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 3);
    goto corral_source_split_17226;

  corral_source_split_17226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb146:
    assume $i164 == 1;
    goto corral_source_split_17372;

  corral_source_split_17372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} $i165 := ldv_suspend_late_9();
    goto corral_source_split_17373;

  corral_source_split_17373:
    assume {:verifier.code 0} true;
    $M.95 := $i165;
    call {:si_unique_call 3801} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i165);
    goto corral_source_split_17374;

  corral_source_split_17374:
    assume {:verifier.code 0} true;
    $i166 := $M.95;
    goto corral_source_split_17375;

  corral_source_split_17375:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_17376;

  corral_source_split_17376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i167 == 1;
    goto corral_source_split_17378;

  corral_source_split_17378:
    assume {:verifier.code 0} true;
    $M.79 := 4;
    call {:si_unique_call 3802} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_17379;

  corral_source_split_17379:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb73:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i97, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i102 == 1);
    goto corral_source_split_17236;

  corral_source_split_17236:
    assume {:verifier.code 0} true;
    $i148 := $M.79;
    goto corral_source_split_17237;

  corral_source_split_17237:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 4);
    goto corral_source_split_17238;

  corral_source_split_17238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i153 := $M.79;
    goto corral_source_split_17348;

  corral_source_split_17348:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 3);
    goto corral_source_split_17349;

  corral_source_split_17349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i158 := $M.79;
    goto corral_source_split_17360;

  corral_source_split_17360:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 5);
    goto corral_source_split_17361;

  corral_source_split_17361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb140:
    assume $i159 == 1;
    goto corral_source_split_17363;

  corral_source_split_17363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} $i160 := ldv_resume_9();
    goto corral_source_split_17364;

  corral_source_split_17364:
    assume {:verifier.code 0} true;
    $M.94 := $i160;
    call {:si_unique_call 3798} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i160);
    goto corral_source_split_17365;

  corral_source_split_17365:
    assume {:verifier.code 0} true;
    $i161 := $M.94;
    goto corral_source_split_17366;

  corral_source_split_17366:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_17367;

  corral_source_split_17367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i162 == 1;
    goto corral_source_split_17369;

  corral_source_split_17369:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3799} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17370;

  corral_source_split_17370:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb134:
    assume $i154 == 1;
    goto corral_source_split_17351;

  corral_source_split_17351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} $i155 := ldv_resume_9();
    goto corral_source_split_17352;

  corral_source_split_17352:
    assume {:verifier.code 0} true;
    $M.94 := $i155;
    call {:si_unique_call 3795} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i155);
    goto corral_source_split_17353;

  corral_source_split_17353:
    assume {:verifier.code 0} true;
    $i156 := $M.94;
    goto corral_source_split_17354;

  corral_source_split_17354:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_17355;

  corral_source_split_17355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i157 == 1;
    goto corral_source_split_17357;

  corral_source_split_17357:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17358;

  corral_source_split_17358:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb128:
    assume $i149 == 1;
    goto corral_source_split_17339;

  corral_source_split_17339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} $i150 := ldv_resume_9();
    goto corral_source_split_17340;

  corral_source_split_17340:
    assume {:verifier.code 0} true;
    $M.94 := $i150;
    call {:si_unique_call 3792} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i150);
    goto corral_source_split_17341;

  corral_source_split_17341:
    assume {:verifier.code 0} true;
    $i151 := $M.94;
    goto corral_source_split_17342;

  corral_source_split_17342:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_17343;

  corral_source_split_17343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb130:
    assume $i152 == 1;
    goto corral_source_split_17345;

  corral_source_split_17345:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3793} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17346;

  corral_source_split_17346:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb80:
    assume $i102 == 1;
    goto corral_source_split_17232;

  corral_source_split_17232:
    assume {:verifier.code 0} true;
    $i136 := $M.79;
    goto corral_source_split_17233;

  corral_source_split_17233:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 4);
    goto corral_source_split_17234;

  corral_source_split_17234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i139 := $M.79;
    goto corral_source_split_17315;

  corral_source_split_17315:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 3);
    goto corral_source_split_17316;

  corral_source_split_17316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i142 := $M.79;
    goto corral_source_split_17323;

  corral_source_split_17323:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_17324;

  corral_source_split_17324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i145 := $M.79;
    goto corral_source_split_17331;

  corral_source_split_17331:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 5);
    goto corral_source_split_17332;

  corral_source_split_17332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb125:
    assume $i146 == 1;
    goto corral_source_split_17334;

  corral_source_split_17334:
    assume {:verifier.code 0} true;
    $p147 := $M.72;
    goto corral_source_split_17335;

  corral_source_split_17335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} rsxx_pci_remove($p147);
    goto SeqInstr_1996, SeqInstr_1997;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  SeqInstr_1998:
    goto corral_source_split_17336;

  corral_source_split_17336:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3790} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17337;

  corral_source_split_17337:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_1996:
    assume !assertsPassed;
    return;

  $bb122:
    assume $i143 == 1;
    goto corral_source_split_17326;

  corral_source_split_17326:
    assume {:verifier.code 0} true;
    $p144 := $M.72;
    goto corral_source_split_17327;

  corral_source_split_17327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} rsxx_pci_remove($p144);
    goto SeqInstr_1993, SeqInstr_1994;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  SeqInstr_1995:
    goto corral_source_split_17328;

  corral_source_split_17328:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3788} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17329;

  corral_source_split_17329:
    assume {:verifier.code 0} true;
    goto $bb124;

  SeqInstr_1993:
    assume !assertsPassed;
    return;

  $bb119:
    assume $i140 == 1;
    goto corral_source_split_17318;

  corral_source_split_17318:
    assume {:verifier.code 0} true;
    $p141 := $M.72;
    goto corral_source_split_17319;

  corral_source_split_17319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} rsxx_pci_remove($p141);
    goto SeqInstr_1990, SeqInstr_1991;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  SeqInstr_1992:
    goto corral_source_split_17320;

  corral_source_split_17320:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17321;

  corral_source_split_17321:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_1990:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i137 == 1;
    goto corral_source_split_17310;

  corral_source_split_17310:
    assume {:verifier.code 0} true;
    $p138 := $M.72;
    goto corral_source_split_17311;

  corral_source_split_17311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} rsxx_pci_remove($p138);
    goto SeqInstr_1987, SeqInstr_1988;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  SeqInstr_1989:
    goto corral_source_split_17312;

  corral_source_split_17312:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3784} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17313;

  corral_source_split_17313:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_1987:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i97, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i97, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i104 == 1);
    goto corral_source_split_17244;

  corral_source_split_17244:
    assume {:verifier.code 0} true;
    $i126 := $M.79;
    goto corral_source_split_17245;

  corral_source_split_17245:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_17246;

  corral_source_split_17246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb107:
    assume $i127 == 1;
    goto corral_source_split_17294;

  corral_source_split_17294:
    assume {:verifier.code 0} true;
    $i128 := $M.92;
    goto corral_source_split_17295;

  corral_source_split_17295:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_17296;

  corral_source_split_17296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb109;

  $bb110:
    assume $i129 == 1;
    goto corral_source_split_17298;

  corral_source_split_17298:
    assume {:verifier.code 0} true;
    $p130 := $M.72;
    goto corral_source_split_17299;

  corral_source_split_17299:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_17300;

  corral_source_split_17300:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.60, $p131);
    goto corral_source_split_17301;

  corral_source_split_17301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} $i133 := rsxx_pci_suspend($p130, $i132);
    goto corral_source_split_17302;

  corral_source_split_17302:
    assume {:verifier.code 0} true;
    $M.93 := $i133;
    call {:si_unique_call 3781} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i133);
    goto corral_source_split_17303;

  corral_source_split_17303:
    assume {:verifier.code 0} true;
    $i134 := $M.93;
    goto corral_source_split_17304;

  corral_source_split_17304:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_17305;

  corral_source_split_17305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i135 == 1;
    goto corral_source_split_17307;

  corral_source_split_17307:
    assume {:verifier.code 0} true;
    $M.79 := 3;
    call {:si_unique_call 3782} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_17308;

  corral_source_split_17308:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb84:
    assume $i104 == 1;
    goto corral_source_split_17240;

  corral_source_split_17240:
    assume {:verifier.code 0} true;
    $i114 := $M.79;
    goto corral_source_split_17241;

  corral_source_split_17241:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 4);
    goto corral_source_split_17242;

  corral_source_split_17242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i117 := $M.79;
    goto corral_source_split_17270;

  corral_source_split_17270:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 3);
    goto corral_source_split_17271;

  corral_source_split_17271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i120 := $M.79;
    goto corral_source_split_17278;

  corral_source_split_17278:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_17279;

  corral_source_split_17279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i123 := $M.79;
    goto corral_source_split_17286;

  corral_source_split_17286:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 5);
    goto corral_source_split_17287;

  corral_source_split_17287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb104:
    assume $i124 == 1;
    goto corral_source_split_17289;

  corral_source_split_17289:
    assume {:verifier.code 0} true;
    $p125 := $M.72;
    goto corral_source_split_17290;

  corral_source_split_17290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} rsxx_pci_shutdown($p125);
    goto SeqInstr_1984, SeqInstr_1985;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  SeqInstr_1986:
    goto corral_source_split_17291;

  corral_source_split_17291:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3779} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17292;

  corral_source_split_17292:
    assume {:verifier.code 0} true;
    goto $bb106;

  SeqInstr_1984:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i121 == 1;
    goto corral_source_split_17281;

  corral_source_split_17281:
    assume {:verifier.code 0} true;
    $p122 := $M.72;
    goto corral_source_split_17282;

  corral_source_split_17282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} rsxx_pci_shutdown($p122);
    goto SeqInstr_1981, SeqInstr_1982;

  SeqInstr_1982:
    assume assertsPassed;
    goto SeqInstr_1983;

  SeqInstr_1983:
    goto corral_source_split_17283;

  corral_source_split_17283:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3777} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17284;

  corral_source_split_17284:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_1981:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i118 == 1;
    goto corral_source_split_17273;

  corral_source_split_17273:
    assume {:verifier.code 0} true;
    $p119 := $M.72;
    goto corral_source_split_17274;

  corral_source_split_17274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} rsxx_pci_shutdown($p119);
    goto SeqInstr_1978, SeqInstr_1979;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  SeqInstr_1980:
    goto corral_source_split_17275;

  corral_source_split_17275:
    assume {:verifier.code 0} true;
    $M.79 := 3;
    call {:si_unique_call 3775} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_17276;

  corral_source_split_17276:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_1978:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i115 == 1;
    goto corral_source_split_17265;

  corral_source_split_17265:
    assume {:verifier.code 0} true;
    $p116 := $M.72;
    goto corral_source_split_17266;

  corral_source_split_17266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} rsxx_pci_shutdown($p116);
    goto SeqInstr_1975, SeqInstr_1976;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  SeqInstr_1977:
    goto corral_source_split_17267;

  corral_source_split_17267:
    assume {:verifier.code 0} true;
    $M.79 := 4;
    call {:si_unique_call 3773} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_17268;

  corral_source_split_17268:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_1975:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i97, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb79;

  $bb86:
    assume $i105 == 1;
    goto corral_source_split_17248;

  corral_source_split_17248:
    assume {:verifier.code 0} true;
    $i106 := $M.79;
    goto corral_source_split_17249;

  corral_source_split_17249:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_17250;

  corral_source_split_17250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i107 == 1;
    goto corral_source_split_17252;

  corral_source_split_17252:
    assume {:verifier.code 0} true;
    $p108 := $M.72;
    goto corral_source_split_17253;

  corral_source_split_17253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} $i109 := rsxx_pci_probe($p108, $p14);
    goto SeqInstr_1972, SeqInstr_1973;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  SeqInstr_1974:
    goto corral_source_split_17254;

  corral_source_split_17254:
    assume {:verifier.code 0} true;
    $M.91 := $i109;
    call {:si_unique_call 3769} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i109);
    goto corral_source_split_17255;

  corral_source_split_17255:
    assume {:verifier.code 0} true;
    $i110 := $M.91;
    goto corral_source_split_17256;

  corral_source_split_17256:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_17257;

  corral_source_split_17257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb90:
    assume $i111 == 1;
    goto corral_source_split_17259;

  corral_source_split_17259:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3770} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17260;

  corral_source_split_17260:
    assume {:verifier.code 0} true;
    $i112 := $M.85;
    goto corral_source_split_17261;

  corral_source_split_17261:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_17262;

  corral_source_split_17262:
    assume {:verifier.code 0} true;
    $M.85 := $i113;
    call {:si_unique_call 3771} {:cexpr "ref_cnt"} boogie_si_record_i32($i113);
    goto corral_source_split_17263;

  corral_source_split_17263:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_1972:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_17152;

  corral_source_split_17152:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb20:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i58 == 1);
    goto corral_source_split_17162;

  corral_source_split_17162:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb30:
    assume $i58 == 1;
    goto corral_source_split_17158;

  corral_source_split_17158:
    assume {:verifier.code 0} true;
    $i60 := $M.76;
    goto corral_source_split_17159;

  corral_source_split_17159:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_17160;

  corral_source_split_17160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_17166;

  corral_source_split_17166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3750} $i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 3751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i62);
    call {:si_unique_call 3752} {:cexpr "tmp___9"} boogie_si_record_i32($i62);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i62, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i62, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} ldv_stop();
    goto corral_source_split_17220;

  corral_source_split_17220:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb42:
    assume $i65 == 1;
    goto corral_source_split_17172;

  corral_source_split_17172:
    assume {:verifier.code 0} true;
    $i86 := $M.76;
    goto corral_source_split_17173;

  corral_source_split_17173:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_17174;

  corral_source_split_17174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb59:
    assume $i87 == 1;
    goto corral_source_split_17206;

  corral_source_split_17206:
    assume {:verifier.code 0} true;
    $p88 := $M.73;
    goto corral_source_split_17207;

  corral_source_split_17207:
    assume {:verifier.code 0} true;
    $p89 := $M.74;
    goto corral_source_split_17208;

  corral_source_split_17208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} $i90 := rsxx_attr_pci_regs_open($p88, $p89);
    goto corral_source_split_17209;

  corral_source_split_17209:
    assume {:verifier.code 0} true;
    $M.90 := $i90;
    call {:si_unique_call 3761} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i90);
    goto corral_source_split_17210;

  corral_source_split_17210:
    assume {:verifier.code 0} true;
    $i91 := $M.90;
    goto corral_source_split_17211;

  corral_source_split_17211:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_17212;

  corral_source_split_17212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i92 == 1;
    goto corral_source_split_17214;

  corral_source_split_17214:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3762} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17215;

  corral_source_split_17215:
    assume {:verifier.code 0} true;
    $i93 := $M.85;
    goto corral_source_split_17216;

  corral_source_split_17216:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    goto corral_source_split_17217;

  corral_source_split_17217:
    assume {:verifier.code 0} true;
    $M.85 := $i94;
    call {:si_unique_call 3763} {:cexpr "ref_cnt"} boogie_si_record_i32($i94);
    goto corral_source_split_17218;

  corral_source_split_17218:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_17168;

  corral_source_split_17168:
    assume {:verifier.code 0} true;
    $i80 := $M.76;
    goto corral_source_split_17169;

  corral_source_split_17169:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_17170;

  corral_source_split_17170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56:
    assume $i81 == 1;
    goto corral_source_split_17199;

  corral_source_split_17199:
    assume {:verifier.code 0} true;
    $p82 := $M.74;
    goto corral_source_split_17200;

  corral_source_split_17200:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.60, $p0);
    goto corral_source_split_17201;

  corral_source_split_17201:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.60, $p2);
    goto corral_source_split_17202;

  corral_source_split_17202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} vslice_dummy_var_680 := seq_lseek($p82, $i83, $i84);
    goto corral_source_split_17203;

  corral_source_split_17203:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3759} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17204;

  corral_source_split_17204:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb38:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i66 == 1);
    goto corral_source_split_17176;

  corral_source_split_17176:
    assume {:verifier.code 0} true;
    $i75 := $M.76;
    goto corral_source_split_17177;

  corral_source_split_17177:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_17178;

  corral_source_split_17178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i76 == 1;
    goto corral_source_split_17193;

  corral_source_split_17193:
    assume {:verifier.code 0} true;
    $p77 := $M.74;
    goto corral_source_split_17194;

  corral_source_split_17194:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.60, $p1);
    goto corral_source_split_17195;

  corral_source_split_17195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} vslice_dummy_var_679 := seq_read($p77, $p10, $i78, $p12);
    goto corral_source_split_17196;

  corral_source_split_17196:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3757} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17197;

  corral_source_split_17197:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i62, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb44;

  $bb47:
    assume $i67 == 1;
    goto corral_source_split_17180;

  corral_source_split_17180:
    assume {:verifier.code 0} true;
    $i68 := $M.76;
    goto corral_source_split_17181;

  corral_source_split_17181:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_17182;

  corral_source_split_17182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_17184;

  corral_source_split_17184:
    assume {:verifier.code 0} true;
    $p70 := $M.73;
    goto corral_source_split_17185;

  corral_source_split_17185:
    assume {:verifier.code 0} true;
    $p71 := $M.74;
    goto corral_source_split_17186;

  corral_source_split_17186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} vslice_dummy_var_678 := single_release($p70, $p71);
    goto corral_source_split_17187;

  corral_source_split_17187:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 3754} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_17188;

  corral_source_split_17188:
    assume {:verifier.code 0} true;
    $i73 := $M.85;
    goto corral_source_split_17189;

  corral_source_split_17189:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i73, 1);
    goto corral_source_split_17190;

  corral_source_split_17190:
    assume {:verifier.code 0} true;
    $M.85 := $i74;
    call {:si_unique_call 3755} {:cexpr "ref_cnt"} boogie_si_record_i32($i74);
    goto corral_source_split_17191;

  corral_source_split_17191:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb28:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb13;

  $bb32:
    assume $i59 == 1;
    goto corral_source_split_17164;

  corral_source_split_17164:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3747} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 3748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 3749} {:cexpr "tmp___8"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 690129);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17601;

  corral_source_split_17601:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_6: ref;

axiom timer_init_6 == $sub.ref(0, 691161);

procedure timer_init_6();
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation timer_init_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17603;

  corral_source_split_17603:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 3875} {:cexpr "ldv_timer_6_0"} boogie_si_record_i32(0);
    goto corral_source_split_17604;

  corral_source_split_17604:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 3876} {:cexpr "ldv_timer_6_1"} boogie_si_record_i32(0);
    goto corral_source_split_17605;

  corral_source_split_17605:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 3877} {:cexpr "ldv_timer_6_2"} boogie_si_record_i32(0);
    goto corral_source_split_17606;

  corral_source_split_17606:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 3878} {:cexpr "ldv_timer_6_3"} boogie_si_record_i32(0);
    goto corral_source_split_17607;

  corral_source_split_17607:
    assume {:verifier.code 0} true;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 692193);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.23, $M.25, $M.27, $M.29;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17609;

  corral_source_split_17609:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 3879} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_17610;

  corral_source_split_17610:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 3880} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_17611;

  corral_source_split_17611:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 3881} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_17612;

  corral_source_split_17612:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 3882} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_17613;

  corral_source_split_17613:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_7: ref;

axiom timer_init_7 == $sub.ref(0, 693225);

procedure timer_init_7();
  free requires assertsPassed;



implementation timer_init_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17615;

  corral_source_split_17615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} {:cexpr "ldv_timer_7_0"} boogie_si_record_i32(0);
    goto corral_source_split_17616;

  corral_source_split_17616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} {:cexpr "ldv_timer_7_1"} boogie_si_record_i32(0);
    goto corral_source_split_17617;

  corral_source_split_17617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} {:cexpr "ldv_timer_7_2"} boogie_si_record_i32(0);
    goto corral_source_split_17618;

  corral_source_split_17618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} {:cexpr "ldv_timer_7_3"} boogie_si_record_i32(0);
    goto corral_source_split_17619;

  corral_source_split_17619:
    assume {:verifier.code 0} true;
    return;
}



const work_init_4: ref;

axiom work_init_4 == $sub.ref(0, 694257);

procedure work_init_4();
  free requires assertsPassed;



implementation work_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17621;

  corral_source_split_17621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_17622;

  corral_source_split_17622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_17623;

  corral_source_split_17623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_17624;

  corral_source_split_17624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_17625;

  corral_source_split_17625:
    assume {:verifier.code 0} true;
    return;
}



const work_init_5: ref;

axiom work_init_5 == $sub.ref(0, 695289);

procedure work_init_5();
  free requires assertsPassed;



implementation work_init_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17627;

  corral_source_split_17627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    goto corral_source_split_17628;

  corral_source_split_17628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    goto corral_source_split_17629;

  corral_source_split_17629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    goto corral_source_split_17630;

  corral_source_split_17630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    goto corral_source_split_17631;

  corral_source_split_17631:
    assume {:verifier.code 0} true;
    return;
}



const ldv_resume_9: ref;

axiom ldv_resume_9 == $sub.ref(0, 696321);

procedure ldv_resume_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17633;

  corral_source_split_17633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3895} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17634;

  corral_source_split_17634:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_late_9: ref;

axiom ldv_suspend_late_9 == $sub.ref(0, 697353);

procedure ldv_suspend_late_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17636;

  corral_source_split_17636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3897} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17637;

  corral_source_split_17637:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_9: ref;

axiom ldv_resume_early_9 == $sub.ref(0, 698385);

procedure ldv_resume_early_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17639;

  corral_source_split_17639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3899} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3900} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17640;

  corral_source_split_17640:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 699417);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.60, $M.82, $M.0, $CurrAddr, $M.20, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var vslice_dummy_var_690: ref;
  var vslice_dummy_var_691: ref;
  var vslice_dummy_var_692: ref;
  var vslice_dummy_var_693: i32;
  var vslice_dummy_var_694: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_17642;

  corral_source_split_17642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} $p3 := ldv_init_zalloc(16);
    goto corral_source_split_17643;

  corral_source_split_17643:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_17644;

  corral_source_split_17644:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_17645;

  corral_source_split_17645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} vslice_dummy_var_690 := ldv_memset($p5, 0, 4);
    goto corral_source_split_17646;

  corral_source_split_17646:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_17647;

  corral_source_split_17647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} vslice_dummy_var_691 := ldv_memset($p7, 0, 8);
    goto corral_source_split_17648;

  corral_source_split_17648:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_17649;

  corral_source_split_17649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} vslice_dummy_var_692 := ldv_memset($p9, 0, 4);
    goto corral_source_split_17650;

  corral_source_split_17650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3908} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 3909} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 3910} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} ldv_stop();
    goto corral_source_split_17673;

  corral_source_split_17673:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_17652;

  corral_source_split_17652:
    assume {:verifier.code 0} true;
    $i22 := $M.82;
    goto corral_source_split_17653;

  corral_source_split_17653:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_17654;

  corral_source_split_17654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_17668;

  corral_source_split_17668:
    assume {:verifier.code 0} true;
    $p24 := $M.112;
    goto corral_source_split_17669;

  corral_source_split_17669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} vslice_dummy_var_694 := rsxx_getgeo($p24, $p4);
    goto corral_source_split_17670;

  corral_source_split_17670:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 3914} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_17671;

  corral_source_split_17671:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_17656;

  corral_source_split_17656:
    assume {:verifier.code 0} true;
    $i15 := $M.82;
    goto corral_source_split_17657;

  corral_source_split_17657:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_17658;

  corral_source_split_17658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_17660;

  corral_source_split_17660:
    assume {:verifier.code 0} true;
    $p17 := $M.112;
    goto corral_source_split_17661;

  corral_source_split_17661:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.60, $p0);
    goto corral_source_split_17662;

  corral_source_split_17662:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.60, $p2);
    goto corral_source_split_17663;

  corral_source_split_17663:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.60, $p1);
    goto corral_source_split_17664;

  corral_source_split_17664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} vslice_dummy_var_693 := rsxx_blkdev_ioctl($p17, $i18, $i19, $i20);
    goto SeqInstr_2017, SeqInstr_2018;

  SeqInstr_2018:
    assume assertsPassed;
    goto SeqInstr_2019;

  SeqInstr_2019:
    goto corral_source_split_17665;

  corral_source_split_17665:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 3912} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_17666;

  corral_source_split_17666:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_2017:
    assume !assertsPassed;
    return;
}



const rsxx_core_cleanup: ref;

axiom rsxx_core_cleanup == $sub.ref(0, 700449);

procedure rsxx_core_cleanup();
  free requires assertsPassed;
  modifies $M.79;



implementation rsxx_core_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17675;

  corral_source_split_17675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} ldv_pci_unregister_driver_52(rsxx_pci_driver);
    goto corral_source_split_17676;

  corral_source_split_17676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} rsxx_creg_cleanup();
    goto corral_source_split_17677;

  corral_source_split_17677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} rsxx_dma_cleanup();
    goto corral_source_split_17678;

  corral_source_split_17678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} rsxx_dev_cleanup();
    goto corral_source_split_17679;

  corral_source_split_17679:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_core_init: ref;

axiom rsxx_core_init == $sub.ref(0, 701481);

procedure rsxx_core_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50, $M.39, $M.6, $M.79, $M.72, $M.0, $CurrAddr;



implementation rsxx_core_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i5: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17681;

  corral_source_split_17681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} $i0 := rsxx_dev_init();
    call {:si_unique_call 3921} {:cexpr "st"} boogie_si_record_i32($i0);
    goto corral_source_split_17682;

  corral_source_split_17682:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_17683;

  corral_source_split_17683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} $i3 := rsxx_dma_init();
    call {:si_unique_call 3923} {:cexpr "st"} boogie_si_record_i32($i3);
    goto corral_source_split_17689;

  corral_source_split_17689:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_17690;

  corral_source_split_17690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} $i6 := rsxx_creg_init();
    call {:si_unique_call 3926} {:cexpr "st"} boogie_si_record_i32($i6);
    goto corral_source_split_17697;

  corral_source_split_17697:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_17698;

  corral_source_split_17698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} $i8 := ldv___pci_register_driver_51(rsxx_pci_driver, __this_module, .str.5);
    call {:si_unique_call 3929} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_17704;

  corral_source_split_17704:
    assume {:verifier.code 0} true;
    $i2 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17687;

  corral_source_split_17687:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_17700;

  corral_source_split_17700:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} rsxx_dma_cleanup();
    goto corral_source_split_17702;

  corral_source_split_17702:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_17694;

  corral_source_split_17694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} rsxx_dev_cleanup();
    goto corral_source_split_17695;

  corral_source_split_17695:
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_17692;

  corral_source_split_17692:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_17685;

  corral_source_split_17685:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_initialize_block_device_operations_8: ref;

axiom ldv_initialize_block_device_operations_8 == $sub.ref(0, 702513);

procedure ldv_initialize_block_device_operations_8();
  free requires assertsPassed;
  modifies $M.112, $M.0, $CurrAddr;



implementation ldv_initialize_block_device_operations_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17706;

  corral_source_split_17706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} $p0 := ldv_init_zalloc(480);
    goto corral_source_split_17707;

  corral_source_split_17707:
    assume {:verifier.code 0} true;
    goto corral_source_split_17708;

  corral_source_split_17708:
    assume {:verifier.code 0} true;
    $M.112 := $p0;
    goto corral_source_split_17709;

  corral_source_split_17709:
    assume {:verifier.code 0} true;
    return;
}



const ldv_open_13: ref;

axiom ldv_open_13 == $sub.ref(0, 703545);

procedure ldv_open_13() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_open_13() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17711;

  corral_source_split_17711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3931} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17712;

  corral_source_split_17712:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_13: ref;

axiom ldv_release_13 == $sub.ref(0, 704577);

procedure ldv_release_13() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_13() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17714;

  corral_source_split_17714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3933} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17715;

  corral_source_split_17715:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 705609);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17717;

  corral_source_split_17717:
    assume {:verifier.code 0} true;
    $i0 := $M.21;
    goto corral_source_split_17718;

  corral_source_split_17718:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_17719;

  corral_source_split_17719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.113;
    goto corral_source_split_17724;

  corral_source_split_17724:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_17725;

  corral_source_split_17725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.114;
    goto corral_source_split_17730;

  corral_source_split_17730:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_17731;

  corral_source_split_17731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.115;
    goto corral_source_split_17736;

  corral_source_split_17736:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_17737;

  corral_source_split_17737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.7;
    goto corral_source_split_17742;

  corral_source_split_17742:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_17743;

  corral_source_split_17743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.54;
    goto corral_source_split_17748;

  corral_source_split_17748:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_17749;

  corral_source_split_17749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_17751;

  corral_source_split_17751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} ldv_error();
    goto SeqInstr_2035, SeqInstr_2036;

  SeqInstr_2036:
    assume assertsPassed;
    goto SeqInstr_2037;

  SeqInstr_2037:
    goto corral_source_split_17752;

  corral_source_split_17752:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_2035:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_17745;

  corral_source_split_17745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} ldv_error();
    goto SeqInstr_2032, SeqInstr_2033;

  SeqInstr_2033:
    assume assertsPassed;
    goto SeqInstr_2034;

  SeqInstr_2034:
    goto corral_source_split_17746;

  corral_source_split_17746:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_2032:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_17739;

  corral_source_split_17739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} ldv_error();
    goto SeqInstr_2029, SeqInstr_2030;

  SeqInstr_2030:
    assume assertsPassed;
    goto SeqInstr_2031;

  SeqInstr_2031:
    goto corral_source_split_17740;

  corral_source_split_17740:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_2029:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_17733;

  corral_source_split_17733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} ldv_error();
    goto SeqInstr_2026, SeqInstr_2027;

  SeqInstr_2027:
    assume assertsPassed;
    goto SeqInstr_2028;

  SeqInstr_2028:
    goto corral_source_split_17734;

  corral_source_split_17734:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_2026:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_17727;

  corral_source_split_17727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} ldv_error();
    goto SeqInstr_2023, SeqInstr_2024;

  SeqInstr_2024:
    assume assertsPassed;
    goto SeqInstr_2025;

  SeqInstr_2025:
    goto corral_source_split_17728;

  corral_source_split_17728:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_2023:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_17721;

  corral_source_split_17721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} ldv_error();
    goto SeqInstr_2020, SeqInstr_2021;

  SeqInstr_2021:
    assume assertsPassed;
    goto SeqInstr_2022;

  SeqInstr_2022:
    goto corral_source_split_17722;

  corral_source_split_17722:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_2020:
    assume !assertsPassed;
    return;
}



const rsxx_dev_init: ref;

axiom rsxx_dev_init == $sub.ref(0, 706641);

procedure rsxx_dev_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50;



implementation rsxx_dev_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17754;

  corral_source_split_17754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} $p0 := kmem_cache_create(.str.33, 24, 8, 8192, $0.ref);
    goto corral_source_split_17755;

  corral_source_split_17755:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_17756;

  corral_source_split_17756:
    assume {:verifier.code 0} true;
    $p1 := $M.50;
    goto corral_source_split_17757;

  corral_source_split_17757:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_17758;

  corral_source_split_17758:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_17759;

  corral_source_split_17759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17763;

  corral_source_split_17763:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17761;

  corral_source_split_17761:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const rsxx_dma_init: ref;

axiom rsxx_dma_init == $sub.ref(0, 707673);

procedure rsxx_dma_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39;



implementation rsxx_dma_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17765;

  corral_source_split_17765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} $p0 := kmem_cache_create(.str.37, 72, 8, 8192, $0.ref);
    goto corral_source_split_17766;

  corral_source_split_17766:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_17767;

  corral_source_split_17767:
    assume {:verifier.code 0} true;
    $p1 := $M.39;
    goto corral_source_split_17768;

  corral_source_split_17768:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_17769;

  corral_source_split_17769:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_17770;

  corral_source_split_17770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17774;

  corral_source_split_17774:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17772;

  corral_source_split_17772:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const rsxx_creg_init: ref;

axiom rsxx_creg_init == $sub.ref(0, 708705);

procedure rsxx_creg_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation rsxx_creg_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17776;

  corral_source_split_17776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} $p0 := kmem_cache_create(.str.27, 64, 8, 8192, $0.ref);
    goto corral_source_split_17777;

  corral_source_split_17777:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_17778;

  corral_source_split_17778:
    assume {:verifier.code 0} true;
    $p1 := $M.6;
    goto corral_source_split_17779;

  corral_source_split_17779:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_17780;

  corral_source_split_17780:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_17781;

  corral_source_split_17781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17785;

  corral_source_split_17785:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17783;

  corral_source_split_17783:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv___pci_register_driver_51: ref;

axiom ldv___pci_register_driver_51 == $sub.ref(0, 709737);

procedure ldv___pci_register_driver_51($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.72, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_51($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17787;

  corral_source_split_17787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 3945} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_17788;

  corral_source_split_17788:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3946} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17789;

  corral_source_split_17789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} ldv_pci_driver_9();
    goto corral_source_split_17790;

  corral_source_split_17790:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rsxx_dma_cleanup: ref;

axiom rsxx_dma_cleanup == $sub.ref(0, 710769);

procedure rsxx_dma_cleanup();
  free requires assertsPassed;



implementation rsxx_dma_cleanup()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17792;

  corral_source_split_17792:
    assume {:verifier.code 0} true;
    $p0 := $M.39;
    goto corral_source_split_17793;

  corral_source_split_17793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} kmem_cache_destroy($p0);
    goto corral_source_split_17794;

  corral_source_split_17794:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_dev_cleanup: ref;

axiom rsxx_dev_cleanup == $sub.ref(0, 711801);

procedure rsxx_dev_cleanup();
  free requires assertsPassed;



implementation rsxx_dev_cleanup()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17796;

  corral_source_split_17796:
    assume {:verifier.code 0} true;
    $p0 := $M.50;
    goto corral_source_split_17797;

  corral_source_split_17797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} kmem_cache_destroy($p0);
    goto corral_source_split_17798;

  corral_source_split_17798:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 712833);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17800;

  corral_source_split_17800:
    assume {:verifier.code 0} true;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 713865);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17802;

  corral_source_split_17802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3950} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 3951} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_17803;

  corral_source_split_17803:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 714897);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 3953} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 3954} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_17805;

  corral_source_split_17805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} $p5 := external_alloc();
    goto corral_source_split_17806;

  corral_source_split_17806:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_17807;

  corral_source_split_17807:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_pci_unregister_driver_52: ref;

axiom ldv_pci_unregister_driver_52 == $sub.ref(0, 715929);

procedure ldv_pci_unregister_driver_52($p0: ref);
  free requires assertsPassed;
  modifies $M.79;



implementation ldv_pci_unregister_driver_52($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17809;

  corral_source_split_17809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} pci_unregister_driver($p0);
    goto corral_source_split_17810;

  corral_source_split_17810:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 3957} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_17811;

  corral_source_split_17811:
    assume {:verifier.code 0} true;
    return;
}



const rsxx_creg_cleanup: ref;

axiom rsxx_creg_cleanup == $sub.ref(0, 716961);

procedure rsxx_creg_cleanup();
  free requires assertsPassed;



implementation rsxx_creg_cleanup()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17813;

  corral_source_split_17813:
    assume {:verifier.code 0} true;
    $p0 := $M.6;
    goto corral_source_split_17814;

  corral_source_split_17814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} kmem_cache_destroy($p0);
    goto corral_source_split_17815;

  corral_source_split_17815:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 717993);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17817;

  corral_source_split_17817:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 719025);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3959} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_17819;

  corral_source_split_17819:
    assume {:verifier.code 1} true;
    goto corral_source_split_17820;

  corral_source_split_17820:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_17821;

  corral_source_split_17821:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 720057);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 721089);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 722121);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17823;

  corral_source_split_17823:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_2038, SeqInstr_2039;

  SeqInstr_2039:
    assume assertsPassed;
    goto SeqInstr_2040;

  SeqInstr_2040:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_17824;

  corral_source_split_17824:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2038:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 723153);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 724185);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 725217);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 726249);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 727281);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 728313);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 729345);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 730377);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 731409);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 732441);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17826;

  corral_source_split_17826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3960} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3961} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3962} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_17827;

  corral_source_split_17827:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_17828;

  corral_source_split_17828:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_17832;

  corral_source_split_17832:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_17833;

  corral_source_split_17833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3963} __VERIFIER_assume($i4);
    goto corral_source_split_17834;

  corral_source_split_17834:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_17830;

  corral_source_split_17830:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 733473);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 734505);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 735537);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 736569);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17836;

  corral_source_split_17836:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3964} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3965} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3966} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_17837;

  corral_source_split_17837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3967} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3968} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3969} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_17838;

  corral_source_split_17838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3970} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3971} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3972} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_17839;

  corral_source_split_17839:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_17840;

  corral_source_split_17840:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_17845;

  corral_source_split_17845:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_17846;

  corral_source_split_17846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3973} __VERIFIER_assume($i7);
    goto corral_source_split_17847;

  corral_source_split_17847:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_17848;

  corral_source_split_17848:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_17854;

  corral_source_split_17854:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_17855;

  corral_source_split_17855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3974} __VERIFIER_assume($i11);
    goto corral_source_split_17856;

  corral_source_split_17856:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_17852;

  corral_source_split_17852:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17842;

  corral_source_split_17842:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_17843;

  corral_source_split_17843:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_17850;

  corral_source_split_17850:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 737601);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 738633);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17858;

  corral_source_split_17858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3975} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 3976} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3977} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_17859;

  corral_source_split_17859:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_17860;

  corral_source_split_17860:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_17864;

  corral_source_split_17864:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_17865;

  corral_source_split_17865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3978} __VERIFIER_assume($i4);
    goto corral_source_split_17866;

  corral_source_split_17866:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_17862;

  corral_source_split_17862:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 739665);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 740697);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 741729);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 742761);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 743793);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17868;

  corral_source_split_17868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3979} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3980} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3981} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_17869;

  corral_source_split_17869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3982} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3983} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3984} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_17870;

  corral_source_split_17870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3985} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3986} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3987} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_17871;

  corral_source_split_17871:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_17872;

  corral_source_split_17872:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_17877;

  corral_source_split_17877:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_17878;

  corral_source_split_17878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3988} __VERIFIER_assume($i7);
    goto corral_source_split_17879;

  corral_source_split_17879:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_17880;

  corral_source_split_17880:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_17886;

  corral_source_split_17886:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_17887;

  corral_source_split_17887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3989} __VERIFIER_assume($i11);
    goto corral_source_split_17888;

  corral_source_split_17888:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_17884;

  corral_source_split_17884:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17874;

  corral_source_split_17874:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_17875;

  corral_source_split_17875:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_17882;

  corral_source_split_17882:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 744825);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 745857);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 746889);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 747921);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 748953);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 749985);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 751017);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 752049);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 753081);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17890;

  corral_source_split_17890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3990} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_17891;

  corral_source_split_17891:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_17892;

  corral_source_split_17892:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3992} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_17893;

  corral_source_split_17893:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_17894;

  corral_source_split_17894:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_17895;

  corral_source_split_17895:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_17896;

  corral_source_split_17896:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_17903;

  corral_source_split_17903:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_17904;

  corral_source_split_17904:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_17905;

  corral_source_split_17905:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_17906;

  corral_source_split_17906:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_17898;

  corral_source_split_17898:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_17899;

  corral_source_split_17899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3993} __VERIFIER_assume($i10);
    goto corral_source_split_17900;

  corral_source_split_17900:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_17901;

  corral_source_split_17901:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 754113);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17908;

  corral_source_split_17908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3994} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3995} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3996} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_17909;

  corral_source_split_17909:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 755145);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17911;

  corral_source_split_17911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3997} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3998} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3999} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_17912;

  corral_source_split_17912:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 756177);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17914;

  corral_source_split_17914:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4000} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 4001} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_17915;

  corral_source_split_17915:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 757209);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 758241);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4002} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 4003} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 759273);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 760305);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_17917;

  corral_source_split_17917:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_17918;

  corral_source_split_17918:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 761337);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4004} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 4005} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_17920;

  corral_source_split_17920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4006} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_17921;

  corral_source_split_17921:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_17922;

  corral_source_split_17922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_17926;

  corral_source_split_17926:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_17927;

  corral_source_split_17927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} $p6 := malloc($i5);
    goto corral_source_split_17928;

  corral_source_split_17928:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_17929;

  corral_source_split_17929:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 4009} cmdloc_dummy_var_33 := $memset.i8(cmdloc_dummy_var_32, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17931;

  corral_source_split_17931:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_17924;

  corral_source_split_17924:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 762369);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 763401);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.37, $M.33, $M.31, $M.35, $M.63, $M.64, $M.65, $M.66, $M.67, $M.32, $M.34, $M.36, $M.38, $M.55, $M.56, $M.57, $M.58, $M.61, $M.62, $M.69, $M.71, $M.72, $M.73, $M.74, $M.76, $M.79, $M.80, $M.81, $M.82, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.23, $M.25, $M.27, $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.24, $M.26, $M.28, $M.30, $M.112, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.54, $M.7, $M.115, $M.114, $M.113, $M.21, $M.0, $M.48, $M.47, $M.22, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.18, $M.16, $M.168, $M.39, $M.50, $M.6, $M.169;



implementation __SMACK_static_init()
{

  $bb0:
    $M.37 := 0;
    call {:si_unique_call 4010} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    call {:si_unique_call 4011} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.33 := 0;
    call {:si_unique_call 4012} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 4013} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 4014} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 4015} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.64 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 4016} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 4017} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 4018} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 4019} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 4020} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 4021} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 4022} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.58 := $0.ref;
    $M.61 := $0.ref;
    $M.62 := $0.ref;
    $M.69 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    call {:si_unique_call 4023} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 4024} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    call {:si_unique_call 4025} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 4026} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 4027} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 4028} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 4029} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 4030} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 4031} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    call {:si_unique_call 4032} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 4033} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 4034} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 4035} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 4036} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    call {:si_unique_call 4037} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 4038} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 4039} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 4040} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 4041} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 4042} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 4043} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 4044} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 4045} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 4046} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 4047} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 4048} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 4049} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 4050} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 4051} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 4052} {:cexpr "ldv_timer_6_0"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 4053} {:cexpr "ldv_timer_6_1"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 4054} {:cexpr "ldv_timer_6_2"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 4055} {:cexpr "ldv_timer_6_3"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.24 := $0.ref;
    $M.26 := $0.ref;
    $M.28 := $0.ref;
    $M.30 := $0.ref;
    $M.112 := $0.ref;
    call {:si_unique_call 4056} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    call {:si_unique_call 4057} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    call {:si_unique_call 4058} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    call {:si_unique_call 4059} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    call {:si_unique_call 4060} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    call {:si_unique_call 4061} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    call {:si_unique_call 4062} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    call {:si_unique_call 4063} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    call {:si_unique_call 4064} {:cexpr "ldv_timer_7_0"} boogie_si_record_i32(0);
    call {:si_unique_call 4065} {:cexpr "ldv_timer_7_1"} boogie_si_record_i32(0);
    call {:si_unique_call 4066} {:cexpr "ldv_timer_7_2"} boogie_si_record_i32(0);
    call {:si_unique_call 4067} {:cexpr "ldv_timer_7_3"} boogie_si_record_i32(0);
    $M.131 := $store.i32($M.131, __mod_pci__rsxx_pci_ids_device_table, 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.133 := $store.i32($M.133, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.135 := $store.i32($M.135, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.137 := $store.i64($M.137, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.133 := $store.i32($M.133, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.135 := $store.i32($M.135, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.137 := $store.i64($M.137, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.133 := $store.i32($M.133, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.135 := $store.i32($M.135, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.136 := $store.i32($M.136, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.137 := $store.i64($M.137, $add.ref($add.ref($add.ref(__mod_pci__rsxx_pci_ids_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.54 := 1;
    call {:si_unique_call 4068} {:cexpr "ldv_mutex_work_lock_of_rsxx_dma_ctrl"} boogie_si_record_i32(1);
    $M.7 := 1;
    call {:si_unique_call 4069} {:cexpr "ldv_mutex_reset_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    $M.115 := 1;
    call {:si_unique_call 4070} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.114 := 1;
    call {:si_unique_call 4071} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.113 := 1;
    call {:si_unique_call 4072} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.21 := 1;
    call {:si_unique_call 4073} {:cexpr "ldv_mutex_dev_lock_of_rsxx_cardinfo"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, rsxx_fops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(24, 1)), rsxx_blkdev_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(80, 1)), rsxx_getgeo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rsxx_fops, $mul.ref(0, 104)), $mul.ref(96, 1)), __this_module);
    $M.48 := 1024;
    call {:si_unique_call 4074} {:cexpr "blkdev_max_hw_sectors"} boogie_si_record_i32(1024);
    $M.47 := 64;
    call {:si_unique_call 4075} {:cexpr "blkdev_minors"} boogie_si_record_i32(64);
    $M.22 := 1;
    call {:si_unique_call 4076} {:cexpr "enable_blkdev"} boogie_si_record_i32(1);
    $M.138 := $store.ref($M.138, rsxx_err_handler, rsxx_error_detected);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(rsxx_err_handler, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(rsxx_err_handler, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(rsxx_err_handler, $mul.ref(0, 48)), $mul.ref(24, 1)), rsxx_slot_reset);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(rsxx_err_handler, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(rsxx_err_handler, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.138 := $store.i32($M.138, rsxx_pci_ids, 4116);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1193);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.138 := $store.i64($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4116);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 1194);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.138 := $store.i64($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.138 := $store.i32($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.138 := $store.i64($M.138, $add.ref($add.ref($add.ref(rsxx_pci_ids, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.139 := $store.ref($M.139, rsxx_pci_driver, $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.5);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), rsxx_pci_ids);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), rsxx_pci_probe);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), rsxx_pci_remove);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), rsxx_pci_suspend);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), rsxx_pci_shutdown);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), rsxx_err_handler);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.139 := $store.i8($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.139 := $store.i64($M.139, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref($add.ref(rsxx_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.140 := $store.ref($M.140, debugfs_cram_fops, __this_module);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), $0.ref);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), rsxx_cram_read);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), rsxx_cram_write);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), $0.ref);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.161 := $store.ref($M.161, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.162 := $store.ref($M.162, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.164 := $store.ref($M.164, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.165 := $store.ref($M.165, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.166 := $store.ref($M.166, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.167 := $store.ref($M.167, $add.ref($add.ref(debugfs_cram_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.140 := $store.ref($M.140, debugfs_pci_regs_fops, __this_module);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), rsxx_attr_pci_regs_open);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.161 := $store.ref($M.161, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.162 := $store.ref($M.162, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.164 := $store.ref($M.164, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.165 := $store.ref($M.165, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.166 := $store.ref($M.166, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.167 := $store.ref($M.167, $add.ref($add.ref(debugfs_pci_regs_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.140 := $store.ref($M.140, debugfs_stats_fops, __this_module);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(8, 1)), seq_lseek);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(16, 1)), seq_read);
    $M.143 := $store.ref($M.143, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(24, 1)), $0.ref);
    $M.144 := $store.ref($M.144, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(32, 1)), $0.ref);
    $M.145 := $store.ref($M.145, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(40, 1)), $0.ref);
    $M.146 := $store.ref($M.146, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(48, 1)), $0.ref);
    $M.147 := $store.ref($M.147, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(56, 1)), $0.ref);
    $M.148 := $store.ref($M.148, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(64, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(72, 1)), $0.ref);
    $M.150 := $store.ref($M.150, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(80, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(88, 1)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(96, 1)), rsxx_attr_stats_open);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(104, 1)), $0.ref);
    $M.154 := $store.ref($M.154, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(112, 1)), single_release);
    $M.155 := $store.ref($M.155, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(120, 1)), $0.ref);
    $M.156 := $store.ref($M.156, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(128, 1)), $0.ref);
    $M.157 := $store.ref($M.157, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(136, 1)), $0.ref);
    $M.158 := $store.ref($M.158, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(144, 1)), $0.ref);
    $M.159 := $store.ref($M.159, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(152, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(160, 1)), $0.ref);
    $M.161 := $store.ref($M.161, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(168, 1)), $0.ref);
    $M.162 := $store.ref($M.162, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(176, 1)), $0.ref);
    $M.163 := $store.ref($M.163, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(184, 1)), $0.ref);
    $M.164 := $store.ref($M.164, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(192, 1)), $0.ref);
    $M.165 := $store.ref($M.165, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(200, 1)), $0.ref);
    $M.166 := $store.ref($M.166, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.167 := $store.ref($M.167, $add.ref($add.ref(debugfs_stats_fops, $mul.ref(0, 224)), $mul.ref(216, 1)), $0.ref);
    $M.18 := 1;
    call {:si_unique_call 4077} {:cexpr "sync_start"} boogie_si_record_i32(1);
    $M.16 := 0;
    call {:si_unique_call 4078} {:cexpr "force_legacy"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, rsxx_ida_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.104);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_ida_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.168 := $store.ref($M.168, rsxx_disk_ida, $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.103);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.168 := $store.i64($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref(rsxx_disk_ida, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.39 := $0.ref;
    $M.50 := $0.ref;
    $M.6 := $0.ref;
    $M.0 := $store.i8($M.0, .str.104, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.169 := $store.i8($M.169, .str.32, 114);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(2, 1)), 120);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(3, 1)), 120);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.32, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 4079} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 764433);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 765465);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(read_hw_log_done, $p0);
    assume {:branchcond $i4} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i4 == 1);
    $i3 := $eq.ref(bio_dma_done_cb, $p0);
    assume {:branchcond $i3} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i3 == 1);
    $i2 := $eq.ref(creg_cmd_done_cb, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4080} creg_cmd_done_cb(arg, arg1, arg2);
    return;

  $bb3:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4081} bio_dma_done_cb(arg, $p1, arg2);
    return;

  $bb4:
    assume $i4 == 1;
    call {:si_unique_call 4082} read_hw_log_done(arg, arg1, arg2);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 766497);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(rsxx_make_request, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4083} rsxx_make_request($p1, $p2);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 767529);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(read_hw_log_done, $p0);
    assume {:branchcond $i5} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(bio_dma_done_cb, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i4 == 1);
    $i3 := $eq.ref(creg_cmd_done_cb, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4084} creg_cmd_done_cb(arg, $p1, arg2);
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 4085} bio_dma_done_cb(arg, arg1, arg2);
    return;

  $bb4:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4086} read_hw_log_done(arg, $p2, arg2);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 768561);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 769593);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4087} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 770625);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4088} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 771657);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 772689);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 773721);

procedure devirtbounce.9(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 774753);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 775785);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 776817);

procedure devirtbounce.12(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 4089} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 777849);

procedure devirtbounce.13(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation devirtbounce.13(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(rsxx_isr, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 4090} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 4091} $i3 := rsxx_isr(arg, $p2);
    $r := $i3;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.37, $M.33, $M.31, $M.35, $M.63, $M.64, $M.65, $M.66, $M.67, $M.32, $M.34, $M.36, $M.38, $M.55, $M.56, $M.57, $M.58, $M.61, $M.62, $M.69, $M.71, $M.72, $M.73, $M.74, $M.76, $M.79, $M.80, $M.81, $M.82, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.23, $M.25, $M.27, $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.24, $M.26, $M.28, $M.30, $M.112, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.54, $M.7, $M.115, $M.114, $M.113, $M.21, $M.0, $M.48, $M.47, $M.22, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.18, $M.16, $M.168, $M.39, $M.50, $M.6, $M.169, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 4092} __SMACK_static_init();
    call {:si_unique_call 4093} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.60, $M.76, $M.79, $M.80, $M.63, $M.65, $M.66, $M.67, $M.81, $M.82, $M.83, $M.85, $M.86, $M.87, $M.88, $M.90, $M.0, $M.91, $M.19, $M.93, $M.94, $M.95, $M.96, $M.97, $M.31, $M.98, $M.61, $M.62, $M.69, $M.71, $M.73, $M.74, $M.99, $M.37, $M.33, $M.35, $M.64, $M.32, $M.34, $M.36, $M.38, $M.55, $M.56, $M.57, $M.58, $M.72, $M.92, $M.23, $M.25, $M.27, $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.24, $M.26, $M.28, $M.30, $M.112, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.54, $M.7, $M.115, $M.114, $M.113, $M.21, $M.48, $M.47, $M.22, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.18, $M.16, $M.168, $M.39, $M.50, $M.6, $M.169, $CurrAddr, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.20, $M.49, $M.51, $M.52;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation issue_creg_rw_loop_$bb1(in_$p0: ref, in_$i4: i32, in_$p6: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1) returns (out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22 := in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  $bb9:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10, out_$p11 := out_$i21, out_$i20, out_$p19;
    goto $bb9_dummy;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i9, out_$i13);
    call {:si_unique_call 71} {:cexpr "size8"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i10, out_$i13);
    call {:si_unique_call 70} {:cexpr "addr"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p11, $mul.ref(out_$i18, 1));
    goto corral_source_split_172;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i13);
    goto corral_source_split_171;

  $bb6:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i14;
    assume true;
    goto $bb6;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_165;

  SeqInstr_12:
    call {:si_unique_call 69} {:cexpr "st"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_164;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i14 := __issue_creg_rw(in_$p0, in_$i8, out_$i10, out_$i13, out_$p11, in_$i4, in_$p6);
    goto SeqInstr_11;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i13 := 32;
    goto $bb4;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i9;
    goto $bb4;

  $bb2:
    assume out_$i12 == 1;
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i12 := $ult.i32(out_$i9, 32);
    goto corral_source_split_157;

  $bb3:
    assume !(out_$i12 == 1);
    goto corral_source_split_161;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22 := issue_creg_rw_loop_$bb1(in_$p0, in_$i4, in_$p6, in_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure issue_creg_rw_loop_$bb1(in_$p0: ref, in_$i4: i32, in_$p6: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i1, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1) returns (out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i1, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1);
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation creg_cmd_done_cb_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} creg_cmd_done_cb_loop_$bb3();
    return;

  exit:
    return;
}



procedure creg_cmd_done_cb_loop_$bb3();



implementation creg_reset_loop_$bb8(in_$p0: ref, in_$i29: i64, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref) returns (out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref)
{

  entry:
    out_$p33, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32 := in_$p33, in_$p35, in_$i36, in_$i37, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p49, in_$p50, in_$p52, in_$i53, in_$i54, in_$p31, in_$p32;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  $bb13:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$p32 := out_$p32, out_$p50;
    goto $bb13_dummy;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i29);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p32, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} kmem_cache_free(out_$p46, out_$p47);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_393;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p46 := $M.6;
    goto corral_source_split_392;

  $bb11:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    call {:si_unique_call 126} devirtbounce.1(out_$p45, in_$p0, out_$p31, $sub.i32(0, 125));
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p31, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_389;

  $bb10:
    assume out_$i43 == 1;
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p31, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i37);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i36, 1);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(192, 1));
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} list_del(out_$p33);
    goto corral_source_split_377;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p33, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32 := creg_reset_loop_$bb8(in_$p0, in_$i29, out_$p33, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p50, out_$p52, out_$i53, out_$i54, out_$p31, out_$p32);
    return;

  exit:
    return;
}



procedure creg_reset_loop_$bb8(in_$p0: ref, in_$i29: i64, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p31: ref, in_$p32: ref) returns (out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p31: ref, out_$p32: ref);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation copy_to_creg_data_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i14: i32, in_$i15: i32) returns (out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i14: i32, out_$i15: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15 := in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i14, in_$i15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i33, out_$i34;
    goto $bb13_dummy;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, 0);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i15, $sub.i32(0, 4));
    call {:si_unique_call 230} {:cexpr "cnt8"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_839;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i14, 1);
    call {:si_unique_call 229} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} iowrite32(out_$i28, out_$p32);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} iowrite32be(out_$i20, out_$p24);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p22, $mul.ref(out_$i23, 1));
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i17);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p4, $mul.ref(out_$i18, 4));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i14);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} out_$i17 := CREG_DATA(out_$i14);
    call {:si_unique_call 224} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_818;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(in_$i3, 0);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 1));
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i25);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p4, $mul.ref(out_$i26, 4));
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i14);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_$i25 := CREG_DATA(out_$i14);
    call {:si_unique_call 227} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_829;

  $bb11:
    assume !(out_$i16 == 1);
    goto corral_source_split_828;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15 := copy_to_creg_data_loop_$bb8(in_$p0, in_$i3, in_$p4, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure copy_to_creg_data_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i14: i32, in_$i15: i32) returns (out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i14: i32, out_$i15: i32);



implementation rsxx_pci_probe_loop_$bb8(in_$p8: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32) returns (out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32)
{

  entry:
    out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22 := in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb11_dummy;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} out_$i16 := ida_pre_get(rsxx_disk_ida, 208);
    call {:si_unique_call 288} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_1058;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_1057;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb9;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, $sub.i32(0, 11));
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} spin_unlock(rsxx_ida_lock);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_$i20 := ida_get_new(rsxx_disk_ida, out_$p19);
    call {:si_unique_call 292} {:cexpr "st"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1184)), $mul.ref(1084, 1));
    goto corral_source_split_1068;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} spin_lock(rsxx_ida_lock);
    goto corral_source_split_1067;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22 := rsxx_pci_probe_loop_$bb8(in_$p8, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure rsxx_pci_probe_loop_$bb8(in_$p8: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32) returns (out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32);



implementation rsxx_pci_remove_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p8);
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1588} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5045;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} spin_unlock_irqrestore(out_$p16, out_$i14);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} rsxx_disable_ier_and_isr(in_$p2, out_$i15);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_$i15 := CR_INTR_DMA(out_$i11);
    call {:si_unique_call 1585} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_$i14 := _raw_spin_lock_irqsave(out_$p13);
    call {:si_unique_call 1583} {:cexpr "flags"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_$p13 := spinlock_check(out_$p12);
    goto corral_source_split_5039;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5038;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11 := rsxx_pci_remove_loop_$bb8(in_$p2, in_$p8, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11);
    return;

  exit:
    return;
}



procedure rsxx_pci_remove_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i11: i32);
  modifies $M.0, $M.20, $CurrAddr;



implementation rsxx_pci_shutdown_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5121;

  $bb10:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i17;
    goto $bb10_dummy;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p8);
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1624} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} spin_unlock_irqrestore(out_$p16, out_$i14);
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} rsxx_disable_ier_and_isr(in_$p2, out_$i15);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_$i15 := CR_INTR_DMA(out_$i11);
    call {:si_unique_call 1621} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} out_$i14 := _raw_spin_lock_irqsave(out_$p13);
    call {:si_unique_call 1619} {:cexpr "flags"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_$p13 := spinlock_check(out_$p12);
    goto corral_source_split_5124;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11 := rsxx_pci_shutdown_loop_$bb8(in_$p2, in_$p8, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i11);
    return;

  exit:
    return;
}



procedure rsxx_pci_shutdown_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i11: i32);
  modifies $M.0, $M.20, $CurrAddr;



implementation card_shutdown_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i26: i64, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb33_dummy;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb33;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_5248;

  SeqInstr_1893:
    call {:si_unique_call 1647} {:cexpr "st"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5247;

  SeqInstr_1892:
    assume assertsPassed;
    goto SeqInstr_1893;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} out_$i30 := rsxx_get_card_state(in_$p0, in_$p1);
    goto SeqInstr_1892;

  $bb31:
    assume out_$i38 == 1;
    goto corral_source_split_5246;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i38 := $ult.i64(out_$i36, out_$i37);
    goto corral_source_split_5259;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(in_$i3);
    goto corral_source_split_5258;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i64(out_$i35, in_$i26);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_5256;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 1);
    goto corral_source_split_5253;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5252;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38 := card_shutdown_loop_$bb30(in_$p0, in_$p1, in_$i3, in_$i26, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure card_shutdown_loop_$bb30(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i26: i64, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1);
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation card_shutdown_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i4: i64, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$i17: i1) returns (out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$i17: i1)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17 := in_$i8, in_$i9, in_$i10, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb7_dummy;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_5205;

  SeqInstr_1884:
    call {:si_unique_call 1640} {:cexpr "st"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_5204;

  SeqInstr_1883:
    assume assertsPassed;
    goto SeqInstr_1884;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} out_$i8 := rsxx_get_card_state(in_$p0, in_$p1);
    goto SeqInstr_1883;

  $bb5:
    assume out_$i17 == 1;
    goto corral_source_split_5203;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i64(out_$i15, out_$i16);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(in_$i3);
    goto corral_source_split_5217;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i64(out_$i14, in_$i4);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, jiffies);
    goto corral_source_split_5215;

  $bb10:
    assume out_$i13 == 1;
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 2);
    goto corral_source_split_5212;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5211;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17 := card_shutdown_loop_$bb4(in_$p0, in_$p1, in_$i3, in_$i4, out_$i8, out_$i9, out_$i10, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17);
    return;

  exit:
    return;
}



procedure card_shutdown_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i4: i64, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$i15: i64, in_$i16: i64, in_$i17: i1) returns (out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$i15: i64, out_$i16: i64, out_$i17: i1);
  modifies $M.0, $CurrAddr, $M.7, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.8, $M.10, $M.12, $M.14, $M.9, $M.11, $M.13, $M.15, assertsPassed;



implementation rsxx_dma_destroy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i4: i32, in_vslice_dummy_var_643: i32, in_vslice_dummy_var_644: i32, in_vslice_dummy_var_645: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i4: i32, out_vslice_dummy_var_643: i32, out_vslice_dummy_var_644: i32, out_vslice_dummy_var_645: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i4, out_vslice_dummy_var_643, out_vslice_dummy_var_644, out_vslice_dummy_var_645 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p28, in_$p29, in_$p31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p39, in_$p40, in_$p42, in_$i43, in_$p44, in_$p45, in_$p47, in_$p48, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i4, in_vslice_dummy_var_643, in_vslice_dummy_var_644, in_vslice_dummy_var_645;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5345;

  $bb15:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i52;
    goto $bb15_dummy;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i53, out_$i52);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1680} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} pci_free_consistent(out_$p45, 4096, out_$p48, out_$i51);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} pci_free_consistent(out_$p37, 4096, out_$p40, out_$i43);
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5396;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} vfree(out_$p35);
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(472, 1));
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_645 := rsxx_dma_cancel(out_$p8);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} spin_unlock_bh(out_$p31);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(80, 1));
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_644 := rsxx_cleanup_dma_queue(out_$p8, out_$p29, 1);
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(152, 1));
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} spin_lock_bh(out_$p28);
    goto corral_source_split_5384;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(80, 1));
    goto corral_source_split_5383;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_643 := ldv_del_timer_sync_182(out_$p26);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(344, 1));
    goto corral_source_split_5380;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_5379;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_$i24 := timer_pending(out_$p23);
    call {:si_unique_call 1671} {:cexpr "tmp"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5376;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(344, 1));
    goto corral_source_split_5375;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p22, $0.ref);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} ldv_destroy_workqueue_181(out_$p21);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5369;

  $bb9:
    assume out_$i19 == 1;
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_5365;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_5364;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(256, 1));
    goto corral_source_split_5363;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, $0.ref);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_destroy_workqueue_180(out_$p14);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5357;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_5354;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 712)), $mul.ref(168, 1));
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 712));
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_5348;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i4, out_vslice_dummy_var_643, out_vslice_dummy_var_644, out_vslice_dummy_var_645 := rsxx_dma_destroy_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$p44, out_$p45, out_$p47, out_$p48, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i4, out_vslice_dummy_var_643, out_vslice_dummy_var_644, out_vslice_dummy_var_645);
    return;

  exit:
    return;
}



procedure rsxx_dma_destroy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i4: i32, in_vslice_dummy_var_643: i32, in_vslice_dummy_var_644: i32, in_vslice_dummy_var_645: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i4: i32, out_vslice_dummy_var_643: i32, out_vslice_dummy_var_644: i32, out_vslice_dummy_var_645: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_creg_destroy_loop_$bb4(in_$p0: ref, in_$i16: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i39: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i39: i32)
{

  entry:
    out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i19, out_$p20, out_$p21, out_$i39 := in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$i19, in_$p20, in_$p21, in_$i39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5439;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$p20, out_$p21 := out_$i31, out_$p21, out_$p34;
    goto $bb9_dummy;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i31;
    assume true;
    goto $bb9;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, in_$i16);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1688} {:cexpr "cnt"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} kmem_cache_free(out_$p29, out_$p30);
    goto corral_source_split_5454;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_5453;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p29 := $M.6;
    goto corral_source_split_5452;

  $bb7:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    call {:si_unique_call 1686} devirtbounce.1(out_$p28, in_$p0, out_$p20, $sub.i32(0, 125));
    goto corral_source_split_5450;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5449;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_5448;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5443;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} list_del(out_$p22);
    goto corral_source_split_5442;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5441;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i19, out_$p20, out_$p21, out_$i39 := rsxx_creg_destroy_loop_$bb4(in_$p0, in_$i16, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$i19, out_$p20, out_$p21, out_$i39);
    return;

  exit:
    return;
}



procedure rsxx_creg_destroy_loop_$bb4(in_$p0: ref, in_$i16: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i39: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i39: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_cleanup_dma_queue_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i12: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i15: i32, in_$p16: ref, in_$p17: ref, in_$i29: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i15: i32, out_$p16: ref, out_$p17: ref, out_$i29: i32)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$i15, out_$p16, out_$p17, out_$i29 := in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$i15, in_$p16, in_$p17, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  $bb9:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$p16, out_$p17 := out_$i21, out_$p24, out_$p16;
    goto $bb9_dummy;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb9;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i12);
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5679;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p16, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5675;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1728} {:cexpr "cnt"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} rsxx_free_dma(in_$p0, out_$p17);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} rsxx_complete_dma(in_$p0, out_$p17, 4);
    goto corral_source_split_5670;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(in_$i2, 1);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} list_del(out_$p18);
    goto corral_source_split_5665;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i20 == 1);
    goto corral_source_split_5672;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$i15, out_$p16, out_$p17, out_$i29 := rsxx_cleanup_dma_queue_loop_$bb4(in_$p0, in_$i2, in_$i12, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$i15, out_$p16, out_$p17, out_$i29);
    return;

  exit:
    return;
}



procedure rsxx_cleanup_dma_queue_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i12: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i15: i32, in_$p16: ref, in_$p17: ref, in_$i29: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i15: i32, out_$p16: ref, out_$p17: ref, out_$i29: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation copy_from_creg_data_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i14: i32, in_$i15: i32) returns (out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i14: i32, out_$i15: i32)
{

  entry:
    out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15 := in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i14, in_$i15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10506;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i33, out_$i34;
    goto $bb13_dummy;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, 0);
    goto corral_source_split_10533;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i15, $sub.i32(0, 4));
    call {:si_unique_call 2846} {:cexpr "cnt8"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_10532;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i14, 1);
    call {:si_unique_call 2845} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i30);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p24, out_$i22);
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p4, $mul.ref(out_$i23, 4));
    goto corral_source_split_10518;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i14);
    goto corral_source_split_10517;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} out_$i22 := ioread32be(out_$p21);
    goto corral_source_split_10516;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 1));
    goto corral_source_split_10515;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i17);
    goto corral_source_split_10514;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_10513;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} out_$i17 := CREG_DATA(out_$i14);
    call {:si_unique_call 2840} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_10511;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_10510;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(in_$i3, 0);
    goto corral_source_split_10508;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(in_$p4, $mul.ref(out_$i31, 4));
    goto corral_source_split_10529;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i14);
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} out_$i30 := ioread32(out_$p29);
    goto corral_source_split_10527;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p27, $mul.ref(out_$i28, 1));
    goto corral_source_split_10526;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i25);
    goto corral_source_split_10525;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10523;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} out_$i25 := CREG_DATA(out_$i14);
    call {:si_unique_call 2843} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_10522;

  $bb11:
    assume !(out_$i16 == 1);
    goto corral_source_split_10521;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15 := copy_from_creg_data_loop_$bb8(in_$p0, in_$i3, in_$p4, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure copy_from_creg_data_loop_$bb8(in_$p0: ref, in_$i3: i32, in_$p4: ref, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i14: i32, in_$i15: i32) returns (out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i14: i32, out_$i15: i32);
  modifies $M.0;



implementation rsxx_isr_loop_$bb19(in_$p2: ref, in_$i33: i32, in_$p36: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i32, in_$i73: i32, in_vslice_dummy_var_648: i1) returns (out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i32, out_$i73: i32, out_vslice_dummy_var_648: i1)
{

  entry:
    out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_vslice_dummy_var_648 := in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p64, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i41, in_$i42, in_$i43, in_$i72, in_$i73, in_vslice_dummy_var_648;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10651;

  $bb27:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43 := out_$i69, out_$i68, out_$i67;
    goto $bb27_dummy;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i67, out_$i68;
    assume true;
    goto $bb27;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, out_$i69);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p36);
    goto corral_source_split_10685;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i41, 1);
    call {:si_unique_call 2894} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_10684;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10683;

  $bb22:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i43, out_$i42;
    goto $bb26;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i66, out_$i53;
    goto $bb26;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i43, 1);
    call {:si_unique_call 2893} {:cexpr "handled"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} out_vslice_dummy_var_648 := queue_work(out_$p59, out_$p64);
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 712)), $mul.ref(264, 1));
    goto corral_source_split_10679;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i41);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 712)), $mul.ref(256, 1));
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i41);
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10669;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  $bb24:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := out_$i42;
    goto $bb25;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$i53 := 1;
    goto $bb25;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rsxx_disable_ier(in_$p2, out_$i52);
    goto corral_source_split_10666;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} out_$i52 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2890} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_10665;

  $bb23:
    assume out_$i51 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, out_$i47);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} out_$i47 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2888} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_10658;

  $bb21:
    assume out_$i46 == 1;
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i33);
    goto corral_source_split_10654;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} out_$i44 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2886} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_10653;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_vslice_dummy_var_648 := rsxx_isr_loop_$bb19(in_$p2, in_$i33, in_$p36, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_vslice_dummy_var_648);
    return;

  exit:
    return;
}



procedure rsxx_isr_loop_$bb19(in_$p2: ref, in_$i33: i32, in_$p36: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i32, in_$i73: i32, in_vslice_dummy_var_648: i1) returns (out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i32, out_$i73: i32, out_vslice_dummy_var_648: i1);
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.0, $M.20, $CurrAddr;



implementation rsxx_isr_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i12: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i32, in_$i73: i32, in_$i39: i32, in_$i40: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_vslice_dummy_var_648: i1, in_vslice_dummy_var_649: i1, in_vslice_dummy_var_650: i1) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i12: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i32, out_$i73: i32, out_$i39: i32, out_$i40: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_vslice_dummy_var_648: i1, out_vslice_dummy_var_649: i1, out_vslice_dummy_var_650: i1)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i39, out_$i40, out_$i74, out_$i75, out_$p77, out_$p78, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i90, out_$i91, out_$i92, out_$i93, out_vslice_dummy_var_648, out_vslice_dummy_var_649, out_vslice_dummy_var_650 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i12, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p64, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i41, in_$i42, in_$i43, in_$i72, in_$i73, in_$i39, in_$i40, in_$i74, in_$i75, in_$p77, in_$p78, in_$p80, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$i90, in_$i91, in_$i92, in_$i93, in_vslice_dummy_var_648, in_vslice_dummy_var_649, in_vslice_dummy_var_650;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := out_$i13;
    goto $bb7_dummy;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i13;
    assume true;
    goto $bb7;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} out_$i18 := ldv__builtin_expect(out_$i17, 0);
    call {:si_unique_call 2879} {:cexpr "tmp"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_10615;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_10614;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_10613;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_10612;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10611;

  $bb5:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10610;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i13, out_$i93 := out_$i91, out_$i91;
    assume true;
    goto $bb5;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i40, 0);
    goto corral_source_split_10713;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_10712;

  $bb34:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := out_$i83;
    goto $bb35;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i90;
    goto $bb35;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i83, 1);
    call {:si_unique_call 2899} {:cexpr "handled"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} rsxx_disable_ier_and_isr(in_$p2, 8);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} out_vslice_dummy_var_650 := queue_work(out_$p87, out_$p88);
    goto corral_source_split_10708;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(824, 1));
    goto corral_source_split_10707;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_10706;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(816, 1));
    goto corral_source_split_10705;

  $bb33:
    assume out_$i85 == 1;
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i33, 8);
    goto corral_source_split_10701;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10700;

  $bb31:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := out_$i39;
    goto $bb32;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i82;
    goto $bb32;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i39, 1);
    call {:si_unique_call 2896} {:cexpr "handled"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} out_vslice_dummy_var_649 := queue_work(out_$p78, out_$p80);
    goto corral_source_split_10697;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(96, 1));
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_10695;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(144, 1)), $mul.ref(88, 1));
    goto corral_source_split_10694;

  $bb30:
    assume out_$i75 == 1;
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_10691;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i32(out_$i33, 2);
    goto corral_source_split_10690;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb18;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i72, out_$i73;
    goto $bb18;

  $bb28:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i67, out_$i68;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, out_$i69);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p36);
    goto corral_source_split_10685;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i41, 1);
    call {:si_unique_call 2894} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_10684;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10683;

  $bb22:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i43, out_$i42;
    goto $bb26;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i66, out_$i53;
    goto $bb26;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i43, 1);
    call {:si_unique_call 2893} {:cexpr "handled"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_10681;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} out_vslice_dummy_var_648 := queue_work(out_$p59, out_$p64);
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 712)), $mul.ref(264, 1));
    goto corral_source_split_10679;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i41);
    goto corral_source_split_10677;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_10676;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10675;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_10674;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 712)), $mul.ref(256, 1));
    goto corral_source_split_10673;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i41);
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_10669;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  $bb24:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := out_$i42;
    goto $bb25;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$i53 := 1;
    goto $bb25;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} rsxx_disable_ier(in_$p2, out_$i52);
    goto corral_source_split_10666;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} out_$i52 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2890} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_10665;

  $bb23:
    assume out_$i51 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, out_$i47);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(100, 1));
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} out_$i47 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2888} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_10658;

  $bb21:
    assume out_$i46 == 1;
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, out_$i33);
    goto corral_source_split_10654;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} out_$i44 := CR_INTR_DMA(out_$i41);
    call {:si_unique_call 2886} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_10653;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    call out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_vslice_dummy_var_648 := rsxx_isr_loop_$bb19(in_$p2, out_$i33, out_$p36, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_vslice_dummy_var_648);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10651;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43 := 0, 0, out_$i12;
    goto $bb19;

  $bb27:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42, out_$i43 := out_$i69, out_$i68, out_$i67;
    assume false;
    return;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_10649;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i12, 0;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, 0);
    goto corral_source_split_10647;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_10646;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1160, 1));
    goto corral_source_split_10645;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i12;
    assume true;
    goto $bb14;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_10641;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, out_$i25);
    call {:si_unique_call 2884} {:cexpr "isr"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_10640;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_10639;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(96, 1));
    goto corral_source_split_10638;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i12;
    assume true;
    goto $bb11;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, $sub.i32(0, 1));
    goto corral_source_split_10630;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} out_$i25 := ioread32(out_$p24);
    call {:si_unique_call 2882} {:cexpr "isr"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_10629;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref(16, 1));
    goto corral_source_split_10628;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_10627;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_10626;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i39, out_$i40, out_$i74, out_$i75, out_$p77, out_$p78, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i90, out_$i91, out_$i92, out_$i93, out_vslice_dummy_var_648, out_vslice_dummy_var_649, out_vslice_dummy_var_650 := rsxx_isr_loop_$bb4(in_$p2, in_$p4, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i41, out_$i42, out_$i43, out_$i72, out_$i73, out_$i39, out_$i40, out_$i74, out_$i75, out_$p77, out_$p78, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i90, out_$i91, out_$i92, out_$i93, out_vslice_dummy_var_648, out_vslice_dummy_var_649, out_vslice_dummy_var_650);
    return;

  exit:
    return;
}



procedure rsxx_isr_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i12: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i72: i32, in_$i73: i32, in_$i39: i32, in_$i40: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_vslice_dummy_var_648: i1, in_vslice_dummy_var_649: i1, in_vslice_dummy_var_650: i1) returns (out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i12: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i72: i32, out_$i73: i32, out_$i39: i32, out_$i40: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_vslice_dummy_var_648: i1, out_vslice_dummy_var_649: i1, out_vslice_dummy_var_650: i1);
  modifies $M.0, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.20, $CurrAddr;



implementation rsxx_dma_setup_loop_$bb27(in_$p0: ref, in_$p55: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i58: i32) returns (out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i58: i32)
{

  entry:
    out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58 := in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i58;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_11225;

  $bb29:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i64;
    goto $bb29_dummy;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    out_$i66 := $sgt.i32(out_$i65, out_$i64);
    goto corral_source_split_11236;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, in_$p55);
    goto corral_source_split_11235;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i58, 1);
    call {:si_unique_call 2991} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_11234;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} spin_unlock_irqrestore(out_$p63, out_$i61);
    goto corral_source_split_11233;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_11232;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} rsxx_enable_ier_and_isr(in_$p0, out_$i62);
    goto corral_source_split_11231;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} out_$i62 := CR_INTR_DMA(out_$i58);
    call {:si_unique_call 2988} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_11230;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} out_$i61 := _raw_spin_lock_irqsave(out_$p60);
    call {:si_unique_call 2986} {:cexpr "flags"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_11229;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} out_$p60 := spinlock_check(out_$p59);
    goto corral_source_split_11228;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(24, 1));
    goto corral_source_split_11227;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58 := rsxx_dma_setup_loop_$bb27(in_$p0, in_$p55, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58);
    return;

  exit:
    return;
}



procedure rsxx_dma_setup_loop_$bb27(in_$p0: ref, in_$p55: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i58: i32) returns (out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i58: i32);
  modifies $M.0, $M.20, $CurrAddr;



implementation rsxx_dma_setup_loop_$bb36(in_$p0: ref, in_$p68: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p118: ref, in_$p119: ref, in_$p121: ref, in_$i122: i64, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p118: ref, out_$p119: ref, out_$p121: ref, out_$i122: i64, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i71: i32)
{

  entry:
    out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p118, out_$p119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i71 := in_$p72, in_$p73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p105, in_$p106, in_$p108, in_$i109, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p118, in_$p119, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i71;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_11244;

  $bb53:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i123;
    goto $bb53_dummy;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    out_$i125 := $sgt.i32(out_$i124, out_$i123);
    goto corral_source_split_11315;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, in_$p68);
    goto corral_source_split_11314;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i71, 1);
    call {:si_unique_call 2997} {:cexpr "i"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_11313;

  $bb51:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} pci_free_consistent(out_$p116, 4096, out_$p119, out_$i122);
    goto corral_source_split_11311;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i64($M.0, out_$p121);
    goto corral_source_split_11310;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_11309;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_11308;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11307;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_11306;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11305;

  $bb50:
    assume out_$i114 == 1;
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_11302;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_11301;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_11300;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_11299;

  $bb48:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} pci_free_consistent(out_$p103, 4096, out_$p106, out_$i109);
    goto corral_source_split_11297;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.0, out_$p108);
    goto corral_source_split_11296;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_11295;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_11294;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11293;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_11292;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11291;

  $bb47:
    assume out_$i101 == 1;
    goto corral_source_split_11290;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_11288;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_11287;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_11286;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_11285;

  $bb45:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} vfree(out_$p96);
    goto corral_source_split_11283;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_11282;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_11281;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(472, 1));
    goto corral_source_split_11280;

  $bb44:
    assume out_$i93 == 1;
    goto corral_source_split_11279;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_11277;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_11276;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_11275;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(472, 1));
    goto corral_source_split_11274;

  $bb42:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p89, $0.ref);
    goto corral_source_split_11272;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11271;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} ldv_destroy_workqueue_179(out_$p88);
    goto corral_source_split_11270;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_11269;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11268;

  $bb41:
    assume out_$i86 == 1;
    goto corral_source_split_11267;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_11265;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_11264;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_11263;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(256, 1));
    goto corral_source_split_11262;

  $bb39:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p82, $0.ref);
    goto corral_source_split_11260;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11259;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ldv_destroy_workqueue_178(out_$p81);
    goto corral_source_split_11258;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_11257;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11256;

  $bb38:
    assume out_$i79 == 1;
    goto corral_source_split_11255;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_11253;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_11252;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_11251;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 712)), $mul.ref(168, 1));
    goto corral_source_split_11250;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    goto corral_source_split_11249;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i71);
    goto corral_source_split_11248;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_11247;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11246;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p118, out_$p119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i71 := rsxx_dma_setup_loop_$bb36(in_$p0, in_$p68, out_$p72, out_$p73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p118, out_$p119, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i71);
    return;

  exit:
    return;
}



procedure rsxx_dma_setup_loop_$bb36(in_$p0: ref, in_$p68: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p118: ref, in_$p119: ref, in_$p121: ref, in_$i122: i64, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p118: ref, out_$p119: ref, out_$p121: ref, out_$i122: i64, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i71: i32);
  modifies $M.0, $M.23, $M.25, $M.27, $M.29, $M.8, $M.10, $M.12, $M.14, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.9, $M.11, $M.13, $M.15, $CurrAddr;



implementation rsxx_dma_setup_loop_$bb12(in_$p0: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i27: i32)
{

  entry:
    out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i27 := in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p41, in_$p42, in_$p43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$i27;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11175;

  $bb18:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i47;
    goto $bb18_dummy;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, out_$i47);
    goto corral_source_split_11206;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p24);
    goto corral_source_split_11205;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i27, 1);
    call {:si_unique_call 2982} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_11204;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i27);
    goto corral_source_split_11203;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 712)), $mul.ref(8, 1));
    goto corral_source_split_11202;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto corral_source_split_11201;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i27);
    goto corral_source_split_11200;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_11199;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11198;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, in_$p0);
    goto corral_source_split_11197;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 712)), $mul.ref(0, 1));
    goto corral_source_split_11196;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    goto corral_source_split_11195;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i27);
    goto corral_source_split_11194;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_11193;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11192;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb15;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_11184;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} out_$i34 := rsxx_dma_ctrl_init(out_$p29, out_$p33);
    call {:si_unique_call 2981} {:cexpr "st"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_11183;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 712));
    goto corral_source_split_11182;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i27);
    goto corral_source_split_11181;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_11180;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11179;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_11178;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_11177;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i27 := rsxx_dma_setup_loop_$bb12(in_$p0, in_$p24, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i27);
    return;

  exit:
    return;
}



procedure rsxx_dma_setup_loop_$bb12(in_$p0: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i27: i32);
  modifies $M.0, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $CurrAddr;



implementation rsxx_dma_setup_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p19, in_$i20, in_$i21, in_$i22, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11147;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i20;
    goto $bb6_dummy;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, out_$i20);
    goto corral_source_split_11162;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p6);
    goto corral_source_split_11161;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i9, 1);
    call {:si_unique_call 2978} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_11160;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, out_$p14);
    goto corral_source_split_11159;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 712)), $mul.ref(16, 1));
    goto corral_source_split_11158;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    goto corral_source_split_11157;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i9);
    goto corral_source_split_11156;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_11155;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_11154;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p11, $mul.ref(out_$i13, 1));
    goto corral_source_split_11153;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_11152;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    out_$i12 := $mul.i32(out_$i9, 4096);
    goto corral_source_split_11151;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_11150;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(16, 1));
    goto corral_source_split_11149;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i9 := rsxx_dma_setup_loop_$bb4(in_$p0, in_$p6, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$i20, out_$i21, out_$i22, out_$i9);
    return;

  exit:
    return;
}



procedure rsxx_dma_setup_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i9: i32);
  modifies $M.0;



implementation rsxx_dma_queue_bio_loop_$bb52(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p144: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i64, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$i190: i64, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$p198: ref, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i147: i32, in_vslice_dummy_var_658: i1) returns (out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i64, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$i190: i64, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$p198: ref, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i147: i32, out_vslice_dummy_var_658: i1)
{

  entry:
    out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p174, out_$p175, out_$i176, out_$p177, out_$p178, out_$p179, out_$i180, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$p188, out_$p189, out_$i190, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$p198, out_$i200, out_$i201, out_$i202, out_$i147, out_vslice_dummy_var_658 := in_$p148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154, in_$i155, in_$p157, in_$p158, in_$p159, in_$i160, in_$p163, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$p169, in_$p170, in_$i171, in_$p174, in_$p175, in_$i176, in_$p177, in_$p178, in_$p179, in_$i180, in_$p182, in_$p183, in_$p184, in_$i185, in_$p187, in_$p188, in_$p189, in_$i190, in_$p192, in_$p193, in_$p194, in_$p195, in_$i196, in_$p198, in_$i200, in_$i201, in_$i202, in_$i147, in_vslice_dummy_var_658;
    goto $bb52, exit;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_12215;

  $bb57:
    assume out_$i202 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := out_$i200;
    goto $bb57_dummy;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    out_$i202 := $sgt.i32(out_$i201, out_$i200);
    goto corral_source_split_12276;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.0, in_$p144);
    goto corral_source_split_12275;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i200 := $add.i32(out_$i147, 1);
    call {:si_unique_call 3206} {:cexpr "i"} boogie_si_record_i32(out_$i200);
    goto corral_source_split_12274;

  $bb55:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} out_vslice_dummy_var_658 := queue_work___0(out_$p193, out_$p198);
    goto corral_source_split_12272;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p195, $mul.ref(out_$i196, 712)), $mul.ref(176, 1));
    goto corral_source_split_12271;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto corral_source_split_12270;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12269;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_12268;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12267;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    out_$p193 := $load.ref($M.0, out_$p192);
    goto corral_source_split_12266;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p189, $mul.ref(out_$i190, 712)), $mul.ref(168, 1));
    goto corral_source_split_12265;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    goto corral_source_split_12264;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    out_$i190 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12263;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    out_$p189 := $load.ref($M.0, out_$p188);
    goto corral_source_split_12262;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12261;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} spin_unlock_bh(out_$p187);
    goto corral_source_split_12260;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p184, $mul.ref(out_$i185, 712)), $mul.ref(80, 1));
    goto corral_source_split_12259;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    goto corral_source_split_12258;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    out_$i185 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12257;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    out_$p184 := $load.ref($M.0, out_$p183);
    goto corral_source_split_12256;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12255;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} list_splice_tail(out_$p177, out_$p182);
    goto corral_source_split_12254;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p179, $mul.ref(out_$i180, 712)), $mul.ref(152, 1));
    goto corral_source_split_12253;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    goto corral_source_split_12252;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    out_$i180 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12251;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.0, out_$p178);
    goto corral_source_split_12250;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12249;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref(out_$p175, $mul.ref(out_$i176, 16));
    goto corral_source_split_12248;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    out_$i176 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12247;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    out_$p175 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12246;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p174, out_$i168);
    goto corral_source_split_12245;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(out_$p170, $mul.ref(out_$i171, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_12244;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    goto corral_source_split_12243;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    out_$i171 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12242;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, out_$p169);
    goto corral_source_split_12241;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12240;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    out_$i168 := $add.i32(out_$i164, out_$i167);
    goto corral_source_split_12239;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.51, out_$p166);
    goto corral_source_split_12238;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i165, 4));
    goto corral_source_split_12237;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    out_$i165 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12236;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, out_$p163);
    goto corral_source_split_12235;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(out_$p159, $mul.ref(out_$i160, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_12234;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    goto corral_source_split_12233;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12232;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_12231;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12230;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} spin_lock_bh(out_$p157);
    goto corral_source_split_12229;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p154, $mul.ref(out_$i155, 712)), $mul.ref(80, 1));
    goto corral_source_split_12228;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto corral_source_split_12227;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    out_$i155 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12226;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.0, out_$p153);
    goto corral_source_split_12225;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12224;

  $bb54:
    assume out_$i152 == 1;
    goto corral_source_split_12223;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 0);
    goto corral_source_split_12221;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} out_$i151 := list_empty(out_$p150);
    call {:si_unique_call 3201} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_12220;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref(out_$p148, $mul.ref(out_$i149, 16));
    goto corral_source_split_12219;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.i32.i64(out_$i147);
    goto corral_source_split_12218;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p148 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12217;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p174, out_$p175, out_$i176, out_$p177, out_$p178, out_$p179, out_$i180, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$p188, out_$p189, out_$i190, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$p198, out_$i200, out_$i201, out_$i202, out_$i147, out_vslice_dummy_var_658 := rsxx_dma_queue_bio_loop_$bb52(in_$p0, in_$p5, in_$p8, in_$p144, out_$p148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$p157, out_$p158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$p174, out_$p175, out_$i176, out_$p177, out_$p178, out_$p179, out_$i180, out_$p182, out_$p183, out_$p184, out_$i185, out_$p187, out_$p188, out_$p189, out_$i190, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$p198, out_$i200, out_$i201, out_$i202, out_$i147, out_vslice_dummy_var_658);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb52(in_$p0: ref, in_$p5: ref, in_$p8: ref, in_$p144: ref, in_$p148: ref, in_$i149: i64, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$p166: ref, in_$i167: i32, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$p174: ref, in_$p175: ref, in_$i176: i64, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i64, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$i190: i64, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$p198: ref, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i147: i32, in_vslice_dummy_var_658: i1) returns (out_$p148: ref, out_$i149: i64, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$p166: ref, out_$i167: i32, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$p174: ref, out_$p175: ref, out_$i176: i64, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i64, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$i190: i64, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$p198: ref, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i147: i32, out_vslice_dummy_var_658: i1);
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.0;



implementation rsxx_dma_queue_bio_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$i100: i64) returns (out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$i100: i64)
{

  entry:
    out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100 := in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i67, in_$i68, in_$i69, in_$i100;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12137;

  $bb40:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i97, out_$i98, out_$i96;
    goto $bb40_dummy;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i96;
    assume true;
    goto $bb40;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_12177;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    out_$i98 := $sub.i32(out_$i68, out_$i76);
    call {:si_unique_call 3197} {:cexpr "bv_len"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_12176;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i67, out_$i76);
    call {:si_unique_call 3196} {:cexpr "bv_off"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_12175;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i95, out_$i69);
    call {:si_unique_call 3195} {:cexpr "addr8"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_12174;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i32.i64(out_$i76);
    goto corral_source_split_12173;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} atomic_inc(in_$p2);
    goto corral_source_split_12172;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, out_$p94, out_$i92);
    goto corral_source_split_12171;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i93, 4));
    goto corral_source_split_12170;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12169;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i91, 1);
    goto corral_source_split_12168;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.51, out_$p90);
    goto corral_source_split_12167;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i89, 4));
    goto corral_source_split_12166;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12165;

  $bb38:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i86;
    assume true;
    goto $bb38;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_12161;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} out_$i86 := rsxx_queue_dma(in_$p0, out_$p79, out_$i83, out_$i73, out_$i76, out_$i71, out_$p85, out_$i67, in_$p3, in_$p4);
    call {:si_unique_call 3193} {:cexpr "st"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_12160;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.52, out_$p84);
    goto corral_source_split_12159;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12158;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 1);
    goto corral_source_split_12157;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i64.i32(out_$i81);
    goto corral_source_split_12156;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_12155;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12154;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p77, $mul.ref(out_$i78, 16));
    goto corral_source_split_12153;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12152;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12151;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_12150;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i74;
    goto $bb36;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i68;
    goto $bb36;

  $bb34:
    assume out_$i75 == 1;
    goto corral_source_split_12146;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    out_$i75 := $ult.i32(out_$i68, out_$i74);
    goto corral_source_split_12144;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(4096, out_$i73);
    call {:si_unique_call 3191} {:cexpr "_min2"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_12143;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i72, 4095);
    call {:si_unique_call 3190} {:cexpr "dma_off"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_12142;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i64.i32(out_$i69);
    goto corral_source_split_12141;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} out_$i71 := rsxx_addr8_to_laddr(out_$i69, in_$p0);
    call {:si_unique_call 3189} {:cexpr "laddr"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_12140;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} out_$i70 := rsxx_get_dma_tgt(in_$p0, out_$i69);
    call {:si_unique_call 3187} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_12139;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume !(out_$i75 == 1);
    goto corral_source_split_12148;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100 := rsxx_dma_queue_bio_loop_$bb32(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p8, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$i100: i64) returns (out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$i100: i64);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_dma_queue_bio_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p57: ref, in_$p61: ref, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$i100: i64, in_$i66: i64, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i60: i64, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i64, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i64, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i1, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i64, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p61: ref, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$i100: i64, out_$i66: i64, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i60: i64, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i64, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i64, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i1, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i64, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8)
{

  entry:
    out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i60, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := in_$p61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i67, in_$i68, in_$i69, in_$i100, in_$i66, in_$p101, in_$i102, in_$i103, in_$i104, in_$i60, in_$p105, in_$i106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$p113, in_$i114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_12103;

  $bb43:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := out_$i66;
    goto $bb43_dummy;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_12185;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, in_$p57);
    goto corral_source_split_12184;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} bio_advance_iter(in_$p1, in_$p7, out_$i102);
    goto corral_source_split_12183;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.52, out_$p101);
    goto corral_source_split_12182;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12181;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb31;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i100;
    goto $bb31;

  $bb41:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12179;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i96;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_12177;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    out_$i98 := $sub.i32(out_$i68, out_$i76);
    call {:si_unique_call 3197} {:cexpr "bv_len"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_12176;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i67, out_$i76);
    call {:si_unique_call 3196} {:cexpr "bv_off"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_12175;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i95, out_$i69);
    call {:si_unique_call 3195} {:cexpr "addr8"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_12174;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i32.i64(out_$i76);
    goto corral_source_split_12173;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} atomic_inc(in_$p2);
    goto corral_source_split_12172;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, out_$p94, out_$i92);
    goto corral_source_split_12171;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i93, 4));
    goto corral_source_split_12170;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12169;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i91, 1);
    goto corral_source_split_12168;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.51, out_$p90);
    goto corral_source_split_12167;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i89, 4));
    goto corral_source_split_12166;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12165;

  $bb38:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i86;
    assume true;
    goto $bb38;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_12161;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} out_$i86 := rsxx_queue_dma(in_$p0, out_$p79, out_$i83, out_$i73, out_$i76, out_$i71, out_$p85, out_$i67, in_$p3, in_$p4);
    call {:si_unique_call 3193} {:cexpr "st"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_12160;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.52, out_$p84);
    goto corral_source_split_12159;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12158;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, 1);
    goto corral_source_split_12157;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i64.i32(out_$i81);
    goto corral_source_split_12156;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_12155;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_12154;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p77, $mul.ref(out_$i78, 16));
    goto corral_source_split_12153;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i70);
    goto corral_source_split_12152;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12151;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_12150;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i74;
    goto $bb36;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i68;
    goto $bb36;

  $bb34:
    assume out_$i75 == 1;
    goto corral_source_split_12146;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    out_$i75 := $ult.i32(out_$i68, out_$i74);
    goto corral_source_split_12144;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(4096, out_$i73);
    call {:si_unique_call 3191} {:cexpr "_min2"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_12143;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i72, 4095);
    call {:si_unique_call 3190} {:cexpr "dma_off"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_12142;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i64.i32(out_$i69);
    goto corral_source_split_12141;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} out_$i71 := rsxx_addr8_to_laddr(out_$i69, in_$p0);
    call {:si_unique_call 3189} {:cexpr "laddr"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_12140;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} out_$i70 := rsxx_get_dma_tgt(in_$p0, out_$i69);
    call {:si_unique_call 3187} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_12139;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    call out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100 := rsxx_dma_queue_bio_loop_$bb32(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p8, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100);
    goto $bb32_last;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12137;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i64, out_$i62, out_$i60;
    goto $bb32;

  $bb40:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i97, out_$i98, out_$i96;
    assume false;
    return;

  $bb29:
    assume out_$i65 == 1;
    goto corral_source_split_12135;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i60;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i62, 0);
    goto corral_source_split_12133;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.52, out_$p63);
    call {:si_unique_call 3185} {:cexpr "bv_off"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_12132;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_12131;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.52, out_$p61);
    call {:si_unique_call 3184} {:cexpr "bv_len"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_12130;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12129;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.52;
    out_cmdloc_dummy_var_13 := $M.52;
    call {:si_unique_call 3199} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p142, out_$p143, 16, $zext.i32.i64(8), 0 == 1);
    $M.52 := out_cmdloc_dummy_var_14;
    goto corral_source_split_12211;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_12210;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_12209;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, out_$p141, out_$i140);
    goto corral_source_split_12208;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_12207;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i137, out_$i139);
    goto corral_source_split_12206;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.0, out_$p138);
    goto corral_source_split_12205;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12204;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_12203;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i134, 16)), $mul.ref(12, 1));
    goto corral_source_split_12202;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto corral_source_split_12201;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i32.i64(out_$i133);
    goto corral_source_split_12200;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_12199;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12198;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_12197;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12196;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, out_$p129, out_$i128);
    goto corral_source_split_12195;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_12194;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_12193;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i117;
    goto $bb47;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i106;
    goto $bb47;

  $bb45:
    assume out_$i127 == 1;
    goto corral_source_split_12189;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    out_$i127 := $ult.i32(out_$i106, out_$i117);
    goto corral_source_split_12127;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $M.52 := $store.ref($M.52, out_$p126, out_$p125);
    goto corral_source_split_12126;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12125;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_12124;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p119, $mul.ref(out_$i122, 16)), $mul.ref(0, 1));
    goto corral_source_split_12123;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto corral_source_split_12122;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i32.i64(out_$i121);
    goto corral_source_split_12121;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    goto corral_source_split_12120;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12119;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_12118;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12117;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    out_$i117 := $sub.i32(out_$i114, out_$i116);
    call {:si_unique_call 3183} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_12116;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_12115;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12114;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_12113;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i111, 16)), $mul.ref(8, 1));
    goto corral_source_split_12112;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    goto corral_source_split_12111;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i32.i64(out_$i110);
    goto corral_source_split_12110;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_12109;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12108;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_12107;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_12106;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, out_$p105);
    call {:si_unique_call 3182} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_12105;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p7, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12104;

  $bb46:
    assume !(out_$i127 == 1);
    goto corral_source_split_12191;

  $bb35:
    assume !(out_$i75 == 1);
    goto corral_source_split_12148;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i60, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := rsxx_dma_queue_bio_loop_$bb27(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p57, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i67, out_$i68, out_$i69, out_$i100, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i60, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p57: ref, in_$p61: ref, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i64, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i67: i32, in_$i68: i32, in_$i69: i64, in_$i100: i64, in_$i66: i64, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i60: i64, in_$p105: ref, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i64, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i64, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i1, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i64, in_$p136: ref, in_$i137: i32, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p61: ref, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i64, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i67: i32, out_$i68: i32, out_$i69: i64, out_$i100: i64, out_$i66: i64, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i60: i64, out_$p105: ref, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i64, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i64, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i1, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i64, out_$p136: ref, out_$i137: i32, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_dma_queue_bio_loop_$bb64(in_$p0: ref, in_$p5: ref, in_$p204: ref, in_$p208: ref, in_$p209: ref, in_$i210: i64, in_$p211: ref, in_$p212: ref, in_$i213: i64, in_$p214: ref, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i207: i32, in_vslice_dummy_var_659: i32) returns (out_$p208: ref, out_$p209: ref, out_$i210: i64, out_$p211: ref, out_$p212: ref, out_$i213: i64, out_$p214: ref, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i207: i32, out_vslice_dummy_var_659: i32)
{

  entry:
    out_$p208, out_$p209, out_$i210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i207, out_vslice_dummy_var_659 := in_$p208, in_$p209, in_$i210, in_$p211, in_$p212, in_$i213, in_$p214, in_$i216, in_$i217, in_$i218, in_$i207, in_vslice_dummy_var_659;
    goto $bb64, exit;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;

  $bb66:
    assume out_$i218 == 1;
    assume {:verifier.code 0} true;
    out_$i207 := out_$i216;
    goto $bb66_dummy;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    out_$i218 := $sgt.i32(out_$i217, out_$i216);
    goto corral_source_split_12296;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i32($M.0, in_$p204);
    goto corral_source_split_12295;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    out_$i216 := $add.i32(out_$i207, 1);
    call {:si_unique_call 3208} {:cexpr "i"} boogie_si_record_i32(out_$i216);
    goto corral_source_split_12294;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} out_vslice_dummy_var_659 := rsxx_cleanup_dma_queue(out_$p211, out_$p214, 0);
    goto corral_source_split_12293;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref(out_$p212, $mul.ref(out_$i213, 16));
    goto corral_source_split_12292;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    out_$i213 := $sext.i32.i64(out_$i207);
    goto corral_source_split_12291;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    out_$p212 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12290;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref(out_$p209, $mul.ref(out_$i210, 712));
    goto corral_source_split_12289;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    out_$i210 := $sext.i32.i64(out_$i207);
    goto corral_source_split_12288;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    out_$p209 := $load.ref($M.0, out_$p208);
    goto corral_source_split_12287;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_12286;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p208, out_$p209, out_$i210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i207, out_vslice_dummy_var_659 := rsxx_dma_queue_bio_loop_$bb64(in_$p0, in_$p5, in_$p204, out_$p208, out_$p209, out_$i210, out_$p211, out_$p212, out_$i213, out_$p214, out_$i216, out_$i217, out_$i218, out_$i207, out_vslice_dummy_var_659);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb64(in_$p0: ref, in_$p5: ref, in_$p204: ref, in_$p208: ref, in_$p209: ref, in_$i210: i64, in_$p211: ref, in_$p212: ref, in_$i213: i64, in_$p214: ref, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i207: i32, in_vslice_dummy_var_659: i32) returns (out_$p208: ref, out_$p209: ref, out_$i210: i64, out_$p211: ref, out_$p212: ref, out_$i213: i64, out_$p214: ref, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i207: i32, out_vslice_dummy_var_659: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_dma_queue_bio_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i34: i32, in_$i35: i64) returns (out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i34: i32, out_$i35: i64)
{

  entry:
    out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34, out_$i35 := in_$i36, in_$i37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i34, in_$i35;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12066;

  $bb20:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i52, out_$i51;
    goto $bb20_dummy;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_12093;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i34, 4096);
    call {:si_unique_call 3181} {:cexpr "bv_len"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_12092;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i64(out_$i35, 4096);
    call {:si_unique_call 3180} {:cexpr "addr8"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_12091;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} atomic_inc(in_$p2);
    goto corral_source_split_12090;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, out_$p50, out_$i48);
    goto corral_source_split_12089;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i49, 4));
    goto corral_source_split_12088;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i36);
    goto corral_source_split_12087;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i47, 1);
    goto corral_source_split_12086;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.51, out_$p46);
    goto corral_source_split_12085;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i45, 4));
    goto corral_source_split_12084;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i36);
    goto corral_source_split_12083;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    assume true;
    goto $bb17;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_12074;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} out_$i41 := rsxx_queue_discard(in_$p0, out_$p40, out_$i37, in_$p3, in_$p4);
    call {:si_unique_call 3178} {:cexpr "st"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_12073;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p38, $mul.ref(out_$i39, 16));
    goto corral_source_split_12072;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i36);
    goto corral_source_split_12071;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12070;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} out_$i37 := rsxx_addr8_to_laddr(out_$i35, in_$p0);
    call {:si_unique_call 3176} {:cexpr "laddr"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_12069;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} out_$i36 := rsxx_get_dma_tgt(in_$p0, out_$i35);
    call {:si_unique_call 3174} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_12068;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34, out_$i35 := rsxx_dma_queue_bio_loop_$bb14(in_$p0, in_$p2, in_$p3, in_$p4, in_$p5, in_$p8, out_$i36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1, in_$i34: i32, in_$i35: i64) returns (out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i32, out_$i53: i1, out_$i34: i32, out_$i35: i64);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14;



implementation rsxx_dma_queue_bio_loop_$bb4(in_$p5: ref, in_$p8: ref, in_$p14: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i17: i32) returns (out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i17: i32)
{

  entry:
    out_$p18, out_$i19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i17 := in_$p18, in_$i19, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_12030;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i23);
    goto corral_source_split_12041;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p14);
    goto corral_source_split_12040;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i17, 1);
    call {:si_unique_call 3170} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_12039;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, out_$p22, 0);
    goto corral_source_split_12038;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p8, $mul.ref(0, 32)), $mul.ref(out_$i21, 4));
    goto corral_source_split_12037;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i17);
    goto corral_source_split_12036;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} INIT_LIST_HEAD(out_$p20);
    goto corral_source_split_12035;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 16));
    goto corral_source_split_12034;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i17);
    goto corral_source_split_12033;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_12032;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i17 := rsxx_dma_queue_bio_loop_$bb4(in_$p5, in_$p8, in_$p14, out_$p18, out_$i19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i17);
    return;

  exit:
    return;
}



procedure rsxx_dma_queue_bio_loop_$bb4(in_$p5: ref, in_$p8: ref, in_$p14: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i17: i32) returns (out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i17: i32);
  modifies $M.51, $M.0;



implementation bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i30;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_12605;

  $bb24:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i46;
    goto $bb24_dummy;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i46, 0);
    goto corral_source_split_12662;

  $bb22:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, out_$i67);
    goto corral_source_split_12660;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12659;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 1);
    goto corral_source_split_12658;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_12657;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12656;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, 0);
    goto corral_source_split_12655;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12654;

  $bb21:
    assume out_$i63 == 1;
    goto corral_source_split_12653;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i56, out_$i62);
    goto corral_source_split_12651;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_12650;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i59, 16)), $mul.ref(8, 1));
    goto corral_source_split_12649;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    goto corral_source_split_12648;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i32.i64(out_$i58);
    goto corral_source_split_12647;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_12646;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12645;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    goto corral_source_split_12644;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12643;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_12642;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12641;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, out_$i45);
    goto corral_source_split_12640;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_12639;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12638;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p50, out_$i49);
    goto corral_source_split_12637;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12636;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i32(out_$i48, out_$i45);
    goto corral_source_split_12635;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_12634;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12633;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i30, out_$i45);
    call {:si_unique_call 3267} {:cexpr "bytes"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_12632;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_12631;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i43;
    goto $bb20;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i30;
    goto $bb20;

  $bb18:
    assume out_$i44 == 1;
    goto corral_source_split_12627;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i30, out_$i43);
    goto corral_source_split_12625;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12624;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    goto $bb17;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i32;
    goto $bb17;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_12620;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    out_$i42 := $ult.i32(out_$i32, out_$i41);
    goto corral_source_split_12618;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i38, out_$i40);
    call {:si_unique_call 3266} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_12617;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_12616;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_12615;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_12614;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i35, 16)), $mul.ref(8, 1));
    goto corral_source_split_12613;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    goto corral_source_split_12612;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i34);
    goto corral_source_split_12611;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_12610;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_12609;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    call {:si_unique_call 3265} {:cexpr "_min1___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_12608;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_12607;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb16:
    assume !(out_$i42 == 1);
    goto corral_source_split_12622;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_12629;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30 := bvec_iter_advance_loop_$bb13(in_$p0, in_$p1, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i30);
    return;

  exit:
    return;
}



procedure bvec_iter_advance_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i30: i32) returns (out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i30: i32);
  modifies $M.0;



implementation read_hw_log_done_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i9: i32) returns (out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i9: i32)
{

  entry:
    out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i9 := in_$p11, in_$p12, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p49, in_$i50, in_$i51, in_$p53, in_$p54, in_$p56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12769;

  $bb22:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i30;
    goto $bb22_dummy;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    out_$i61 := $sgt.i32(out_$i60, out_$i30);
    goto corral_source_split_12826;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, in_$p6);
    goto corral_source_split_12825;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, 0);
    goto corral_source_split_12823;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12822;

  $bb19:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} hw_log_msg(in_$p0, out_$p54, out_$i57);
    goto corral_source_split_12820;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_12819;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12818;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_12817;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(32, 1));
    goto corral_source_split_12816;

  $bb18:
    assume out_$i51 == 1;
    goto corral_source_split_12815;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 1);
    goto corral_source_split_12808;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_12807;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12806;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb14;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_12804;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i8.i32(out_$i41);
    goto corral_source_split_12803;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_12802;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p12, $mul.ref(out_$i39, 1));
    goto corral_source_split_12801;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, $sub.i64(0, 1));
    out_$i39 := $add.i64(out_$i16, out_$i38);
    goto corral_source_split_12800;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i29);
    goto corral_source_split_12799;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i34);
    goto corral_source_split_12798;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12797;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, out_$i29);
    goto corral_source_split_12796;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_12795;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12794;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i9, out_$i29);
    call {:si_unique_call 3296} {:cexpr "off"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_12793;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} out_$i29 := substrncpy(out_$p17, out_$p28, out_$i26);
    call {:si_unique_call 3295} {:cexpr "len"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_12792;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(in_$p4, $mul.ref(out_$i27, 1));
    goto corral_source_split_12791;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i9);
    goto corral_source_split_12790;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12789;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    goto $bb12;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i20;
    goto $bb12;

  $bb10:
    assume out_$i25 == 1;
    goto corral_source_split_12785;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i20, out_$i24);
    goto corral_source_split_12783;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(128, out_$i23);
    call {:si_unique_call 3293} {:cexpr "_min2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_12782;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_12781;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12780;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i19, out_$i9);
    call {:si_unique_call 3292} {:cexpr "_min1"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_12779;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_12778;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_12777;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p12, $mul.ref(out_$i16, 1));
    goto corral_source_split_12776;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_12775;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_12774;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12773;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_12772;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(32, 1));
    goto corral_source_split_12771;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume !(out_$i25 == 1);
    goto corral_source_split_12787;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 128);
    goto corral_source_split_12813;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_12812;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(160, 1));
    goto corral_source_split_12811;

  $bb15:
    assume !(out_$i43 == 1);
    goto corral_source_split_12810;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i9 := read_hw_log_done_loop_$bb8(in_$p0, in_$p1, in_$p4, in_$p6, out_$p11, out_$p12, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i9);
    return;

  exit:
    return;
}



procedure read_hw_log_done_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i9: i32) returns (out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p53: ref, out_$p54: ref, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i9: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $CurrAddr;



implementation substrncpy_loop_$bb4(in_$i8: i32, in_$i9: i8, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i18: i32) returns (out_$i8: i32, out_$i9: i8, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i18: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p5, out_$p6, out_$i7, out_$i18 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p15, in_$p16, in_$i17, in_$p5, in_$p6, in_$i7, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12843;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$p5, out_$p6, out_$i7 := out_$p16, out_$p15, out_$i8;
    goto $bb10_dummy;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i8;
    assume true;
    goto $bb10;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i8, 0);
    goto corral_source_split_12859;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p5, $mul.ref(1, 1));
    goto corral_source_split_12858;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p6, $mul.ref(1, 1));
    goto corral_source_split_12857;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_12850;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i8.i32(out_$i10);
    goto corral_source_split_12849;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.0, out_$p5);
    goto corral_source_split_12848;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p5, out_$i9);
    goto corral_source_split_12847;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p6);
    goto corral_source_split_12846;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 3301} {:cexpr "count"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_12845;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p5, out_$p6, out_$i7, out_$i18 := substrncpy_loop_$bb4(out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$p16, out_$i17, out_$p5, out_$p6, out_$i7, out_$i18);
    return;

  exit:
    return;
}



procedure substrncpy_loop_$bb4(in_$i8: i32, in_$i9: i8, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i18: i32) returns (out_$i8: i32, out_$i9: i8, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i18: i32);
  modifies $M.0;



implementation rsxx_slot_reset_loop_$bb29(in_$p2: ref, in_$p38: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i41: i32, in_vslice_dummy_var_666: i1) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i41: i32, out_vslice_dummy_var_666: i1)
{

  entry:
    out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i76, out_$i77, out_$i78, out_$i41, out_vslice_dummy_var_666 := in_$p42, in_$p43, in_$i44, in_$p46, in_$p47, in_$p48, in_$i49, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$i61, in_$p63, in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p74, in_$i76, in_$i77, in_$i78, in_$i41, in_vslice_dummy_var_666;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_16168;

  $bb35:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i76;
    goto $bb35_dummy;

  corral_source_split_16194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_16193:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i76);
    goto corral_source_split_16194;

  corral_source_split_16192:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, in_$p38);
    goto corral_source_split_16193;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i41, 1);
    call {:si_unique_call 3522} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_16192;

  corral_source_split_16213:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_16190:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_16189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} spin_unlock(out_$p58);
    goto corral_source_split_16190;

  corral_source_split_16188:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 712)), $mul.ref(80, 1));
    goto corral_source_split_16189;

  corral_source_split_16187:
    assume {:verifier.code 0} true;
    goto corral_source_split_16188;

  corral_source_split_16186:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16187;

  corral_source_split_16185:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_16186;

  corral_source_split_16184:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16185;

  $bb31:
    assume out_$i53 == 1;
    goto corral_source_split_16184;

  corral_source_split_16182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_16181:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_16182;

  corral_source_split_16180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} out_$i52 := list_empty(out_$p51);
    call {:si_unique_call 3520} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_16181;

  corral_source_split_16179:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p48, $mul.ref(out_$i49, 712)), $mul.ref(152, 1));
    goto corral_source_split_16180;

  corral_source_split_16178:
    assume {:verifier.code 0} true;
    goto corral_source_split_16179;

  corral_source_split_16177:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16178;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_16177;

  corral_source_split_16175:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16176;

  corral_source_split_16174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} spin_lock(out_$p46);
    goto corral_source_split_16175;

  corral_source_split_16173:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 712)), $mul.ref(80, 1));
    goto corral_source_split_16174;

  corral_source_split_16172:
    assume {:verifier.code 0} true;
    goto corral_source_split_16173;

  corral_source_split_16171:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16172;

  corral_source_split_16170:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_16171;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16170;

  corral_source_split_16168:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_16212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} out_vslice_dummy_var_666 := queue_work(out_$p69, out_$p74);
    goto corral_source_split_16213;

  corral_source_split_16211:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 712)), $mul.ref(176, 1));
    goto corral_source_split_16212;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    goto corral_source_split_16211;

  corral_source_split_16209:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16210;

  corral_source_split_16208:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_16209;

  corral_source_split_16207:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16208;

  corral_source_split_16206:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_16207;

  corral_source_split_16205:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 712)), $mul.ref(168, 1));
    goto corral_source_split_16206;

  corral_source_split_16204:
    assume {:verifier.code 0} true;
    goto corral_source_split_16205;

  corral_source_split_16203:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16204;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_16203;

  corral_source_split_16201:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16202;

  corral_source_split_16200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} spin_unlock(out_$p63);
    goto corral_source_split_16201;

  corral_source_split_16199:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 712)), $mul.ref(80, 1));
    goto corral_source_split_16200;

  corral_source_split_16198:
    assume {:verifier.code 0} true;
    goto corral_source_split_16199;

  corral_source_split_16197:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i41);
    goto corral_source_split_16198;

  corral_source_split_16196:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_16197;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16196;

  $bb32:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i76, out_$i77, out_$i78, out_$i41, out_vslice_dummy_var_666 := rsxx_slot_reset_loop_$bb29(in_$p2, in_$p38, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$i76, out_$i77, out_$i78, out_$i41, out_vslice_dummy_var_666);
    return;

  exit:
    return;
}



procedure rsxx_slot_reset_loop_$bb29(in_$p2: ref, in_$p38: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i41: i32, in_vslice_dummy_var_666: i1) returns (out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i41: i32, out_vslice_dummy_var_666: i1);
  modifies $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_slot_reset_loop_$bb42(in_$p2: ref, in_$p81: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$p133: ref, in_$i134: i64, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$p133: ref, out_$i134: i64, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$i84: i32)
{

  entry:
    out_$p85, out_$p86, out_$i87, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p108, out_$i109, out_$p110, out_$p111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i84 := in_$p85, in_$p86, in_$i87, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$p108, in_$i109, in_$p110, in_$p111, in_$i112, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$p126, in_$p127, in_$p128, in_$p129, in_$i130, in_$p133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i84;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_16224;

  $bb50:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i135;
    goto $bb50_dummy;

  corral_source_split_16280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_16279:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, out_$i135);
    goto corral_source_split_16280;

  corral_source_split_16278:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, in_$p81);
    goto corral_source_split_16279;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i84, 1);
    call {:si_unique_call 3528} {:cexpr "i"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_16278;

  $bb48:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_16276:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_16275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} pci_free_consistent(out_$p120, 4096, out_$p127, out_$i134);
    goto corral_source_split_16276;

  corral_source_split_16274:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i64($M.0, out_$p133);
    goto corral_source_split_16275;

  corral_source_split_16273:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($add.ref(out_$p129, $mul.ref(out_$i130, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_16274;

  corral_source_split_16272:
    assume {:verifier.code 0} true;
    goto corral_source_split_16273;

  corral_source_split_16271:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16272;

  corral_source_split_16270:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_16271;

  corral_source_split_16269:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16270;

  corral_source_split_16268:
    assume {:verifier.code 0} true;
    out_$p127 := $load.ref($M.0, out_$p126);
    goto corral_source_split_16269;

  corral_source_split_16267:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(out_$p122, $mul.ref(out_$i123, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16268;

  corral_source_split_16266:
    assume {:verifier.code 0} true;
    goto corral_source_split_16267;

  corral_source_split_16265:
    assume {:verifier.code 0} true;
    out_$i123 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16266;

  corral_source_split_16264:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_16265;

  corral_source_split_16263:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16264;

  corral_source_split_16262:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_16263;

  corral_source_split_16261:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16262;

  $bb47:
    assume out_$i118 == 1;
    goto corral_source_split_16261;

  corral_source_split_16259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_16258:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, 0);
    goto corral_source_split_16259;

  corral_source_split_16257:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_16258;

  corral_source_split_16256:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_16257;

  corral_source_split_16255:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(out_$p111, $mul.ref(out_$i112, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16256;

  corral_source_split_16254:
    assume {:verifier.code 0} true;
    goto corral_source_split_16255;

  corral_source_split_16253:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16254;

  corral_source_split_16252:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_16253;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16252;

  $bb45:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_16250:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_16249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} pci_free_consistent(out_$p95, 4096, out_$p102, out_$i109);
    goto corral_source_split_16250;

  corral_source_split_16248:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.0, out_$p108);
    goto corral_source_split_16249;

  corral_source_split_16247:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(out_$p104, $mul.ref(out_$i105, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_16248;

  corral_source_split_16246:
    assume {:verifier.code 0} true;
    goto corral_source_split_16247;

  corral_source_split_16245:
    assume {:verifier.code 0} true;
    out_$i105 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16246;

  corral_source_split_16244:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_16245;

  corral_source_split_16243:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16244;

  corral_source_split_16242:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_16243;

  corral_source_split_16241:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p97, $mul.ref(out_$i98, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16242;

  corral_source_split_16240:
    assume {:verifier.code 0} true;
    goto corral_source_split_16241;

  corral_source_split_16239:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16240;

  corral_source_split_16238:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_16239;

  corral_source_split_16237:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16238;

  corral_source_split_16236:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_16237;

  corral_source_split_16235:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16236;

  $bb44:
    assume out_$i93 == 1;
    goto corral_source_split_16235;

  corral_source_split_16233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_16233;

  corral_source_split_16231:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_16232;

  corral_source_split_16230:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_16231;

  corral_source_split_16229:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(out_$p86, $mul.ref(out_$i87, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16230;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    goto corral_source_split_16229;

  corral_source_split_16227:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i84);
    goto corral_source_split_16228;

  corral_source_split_16226:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_16227;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16226;

  corral_source_split_16224:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p85, out_$p86, out_$i87, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p108, out_$i109, out_$p110, out_$p111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i84 := rsxx_slot_reset_loop_$bb42(in_$p2, in_$p81, out_$p85, out_$p86, out_$i87, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$p108, out_$i109, out_$p110, out_$p111, out_$i112, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i84);
    return;

  exit:
    return;
}



procedure rsxx_slot_reset_loop_$bb42(in_$p2: ref, in_$p81: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i64, in_$p133: ref, in_$i134: i64, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i64, out_$p133: ref, out_$i134: i64, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$i84: i32);



implementation rsxx_slot_reset_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i11 := in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i11;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_16112;

  $bb17:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i18;
    goto $bb17_dummy;

  corral_source_split_16129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_16128:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, out_$i18);
    goto corral_source_split_16129;

  corral_source_split_16127:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p8);
    goto corral_source_split_16128;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i11, 1);
    call {:si_unique_call 3507} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_16127;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_16119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_16118:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_16119;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} out_$i16 := rsxx_hw_buffers_init(in_$p0, out_$p15);
    call {:si_unique_call 3506} {:cexpr "st"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_16118;

  corral_source_split_16116:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 712));
    goto corral_source_split_16117;

  corral_source_split_16115:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16116;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_16115;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16114;

  corral_source_split_16112:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i11 := rsxx_slot_reset_loop_$bb11(in_$p0, in_$p2, in_$p8, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i11);
    return;

  exit:
    return;
}



procedure rsxx_slot_reset_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i11: i32);
  modifies $M.0;



implementation rsxx_eeh_failure_loop_$bb4(in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$p29, in_$p30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_16424;

  $bb9:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i46;
    goto $bb9_dummy;

  corral_source_split_16470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_16469:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, out_$i46);
    goto corral_source_split_16470;

  corral_source_split_16468:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p6);
    goto corral_source_split_16469;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i9, 1);
    call {:si_unique_call 3566} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_16468;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_16466:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_16465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} _dev_info.ref.ref.i32.i32(out_$p39, .str.130, out_$i35, out_$i45);
    goto corral_source_split_16466;

  corral_source_split_16464:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_16465;

  corral_source_split_16463:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 712)), $mul.ref(8, 1));
    goto corral_source_split_16464;

  corral_source_split_16462:
    assume {:verifier.code 0} true;
    goto corral_source_split_16463;

  corral_source_split_16461:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16462;

  corral_source_split_16460:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_16461;

  corral_source_split_16459:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16460;

  corral_source_split_16458:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_16459;

  corral_source_split_16457:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_16458;

  corral_source_split_16456:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16457;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_16456;

  corral_source_split_16454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_16453:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_16454;

  corral_source_split_16452:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, out_$i24);
    call {:si_unique_call 3564} {:cexpr "cnt"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_16453;

  corral_source_split_16451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} out_$i34 := rsxx_dma_cancel(out_$p33);
    call {:si_unique_call 3563} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_16452;

  corral_source_split_16450:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 712));
    goto corral_source_split_16451;

  corral_source_split_16449:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16450;

  corral_source_split_16448:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_16449;

  corral_source_split_16447:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16448;

  corral_source_split_16446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} spin_unlock_bh(out_$p29);
    goto corral_source_split_16447;

  corral_source_split_16445:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 712)), $mul.ref(80, 1));
    goto corral_source_split_16446;

  corral_source_split_16444:
    assume {:verifier.code 0} true;
    goto corral_source_split_16445;

  corral_source_split_16443:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16444;

  corral_source_split_16442:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_16443;

  corral_source_split_16441:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16442;

  corral_source_split_16440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} out_$i24 := rsxx_cleanup_dma_queue(out_$p18, out_$p23, 1);
    call {:si_unique_call 3560} {:cexpr "cnt"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_16441;

  corral_source_split_16439:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 712)), $mul.ref(152, 1));
    goto corral_source_split_16440;

  corral_source_split_16438:
    assume {:verifier.code 0} true;
    goto corral_source_split_16439;

  corral_source_split_16437:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16438;

  corral_source_split_16436:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_16437;

  corral_source_split_16435:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16436;

  corral_source_split_16434:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 712));
    goto corral_source_split_16435;

  corral_source_split_16433:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16434;

  corral_source_split_16432:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_16433;

  corral_source_split_16431:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16432;

  corral_source_split_16430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} spin_lock_bh(out_$p14);
    goto corral_source_split_16431;

  corral_source_split_16429:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 712)), $mul.ref(80, 1));
    goto corral_source_split_16430;

  corral_source_split_16428:
    assume {:verifier.code 0} true;
    goto corral_source_split_16429;

  corral_source_split_16427:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_16428;

  corral_source_split_16426:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_16427;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16426;

  corral_source_split_16424:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i9 := rsxx_eeh_failure_loop_$bb4(in_$p2, in_$p6, out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i9);
    return;

  exit:
    return;
}



procedure rsxx_eeh_failure_loop_$bb4(in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i9: i32);
  modifies $M.0, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.51, $M.52, $CurrAddr, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.24, $M.23, $M.26, $M.25, $M.28, $M.27, $M.30, $M.29;



implementation rsxx_eeh_frozen_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i11 := in_$p12, in_$p13, in_$i14, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_16497;

  $bb16:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i62;
    goto $bb16_dummy;

  corral_source_split_16553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_16552:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i32(out_$i63, out_$i62);
    goto corral_source_split_16553;

  corral_source_split_16551:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, in_$p8);
    goto corral_source_split_16552;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i11, 1);
    call {:si_unique_call 3577} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_16551;

  $bb14:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_16549:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_16548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} pci_free_consistent(out_$p47, 4096, out_$p54, out_$i61);
    goto corral_source_split_16549;

  corral_source_split_16547:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.0, out_$p60);
    goto corral_source_split_16548;

  corral_source_split_16546:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(out_$i57, 712)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_16547;

  corral_source_split_16545:
    assume {:verifier.code 0} true;
    goto corral_source_split_16546;

  corral_source_split_16544:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16545;

  corral_source_split_16543:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_16544;

  corral_source_split_16542:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16543;

  corral_source_split_16541:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_16542;

  corral_source_split_16540:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16541;

  corral_source_split_16539:
    assume {:verifier.code 0} true;
    goto corral_source_split_16540;

  corral_source_split_16538:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16539;

  corral_source_split_16537:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_16538;

  corral_source_split_16536:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16537;

  corral_source_split_16535:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_16536;

  corral_source_split_16534:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16535;

  $bb13:
    assume out_$i45 == 1;
    goto corral_source_split_16534;

  corral_source_split_16532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_16531:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_16532;

  corral_source_split_16530:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_16531;

  corral_source_split_16529:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_16530;

  corral_source_split_16528:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(out_$i39, 712)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_16529;

  corral_source_split_16527:
    assume {:verifier.code 0} true;
    goto corral_source_split_16528;

  corral_source_split_16526:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16527;

  corral_source_split_16525:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_16526;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16525;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_16523:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_16522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} pci_free_consistent(out_$p22, 4096, out_$p29, out_$i36);
    goto corral_source_split_16523;

  corral_source_split_16521:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.0, out_$p35);
    goto corral_source_split_16522;

  corral_source_split_16520:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 712)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_16521;

  corral_source_split_16519:
    assume {:verifier.code 0} true;
    goto corral_source_split_16520;

  corral_source_split_16518:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16519;

  corral_source_split_16517:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_16518;

  corral_source_split_16516:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16517;

  corral_source_split_16515:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_16516;

  corral_source_split_16514:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16515;

  corral_source_split_16513:
    assume {:verifier.code 0} true;
    goto corral_source_split_16514;

  corral_source_split_16512:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16513;

  corral_source_split_16511:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_16512;

  corral_source_split_16510:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16511;

  corral_source_split_16509:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_16510;

  corral_source_split_16508:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16509;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_16508;

  corral_source_split_16506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_16505:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_16506;

  corral_source_split_16504:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_16505;

  corral_source_split_16503:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_16504;

  corral_source_split_16502:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 712)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_16503;

  corral_source_split_16501:
    assume {:verifier.code 0} true;
    goto corral_source_split_16502;

  corral_source_split_16500:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_16501;

  corral_source_split_16499:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_16500;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16499;

  corral_source_split_16497:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i11 := rsxx_eeh_frozen_loop_$bb8(in_$p2, in_$p8, out_$p12, out_$p13, out_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i11);
    return;

  exit:
    return;
}



procedure rsxx_eeh_frozen_loop_$bb8(in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p60: ref, in_$i61: i64, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p60: ref, out_$i61: i64, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i11: i32);



implementation rsxx_eeh_save_issued_dmas_loop_$bb10(in_$p0: ref, in_$p6: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i32, in_$i27: i32, in_$i28: i32, in_$i104: i32, in_$i105: i1, in_$i16: i32, in_$i17: i32, in_$i106: i32, in_$i13: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i32, out_$i27: i32, out_$i28: i32, out_$i104: i32, out_$i105: i1, out_$i16: i32, out_$i17: i32, out_$i106: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106 := in_$p18, in_$p19, in_$i20, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$p64, in_$p65, in_$p66, in_$i67, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$p101, in_$p102, in_$i103, in_$i27, in_$i28, in_$i104, in_$i105, in_$i16, in_$i17, in_$i106;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16589;

  $bb25:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i28, out_$i104;
    goto $bb25_dummy;

  corral_source_split_16605:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i28;
    assume true;
    goto $bb25;

  corral_source_split_16604:
    assume {:verifier.code 0} true;
    out_$i105 := $sle.i32(out_$i104, 254);
    goto corral_source_split_16605;

  corral_source_split_16603:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i27, 1);
    call {:si_unique_call 3581} {:cexpr "j"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_16604;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16603;

  corral_source_split_16692:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i17, out_$i103;
    goto $bb14;

  corral_source_split_16601:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i17, out_$i16;
    goto $bb14;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_16601;

  corral_source_split_16599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_16598:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_16599;

  corral_source_split_16597:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_16598;

  corral_source_split_16596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} out_$p24 := get_tracker_dma(out_$p23, out_$i17);
    goto corral_source_split_16597;

  corral_source_split_16595:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_16596;

  corral_source_split_16594:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 712)), $mul.ref(472, 1));
    goto corral_source_split_16595;

  corral_source_split_16593:
    assume {:verifier.code 0} true;
    goto corral_source_split_16594;

  corral_source_split_16592:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16593;

  corral_source_split_16591:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_16592;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16591;

  corral_source_split_16589:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_16691:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(out_$i16, 1);
    call {:si_unique_call 3587} {:cexpr "cnt"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_16692;

  corral_source_split_16690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} push_tracker(out_$p102, out_$i17);
    goto corral_source_split_16691;

  corral_source_split_16689:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_16690;

  corral_source_split_16688:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 712)), $mul.ref(472, 1));
    goto corral_source_split_16689;

  corral_source_split_16687:
    assume {:verifier.code 0} true;
    goto corral_source_split_16688;

  corral_source_split_16686:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16687;

  corral_source_split_16685:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_16686;

  corral_source_split_16684:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16685;

  corral_source_split_16683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} list_add_tail(out_$p94, out_$p96);
    goto corral_source_split_16684;

  corral_source_split_16682:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(in_$p6, $mul.ref(out_$i95, 16));
    goto corral_source_split_16683;

  corral_source_split_16681:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16682;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_16681;

  $bb23:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_16679:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_16678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} pci_unmap_page(out_$p85, out_$i87, out_$i88, out_$i93);
    goto corral_source_split_16679;

  corral_source_split_16677:
    assume {:verifier.code 0} true;
    out_$i93 := (if out_$i92 == 1 then 1 else 2);
    goto corral_source_split_16678;

  corral_source_split_16676:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 128);
    goto corral_source_split_16677;

  corral_source_split_16675:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_16676;

  corral_source_split_16674:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_16675;

  corral_source_split_16673:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16674;

  corral_source_split_16672:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i83);
    goto corral_source_split_16673;

  corral_source_split_16671:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i64($M.0, out_$p86);
    goto corral_source_split_16672;

  corral_source_split_16670:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_16671;

  corral_source_split_16669:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_16670;

  corral_source_split_16668:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16669;

  corral_source_split_16667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} out_$i83 := get_dma_size(out_$p24);
    call {:si_unique_call 3583} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_16668;

  $bb22:
    assume out_$i82 == 1;
    goto corral_source_split_16667;

  corral_source_split_16636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_16635:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i81, 112);
    goto corral_source_split_16636;

  corral_source_split_16634:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_16635;

  corral_source_split_16633:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.0, out_$p79);
    goto corral_source_split_16634;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16633;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_16625:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_16624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i40);
    goto corral_source_split_16625;

  corral_source_split_16623:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p42, $mul.ref(out_$i43, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16624;

  corral_source_split_16622:
    assume {:verifier.code 0} true;
    goto corral_source_split_16623;

  corral_source_split_16621:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16622;

  corral_source_split_16620:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_16621;

  corral_source_split_16619:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16620;

  corral_source_split_16618:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    goto corral_source_split_16619;

  corral_source_split_16617:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_16618;

  corral_source_split_16616:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16617;

  corral_source_split_16615:
    assume {:verifier.code 0} true;
    goto corral_source_split_16616;

  corral_source_split_16614:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16615;

  corral_source_split_16613:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_16614;

  corral_source_split_16612:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16613;

  $bb16:
    assume out_$i32 == 1;
    goto corral_source_split_16612;

  corral_source_split_16610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_16609:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 128);
    goto corral_source_split_16610;

  corral_source_split_16608:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_16609;

  corral_source_split_16607:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    goto corral_source_split_16608;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16607;

  $bb13:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_16665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i72);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_16651:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_16650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i58);
    goto corral_source_split_16651;

  corral_source_split_16649:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16650;

  corral_source_split_16648:
    assume {:verifier.code 0} true;
    goto corral_source_split_16649;

  corral_source_split_16647:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16648;

  corral_source_split_16646:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_16647;

  corral_source_split_16645:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16646;

  corral_source_split_16644:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i57, 1);
    goto corral_source_split_16645;

  corral_source_split_16643:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_16644;

  corral_source_split_16642:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p52, $mul.ref(out_$i53, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16643;

  corral_source_split_16641:
    assume {:verifier.code 0} true;
    goto corral_source_split_16642;

  corral_source_split_16640:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16641;

  corral_source_split_16639:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_16640;

  corral_source_split_16638:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16639;

  $bb19:
    assume out_$i50 == 1;
    goto corral_source_split_16638;

  corral_source_split_16631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_16630:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 112);
    goto corral_source_split_16631;

  corral_source_split_16629:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_16630;

  corral_source_split_16628:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_16629;

  corral_source_split_16627:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16628;

  $bb17:
    assume !(out_$i32 == 1);
    goto corral_source_split_16627;

  corral_source_split_16664:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(out_$i75, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16665;

  corral_source_split_16663:
    assume {:verifier.code 0} true;
    goto corral_source_split_16664;

  corral_source_split_16662:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16663;

  corral_source_split_16661:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_16662;

  corral_source_split_16660:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16661;

  corral_source_split_16659:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i71, 1);
    goto corral_source_split_16660;

  corral_source_split_16658:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_16659;

  corral_source_split_16657:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16658;

  corral_source_split_16656:
    assume {:verifier.code 0} true;
    goto corral_source_split_16657;

  corral_source_split_16655:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(in_$i13);
    goto corral_source_split_16656;

  corral_source_split_16654:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_16655;

  corral_source_split_16653:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16654;

  $bb20:
    assume !(out_$i50 == 1);
    goto corral_source_split_16653;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106 := rsxx_eeh_save_issued_dmas_loop_$bb10(in_$p0, in_$p6, out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106, in_$i13);
    return;

  exit:
    return;
}



procedure rsxx_eeh_save_issued_dmas_loop_$bb10(in_$p0: ref, in_$p6: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i32, in_$i27: i32, in_$i28: i32, in_$i104: i32, in_$i105: i1, in_$i16: i32, in_$i17: i32, in_$i106: i32, in_$i13: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i32, out_$i27: i32, out_$i28: i32, out_$i104: i32, out_$i105: i1, out_$i16: i32, out_$i17: i32, out_$i106: i32);
  modifies $M.0;



implementation rsxx_eeh_save_issued_dmas_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$i14: i64, in_$p15: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i32, in_$i27: i32, in_$i28: i32, in_$i104: i32, in_$i105: i1, in_$i16: i32, in_$i17: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i32, out_$i27: i32, out_$i28: i32, out_$i104: i32, out_$i105: i1, out_$i16: i32, out_$i17: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p15, out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106, out_$p107, out_$p108, out_$i109, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p118, out_$p119, out_$p120, out_$i121, out_$p124, out_$p125, out_$p126, out_$i127, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$p138, out_$p139, out_$p140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p148, out_$i149, out_$i150, out_$i151, out_$i13 := in_$i14, in_$p15, in_$p18, in_$p19, in_$i20, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$p64, in_$p65, in_$p66, in_$i67, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$p101, in_$p102, in_$i103, in_$i27, in_$i28, in_$i104, in_$i105, in_$i16, in_$i17, in_$i106, in_$p107, in_$p108, in_$i109, in_$p111, in_$i112, in_$p113, in_$p114, in_$p115, in_$i116, in_$p118, in_$p119, in_$p120, in_$i121, in_$p124, in_$p125, in_$p126, in_$i127, in_$p130, in_$i131, in_$i132, in_$p133, in_$p134, in_$i135, in_$p138, in_$p139, in_$p140, in_$i141, in_$p143, in_$p144, in_$p145, in_$i146, in_$p148, in_$i149, in_$i150, in_$i151, in_$i13;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_16583;

  $bb28:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i149;
    goto $bb28_dummy;

  corral_source_split_16741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_16740:
    assume {:verifier.code 0} true;
    out_$i151 := $sgt.i32(out_$i150, out_$i149);
    goto corral_source_split_16741;

  corral_source_split_16739:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.0, in_$p10);
    goto corral_source_split_16740;

  corral_source_split_16738:
    assume {:verifier.code 0} true;
    out_$i149 := $add.i32(out_$i13, 1);
    call {:si_unique_call 3592} {:cexpr "i"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_16739;

  corral_source_split_16737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} spin_unlock_bh(out_$p148);
    goto corral_source_split_16738;

  corral_source_split_16736:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p145, $mul.ref(out_$i146, 712)), $mul.ref(80, 1));
    goto corral_source_split_16737;

  corral_source_split_16735:
    assume {:verifier.code 0} true;
    goto corral_source_split_16736;

  corral_source_split_16734:
    assume {:verifier.code 0} true;
    out_$i146 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16735;

  corral_source_split_16733:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    goto corral_source_split_16734;

  corral_source_split_16732:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16733;

  corral_source_split_16731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p143, 0);
    goto corral_source_split_16732;

  corral_source_split_16730:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p140, $mul.ref(out_$i141, 712)), $mul.ref(72, 1));
    goto corral_source_split_16731;

  corral_source_split_16729:
    assume {:verifier.code 0} true;
    goto corral_source_split_16730;

  corral_source_split_16728:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16729;

  corral_source_split_16727:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_16728;

  corral_source_split_16726:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16727;

  corral_source_split_16725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p138, out_$i132);
    goto corral_source_split_16726;

  corral_source_split_16724:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref(out_$p134, $mul.ref(out_$i135, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_16725;

  corral_source_split_16723:
    assume {:verifier.code 0} true;
    goto corral_source_split_16724;

  corral_source_split_16722:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16723;

  corral_source_split_16721:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_16722;

  corral_source_split_16720:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16721;

  corral_source_split_16719:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i131, out_$i106);
    goto corral_source_split_16720;

  corral_source_split_16718:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.0, out_$p130);
    goto corral_source_split_16719;

  corral_source_split_16717:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref(out_$p126, $mul.ref(out_$i127, 712)), $mul.ref(480, 1)), $mul.ref(60, 1));
    goto corral_source_split_16718;

  corral_source_split_16716:
    assume {:verifier.code 0} true;
    goto corral_source_split_16717;

  corral_source_split_16715:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16716;

  corral_source_split_16714:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_16715;

  corral_source_split_16713:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16714;

  corral_source_split_16712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} atomic_sub(out_$i106, out_$p124);
    goto corral_source_split_16713;

  corral_source_split_16711:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(out_$i121, 712)), $mul.ref(480, 1)), $mul.ref(64, 1));
    goto corral_source_split_16712;

  corral_source_split_16710:
    assume {:verifier.code 0} true;
    goto corral_source_split_16711;

  corral_source_split_16709:
    assume {:verifier.code 0} true;
    out_$i121 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16710;

  corral_source_split_16708:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_16709;

  corral_source_split_16707:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16708;

  corral_source_split_16706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} list_splice(out_$p113, out_$p118);
    goto corral_source_split_16707;

  corral_source_split_16705:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p115, $mul.ref(out_$i116, 712)), $mul.ref(152, 1));
    goto corral_source_split_16706;

  corral_source_split_16704:
    assume {:verifier.code 0} true;
    goto corral_source_split_16705;

  corral_source_split_16703:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16704;

  corral_source_split_16702:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_16703;

  corral_source_split_16701:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16702;

  corral_source_split_16700:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(in_$p6, $mul.ref(out_$i112, 16));
    goto corral_source_split_16701;

  corral_source_split_16699:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16700;

  corral_source_split_16698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} spin_lock_bh(out_$p111);
    goto corral_source_split_16699;

  corral_source_split_16697:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i109, 712)), $mul.ref(80, 1));
    goto corral_source_split_16698;

  corral_source_split_16696:
    assume {:verifier.code 0} true;
    goto corral_source_split_16697;

  corral_source_split_16695:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16696;

  corral_source_split_16694:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_16695;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16694;

  $bb26:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_16605:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i28;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_16604:
    assume {:verifier.code 0} true;
    out_$i105 := $sle.i32(out_$i104, 254);
    goto corral_source_split_16605;

  corral_source_split_16603:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i27, 1);
    call {:si_unique_call 3581} {:cexpr "j"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_16604;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16603;

  corral_source_split_16692:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i17, out_$i103;
    goto $bb14;

  corral_source_split_16601:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i17, out_$i16;
    goto $bb14;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_16601;

  corral_source_split_16599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_16598:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_16599;

  corral_source_split_16597:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_16598;

  corral_source_split_16596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} out_$p24 := get_tracker_dma(out_$p23, out_$i17);
    goto corral_source_split_16597;

  corral_source_split_16595:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_16596;

  corral_source_split_16594:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 712)), $mul.ref(472, 1));
    goto corral_source_split_16595;

  corral_source_split_16593:
    assume {:verifier.code 0} true;
    goto corral_source_split_16594;

  corral_source_split_16592:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16593;

  corral_source_split_16591:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_16592;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16591;

  corral_source_split_16589:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    call out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106 := rsxx_eeh_save_issued_dmas_loop_$bb10(in_$p0, in_$p6, out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106, out_$i13);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_16589;

  corral_source_split_16587:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := 0, 0;
    goto $bb10;

  $bb25:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i28, out_$i104;
    assume false;
    return;

  corral_source_split_16586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} INIT_LIST_HEAD(out_$p15);
    goto corral_source_split_16587;

  corral_source_split_16585:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p6, $mul.ref(out_$i14, 16));
    goto corral_source_split_16586;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16585;

  corral_source_split_16583:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_16691:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(out_$i16, 1);
    call {:si_unique_call 3587} {:cexpr "cnt"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_16692;

  corral_source_split_16690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} push_tracker(out_$p102, out_$i17);
    goto corral_source_split_16691;

  corral_source_split_16689:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_16690;

  corral_source_split_16688:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 712)), $mul.ref(472, 1));
    goto corral_source_split_16689;

  corral_source_split_16687:
    assume {:verifier.code 0} true;
    goto corral_source_split_16688;

  corral_source_split_16686:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16687;

  corral_source_split_16685:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_16686;

  corral_source_split_16684:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16685;

  corral_source_split_16683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} list_add_tail(out_$p94, out_$p96);
    goto corral_source_split_16684;

  corral_source_split_16682:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(in_$p6, $mul.ref(out_$i95, 16));
    goto corral_source_split_16683;

  corral_source_split_16681:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16682;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_16681;

  $bb23:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_16679:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_16678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} pci_unmap_page(out_$p85, out_$i87, out_$i88, out_$i93);
    goto corral_source_split_16679;

  corral_source_split_16677:
    assume {:verifier.code 0} true;
    out_$i93 := (if out_$i92 == 1 then 1 else 2);
    goto corral_source_split_16678;

  corral_source_split_16676:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 128);
    goto corral_source_split_16677;

  corral_source_split_16675:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_16676;

  corral_source_split_16674:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_16675;

  corral_source_split_16673:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16674;

  corral_source_split_16672:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i83);
    goto corral_source_split_16673;

  corral_source_split_16671:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i64($M.0, out_$p86);
    goto corral_source_split_16672;

  corral_source_split_16670:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_16671;

  corral_source_split_16669:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_16670;

  corral_source_split_16668:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_16669;

  corral_source_split_16667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} out_$i83 := get_dma_size(out_$p24);
    call {:si_unique_call 3583} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_16668;

  $bb22:
    assume out_$i82 == 1;
    goto corral_source_split_16667;

  corral_source_split_16636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_16635:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i81, 112);
    goto corral_source_split_16636;

  corral_source_split_16634:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_16635;

  corral_source_split_16633:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.0, out_$p79);
    goto corral_source_split_16634;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16633;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_16625:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_16624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i40);
    goto corral_source_split_16625;

  corral_source_split_16623:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p42, $mul.ref(out_$i43, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16624;

  corral_source_split_16622:
    assume {:verifier.code 0} true;
    goto corral_source_split_16623;

  corral_source_split_16621:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16622;

  corral_source_split_16620:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_16621;

  corral_source_split_16619:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16620;

  corral_source_split_16618:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    goto corral_source_split_16619;

  corral_source_split_16617:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_16618;

  corral_source_split_16616:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 712)), $mul.ref(480, 1)), $mul.ref(12, 1));
    goto corral_source_split_16617;

  corral_source_split_16615:
    assume {:verifier.code 0} true;
    goto corral_source_split_16616;

  corral_source_split_16614:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16615;

  corral_source_split_16613:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_16614;

  corral_source_split_16612:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16613;

  $bb16:
    assume out_$i32 == 1;
    goto corral_source_split_16612;

  corral_source_split_16610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_16609:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 128);
    goto corral_source_split_16610;

  corral_source_split_16608:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_16609;

  corral_source_split_16607:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    goto corral_source_split_16608;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16607;

  $bb13:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_16665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i72);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_16651:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_16650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p64, out_$i58);
    goto corral_source_split_16651;

  corral_source_split_16649:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16650;

  corral_source_split_16648:
    assume {:verifier.code 0} true;
    goto corral_source_split_16649;

  corral_source_split_16647:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16648;

  corral_source_split_16646:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_16647;

  corral_source_split_16645:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16646;

  corral_source_split_16644:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i57, 1);
    goto corral_source_split_16645;

  corral_source_split_16643:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_16644;

  corral_source_split_16642:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p52, $mul.ref(out_$i53, 712)), $mul.ref(480, 1)), $mul.ref(32, 1));
    goto corral_source_split_16643;

  corral_source_split_16641:
    assume {:verifier.code 0} true;
    goto corral_source_split_16642;

  corral_source_split_16640:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16641;

  corral_source_split_16639:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_16640;

  corral_source_split_16638:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16639;

  $bb19:
    assume out_$i50 == 1;
    goto corral_source_split_16638;

  corral_source_split_16631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_16630:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 112);
    goto corral_source_split_16631;

  corral_source_split_16629:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_16630;

  corral_source_split_16628:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_16629;

  corral_source_split_16627:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_16628;

  $bb17:
    assume !(out_$i32 == 1);
    goto corral_source_split_16627;

  corral_source_split_16664:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(out_$i75, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16665;

  corral_source_split_16663:
    assume {:verifier.code 0} true;
    goto corral_source_split_16664;

  corral_source_split_16662:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16663;

  corral_source_split_16661:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_16662;

  corral_source_split_16660:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16661;

  corral_source_split_16659:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(out_$i71, 1);
    goto corral_source_split_16660;

  corral_source_split_16658:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_16659;

  corral_source_split_16657:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 712)), $mul.ref(480, 1)), $mul.ref(20, 1));
    goto corral_source_split_16658;

  corral_source_split_16656:
    assume {:verifier.code 0} true;
    goto corral_source_split_16657;

  corral_source_split_16655:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i13);
    goto corral_source_split_16656;

  corral_source_split_16654:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_16655;

  corral_source_split_16653:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1184)), $mul.ref(1168, 1));
    goto corral_source_split_16654;

  $bb20:
    assume !(out_$i50 == 1);
    goto corral_source_split_16653;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i14, out_$p15, out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106, out_$p107, out_$p108, out_$i109, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p118, out_$p119, out_$p120, out_$i121, out_$p124, out_$p125, out_$p126, out_$i127, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$p138, out_$p139, out_$p140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p148, out_$i149, out_$i150, out_$i151, out_$i13 := rsxx_eeh_save_issued_dmas_loop_$bb8(in_$p0, in_$p6, in_$p10, out_$i14, out_$p15, out_$p18, out_$p19, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p64, out_$p65, out_$p66, out_$i67, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$p102, out_$i103, out_$i27, out_$i28, out_$i104, out_$i105, out_$i16, out_$i17, out_$i106, out_$p107, out_$p108, out_$i109, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p118, out_$p119, out_$p120, out_$i121, out_$p124, out_$p125, out_$p126, out_$i127, out_$p130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$p138, out_$p139, out_$p140, out_$i141, out_$p143, out_$p144, out_$p145, out_$i146, out_$p148, out_$i149, out_$i150, out_$i151, out_$i13);
    return;

  exit:
    return;
}



procedure rsxx_eeh_save_issued_dmas_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$i14: i64, in_$p15: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p46: ref, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$p102: ref, in_$i103: i32, in_$i27: i32, in_$i28: i32, in_$i104: i32, in_$i105: i1, in_$i16: i32, in_$i17: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p46: ref, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$p102: ref, out_$i103: i32, out_$i27: i32, out_$i28: i32, out_$i104: i32, out_$i105: i1, out_$i16: i32, out_$i17: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i13: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$p189: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i64, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i64, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i1, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i64, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i64, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_vslice_dummy_var_678: i32, in_vslice_dummy_var_679: i64, in_vslice_dummy_var_680: i64, in_vslice_dummy_var_681: i32, in_vslice_dummy_var_682: i64, in_vslice_dummy_var_683: i64, in_vslice_dummy_var_684: i64, in_vslice_dummy_var_685: i64, in_vslice_dummy_var_686: i64, in_vslice_dummy_var_687: i32, in_vslice_dummy_var_688: i32, in_vslice_dummy_var_689: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$p189: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i64, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i64, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i1, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i64, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i64, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_vslice_dummy_var_678: i32, out_vslice_dummy_var_679: i64, out_vslice_dummy_var_680: i64, out_vslice_dummy_var_681: i32, out_vslice_dummy_var_682: i64, out_vslice_dummy_var_683: i64, out_vslice_dummy_var_684: i64, out_vslice_dummy_var_685: i64, out_vslice_dummy_var_686: i64, out_vslice_dummy_var_687: i32, out_vslice_dummy_var_688: i32, out_vslice_dummy_var_689: i32)
{

  entry:
    out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i284, out_vslice_dummy_var_678, out_vslice_dummy_var_679, out_vslice_dummy_var_680, out_vslice_dummy_var_681, out_vslice_dummy_var_682, out_vslice_dummy_var_683, out_vslice_dummy_var_684, out_vslice_dummy_var_685, out_vslice_dummy_var_686, out_vslice_dummy_var_687, out_vslice_dummy_var_688, out_vslice_dummy_var_689 := in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$p188, in_$p189, in_$i191, in_$i192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i204, in_$i205, in_$p206, in_$p207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i249, in_$i250, in_$p251, in_$i252, in_$i254, in_$i255, in_$p256, in_$i257, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$p279, in_$i281, in_$i282, in_$p283, in_$i284, in_vslice_dummy_var_678, in_vslice_dummy_var_679, in_vslice_dummy_var_680, in_vslice_dummy_var_681, in_vslice_dummy_var_682, in_vslice_dummy_var_683, in_vslice_dummy_var_684, in_vslice_dummy_var_685, in_vslice_dummy_var_686, in_vslice_dummy_var_687, in_vslice_dummy_var_688, in_vslice_dummy_var_689;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3747} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 3748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 3749} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_17124:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_17142:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_17152:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_17162:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_17164:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i59 == 1;
    goto corral_source_split_17164;

  $bb28:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb20:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb3:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb36:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_17191:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_17190:
    assume {:verifier.code 0} true;
    $M.85 := out_$i74;
    call {:si_unique_call 3755} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_17191;

  corral_source_split_17189:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i73, 1);
    goto corral_source_split_17190;

  corral_source_split_17188:
    assume {:verifier.code 0} true;
    out_$i73 := $M.85;
    goto corral_source_split_17189;

  corral_source_split_17187:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 3754} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_17188;

  corral_source_split_17186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} out_vslice_dummy_var_678 := single_release(out_$p70, out_$p71);
    goto corral_source_split_17187;

  corral_source_split_17185:
    assume {:verifier.code 0} true;
    out_$p71 := $M.74;
    goto corral_source_split_17186;

  corral_source_split_17184:
    assume {:verifier.code 0} true;
    out_$p70 := $M.73;
    goto corral_source_split_17185;

  $bb49:
    assume out_$i69 == 1;
    goto corral_source_split_17184;

  corral_source_split_17182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_17181:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 2);
    goto corral_source_split_17182;

  corral_source_split_17180:
    assume {:verifier.code 0} true;
    out_$i68 := $M.76;
    goto corral_source_split_17181;

  $bb47:
    assume out_$i67 == 1;
    goto corral_source_split_17180;

  $bb45:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i62, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb38:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i62, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_17166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3750} out_$i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 3751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i62);
    call {:si_unique_call 3752} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i62);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i61 == 1;
    goto corral_source_split_17166;

  corral_source_split_17160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_17159:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_17160;

  corral_source_split_17158:
    assume {:verifier.code 0} true;
    out_$i60 := $M.76;
    goto corral_source_split_17159;

  $bb30:
    assume out_$i58 == 1;
    goto corral_source_split_17158;

  $bb29:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb54:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_17197:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_17196:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3757} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17197;

  corral_source_split_17195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} out_vslice_dummy_var_679 := seq_read(out_$p77, in_$p10, out_$i78, in_$p12);
    goto corral_source_split_17196;

  corral_source_split_17194:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.60, in_$p1);
    goto corral_source_split_17195;

  corral_source_split_17193:
    assume {:verifier.code 0} true;
    out_$p77 := $M.74;
    goto corral_source_split_17194;

  $bb53:
    assume out_$i76 == 1;
    goto corral_source_split_17193;

  corral_source_split_17178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_17177:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 2);
    goto corral_source_split_17178;

  corral_source_split_17176:
    assume {:verifier.code 0} true;
    out_$i75 := $M.76;
    goto corral_source_split_17177;

  $bb46:
    assume !(out_$i66 == 1);
    goto corral_source_split_17176;

  $bb57:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_17204:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_17203:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3759} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17204;

  corral_source_split_17202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} out_vslice_dummy_var_680 := seq_lseek(out_$p82, out_$i83, out_$i84);
    goto corral_source_split_17203;

  corral_source_split_17201:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.60, in_$p2);
    goto corral_source_split_17202;

  corral_source_split_17200:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.60, in_$p0);
    goto corral_source_split_17201;

  corral_source_split_17199:
    assume {:verifier.code 0} true;
    out_$p82 := $M.74;
    goto corral_source_split_17200;

  $bb56:
    assume out_$i81 == 1;
    goto corral_source_split_17199;

  corral_source_split_17170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_17169:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 2);
    goto corral_source_split_17170;

  corral_source_split_17168:
    assume {:verifier.code 0} true;
    out_$i80 := $M.76;
    goto corral_source_split_17169;

  $bb40:
    assume out_$i64 == 1;
    goto corral_source_split_17168;

  $bb39:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i62, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb60:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_17218:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_17217:
    assume {:verifier.code 0} true;
    $M.85 := out_$i94;
    call {:si_unique_call 3763} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_17218;

  corral_source_split_17216:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, 1);
    goto corral_source_split_17217;

  corral_source_split_17215:
    assume {:verifier.code 0} true;
    out_$i93 := $M.85;
    goto corral_source_split_17216;

  corral_source_split_17214:
    assume {:verifier.code 0} true;
    $M.76 := 2;
    call {:si_unique_call 3762} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(2);
    goto corral_source_split_17215;

  $bb61:
    assume out_$i92 == 1;
    goto corral_source_split_17214;

  corral_source_split_17212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_17211:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_17212;

  corral_source_split_17210:
    assume {:verifier.code 0} true;
    out_$i91 := $M.90;
    goto corral_source_split_17211;

  corral_source_split_17209:
    assume {:verifier.code 0} true;
    $M.90 := out_$i90;
    call {:si_unique_call 3761} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_17210;

  corral_source_split_17208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} out_$i90 := rsxx_attr_pci_regs_open(out_$p88, out_$p89);
    goto corral_source_split_17209;

  corral_source_split_17207:
    assume {:verifier.code 0} true;
    out_$p89 := $M.74;
    goto corral_source_split_17208;

  corral_source_split_17206:
    assume {:verifier.code 0} true;
    out_$p88 := $M.73;
    goto corral_source_split_17207;

  $bb59:
    assume out_$i87 == 1;
    goto corral_source_split_17206;

  corral_source_split_17174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_17173:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 1);
    goto corral_source_split_17174;

  corral_source_split_17172:
    assume {:verifier.code 0} true;
    out_$i86 := $M.76;
    goto corral_source_split_17173;

  $bb42:
    assume out_$i65 == 1;
    goto corral_source_split_17172;

  $bb41:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i62, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_17220:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} ldv_stop();
    goto corral_source_split_17220;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb44;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb44;

  $bb31:
    assume !(out_$i58 == 1);
    goto corral_source_split_17162;

  $bb26:
    assume out_$i56 == 1;
    goto corral_source_split_17152;

  $bb22:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb21:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb69:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb91:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_17263:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_17262:
    assume {:verifier.code 0} true;
    $M.85 := out_$i113;
    call {:si_unique_call 3771} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_17263;

  corral_source_split_17261:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i112, 1);
    goto corral_source_split_17262;

  corral_source_split_17260:
    assume {:verifier.code 0} true;
    out_$i112 := $M.85;
    goto corral_source_split_17261;

  corral_source_split_17259:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3770} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17260;

  $bb90:
    assume out_$i111 == 1;
    goto corral_source_split_17259;

  corral_source_split_17257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_17256:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 0);
    goto corral_source_split_17257;

  corral_source_split_17255:
    assume {:verifier.code 0} true;
    out_$i110 := $M.91;
    goto corral_source_split_17256;

  corral_source_split_17254:
    assume {:verifier.code 0} true;
    $M.91 := out_$i109;
    call {:si_unique_call 3769} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_17255;

  SeqInstr_1974:
    goto corral_source_split_17254;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  corral_source_split_17253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} out_$i109 := rsxx_pci_probe(out_$p108, in_$p14);
    goto SeqInstr_1973;

  corral_source_split_17252:
    assume {:verifier.code 0} true;
    out_$p108 := $M.72;
    goto corral_source_split_17253;

  $bb88:
    assume out_$i107 == 1;
    goto corral_source_split_17252;

  corral_source_split_17250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_17249:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 1);
    goto corral_source_split_17250;

  corral_source_split_17248:
    assume {:verifier.code 0} true;
    out_$i106 := $M.79;
    goto corral_source_split_17249;

  $bb86:
    assume out_$i105 == 1;
    goto corral_source_split_17248;

  $bb82:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i97, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb71:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i97, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i97, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_17222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3765} out_$i97 := __VERIFIER_nondet_int();
    call {:si_unique_call 3766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i97);
    call {:si_unique_call 3767} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i97);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i96 == 1;
    goto corral_source_split_17222;

  corral_source_split_17156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_17155:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_17156;

  corral_source_split_17154:
    assume {:verifier.code 0} true;
    out_$i95 := $M.79;
    goto corral_source_split_17155;

  $bb27:
    assume !(out_$i56 == 1);
    goto corral_source_split_17154;

  $bb105:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_17292:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_17291:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3779} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17292;

  SeqInstr_1986:
    goto corral_source_split_17291;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  corral_source_split_17290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} rsxx_pci_shutdown(out_$p125);
    goto SeqInstr_1985;

  corral_source_split_17289:
    assume {:verifier.code 0} true;
    out_$p125 := $M.72;
    goto corral_source_split_17290;

  $bb104:
    assume out_$i124 == 1;
    goto corral_source_split_17289;

  corral_source_split_17287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_17286:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 5);
    goto corral_source_split_17287;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i123 := $M.79;
    goto corral_source_split_17286;

  $bb102:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_17284:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_17283:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3777} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17284;

  SeqInstr_1983:
    goto corral_source_split_17283;

  SeqInstr_1982:
    assume assertsPassed;
    goto SeqInstr_1983;

  corral_source_split_17282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} rsxx_pci_shutdown(out_$p122);
    goto SeqInstr_1982;

  corral_source_split_17281:
    assume {:verifier.code 0} true;
    out_$p122 := $M.72;
    goto corral_source_split_17282;

  $bb101:
    assume out_$i121 == 1;
    goto corral_source_split_17281;

  corral_source_split_17279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_17278:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 2);
    goto corral_source_split_17279;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i120 := $M.79;
    goto corral_source_split_17278;

  $bb99:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_17276:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_17275:
    assume {:verifier.code 0} true;
    $M.79 := 3;
    call {:si_unique_call 3775} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_17276;

  SeqInstr_1980:
    goto corral_source_split_17275;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  corral_source_split_17274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} rsxx_pci_shutdown(out_$p119);
    goto SeqInstr_1979;

  corral_source_split_17273:
    assume {:verifier.code 0} true;
    out_$p119 := $M.72;
    goto corral_source_split_17274;

  $bb98:
    assume out_$i118 == 1;
    goto corral_source_split_17273;

  corral_source_split_17271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_17270:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 3);
    goto corral_source_split_17271;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i117 := $M.79;
    goto corral_source_split_17270;

  $bb96:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_17268:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_17267:
    assume {:verifier.code 0} true;
    $M.79 := 4;
    call {:si_unique_call 3773} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_17268;

  SeqInstr_1977:
    goto corral_source_split_17267;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  corral_source_split_17266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} rsxx_pci_shutdown(out_$p116);
    goto SeqInstr_1976;

  corral_source_split_17265:
    assume {:verifier.code 0} true;
    out_$p116 := $M.72;
    goto corral_source_split_17266;

  $bb95:
    assume out_$i115 == 1;
    goto corral_source_split_17265;

  corral_source_split_17242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_17241:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 4);
    goto corral_source_split_17242;

  corral_source_split_17240:
    assume {:verifier.code 0} true;
    out_$i114 := $M.79;
    goto corral_source_split_17241;

  $bb84:
    assume out_$i104 == 1;
    goto corral_source_split_17240;

  $bb83:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i97, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_17308:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_17307:
    assume {:verifier.code 0} true;
    $M.79 := 3;
    call {:si_unique_call 3782} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_17308;

  $bb112:
    assume out_$i135 == 1;
    goto corral_source_split_17307;

  corral_source_split_17305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_17304:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_17305;

  corral_source_split_17303:
    assume {:verifier.code 0} true;
    out_$i134 := $M.93;
    goto corral_source_split_17304;

  corral_source_split_17302:
    assume {:verifier.code 0} true;
    $M.93 := out_$i133;
    call {:si_unique_call 3781} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_17303;

  corral_source_split_17301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} out_$i133 := rsxx_pci_suspend(out_$p130, out_$i132);
    goto corral_source_split_17302;

  corral_source_split_17300:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.60, out_$p131);
    goto corral_source_split_17301;

  corral_source_split_17299:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_17300;

  corral_source_split_17298:
    assume {:verifier.code 0} true;
    out_$p130 := $M.72;
    goto corral_source_split_17299;

  $bb110:
    assume out_$i129 == 1;
    goto corral_source_split_17298;

  corral_source_split_17296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_17295:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 0);
    goto corral_source_split_17296;

  corral_source_split_17294:
    assume {:verifier.code 0} true;
    out_$i128 := $M.92;
    goto corral_source_split_17295;

  $bb107:
    assume out_$i127 == 1;
    goto corral_source_split_17294;

  corral_source_split_17246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_17245:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 2);
    goto corral_source_split_17246;

  corral_source_split_17244:
    assume {:verifier.code 0} true;
    out_$i126 := $M.79;
    goto corral_source_split_17245;

  $bb85:
    assume !(out_$i104 == 1);
    goto corral_source_split_17244;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb109;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i129 == 1);
    goto $bb109;

  $bb126:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_17337:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_17336:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3790} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17337;

  SeqInstr_1998:
    goto corral_source_split_17336;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  corral_source_split_17335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} rsxx_pci_remove(out_$p147);
    goto SeqInstr_1997;

  corral_source_split_17334:
    assume {:verifier.code 0} true;
    out_$p147 := $M.72;
    goto corral_source_split_17335;

  $bb125:
    assume out_$i146 == 1;
    goto corral_source_split_17334;

  corral_source_split_17332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_17331:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 5);
    goto corral_source_split_17332;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i145 := $M.79;
    goto corral_source_split_17331;

  $bb123:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_17329:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_17328:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3788} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17329;

  SeqInstr_1995:
    goto corral_source_split_17328;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  corral_source_split_17327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} rsxx_pci_remove(out_$p144);
    goto SeqInstr_1994;

  corral_source_split_17326:
    assume {:verifier.code 0} true;
    out_$p144 := $M.72;
    goto corral_source_split_17327;

  $bb122:
    assume out_$i143 == 1;
    goto corral_source_split_17326;

  corral_source_split_17324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_17323:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_17324;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i142 := $M.79;
    goto corral_source_split_17323;

  $bb120:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_17321:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_17320:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17321;

  SeqInstr_1992:
    goto corral_source_split_17320;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  corral_source_split_17319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} rsxx_pci_remove(out_$p141);
    goto SeqInstr_1991;

  corral_source_split_17318:
    assume {:verifier.code 0} true;
    out_$p141 := $M.72;
    goto corral_source_split_17319;

  $bb119:
    assume out_$i140 == 1;
    goto corral_source_split_17318;

  corral_source_split_17316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_17315:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 3);
    goto corral_source_split_17316;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i139 := $M.79;
    goto corral_source_split_17315;

  $bb117:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_17313:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_17312:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 3784} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_17313;

  SeqInstr_1989:
    goto corral_source_split_17312;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  corral_source_split_17311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} rsxx_pci_remove(out_$p138);
    goto SeqInstr_1988;

  corral_source_split_17310:
    assume {:verifier.code 0} true;
    out_$p138 := $M.72;
    goto corral_source_split_17311;

  $bb116:
    assume out_$i137 == 1;
    goto corral_source_split_17310;

  corral_source_split_17234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_17233:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 4);
    goto corral_source_split_17234;

  corral_source_split_17232:
    assume {:verifier.code 0} true;
    out_$i136 := $M.79;
    goto corral_source_split_17233;

  $bb80:
    assume out_$i102 == 1;
    goto corral_source_split_17232;

  $bb73:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i97, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb72:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i97, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb141:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_17370:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_17369:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3799} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17370;

  $bb142:
    assume out_$i162 == 1;
    goto corral_source_split_17369;

  corral_source_split_17367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_17366:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 0);
    goto corral_source_split_17367;

  corral_source_split_17365:
    assume {:verifier.code 0} true;
    out_$i161 := $M.94;
    goto corral_source_split_17366;

  corral_source_split_17364:
    assume {:verifier.code 0} true;
    $M.94 := out_$i160;
    call {:si_unique_call 3798} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_17365;

  corral_source_split_17363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} out_$i160 := ldv_resume_9();
    goto corral_source_split_17364;

  $bb140:
    assume out_$i159 == 1;
    goto corral_source_split_17363;

  corral_source_split_17361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_17360:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 5);
    goto corral_source_split_17361;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i158 := $M.79;
    goto corral_source_split_17360;

  $bb135:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_17358:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_17357:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17358;

  $bb136:
    assume out_$i157 == 1;
    goto corral_source_split_17357;

  corral_source_split_17355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_17354:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 0);
    goto corral_source_split_17355;

  corral_source_split_17353:
    assume {:verifier.code 0} true;
    out_$i156 := $M.94;
    goto corral_source_split_17354;

  corral_source_split_17352:
    assume {:verifier.code 0} true;
    $M.94 := out_$i155;
    call {:si_unique_call 3795} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_17353;

  corral_source_split_17351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} out_$i155 := ldv_resume_9();
    goto corral_source_split_17352;

  $bb134:
    assume out_$i154 == 1;
    goto corral_source_split_17351;

  corral_source_split_17349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_17348:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 3);
    goto corral_source_split_17349;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i153 := $M.79;
    goto corral_source_split_17348;

  $bb129:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb131:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_17346:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_17345:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 3793} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_17346;

  $bb130:
    assume out_$i152 == 1;
    goto corral_source_split_17345;

  corral_source_split_17343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_17342:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 0);
    goto corral_source_split_17343;

  corral_source_split_17341:
    assume {:verifier.code 0} true;
    out_$i151 := $M.94;
    goto corral_source_split_17342;

  corral_source_split_17340:
    assume {:verifier.code 0} true;
    $M.94 := out_$i150;
    call {:si_unique_call 3792} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_17341;

  corral_source_split_17339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} out_$i150 := ldv_resume_9();
    goto corral_source_split_17340;

  $bb128:
    assume out_$i149 == 1;
    goto corral_source_split_17339;

  corral_source_split_17238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_17237:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 4);
    goto corral_source_split_17238;

  corral_source_split_17236:
    assume {:verifier.code 0} true;
    out_$i148 := $M.79;
    goto corral_source_split_17237;

  $bb81:
    assume !(out_$i102 == 1);
    goto corral_source_split_17236;

  $bb147:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_17379:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_17378:
    assume {:verifier.code 0} true;
    $M.79 := 4;
    call {:si_unique_call 3802} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(4);
    goto corral_source_split_17379;

  $bb148:
    assume out_$i167 == 1;
    goto corral_source_split_17378;

  corral_source_split_17376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_17375:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_17376;

  corral_source_split_17374:
    assume {:verifier.code 0} true;
    out_$i166 := $M.95;
    goto corral_source_split_17375;

  corral_source_split_17373:
    assume {:verifier.code 0} true;
    $M.95 := out_$i165;
    call {:si_unique_call 3801} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_17374;

  corral_source_split_17372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} out_$i165 := ldv_suspend_late_9();
    goto corral_source_split_17373;

  $bb146:
    assume out_$i164 == 1;
    goto corral_source_split_17372;

  corral_source_split_17226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_17225:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 3);
    goto corral_source_split_17226;

  corral_source_split_17224:
    assume {:verifier.code 0} true;
    out_$i163 := $M.79;
    goto corral_source_split_17225;

  $bb75:
    assume out_$i100 == 1;
    goto corral_source_split_17224;

  $bb74:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i97, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb159:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_17400:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_17399:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3808} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17400;

  $bb160:
    assume out_$i177 == 1;
    goto corral_source_split_17399;

  corral_source_split_17397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_17396:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_17397;

  corral_source_split_17395:
    assume {:verifier.code 0} true;
    out_$i176 := $M.96;
    goto corral_source_split_17396;

  corral_source_split_17394:
    assume {:verifier.code 0} true;
    $M.96 := out_$i175;
    call {:si_unique_call 3807} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_17395;

  corral_source_split_17393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} out_$i175 := ldv_resume_early_9();
    goto corral_source_split_17394;

  $bb158:
    assume out_$i174 == 1;
    goto corral_source_split_17393;

  corral_source_split_17391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_17390:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 3);
    goto corral_source_split_17391;

  $bb157:
    assume {:verifier.code 0} true;
    out_$i173 := $M.79;
    goto corral_source_split_17390;

  $bb153:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_17388:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_17387:
    assume {:verifier.code 0} true;
    $M.79 := 5;
    call {:si_unique_call 3805} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(5);
    goto corral_source_split_17388;

  $bb154:
    assume out_$i172 == 1;
    goto corral_source_split_17387;

  corral_source_split_17385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_17384:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 0);
    goto corral_source_split_17385;

  corral_source_split_17383:
    assume {:verifier.code 0} true;
    out_$i171 := $M.96;
    goto corral_source_split_17384;

  corral_source_split_17382:
    assume {:verifier.code 0} true;
    $M.96 := out_$i170;
    call {:si_unique_call 3804} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_17383;

  corral_source_split_17381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} out_$i170 := ldv_resume_early_9();
    goto corral_source_split_17382;

  $bb152:
    assume out_$i169 == 1;
    goto corral_source_split_17381;

  corral_source_split_17230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_17229:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 4);
    goto corral_source_split_17230;

  corral_source_split_17228:
    assume {:verifier.code 0} true;
    out_$i168 := $M.79;
    goto corral_source_split_17229;

  $bb77:
    assume out_$i101 == 1;
    goto corral_source_split_17228;

  $bb76:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i97, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_17402:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} ldv_stop();
    goto corral_source_split_17402;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb79;

  $bb87:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb79;

  $bb168:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_17429:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_17428:
    assume {:verifier.code 0} true;
    $M.85 := out_$i192;
    call {:si_unique_call 3815} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_17429;

  corral_source_split_17427:
    assume {:verifier.code 0} true;
    out_$i192 := $sub.i32(out_$i191, 1);
    goto corral_source_split_17428;

  corral_source_split_17426:
    assume {:verifier.code 0} true;
    out_$i191 := $M.85;
    goto corral_source_split_17427;

  corral_source_split_17425:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 3814} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_17426;

  corral_source_split_17424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} out_vslice_dummy_var_681 := single_release(out_$p188, out_$p189);
    goto corral_source_split_17425;

  corral_source_split_17423:
    assume {:verifier.code 0} true;
    out_$p189 := $M.62;
    goto corral_source_split_17424;

  corral_source_split_17422:
    assume {:verifier.code 0} true;
    out_$p188 := $M.61;
    goto corral_source_split_17423;

  $bb181:
    assume out_$i187 == 1;
    goto corral_source_split_17422;

  corral_source_split_17420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_17419:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_17420;

  corral_source_split_17418:
    assume {:verifier.code 0} true;
    out_$i186 := $M.80;
    goto corral_source_split_17419;

  $bb179:
    assume out_$i185 == 1;
    goto corral_source_split_17418;

  $bb177:
    assume out_$i184 == 1;
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb170:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_17404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3810} out_$i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 3811} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i180);
    call {:si_unique_call 3812} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i180);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb167:
    assume out_$i179 == 1;
    goto corral_source_split_17404;

  corral_source_split_17146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_17145:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_17146;

  corral_source_split_17144:
    assume {:verifier.code 0} true;
    out_$i178 := $M.80;
    goto corral_source_split_17145;

  $bb24:
    assume out_$i55 == 1;
    goto corral_source_split_17144;

  $bb23:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i44, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb186:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_17435:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_17434:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3817} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17435;

  corral_source_split_17433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} out_vslice_dummy_var_682 := seq_read(out_$p195, in_$p15, out_$i196, in_$p17);
    goto corral_source_split_17434;

  corral_source_split_17432:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i64($M.60, in_$p6);
    goto corral_source_split_17433;

  corral_source_split_17431:
    assume {:verifier.code 0} true;
    out_$p195 := $M.62;
    goto corral_source_split_17432;

  $bb185:
    assume out_$i194 == 1;
    goto corral_source_split_17431;

  corral_source_split_17416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_17415:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 2);
    goto corral_source_split_17416;

  corral_source_split_17414:
    assume {:verifier.code 0} true;
    out_$i193 := $M.80;
    goto corral_source_split_17415;

  $bb178:
    assume !(out_$i184 == 1);
    goto corral_source_split_17414;

  $bb189:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_17442:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_17441:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3819} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17442;

  corral_source_split_17440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} out_vslice_dummy_var_683 := seq_lseek(out_$p200, out_$i201, out_$i202);
    goto corral_source_split_17441;

  corral_source_split_17439:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i32($M.60, in_$p5);
    goto corral_source_split_17440;

  corral_source_split_17438:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i64($M.60, in_$p4);
    goto corral_source_split_17439;

  corral_source_split_17437:
    assume {:verifier.code 0} true;
    out_$p200 := $M.62;
    goto corral_source_split_17438;

  $bb188:
    assume out_$i199 == 1;
    goto corral_source_split_17437;

  corral_source_split_17408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_17407:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_17408;

  corral_source_split_17406:
    assume {:verifier.code 0} true;
    out_$i198 := $M.80;
    goto corral_source_split_17407;

  $bb172:
    assume out_$i182 == 1;
    goto corral_source_split_17406;

  $bb171:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb192:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb194:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_17456:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_17455:
    assume {:verifier.code 0} true;
    $M.85 := out_$i212;
    call {:si_unique_call 3823} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i212);
    goto corral_source_split_17456;

  corral_source_split_17454:
    assume {:verifier.code 0} true;
    out_$i212 := $add.i32(out_$i211, 1);
    goto corral_source_split_17455;

  corral_source_split_17453:
    assume {:verifier.code 0} true;
    out_$i211 := $M.85;
    goto corral_source_split_17454;

  corral_source_split_17452:
    assume {:verifier.code 0} true;
    $M.80 := 2;
    call {:si_unique_call 3822} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_17453;

  $bb193:
    assume out_$i210 == 1;
    goto corral_source_split_17452;

  corral_source_split_17450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_17449:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 0);
    goto corral_source_split_17450;

  corral_source_split_17448:
    assume {:verifier.code 0} true;
    out_$i209 := $M.97;
    goto corral_source_split_17449;

  corral_source_split_17447:
    assume {:verifier.code 0} true;
    $M.97 := out_$i208;
    call {:si_unique_call 3821} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_17448;

  corral_source_split_17446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} out_$i208 := rsxx_attr_stats_open(out_$p206, out_$p207);
    goto corral_source_split_17447;

  corral_source_split_17445:
    assume {:verifier.code 0} true;
    out_$p207 := $M.62;
    goto corral_source_split_17446;

  corral_source_split_17444:
    assume {:verifier.code 0} true;
    out_$p206 := $M.61;
    goto corral_source_split_17445;

  $bb191:
    assume out_$i205 == 1;
    goto corral_source_split_17444;

  corral_source_split_17412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_17411:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_17412;

  corral_source_split_17410:
    assume {:verifier.code 0} true;
    out_$i204 := $M.80;
    goto corral_source_split_17411;

  $bb174:
    assume out_$i183 == 1;
    goto corral_source_split_17410;

  $bb173:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_17458:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} ldv_stop();
    goto corral_source_split_17458;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb176;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb176;

  $bb201:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_17461:
    assume {:verifier.code 0} true;
    goto $bb202;

  SeqInstr_2001:
    goto corral_source_split_17461;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  corral_source_split_17460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} invoke_work_2();
    goto SeqInstr_2000;

  $bb200:
    assume out_$i214 == 1;
    goto corral_source_split_17460;

  corral_source_split_17150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_17149:
    assume {:verifier.code 0} true;
    out_$i214 := $ne.i32(out_$i213, 0);
    goto corral_source_split_17150;

  corral_source_split_17148:
    assume {:verifier.code 0} true;
    out_$i213 := $M.81;
    goto corral_source_split_17149;

  $bb25:
    assume !(out_$i55 == 1);
    goto corral_source_split_17148;

  $bb204:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_17464:
    assume {:verifier.code 0} true;
    goto $bb205;

  SeqInstr_2004:
    goto corral_source_split_17464;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  corral_source_split_17463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} ldv_main_exported_8();
    goto SeqInstr_2003;

  $bb203:
    assume out_$i216 == 1;
    goto corral_source_split_17463;

  corral_source_split_17136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_17135:
    assume {:verifier.code 0} true;
    out_$i216 := $ne.i32(out_$i215, 0);
    goto corral_source_split_17136;

  corral_source_split_17134:
    assume {:verifier.code 0} true;
    out_$i215 := $M.82;
    goto corral_source_split_17135;

  $bb16:
    assume out_$i51 == 1;
    goto corral_source_split_17134;

  $bb5:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i44, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb4:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i44, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb207:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_17467:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_17466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} choose_interrupt_1();
    goto corral_source_split_17467;

  $bb206:
    assume out_$i218 == 1;
    goto corral_source_split_17466;

  corral_source_split_17140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_17139:
    assume {:verifier.code 0} true;
    out_$i218 := $ne.i32(out_$i217, 0);
    goto corral_source_split_17140;

  corral_source_split_17138:
    assume {:verifier.code 0} true;
    out_$i217 := $M.83;
    goto corral_source_split_17139;

  $bb18:
    assume out_$i52 == 1;
    goto corral_source_split_17138;

  $bb17:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i44, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !(out_$i52 == 1);
    goto corral_source_split_17142;

  $bb210:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb220:
    assume {:verifier.code 0} true;
    assume !(out_$i226 == 1);
    goto $bb221;

  $bb223:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb221;

  corral_source_split_17481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223;

  corral_source_split_17480:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 0);
    goto corral_source_split_17481;

  corral_source_split_17479:
    assume {:verifier.code 0} true;
    out_$i227 := $M.85;
    goto corral_source_split_17480;

  $bb219:
    assume out_$i226 == 1;
    goto corral_source_split_17479;

  corral_source_split_17477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_17476:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 2);
    goto corral_source_split_17477;

  corral_source_split_17475:
    assume {:verifier.code 0} true;
    out_$i225 := $M.86;
    goto corral_source_split_17476;

  $bb217:
    assume out_$i224 == 1;
    goto corral_source_split_17475;

  $bb212:
    assume out_$i222 == 1;
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i221, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i222 := $slt.i32(out_$i221, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_17469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3828} out_$i221 := __VERIFIER_nondet_int();
    call {:si_unique_call 3829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i221);
    call {:si_unique_call 3830} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i221);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume out_$i220 == 1;
    goto corral_source_split_17469;

  corral_source_split_17128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_17127:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i32(out_$i219, 0);
    goto corral_source_split_17128;

  corral_source_split_17126:
    assume {:verifier.code 0} true;
    out_$i219 := $M.86;
    goto corral_source_split_17127;

  $bb14:
    assume out_$i50 == 1;
    goto corral_source_split_17126;

  $bb7:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i44, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb6:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i44, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb228:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_17512:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_17511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} ldv_initialize_block_device_operations_8();
    goto corral_source_split_17512;

  corral_source_split_17510:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 3846} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_17511;

  corral_source_split_17509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} ldv_file_operations_11();
    goto corral_source_split_17510;

  corral_source_split_17508:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 3844} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_17509;

  corral_source_split_17507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} ldv_file_operations_13();
    goto corral_source_split_17508;

  corral_source_split_17506:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3842} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17507;

  corral_source_split_17505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} ldv_initialize_pci_error_handlers_10();
    goto corral_source_split_17506;

  corral_source_split_17504:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3840} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17505;

  corral_source_split_17503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} ldv_file_operations_12();
    goto corral_source_split_17504;

  corral_source_split_17502:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 3838} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_17503;

  corral_source_split_17501:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 3837} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_17502;

  $bb232:
    assume out_$i235 == 1;
    goto corral_source_split_17501;

  corral_source_split_17499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_17498:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 0);
    goto corral_source_split_17499;

  $bb231:
    assume {:verifier.code 0} true;
    out_$i234 := $M.98;
    goto corral_source_split_17498;

  $bb230:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_17493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230;

  corral_source_split_17492:
    assume {:verifier.code 0} true;
    out_$i233 := $ne.i32(out_$i232, 0);
    goto corral_source_split_17493;

  corral_source_split_17491:
    assume {:verifier.code 0} true;
    out_$i232 := $M.98;
    goto corral_source_split_17492;

  corral_source_split_17490:
    assume {:verifier.code 0} true;
    $M.98 := out_$i231;
    call {:si_unique_call 3835} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i231);
    goto corral_source_split_17491;

  corral_source_split_17489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} out_$i231 := rsxx_core_init();
    goto corral_source_split_17490;

  $bb227:
    assume out_$i230 == 1;
    goto corral_source_split_17489;

  corral_source_split_17473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_17472:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_17473;

  corral_source_split_17471:
    assume {:verifier.code 0} true;
    out_$i229 := $M.86;
    goto corral_source_split_17472;

  $bb214:
    assume out_$i223 == 1;
    goto corral_source_split_17471;

  $bb213:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i221, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_17514:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} ldv_stop();
    goto corral_source_split_17514;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb215:
    assume {:verifier.code 0} true;
    assume !(out_$i223 == 1);
    goto $bb216;

  $bb218:
    assume {:verifier.code 0} true;
    assume !(out_$i224 == 1);
    goto $bb216;

  $bb240:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_17547:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_17546:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3855} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17547;

  SeqInstr_2013:
    goto corral_source_split_17546;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  corral_source_split_17545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} out_vslice_dummy_var_685 := rsxx_cram_write(out_$p251, in_$p18, out_$i252, in_$p21);
    goto SeqInstr_2012;

  corral_source_split_17544:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i64($M.60, in_$p7);
    goto corral_source_split_17545;

  corral_source_split_17543:
    assume {:verifier.code 0} true;
    out_$p251 := $M.71;
    goto corral_source_split_17544;

  $bb256:
    assume out_$i250 == 1;
    goto corral_source_split_17543;

  corral_source_split_17541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_17540:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 2);
    goto corral_source_split_17541;

  $bb255:
    assume {:verifier.code 0} true;
    out_$i249 := $M.87;
    goto corral_source_split_17540;

  $bb254:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_17538:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_17537:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3853} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17538;

  SeqInstr_2010:
    goto corral_source_split_17537;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  corral_source_split_17536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} out_vslice_dummy_var_684 := rsxx_cram_write(out_$p246, in_$p18, out_$i247, in_$p21);
    goto SeqInstr_2009;

  corral_source_split_17535:
    assume {:verifier.code 0} true;
    out_$i247 := $load.i64($M.60, in_$p7);
    goto corral_source_split_17536;

  corral_source_split_17534:
    assume {:verifier.code 0} true;
    out_$p246 := $M.71;
    goto corral_source_split_17535;

  $bb253:
    assume out_$i245 == 1;
    goto corral_source_split_17534;

  corral_source_split_17532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_17531:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 1);
    goto corral_source_split_17532;

  corral_source_split_17530:
    assume {:verifier.code 0} true;
    out_$i244 := $M.87;
    goto corral_source_split_17531;

  $bb251:
    assume out_$i243 == 1;
    goto corral_source_split_17530;

  $bb249:
    assume out_$i242 == 1;
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i238, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb242:
    assume out_$i239 == 1;
    assume {:verifier.code 0} true;
    out_$i242 := $slt.i32(out_$i238, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i239 := $slt.i32(out_$i238, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_17516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3849} out_$i238 := __VERIFIER_nondet_int();
    call {:si_unique_call 3850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i238);
    call {:si_unique_call 3851} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i238);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb239:
    assume out_$i237 == 1;
    goto corral_source_split_17516;

  corral_source_split_17132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_17131:
    assume {:verifier.code 0} true;
    out_$i237 := $ne.i32(out_$i236, 0);
    goto corral_source_split_17132;

  corral_source_split_17130:
    assume {:verifier.code 0} true;
    out_$i236 := $M.87;
    goto corral_source_split_17131;

  $bb15:
    assume !(out_$i50 == 1);
    goto corral_source_split_17130;

  $bb261:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_17553:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_17552:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3857} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17553;

  SeqInstr_2016:
    goto corral_source_split_17552;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  corral_source_split_17551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} out_vslice_dummy_var_686 := rsxx_cram_read(out_$p256, in_$p19, out_$i257, in_$p23);
    goto SeqInstr_2015;

  corral_source_split_17550:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i64($M.60, in_$p8);
    goto corral_source_split_17551;

  corral_source_split_17549:
    assume {:verifier.code 0} true;
    out_$p256 := $M.71;
    goto corral_source_split_17550;

  $bb260:
    assume out_$i255 == 1;
    goto corral_source_split_17549;

  corral_source_split_17528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_17527:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_17528;

  corral_source_split_17526:
    assume {:verifier.code 0} true;
    out_$i254 := $M.87;
    goto corral_source_split_17527;

  $bb250:
    assume !(out_$i242 == 1);
    goto corral_source_split_17526;

  $bb264:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb266:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_17565:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_17564:
    assume {:verifier.code 0} true;
    $M.85 := out_$i265;
    call {:si_unique_call 3861} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_17565;

  corral_source_split_17563:
    assume {:verifier.code 0} true;
    out_$i265 := $add.i32(out_$i264, 1);
    goto corral_source_split_17564;

  corral_source_split_17562:
    assume {:verifier.code 0} true;
    out_$i264 := $M.85;
    goto corral_source_split_17563;

  corral_source_split_17561:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 3860} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(2);
    goto corral_source_split_17562;

  $bb265:
    assume out_$i263 == 1;
    goto corral_source_split_17561;

  corral_source_split_17559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_17558:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 0);
    goto corral_source_split_17559;

  corral_source_split_17557:
    assume {:verifier.code 0} true;
    out_$i262 := $M.99;
    goto corral_source_split_17558;

  corral_source_split_17556:
    assume {:verifier.code 0} true;
    $M.99 := out_$i261;
    call {:si_unique_call 3859} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_17557;

  corral_source_split_17555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} out_$i261 := ldv_open_13();
    goto corral_source_split_17556;

  $bb263:
    assume out_$i260 == 1;
    goto corral_source_split_17555;

  corral_source_split_17520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_17519:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 1);
    goto corral_source_split_17520;

  corral_source_split_17518:
    assume {:verifier.code 0} true;
    out_$i259 := $M.87;
    goto corral_source_split_17519;

  $bb244:
    assume out_$i240 == 1;
    goto corral_source_split_17518;

  $bb243:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    out_$i240 := $slt.i32(out_$i238, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb270:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_17572:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_17571:
    assume {:verifier.code 0} true;
    $M.85 := out_$i270;
    call {:si_unique_call 3864} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i270);
    goto corral_source_split_17572;

  corral_source_split_17570:
    assume {:verifier.code 0} true;
    out_$i270 := $sub.i32(out_$i269, 1);
    goto corral_source_split_17571;

  corral_source_split_17569:
    assume {:verifier.code 0} true;
    out_$i269 := $M.85;
    goto corral_source_split_17570;

  corral_source_split_17568:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 3863} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_17569;

  corral_source_split_17567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} out_vslice_dummy_var_687 := ldv_release_13();
    goto corral_source_split_17568;

  $bb269:
    assume out_$i267 == 1;
    goto corral_source_split_17567;

  corral_source_split_17524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_17523:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 2);
    goto corral_source_split_17524;

  corral_source_split_17522:
    assume {:verifier.code 0} true;
    out_$i266 := $M.87;
    goto corral_source_split_17523;

  $bb246:
    assume out_$i241 == 1;
    goto corral_source_split_17522;

  $bb245:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i238, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_17574:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} ldv_stop();
    goto corral_source_split_17574;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb247:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb248;

  $bb252:
    assume {:verifier.code 0} true;
    assume !(out_$i243 == 1);
    goto $bb248;

  $bb276:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb286:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_17589:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_17588:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3870} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17589;

  corral_source_split_17587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} out_vslice_dummy_var_688 := rsxx_slot_reset(out_$p279);
    goto corral_source_split_17588;

  corral_source_split_17586:
    assume {:verifier.code 0} true;
    out_$p279 := $M.69;
    goto corral_source_split_17587;

  $bb285:
    assume out_$i278 == 1;
    goto corral_source_split_17586;

  corral_source_split_17584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_17583:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 1);
    goto corral_source_split_17584;

  corral_source_split_17582:
    assume {:verifier.code 0} true;
    out_$i277 := $M.88;
    goto corral_source_split_17583;

  $bb283:
    assume out_$i276 == 1;
    goto corral_source_split_17582;

  $bb278:
    assume out_$i274 == 1;
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i273, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i273, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_17576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3866} out_$i273 := __VERIFIER_nondet_int();
    call {:si_unique_call 3867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i273);
    call {:si_unique_call 3868} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i273);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume out_$i272 == 1;
    goto corral_source_split_17576;

  corral_source_split_17122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_17121:
    assume {:verifier.code 0} true;
    out_$i272 := $ne.i32(out_$i271, 0);
    goto corral_source_split_17122;

  corral_source_split_17120:
    assume {:verifier.code 0} true;
    out_$i271 := $M.88;
    goto corral_source_split_17121;

  $bb9:
    assume out_$i48 == 1;
    goto corral_source_split_17120;

  $bb8:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i44, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb290:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_17595:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_17594:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 3872} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_17595;

  corral_source_split_17593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} out_vslice_dummy_var_689 := rsxx_error_detected(out_$p283, out_$i284);
    goto corral_source_split_17594;

  corral_source_split_17592:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.60, in_$p9);
    goto corral_source_split_17593;

  corral_source_split_17591:
    assume {:verifier.code 0} true;
    out_$p283 := $M.69;
    goto corral_source_split_17592;

  $bb289:
    assume out_$i282 == 1;
    goto corral_source_split_17591;

  corral_source_split_17580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_17579:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 1);
    goto corral_source_split_17580;

  corral_source_split_17578:
    assume {:verifier.code 0} true;
    out_$i281 := $M.88;
    goto corral_source_split_17579;

  $bb280:
    assume out_$i275 == 1;
    goto corral_source_split_17578;

  $bb279:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i273, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_17597:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} ldv_stop();
    goto corral_source_split_17597;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(out_$i275 == 1);
    goto $bb282;

  $bb284:
    assume {:verifier.code 0} true;
    assume !(out_$i276 == 1);
    goto $bb282;

  $bb11:
    assume out_$i49 == 1;
    goto corral_source_split_17124;

  $bb10:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i44, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_17599:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} ldv_stop();
    goto corral_source_split_17599;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb13;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb13;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i284, out_vslice_dummy_var_678, out_vslice_dummy_var_679, out_vslice_dummy_var_680, out_vslice_dummy_var_681, out_vslice_dummy_var_682, out_vslice_dummy_var_683, out_vslice_dummy_var_684, out_vslice_dummy_var_685, out_vslice_dummy_var_686, out_vslice_dummy_var_687, out_vslice_dummy_var_688, out_vslice_dummy_var_689 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p12, in_$p14, in_$p15, in_$p17, in_$p18, in_$p19, in_$p21, in_$p23, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i284, out_vslice_dummy_var_678, out_vslice_dummy_var_679, out_vslice_dummy_var_680, out_vslice_dummy_var_681, out_vslice_dummy_var_682, out_vslice_dummy_var_683, out_vslice_dummy_var_684, out_vslice_dummy_var_685, out_vslice_dummy_var_686, out_vslice_dummy_var_687, out_vslice_dummy_var_688, out_vslice_dummy_var_689);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$p189: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i64, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i64, in_$i202: i32, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i1, in_$i223: i1, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i1, in_$i241: i1, in_$i242: i1, in_$i243: i1, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i64, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i64, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i64, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_vslice_dummy_var_678: i32, in_vslice_dummy_var_679: i64, in_vslice_dummy_var_680: i64, in_vslice_dummy_var_681: i32, in_vslice_dummy_var_682: i64, in_vslice_dummy_var_683: i64, in_vslice_dummy_var_684: i64, in_vslice_dummy_var_685: i64, in_vslice_dummy_var_686: i64, in_vslice_dummy_var_687: i32, in_vslice_dummy_var_688: i32, in_vslice_dummy_var_689: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$p189: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i64, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i64, out_$i202: i32, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i1, out_$i223: i1, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i1, out_$i241: i1, out_$i242: i1, out_$i243: i1, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i64, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i64, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i64, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_vslice_dummy_var_678: i32, out_vslice_dummy_var_679: i64, out_vslice_dummy_var_680: i64, out_vslice_dummy_var_681: i32, out_vslice_dummy_var_682: i64, out_vslice_dummy_var_683: i64, out_vslice_dummy_var_684: i64, out_vslice_dummy_var_685: i64, out_vslice_dummy_var_686: i64, out_vslice_dummy_var_687: i32, out_vslice_dummy_var_688: i32, out_vslice_dummy_var_689: i32);
  modifies $M.85, $M.76, $M.90, $M.79, $M.91, $M.0, $M.31, $M.33, $M.35, $M.37, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.20, $M.49, $CurrAddr, $M.32, $M.55, $M.34, $M.56, $M.36, $M.57, $M.38, $M.58, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.15, $M.14, $M.23, $M.25, $M.27, $M.29, $M.21, assertsPassed, $M.7, $M.51, $M.52, $M.24, $M.26, $M.28, $M.30, $M.93, $M.19, $M.94, $M.95, $M.96, $M.80, $M.97, $M.63, $M.65, $M.66, $M.67, $M.60, $M.82, $M.112, $M.73, $M.74, $M.71, $M.87, $M.69, $M.88, $M.61, $M.62, $M.86, $M.98, $M.50, $M.39, $M.6, $M.72, $M.99;


