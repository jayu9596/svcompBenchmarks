var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]i32;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: i32;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i32;

var $M.30: [ref]i32;

var $M.31: [ref]i32;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i16;

var $M.36: [ref]i16;

var $M.37: [ref]i16;

var $M.38: [ref]ref;

var $M.39: i32;

var $M.40: i32;

var $M.42: i32;

var $M.43: ref;

var $M.44: i32;

var $M.46: i32;

var $M.47: ref;

var $M.48: i32;

var $M.50: i32;

var $M.51: ref;

var $M.52: i32;

var $M.54: i32;

var $M.55: ref;

var $M.56: [ref]ref;

var $M.58: [ref]i16;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: i32;

var $M.67: i32;

var $M.68: ref;

var $M.69: i32;

var $M.70: i32;

var $M.71: ref;

var $M.72: i32;

var $M.73: i32;

var $M.74: ref;

var $M.75: i32;

var $M.76: i32;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i32;

var $M.129: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]i8;

var $M.141: [ref]ref;

var $M.146: [ref]i8;

var $M.170: [ref]i8;

var $M.199: [ref]i8;

var $M.200: [ref]i8;

var $M.201: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 663310);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 1028);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 2056);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 3084);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 4112);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 5140);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 6168);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 7196);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 8224);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 9252);

const {:count 6} product_id: ref;

axiom product_id == $sub.ref(0, 10282);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 11310);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 12342);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 13370);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 14402);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 15430);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 16462);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 17490);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 18522);

const ldv_irq_dev_2_0: ref;

axiom ldv_irq_dev_2_0 == $sub.ref(0, 19554);

const ldv_irq_dev_2_1: ref;

axiom ldv_irq_dev_2_1 == $sub.ref(0, 20586);

const ldv_irq_dev_2_2: ref;

axiom ldv_irq_dev_2_2 == $sub.ref(0, 21618);

const ldv_irq_dev_2_3: ref;

axiom ldv_irq_dev_2_3 == $sub.ref(0, 22650);

const dev_attr_runtime_suspend_scanrate_ms_group0: ref;

axiom dev_attr_runtime_suspend_scanrate_ms_group0 == $sub.ref(0, 23682);

const dev_attr_runtime_suspend_scanrate_ms_group1: ref;

axiom dev_attr_runtime_suspend_scanrate_ms_group1 == $sub.ref(0, 24714);

const dev_attr_suspend_scanrate_ms_group0: ref;

axiom dev_attr_suspend_scanrate_ms_group0 == $sub.ref(0, 25746);

const dev_attr_suspend_scanrate_ms_group1: ref;

axiom dev_attr_suspend_scanrate_ms_group1 == $sub.ref(0, 26778);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 27806);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 28838);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 29866);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 30898);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 31926);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 32958);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 33986);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 35018);

const cyapa_pm_ops_group1: ref;

axiom cyapa_pm_ops_group1 == $sub.ref(0, 36050);

const ldv_irq_dev_1_0: ref;

axiom ldv_irq_dev_1_0 == $sub.ref(0, 37082);

const ldv_irq_dev_1_1: ref;

axiom ldv_irq_dev_1_1 == $sub.ref(0, 38114);

const ldv_irq_dev_1_2: ref;

axiom ldv_irq_dev_1_2 == $sub.ref(0, 39146);

const ldv_irq_dev_1_3: ref;

axiom ldv_irq_dev_1_3 == $sub.ref(0, 40178);

const cyapa_gen5_ops_group1: ref;

axiom cyapa_gen5_ops_group1 == $sub.ref(0, 41210);

const cyapa_gen3_ops_group3: ref;

axiom cyapa_gen3_ops_group3 == $sub.ref(0, 42242);

const cyapa_gen3_ops_group2: ref;

axiom cyapa_gen3_ops_group2 == $sub.ref(0, 43274);

const cyapa_gen3_ops_group1: ref;

axiom cyapa_gen3_ops_group1 == $sub.ref(0, 44306);

const cyapa_gen5_ops_group3: ref;

axiom cyapa_gen5_ops_group3 == $sub.ref(0, 45338);

const cyapa_gen5_ops_group2: ref;

axiom cyapa_gen5_ops_group2 == $sub.ref(0, 46370);

const cyapa_gen5_ops_group0: ref;

axiom cyapa_gen5_ops_group0 == $sub.ref(0, 47402);

const cyapa_gen3_ops_group0: ref;

axiom cyapa_gen3_ops_group0 == $sub.ref(0, 48434);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 49462);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 50490);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 51518);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 52546);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 53574);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 54602);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 55630);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 56658);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 57686);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 58714);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 59742);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 60770);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 61798);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 62826);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 63854);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 64882);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 65910);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 66938);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 67966);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 68994);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 70022);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 71050);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 72078);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 73106);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 74134);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 75162);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 76190);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 77218);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 78246);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 79274);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 80302);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 81330);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 82358);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 83386);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 84414);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 85442);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 86470);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 87498);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 88526);

const cyapa_gen3_ops: ref;

axiom cyapa_gen3_ops == $sub.ref(0, 89670);

const ldv_mutex_state_sync_lock_of_cyapa: ref;

axiom ldv_mutex_state_sync_lock_of_cyapa == $sub.ref(0, 90698);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 91726);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 92754);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 93782);

const ldv_mutex_cmd_lock_of_cyapa_gen5_cmd_states: ref;

axiom ldv_mutex_cmd_lock_of_cyapa_gen5_cmd_states == $sub.ref(0, 94810);

const {:count 8} cyapa_gen5_bl_cmd_key: ref;

axiom cyapa_gen5_bl_cmd_key == $sub.ref(0, 95842);

const {:count 11} bl_exit: ref;

axiom bl_exit == $sub.ref(0, 96877);

const {:count 11} bl_deactivate: ref;

axiom bl_deactivate == $sub.ref(0, 97912);

const {:count 8} security_key: ref;

axiom security_key == $sub.ref(0, 98944);

const {:count 11} bl_activate: ref;

axiom bl_activate == $sub.ref(0, 99979);

const {:count 15} cyapa_i2c_cmds: ref;

axiom cyapa_i2c_cmds == $sub.ref(0, 101033);

const {:count 15} cyapa_smbus_cmds: ref;

axiom cyapa_smbus_cmds == $sub.ref(0, 102087);

const dev_attr_runtime_suspend_scanrate_ms: ref;

axiom dev_attr_runtime_suspend_scanrate_ms == $sub.ref(0, 103159);

const {:count 2} cyapa_power_runtime_entries: ref;

axiom cyapa_power_runtime_entries == $sub.ref(0, 104199);

const cyapa_power_runtime_group: ref;

axiom cyapa_power_runtime_group == $sub.ref(0, 105255);

const dev_attr_suspend_scanrate_ms: ref;

axiom dev_attr_suspend_scanrate_ms == $sub.ref(0, 106327);

const {:count 2} cyapa_power_wakeup_entries: ref;

axiom cyapa_power_wakeup_entries == $sub.ref(0, 107367);

const cyapa_power_wakeup_group: ref;

axiom cyapa_power_wakeup_group == $sub.ref(0, 108423);

const dev_attr_mode: ref;

axiom dev_attr_mode == $sub.ref(0, 109495);

const dev_attr_calibrate: ref;

axiom dev_attr_calibrate == $sub.ref(0, 110567);

const dev_attr_baseline: ref;

axiom dev_attr_baseline == $sub.ref(0, 111639);

const dev_attr_update_fw: ref;

axiom dev_attr_update_fw == $sub.ref(0, 112711);

const dev_attr_product_id: ref;

axiom dev_attr_product_id == $sub.ref(0, 113783);

const dev_attr_firmware_version: ref;

axiom dev_attr_firmware_version == $sub.ref(0, 114855);

const {:count 7} cyapa_sysfs_entries: ref;

axiom cyapa_sysfs_entries == $sub.ref(0, 115935);

const cyapa_sysfs_group: ref;

axiom cyapa_sysfs_group == $sub.ref(0, 116991);

const {:count 2} cyapa_id_table: ref;

axiom cyapa_id_table == $sub.ref(0, 118079);

const cyapa_pm_ops: ref;

axiom cyapa_pm_ops == $sub.ref(0, 119287);

const {:count 3} cyapa_acpi_id: ref;

axiom cyapa_acpi_id == $sub.ref(0, 120383);

const cyapa_driver: ref;

axiom cyapa_driver == $sub.ref(0, 121623);

const {:count 3} __mod_acpi__cyapa_acpi_id_device_table: ref;

axiom __mod_acpi__cyapa_acpi_id_device_table == $sub.ref(0, 122719);

const {:count 2} __mod_i2c__cyapa_id_table_device_table: ref;

axiom __mod_i2c__cyapa_id_table_device_table == $sub.ref(0, 123807);

const cyapa_gen5_ops: ref;

axiom cyapa_gen5_ops == $sub.ref(0, 124951);

const {:count 27} .str.110: ref;

axiom .str.110 == $sub.ref(0, 126002);

const {:count 26} .str.111: ref;

axiom .str.111 == $sub.ref(0, 127052);

const {:count 27} .str.112: ref;

axiom .str.112 == $sub.ref(0, 128103);

const {:count 30} .str.113: ref;

axiom .str.113 == $sub.ref(0, 129157);

const {:count 38} .str.114: ref;

axiom .str.114 == $sub.ref(0, 130219);

const {:count 9} .str.94: ref;

axiom .str.94 == $sub.ref(0, 131252);

const {:count 44} .str.103: ref;

axiom .str.103 == $sub.ref(0, 132320);

const {:count 35} .str.104: ref;

axiom .str.104 == $sub.ref(0, 133379);

const {:count 41} .str.105: ref;

axiom .str.105 == $sub.ref(0, 134444);

const {:count 43} .str.106: ref;

axiom .str.106 == $sub.ref(0, 135511);

const {:count 26} .str.107: ref;

axiom .str.107 == $sub.ref(0, 136561);

const {:count 32} .str.108: ref;

axiom .str.108 == $sub.ref(0, 137617);

const {:count 33} .str.109: ref;

axiom .str.109 == $sub.ref(0, 138674);

const {:count 38} .str.100: ref;

axiom .str.100 == $sub.ref(0, 139736);

const {:count 32} .str.101: ref;

axiom .str.101 == $sub.ref(0, 140792);

const {:count 29} .str.102: ref;

axiom .str.102 == $sub.ref(0, 141845);

const {:count 20} .str.99: ref;

axiom .str.99 == $sub.ref(0, 142889);

const {:count 34} .str.97: ref;

axiom .str.97 == $sub.ref(0, 143947);

const {:count 55} .str.98: ref;

axiom .str.98 == $sub.ref(0, 145026);

const {:count 32} .str.95: ref;

axiom .str.95 == $sub.ref(0, 146082);

const {:count 24} .str.96: ref;

axiom .str.96 == $sub.ref(0, 147130);

const {:count 33} .str.89: ref;

axiom .str.89 == $sub.ref(0, 148187);

const {:count 20} .str.90: ref;

axiom .str.90 == $sub.ref(0, 149231);

const {:count 32} .str.91: ref;

axiom .str.91 == $sub.ref(0, 150287);

const {:count 30} .str.92: ref;

axiom .str.92 == $sub.ref(0, 151341);

const {:count 37} .str.93: ref;

axiom .str.93 == $sub.ref(0, 152402);

const {:count 6} .str.24: ref;

axiom .str.24 == $sub.ref(0, 153432);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 154491);

const {:count 19} .str.40: ref;

axiom .str.40 == $sub.ref(0, 155534);

const {:count 44} .str.41: ref;

axiom .str.41 == $sub.ref(0, 156602);

const {:count 36} .str.42: ref;

axiom .str.42 == $sub.ref(0, 157662);

const {:count 40} .str.43: ref;

axiom .str.43 == $sub.ref(0, 158726);

const {:count 39} .str.44: ref;

axiom .str.44 == $sub.ref(0, 159789);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 160845);

const {:count 36} .str.46: ref;

axiom .str.46 == $sub.ref(0, 161905);

const .str: ref;

axiom .str == $sub.ref(0, 162967);

const {:count 45} .str.3: ref;

axiom .str.3 == $sub.ref(0, 164036);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 165089);

const {:count 35} .str.5: ref;

axiom .str.5 == $sub.ref(0, 166148);

const {:count 37} .str.6: ref;

axiom .str.6 == $sub.ref(0, 167209);

const {:count 29} .str.7: ref;

axiom .str.7 == $sub.ref(0, 168262);

const {:count 37} .str.1: ref;

axiom .str.1 == $sub.ref(0, 169323);

const {:count 24} .str.2: ref;

axiom .str.2 == $sub.ref(0, 170371);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 42} .str.57: ref;

axiom .str.57 == $sub.ref(0, 171437);

const {:count 48} .str.58: ref;

axiom .str.58 == $sub.ref(0, 172509);

const {:count 38} .str.54: ref;

axiom .str.54 == $sub.ref(0, 173571);

const {:count 40} .str.55: ref;

axiom .str.55 == $sub.ref(0, 174635);

const {:count 24} .str.47: ref;

axiom .str.47 == $sub.ref(0, 175683);

const {:count 27} .str.8: ref;

axiom .str.8 == $sub.ref(0, 176734);

const {:count 28} .str.11: ref;

axiom .str.11 == $sub.ref(0, 177786);

const {:count 38} .str.9: ref;

axiom .str.9 == $sub.ref(0, 178848);

const {:count 35} .str.10: ref;

axiom .str.10 == $sub.ref(0, 179907);

const {:count 17} .str.48: ref;

axiom .str.48 == $sub.ref(0, 180948);

const {:count 7} .str.20: ref;

axiom .str.20 == $sub.ref(0, 181979);

const {:count 11} .str.49: ref;

axiom .str.49 == $sub.ref(0, 183014);

const {:count 4} .str.12: ref;

axiom .str.12 == $sub.ref(0, 184042);

const {:count 10} .str.50: ref;

axiom .str.50 == $sub.ref(0, 185076);

const {:count 20} .str.26: ref;

axiom .str.26 == $sub.ref(0, 186120);

const {:count 28} .str.27: ref;

axiom .str.27 == $sub.ref(0, 187172);

const {:count 8} .str.28: ref;

axiom .str.28 == $sub.ref(0, 188204);

const {:count 22} .str.29: ref;

axiom .str.29 == $sub.ref(0, 189250);

const {:count 206} .str.30: ref;

axiom .str.30 == $sub.ref(0, 190480);

const {:count 36} .str.31: ref;

axiom .str.31 == $sub.ref(0, 191540);

const {:count 38} .str.32: ref;

axiom .str.32 == $sub.ref(0, 192602);

const {:count 37} .str.33: ref;

axiom .str.33 == $sub.ref(0, 193663);

const {:count 34} .str.34: ref;

axiom .str.34 == $sub.ref(0, 194721);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 195766);

const {:count 24} .str.36: ref;

axiom .str.36 == $sub.ref(0, 196814);

const {:count 24} .str.37: ref;

axiom .str.37 == $sub.ref(0, 197862);

const {:count 22} .str.38: ref;

axiom .str.38 == $sub.ref(0, 198908);

const {:count 9} .str.51: ref;

axiom .str.51 == $sub.ref(0, 199941);

const {:count 10} .str.52: ref;

axiom .str.52 == $sub.ref(0, 200975);

const {:count 5} .str.53: ref;

axiom .str.53 == $sub.ref(0, 202004);

const {:count 10} .str.13: ref;

axiom .str.13 == $sub.ref(0, 203038);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 204078);

const {:count 16} .str.15: ref;

axiom .str.15 == $sub.ref(0, 205118);

const {:count 18} .str.16: ref;

axiom .str.16 == $sub.ref(0, 206160);

const {:count 11} .str.17: ref;

axiom .str.17 == $sub.ref(0, 207195);

const {:count 12} .str.18: ref;

axiom .str.18 == $sub.ref(0, 208231);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 209268);

const power_group_name: ref;

axiom power_group_name == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 20} .str.56: ref;

axiom .str.56 == $sub.ref(0, 210312);

const {:count 11} .str.21: ref;

axiom .str.21 == $sub.ref(0, 211347);

const {:count 4} .str.22: ref;

axiom .str.22 == $sub.ref(0, 212375);

const {:count 4} .str.23: ref;

axiom .str.23 == $sub.ref(0, 213403);

const {:count 28} .str.59: ref;

axiom .str.59 == $sub.ref(0, 214455);

const {:count 47} .str.25: ref;

axiom .str.25 == $sub.ref(0, 215526);

const {:count 34} .str.87: ref;

axiom .str.87 == $sub.ref(0, 216584);

const {:count 39} .str.88: ref;

axiom .str.88 == $sub.ref(0, 217647);

const {:count 29} .str.81: ref;

axiom .str.81 == $sub.ref(0, 218700);

const {:count 23} .str.82: ref;

axiom .str.82 == $sub.ref(0, 219747);

const {:count 36} .str.83: ref;

axiom .str.83 == $sub.ref(0, 220807);

const {:count 32} .str.84: ref;

axiom .str.84 == $sub.ref(0, 221863);

const {:count 34} .str.85: ref;

axiom .str.85 == $sub.ref(0, 222921);

const {:count 29} .str.86: ref;

axiom .str.86 == $sub.ref(0, 223974);

const {:count 30} .str.75: ref;

axiom .str.75 == $sub.ref(0, 225028);

const {:count 47} .str.76: ref;

axiom .str.76 == $sub.ref(0, 226099);

const {:count 38} .str.77: ref;

axiom .str.77 == $sub.ref(0, 227161);

const {:count 31} .str.78: ref;

axiom .str.78 == $sub.ref(0, 228216);

const {:count 24} .str.79: ref;

axiom .str.79 == $sub.ref(0, 229264);

const {:count 211} .str.72: ref;

axiom .str.72 == $sub.ref(0, 230499);

const {:count 25} .str.80: ref;

axiom .str.80 == $sub.ref(0, 231548);

const {:count 36} .str.65: ref;

axiom .str.65 == $sub.ref(0, 232608);

const {:count 46} .str.66: ref;

axiom .str.66 == $sub.ref(0, 233678);

const {:count 44} .str.67: ref;

axiom .str.67 == $sub.ref(0, 234746);

const {:count 41} .str.68: ref;

axiom .str.68 == $sub.ref(0, 235811);

const {:count 39} .str.69: ref;

axiom .str.69 == $sub.ref(0, 236874);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 237937);

const {:count 25} .str.71: ref;

axiom .str.71 == $sub.ref(0, 238986);

const {:count 45} .str.73: ref;

axiom .str.73 == $sub.ref(0, 240055);

const {:count 7} .str.74: ref;

axiom .str.74 == $sub.ref(0, 241086);

const {:count 36} .str.63: ref;

axiom .str.63 == $sub.ref(0, 242146);

const {:count 39} .str.64: ref;

axiom .str.64 == $sub.ref(0, 243209);

const {:count 43} .str.60: ref;

axiom .str.60 == $sub.ref(0, 244276);

const {:count 25} .str.61: ref;

axiom .str.61 == $sub.ref(0, 245325);

const {:count 36} .str.62: ref;

axiom .str.62 == $sub.ref(0, 246385);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 247417);

const {:count 3} .str.1.248: ref;

axiom .str.1.248 == $sub.ref(0, 248444);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 249482);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 250510);

const cyapa_gen3_check_fw: ref;

axiom cyapa_gen3_check_fw == $sub.ref(0, 251542);

procedure cyapa_gen3_check_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen3_check_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 30848);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 8);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i17 := $sext.i16.i32($i16);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(1, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i16($i21);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i22);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i17, $i23);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 1} {:cexpr "csum_expected"} boogie_si_record_i16($i25);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(2, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i29 := cyapa_gen3_csum($p28, 126);
    call {:si_unique_call 3} {:cexpr "csum"} boogie_si_record_i16($i29);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i25);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i30, $i31);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(126, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 8);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(127, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i16($i46);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i48 := $sext.i16.i32($i47);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i42, $i48);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    call {:si_unique_call 5} {:cexpr "csum_expected"} boogie_si_record_i16($i50);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(128, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i54 := cyapa_gen3_csum($p53, 30720);
    call {:si_unique_call 7} {:cexpr "csum"} boogie_si_record_i16($i54);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i50);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i55, $i56);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i54);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i50);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} dev_err.ref.ref.ref.i32.i32($p4, .str.61, .str.62, $i58, $i59);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i29);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i25);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} dev_err.ref.ref.ref.i32.i32($p4, .str.61, .str.62, $i33, $i34);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} dev_err.ref.ref.i64.i32($p4, .str.60, $i9, 30848);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const cyapa_gen3_bl_enter: ref;

axiom cyapa_gen3_bl_enter == $sub.ref(0, 252574);

procedure cyapa_gen3_bl_enter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_bl_enter($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i19: i32;
  var $i18: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i20: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i1 := cyapa_poll_state($p0, 500);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 10} {:cexpr "error"} boogie_si_record_i32($i1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 2);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 4);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i12 := cyapa_write_byte($p0, 0, 1);
    call {:si_unique_call 12} {:cexpr "error"} boogie_si_record_i32($i12);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} usleep_range(25000, 50000);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i14 := 2000;
    goto $bb14;

  $bb14:
    call $i14, $i15, $i16, $i17, $i19, $i18, $p21, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i30, $i20, $i31 := cyapa_gen3_bl_enter_loop_$bb14($p0, $i14, $i15, $i16, $i17, $i19, $i18, $p21, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i30, $i20, $i31);
    goto $bb14_last;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i15 := cyapa_poll_state($p0, 500);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 15} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} msleep(100);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i14, $sub.i32(0, 100));
    call {:si_unique_call 18} {:cexpr "waiting_time"} boogie_si_record_i32($i30);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i20 := $i30;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i20, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 2);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i34 == 1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 2);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 11);
    goto $bb3;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb33;

  $bb29:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb29_dummy;

  $bb22:
    assume $i23 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb24;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, $sub.i32(0, 110));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i3 := $i18;
    goto $bb3;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i14, $sub.i32(0, 500));
    call {:si_unique_call 16} {:cexpr "waiting_time"} boogie_si_record_i32($i19);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb19;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb29_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;
}



const cyapa_gen3_bl_activate: ref;

axiom cyapa_gen3_bl_activate == $sub.ref(0, 253606);

procedure cyapa_gen3_bl_activate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_bl_activate($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i1 := cyapa_i2c_reg_write_block($p0, 0, 11, bl_activate);
    call {:si_unique_call 20} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    call {:si_unique_call 21} {:cexpr "error"} boogie_si_record_i32($i2);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} msleep(2000);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i5 := cyapa_poll_state($p0, 11000);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 24} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 3);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const cyapa_gen3_bl_initiate: ref;

axiom cyapa_gen3_bl_initiate == $sub.ref(0, 254638);

procedure cyapa_gen3_bl_initiate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen3_bl_initiate($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen3_do_fw_update: ref;

axiom cyapa_gen3_do_fw_update == $sub.ref(0, 255670);

procedure cyapa_gen3_do_fw_update($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_do_fw_update($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(128, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i8 := cyapa_gen3_write_blocks($p0, 32, 480, $p7);
    call {:si_unique_call 26} {:cexpr "error"} boogie_si_record_i32($i8);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i13 := cyapa_gen3_write_blocks($p0, 30, 2, $p12);
    call {:si_unique_call 29} {:cexpr "error"} boogie_si_record_i32($i13);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} dev_err.ref.ref.i32($p4, .str.64, $i13);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} dev_err.ref.ref.i32($p4, .str.63, $i8);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const cyapa_gen3_bl_deactivate: ref;

axiom cyapa_gen3_bl_deactivate == $sub.ref(0, 256702);

procedure cyapa_gen3_bl_deactivate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_bl_deactivate($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i1 := cyapa_i2c_reg_write_block($p0, 0, 11, bl_deactivate);
    call {:si_unique_call 32} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    call {:si_unique_call 33} {:cexpr "error"} boogie_si_record_i32($i2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} msleep(100);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i5 := cyapa_poll_state($p0, 500);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 36} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 2);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const cyapa_gen3_show_baseline: ref;

axiom cyapa_gen3_show_baseline == $sub.ref(0, 257734);

procedure cyapa_gen3_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation cyapa_gen3_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i25: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i8: i32;
  var $i51: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p4 := dev_get_drvdata($p0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i6 := cyapa_read_byte($p5, 2);
    call {:si_unique_call 40} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i6, 3);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 3);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i11 := cyapa_write_byte($p5, 0, 64);
    call {:si_unique_call 44} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} usleep_range(10000, 20000);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i13 := cyapa_read_byte($p5, 2);
    call {:si_unique_call 48} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume {:branchcond $i14} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i13, 3;
    goto $bb14;

  $bb14:
    call $i18, $i19, $i20, $i21, $i16, $i17, $i22, $i23, $i24, $i26, $i27, $i28 := cyapa_gen3_show_baseline_loop_$bb14($p5, $i18, $i19, $i20, $i21, $i16, $i17, $i22, $i23, $i24, $i26, $i27, $i28);
    goto $bb14_last;

  $bb18:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i16, 3);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 3);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i24 := $i17;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i17, 1);
    call {:si_unique_call 53} {:cexpr "tries"} boogie_si_record_i32($i26);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i18, $i28 := $i26, $i26;
    assume true;
    goto $bb15, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i25 := $i28;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i25, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i30 := cyapa_read_byte($p5, 13);
    call {:si_unique_call 56} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i32 := cyapa_read_byte($p5, 14);
    call {:si_unique_call 59} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.28);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.71);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.72);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.73);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 907);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 62} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i50 := scnprintf.ref.i64.ref.i32.i32($p2, 4096, .str.74, $i30, $i32);
    call {:si_unique_call 65} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i8 := $i50;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i8);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb34:
    assume $i49 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p0, .str.73, $i30, $i32);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i33 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} dev_err.ref.ref.i32($p0, .str.70, $i32);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i8 := $i32;
    goto $bb3;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} dev_err.ref.ref.i32($p0, .str.69, $i30);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb3;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} dev_err.ref.ref($p0, .str.68);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 110);
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} usleep_range(10000, 20000);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i19 := cyapa_read_byte($p5, 2);
    call {:si_unique_call 52} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i16, $i17 := $i19, $i18;
    goto $bb17_dummy;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} dev_err.ref.ref.i32($p0, .str.65, $i15);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb19:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb21;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb12;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} dev_err.ref.ref.i32($p0, .str.67, $i11);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} dev_warn.ref.ref.i32($p0, .str.66, $i6);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 11);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} dev_err.ref.ref.i32($p0, .str.65, $i6);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;
}



const cyapa_gen3_do_calibrate: ref;

axiom cyapa_gen3_do_calibrate == $sub.ref(0, 258766);

procedure cyapa_gen3_do_calibrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation cyapa_gen3_do_calibrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i27: i32;
  var $i28: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i9: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 67} {:cexpr "cyapa_gen3_do_calibrate:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i7 := cyapa_read_byte($p6, 2);
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i7, 3);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 3);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i12 := cyapa_write_byte($p6, 0, $sub.i8(0, 128));
    call {:si_unique_call 74} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} usleep_range(100000, 200000);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i14 := cyapa_read_byte($p6, 2);
    call {:si_unique_call 78} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i15 == 1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i14, 20;
    goto $bb14;

  $bb14:
    call $i19, $i20, $i21, $i22, $i17, $i18, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32 := cyapa_gen3_do_calibrate_loop_$bb14($p6, $i19, $i20, $i21, $i22, $i17, $i18, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32);
    goto $bb14_last;

  $bb18:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i17, 3);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i25, $i26 := $i18, $i17;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i18, 1);
    call {:si_unique_call 83} {:cexpr "tries"} boogie_si_record_i32($i29);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i19, $i31, $i32 := $i29, $i17, $i29;
    assume true;
    goto $bb15, $bb23;

  $bb23:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i31, $i32;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i28, 0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.28);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.79);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.72);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.80);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 838);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 86} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i9 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i9, 0);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i52 := $i3;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i9);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb33;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} __dynamic_dev_dbg.ref.ref.ref($p4, $p0, .str.80);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} dev_err.ref.ref($p0, .str.78);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 110);
    goto $bb3;

  $bb15:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} usleep_range(100000, 200000);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i20 := cyapa_read_byte($p6, 2);
    call {:si_unique_call 82} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i17, $i18 := $i20, $i19;
    goto $bb17_dummy;

  $bb16:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} dev_err.ref.ref.i32($p0, .str.75, $i16);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb19:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i26, $i25;
    goto $bb21;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb12;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} dev_err.ref.ref.i32($p0, .str.77, $i12);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} dev_warn.ref.ref.i32($p0, .str.76, $i7);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 11);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} dev_err.ref.ref.i32($p0, .str.75, $i7);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;
}



const cyapa_gen3_initialize: ref;

axiom cyapa_gen3_initialize == $sub.ref(0, 259798);

procedure cyapa_gen3_initialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen3_initialize($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen3_state_parse: ref;

axiom cyapa_gen3_state_parse == $sub.ref(0, 260830);

procedure cyapa_gen3_state_parse($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cyapa_gen3_state_parse($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "cyapa_gen3_state_parse:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p1);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 12);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 144);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 3);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(0, 11);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $i90;
    return;

  $bb42:
    assume $i77 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 4);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i80 == 1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i83 == 1);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 3);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i86 == 1);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb44;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb54;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb46;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb46;

  $bb39:
    assume $i71 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 3);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 8);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb35;

  $bb36:
    assume $i64 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 3);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 4);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 8);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb26;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i53 := $ashr.i32($i52, 4);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 7);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 5);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i55 == 1;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 3);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 4);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 3);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i32 := $sext.i8.i32($i31);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 32);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 2);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 3);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 17);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 16);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 3);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 2);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;
}



const cyapa_gen3_do_operational_check: ref;

axiom cyapa_gen3_do_operational_check == $sub.ref(0, 261862);

procedure cyapa_gen3_do_operational_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_do_operational_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i12: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i16 := cyapa_gen3_set_power_mode($p0, $sub.i8(0, 4), 0);
    call {:si_unique_call 92} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i18 := cyapa_gen3_get_query_data($p0);
    call {:si_unique_call 100} {:cexpr "error"} boogie_si_record_i32($i18);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 3);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i27 := strlen(product_id);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i30 := memcmp($p29, product_id, $i27);
    call {:si_unique_call 105} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb15;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} dev_err.ref.ref.ref($p3, .str.86, $p33);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb15;

  $bb26:
    assume $i23 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} dev_err.ref.ref.i32($p3, .str.85, $i26);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb15;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb15;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} dev_err.ref.ref.ref.i32($p3, .str.83, .str.84, $i16);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i10 := cyapa_gen3_bl_deactivate($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 90} {:cexpr "error"} boogie_si_record_i32($i10);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vslice_dummy_var_87 := cyapa_gen3_bl_query_data($p0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i14 := cyapa_gen3_bl_exit($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 95} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} dev_err.ref.ref.i32($p3, .str.82, $i14);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} dev_err.ref.ref.i32($p3, .str.81, $i10);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb15;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb11;
}



const cyapa_gen3_irq_handler: ref;

axiom cyapa_gen3_irq_handler == $sub.ref(0, 262894);

procedure cyapa_gen3_irq_handler($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation cyapa_gen3_irq_handler($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i38: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p1 := $alloc($mul.ref(27, $zext.i32.i64(1)));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i8 := cyapa_read_block($p0, 3, $p7);
    call {:si_unique_call 109} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 110} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 27);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(0, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.7, $p12);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i15 := $sge.i32($i14, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 3);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 3);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p32);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i34, 4);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 15);
    call {:si_unique_call 113} {:cexpr "num_fingers"} boogie_si_record_i32($i36);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i36);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} input_mt_sync_frame($p3);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 8);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 32);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 16);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} input_sync($p3);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb27:
    assume $i94 == 1;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.7, $p95);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 2);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} input_report_key($p3, 273, $i100);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.7, $p84);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 4);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} input_report_key($p3, 274, $i89);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i74 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.7, $p75);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} input_report_key($p3, 272, $i78);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb16;

  $bb16:
    call $p39, $p40, $i41, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i38 := cyapa_gen3_irq_handler_loop_$bb16($p1, $p3, $i36, $p39, $p40, $i41, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i38);
    goto $bb16_last;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(2, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i38);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(4, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.7, $p43);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, $sub.i32(0, 1));
    call {:si_unique_call 114} {:cexpr "slot"} boogie_si_record_i32($i46);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} input_mt_slot($p3, $i46);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} input_mt_report_slot_state($p3, 0, 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(0, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p47);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 240);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 4);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(1, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p52);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i51, $i54);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} input_report_abs($p3, 53, $i55);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(0, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.7, $p56);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 15);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 8);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(2, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.7, $p61);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i60, $i63);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} input_report_abs($p3, 54, $i64);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p40, $mul.ref($i41, 5)), $mul.ref(3, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.7, $p65);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} input_report_abs($p3, 58, $i67);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i38, 1);
    call {:si_unique_call 120} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, $i36);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i68;
    goto $bb18_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(0, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.7, $p26);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(1, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} dev_err.ref.ref.i32.i32($p6, .str.88, $i28, $i31);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} dev_err.ref.ref.i32($p6, .str.87, $i9);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;
}



const cyapa_gen3_irq_cmd_handler: ref;

axiom cyapa_gen3_irq_cmd_handler == $sub.ref(0, 263926);

procedure cyapa_gen3_irq_cmd_handler($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen3_irq_cmd_handler($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const cyapa_gen3_empty_output_data: ref;

axiom cyapa_gen3_empty_output_data == $sub.ref(0, 264958);

procedure cyapa_gen3_empty_output_data($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen3_empty_output_data($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen3_set_power_mode: ref;

axiom cyapa_gen3_set_power_mode == $sub.ref(0, 265990);

procedure cyapa_gen3_set_power_mode($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen3_set_power_mode($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i16;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i37: i32;
  var $i6: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i8;
  var $i36: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i11: i32;
  var $i59: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "cyapa_gen3_set_power_mode:arg:power_mode"} boogie_si_record_i8($i1);
    call {:si_unique_call 127} {:cexpr "cyapa_gen3_set_power_mode:arg:always_unused"} boogie_si_record_i16($i2);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 4);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i7 := cyapa_read_byte($p0, 1);
    call {:si_unique_call 129} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} usleep_range(10000, 20000);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i53 := cyapa_read_byte($p0, 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i53, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i9 := $i53;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} usleep_range(10000, 20000);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i55 := cyapa_read_byte($p0, 1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i56 := $sge.i32($i55, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i9 := $i55;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} usleep_range(10000, 20000);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i57 := cyapa_read_byte($p0, 1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i58 := $sge.i32($i57, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i9 := $i57;
    assume {:branchcond $i58} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} usleep_range(10000, 20000);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i11 := cyapa_read_byte($p0, 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i59 := $sge.i32($i11, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} usleep_range(10000, 20000);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 0);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i10, 252);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, $i14);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i10);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 252);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i20 := cyapa_get_wait_time_for_pwr_cmd($i19);
    call {:si_unique_call 133} {:cexpr "sleep_time"} boogie_si_record_i16($i20);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i10);
    call {:si_unique_call 134} {:cexpr "power"} boogie_si_record_i8($i21);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 3);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 135} {:cexpr "power"} boogie_si_record_i8($i24);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 4));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i24);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i26, $i27);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 136} {:cexpr "power"} boogie_si_record_i8($i29);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i32 := cyapa_write_byte($p0, 1, $i31);
    call {:si_unique_call 138} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume {:branchcond $i33} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} usleep_range(10000, 20000);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i29);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i40 := cyapa_write_byte($p0, 1, $i39);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i34 := $i40;
    assume {:branchcond $i41} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} usleep_range(10000, 20000);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i29);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i44 := cyapa_write_byte($p0, 1, $i43);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i34 := $i44;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} usleep_range(10000, 20000);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i29);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i48 := cyapa_write_byte($p0, 1, $i47);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i34 := $i48;
    assume {:branchcond $i49} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} usleep_range(10000, 20000);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i29);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i36 := cyapa_write_byte($p0, 1, $i51);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i36, 0);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i34 := $i36;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usleep_range(10000, 20000);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i20);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} msleep($i37);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i6 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb25;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb23;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb23;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb10;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb8;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb8;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 267022);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const cyapa_read_byte: ref;

axiom cyapa_read_byte == $sub.ref(0, 268054);

procedure cyapa_read_byte($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_read_byte($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i8;
  var $i13: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "cyapa_read_byte:arg:cmd_idx"} boogie_si_record_i8($i1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(57, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref($i15, 2)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.9, $p17);
    call {:si_unique_call 159} {:cexpr "cmd"} boogie_si_record_i8($i18);
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i13);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i23 := i2c_smbus_read_byte_data($p20, $i22);
    call {:si_unique_call 161} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref($i6, 2)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.8, $p8);
    call {:si_unique_call 157} {:cexpr "cmd"} boogie_si_record_i8($i9);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 1);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 158} {:cexpr "cmd"} boogie_si_record_i8($i12);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 269086);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 163} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_get_wait_time_for_pwr_cmd: ref;

axiom cyapa_get_wait_time_for_pwr_cmd == $sub.ref(0, 270118);

procedure cyapa_get_wait_time_for_pwr_cmd($i0: i8) returns ($r: i16);
  free requires assertsPassed;



implementation cyapa_get_wait_time_for_pwr_cmd($i0: i8) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} {:cexpr "cyapa_get_wait_time_for_pwr_cmd:arg:pwr_mode"} boogie_si_record_i8($i0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 252);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 252);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i10 := cyapa_pwr_cmd_to_sleep_time($i9);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i16($i10);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 50);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i7 := 20;
    goto $bb13;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i7 := 20;
    goto $bb13;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i7 := 20;
    goto $bb13;
}



const cyapa_write_byte: ref;

axiom cyapa_write_byte == $sub.ref(0, 271150);

procedure cyapa_write_byte($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_write_byte($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i8;
  var $i11: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "cyapa_write_byte:arg:cmd_idx"} boogie_si_record_i8($i1);
    call {:si_unique_call 168} {:cexpr "cyapa_write_byte:arg:value"} boogie_si_record_i8($i2);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(57, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref($i13, 2)), $mul.ref(0, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.9, $p15);
    call {:si_unique_call 170} {:cexpr "cmd"} boogie_si_record_i8($i16);
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i11);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i2);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i23 := i2c_smbus_write_byte_data($p18, $i20, $i22);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref($i7, 2)), $mul.ref(0, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.8, $p9);
    call {:si_unique_call 169} {:cexpr "cmd"} boogie_si_record_i8($i10);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 272182);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    return;
}



const i2c_smbus_write_byte_data: ref;

axiom i2c_smbus_write_byte_data == $sub.ref(0, 273214);

procedure i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 174} {:cexpr "i2c_smbus_write_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 175} {:cexpr "i2c_smbus_write_byte_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_pwr_cmd_to_sleep_time: ref;

axiom cyapa_pwr_cmd_to_sleep_time == $sub.ref(0, 274246);

procedure cyapa_pwr_cmd_to_sleep_time($i0: i8) returns ($r: i16);
  free requires assertsPassed;



implementation cyapa_pwr_cmd_to_sleep_time($i0: i8) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i9: i32;
  var $i14: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "cyapa_pwr_cmd_to_sleep_time:arg:pwr_mode"} boogie_si_record_i8($i0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i32($i1, 2);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    call {:si_unique_call 179} {:cexpr "encoded_time"} boogie_si_record_i8($i3);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 9);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i16($i3);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 20);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 65436);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i9);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i16($i3);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 10);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const i2c_smbus_read_byte_data: ref;

axiom i2c_smbus_read_byte_data == $sub.ref(0, 275278);

procedure i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 180} {:cexpr "i2c_smbus_read_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cyapa_gen5_check_fw: ref;

axiom cyapa_gen5_check_fw == $sub.ref(0, 276310);

procedure cyapa_gen5_check_fw($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen5_check_fw($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i67: i32;
  var $i68: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i16;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $i65: i32;
  var $i66: i16;
  var $i78: i16;
  var $i64: i16;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i9, 13);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i64($i10, 133);
    call {:si_unique_call 183} {:cexpr "flash_records_count"} boogie_si_record_i64($i11);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i11, $sub.i64(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 134)), $mul.ref(0, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref($i14, 134)), $mul.ref(2, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i23 := get_unaligned_be16($p22);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i16($i23);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 511);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref($i14, 134)), $mul.ref(6, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref($i14, 134)), $mul.ref(6, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i30 := crc_itu_t($sub.i16(0, 1), $p29, 60);
    call {:si_unique_call 189} {:cexpr "app_integrity_crc"} boogie_si_record_i16($i30);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i33 := get_unaligned_le16($p32);
    call {:si_unique_call 191} {:cexpr "tmp___0"} boogie_si_record_i16($i33);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i30);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i34, $i35);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i39 := get_unaligned_le32($p38);
    call {:si_unique_call 194} {:cexpr "fw_app_start"} boogie_si_record_i32($i39);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i42 := get_unaligned_le16($p41);
    call {:si_unique_call 196} {:cexpr "fw_app_len"} boogie_si_record_i16($i42);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i45 := get_unaligned_le32($p44);
    call {:si_unique_call 198} {:cexpr "fw_upgrade_start"} boogie_si_record_i32($i45);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i48 := get_unaligned_le16($p47);
    call {:si_unique_call 200} {:cexpr "fw_upgrade_len"} boogie_si_record_i16($i48);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i39, 127);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i50 == 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i42);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 127);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i45, 127);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i48);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 127);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i59 := $udiv.i32($i39, 128);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 46);
    call {:si_unique_call 202} {:cexpr "record_index"} boogie_si_record_i32($i60);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i42);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i62 := $udiv.i32($i61, 128);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i64 := $sub.i16(0, 1);
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(10, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i81 := get_unaligned_le16($p80);
    call {:si_unique_call 207} {:cexpr "tmp___1"} boogie_si_record_i16($i81);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i64);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i82, $i83);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} dev_err.ref.ref.ref($p4, .str.93, .str.90);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i65, $i66 := 0, $sub.i16(0, 1);
    goto $bb24;

  $bb24:
    call $i67, $i68, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $i65, $i66, $i78 := cyapa_gen5_check_fw_loop_$bb24($p7, $i60, $i62, $i67, $i68, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $i65, $i66, $i78);
    goto $bb24_last;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i60, $i65);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 14)), $mul.ref(14, 1)), $mul.ref($i68, 134)), $mul.ref(6, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i66);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i75 := crc_itu_t($i74, $p72, 128);
    call {:si_unique_call 204} {:cexpr "app_crc"} boogie_si_record_i16($i75);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i65, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i62, $i76);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i78 := $i75;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i64 := $i78;
    goto $bb23;

  $bb26:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i65, $i66 := $i76, $i75;
    goto $bb26_dummy;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} dev_err.ref.ref.ref($p4, .str.92, .str.90);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb12;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} dev_err.ref.ref.ref($p4, .str.91, .str.90);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} dev_err.ref.ref.ref($p4, .str.89, .str.90);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} dev_err.ref.ref.ref($p4, .str.89, .str.90);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;
}



const cyapa_gen5_bl_enter: ref;

axiom cyapa_gen5_bl_enter == $sub.ref(0, 277342);

procedure cyapa_gen5_bl_enter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.0, $CurrAddr, $M.32, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26, assertsPassed;



implementation cyapa_gen5_bl_enter($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i13: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p1 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(0, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p4, 4);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(1, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p5, 0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p6, 5);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p7, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p8, 47);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p9, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p10, 1);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i11 := cyapa_poll_state($p0, 500);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 213} {:cexpr "error"} boogie_si_record_i32($i11);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 5);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 5);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 6);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_88 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p3);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 215} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p25, 0, $i27, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i30 := cyapa_i2c_pip_cmd_irq_sync($p0, $p28, 7, $p29, $p3, 5000, cyapa_gen5_sort_application_launch_data, 1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 217} {:cexpr "error"} boogie_si_record_i32($i30);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 5);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i30, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 11);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i13 := $i41;
    goto $bb3;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i41 := $i30;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb15;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 11);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_bl_activate: ref;

axiom cyapa_gen5_bl_activate == $sub.ref(0, 278374);

procedure cyapa_gen5_bl_activate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen5_bl_activate($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen5_bl_initiate: ref;

axiom cyapa_gen5_bl_initiate == $sub.ref(0, 279406);

procedure cyapa_gen5_bl_initiate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_bl_initiate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p2 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p3 := $alloc($mul.ref(11, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_89 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 222} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p6, 0, 256, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32(136);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 13);
    call {:si_unique_call 223} {:cexpr "cmd_len"} boogie_si_record_i32($i9);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} put_unaligned_le16(4, $p11);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i9);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 65534);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} put_unaligned_le16($i15, $p17);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 64);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(6, 1));
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 72);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32(136);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} put_unaligned_le16($i23, $p25);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(10, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 70)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 227} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p29, cyapa_gen5_bl_cmd_key, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i34, 13);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i36 := $udiv.i64($i35, 133);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 228} {:cexpr "records_num"} boogie_si_record_i32($i37);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p32, $mul.ref(0, 14)), $mul.ref(14, 1)), $mul.ref($i39, 134)), $mul.ref(6, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p27, $mul.ref(0, 70)), $mul.ref(8, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 229} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p45, $p43, 60, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p27, $mul.ref(0, 70)), $mul.ref(8, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i48 := crc_itu_t($sub.i16(0, 1), $p47, 60);
    call {:si_unique_call 231} {:cexpr "meta_data_crc"} boogie_si_record_i16($i48);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p27, $mul.ref(0, 70)), $mul.ref(68, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} put_unaligned_le16($i50, $p52);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 10)), $mul.ref(10, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i64(136);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p19);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i64(136);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i58, 4);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i60 := crc_itu_t($sub.i16(0, 1), $p57, $i59);
    call {:si_unique_call 234} {:cexpr "cmd_crc"} boogie_si_record_i16($i60);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p54, $mul.ref($i55, 4)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} put_unaligned_le16($i62, $p64);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p54, $mul.ref($i55, 4)), $mul.ref(2, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 23);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 11);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i68 := cyapa_i2c_pip_cmd_irq_sync($p0, $p66, $i9, $p67, $p4, 12000, cyapa_gen5_sort_tsg_pip_bl_resp_data, 1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 237} {:cexpr "error"} boogie_si_record_i32($i68);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i69 == 1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p4);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 11);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i71 == 1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 48);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i75 == 1);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 11)), $mul.ref(5, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i68, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i80 == 1);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, 11);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb13;

  $bb10:
    assume $i80 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i81 := $i68;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb2;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_do_fw_update: ref;

axiom cyapa_gen5_do_fw_update == $sub.ref(0, 280438);

procedure cyapa_gen5_do_fw_update($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_do_fw_update($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i25: i32;
  var $i26: i1;
  var $i16: i32;
  var $i24: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_90 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i10, 13);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i64($i11, 133);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 239} {:cexpr "flash_records_count"} boogie_si_record_i32($i13);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i25, $i26, $i16 := cyapa_gen5_do_fw_update_loop_$bb4($p0, $p7, $i14, $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i25, $i26, $i16);
    goto $bb4_last;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 134));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i21 := cyapa_gen5_write_fw_block($p0, $p20);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 241} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i16, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i14, $i25);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i25;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} dev_err.ref.ref.ref.i32($p4, .str.95, .str.96, $i23);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb8;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1262;
}



const cyapa_gen5_bl_deactivate: ref;

axiom cyapa_gen5_bl_deactivate == $sub.ref(0, 281470);

procedure cyapa_gen5_bl_deactivate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_gen5_bl_deactivate($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen5_show_baseline: ref;

axiom cyapa_gen5_show_baseline == $sub.ref(0, 282502);

procedure cyapa_gen5_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.27, $M.0, $M.15, $M.13, $M.14, $M.29, $M.28, $M.17, $M.16, $M.18, $CurrAddr, $M.30, $M.31, $M.22, assertsPassed;



implementation cyapa_gen5_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i44: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i64;
  var $i37: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p17 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p19 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p20 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p21 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p22 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p23 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p24 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p25 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p26 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p27 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p28 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p29 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p30 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p31 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p32 := dev_get_drvdata($p0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 6);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i38 := cyapa_gen5_suspend_scanning($p33);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 275} {:cexpr "error"} boogie_si_record_i32($i38);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p10, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.11, $p10);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p9, $i41);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i42 := cyapa_gen5_read_mutual_idac_data($p33, $p3, $p4, $p5, $p6, $p7, $p8);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 277} {:cexpr "error"} boogie_si_record_i32($i42);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i45 := cyapa_gen5_read_self_idac_data($p33, $p9, $p10, $p11, $p12, $p13);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 281} {:cexpr "error"} boogie_si_record_i32($i45);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i47 := cyapa_gen5_execute_panel_scan($p33);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 283} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    call {:si_unique_call 284} {:cexpr "error"} boogie_si_record_i32($i48);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i54 := $mul.i32($i51, $i53);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i55 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 0, $i54, $p14, $p15, $p16, $0.ref);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 286} {:cexpr "error"} boogie_si_record_i32($i55);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i58, $i60);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i62 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 3, $i61, $p17, $p18, $p19, $0.ref);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 288} {:cexpr "error"} boogie_si_record_i32($i62);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i65, $i67);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i69 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 2, $i68, $p20, $p21, $p22, $0.ref);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 290} {:cexpr "error"} boogie_si_record_i32($i69);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i72, $i74);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i76 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 5, $i75, $p23, $p24, $p25, $0.ref);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 292} {:cexpr "error"} boogie_si_record_i32($i76);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i79, $i81);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i83 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 1, $i82, $p26, $p27, $p28, $0.ref);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 294} {:cexpr "error"} boogie_si_record_i32($i83);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p33, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i86, $i88);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i90 := cyapa_gen5_read_panel_scan_raw_data($p33, 43, 4, $i89, $p29, $p30, $p31, $0.ref);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 296} {:cexpr "error"} boogie_si_record_i32($i90);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i44 := $i90;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i92 := cyapa_gen5_resume_scanning($p33);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 279} {:cexpr "resume_error"} boogie_si_record_i32($i92);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i93 == 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i44, 0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.13, $p4);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.14, $p3);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.15, $p5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.13, $p7);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.14, $p6);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.15, $p8);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.12, $p9);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.11, $p10);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.13, $p12);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.14, $p11);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.15, $p13);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i109 := scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p2, 4096, .str.97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108);
    call {:si_unique_call 298} {:cexpr "size"} boogie_si_record_i32($i109);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p2, $mul.ref($i110, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i109);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i113 := $sub.i64(4096, $i112);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.16, $p15);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.17, $p14);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.18, $p16);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.16, $p18);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.17, $p17);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.18, $p19);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.16, $p21);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.17, $p20);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.18, $p22);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.16, $p24);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.17, $p23);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.18, $p25);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.16, $p27);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.17, $p26);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.18, $p28);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.16, $p30);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.17, $p29);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.18, $p31);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i132 := scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p111, $i113, .str.98, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131);
    call {:si_unique_call 300} {:cexpr "tmp___1"} boogie_si_record_i32($i132);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, $i109);
    call {:si_unique_call 301} {:cexpr "size"} boogie_si_record_i32($i133);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i133);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i37 := $i134;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i92, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i95 == 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i96 := $i44;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i96);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i37 := $i97;
    goto $bb3;

  $bb41:
    assume $i95 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i96 := $i92;
    goto $bb43;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb37;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i91 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i84 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i44 := $i83;
    goto $bb10;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i44 := $i76;
    goto $bb10;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i70 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i44 := $i69;
    goto $bb10;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i44 := $i62;
    goto $bb10;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i44 := $i55;
    goto $bb10;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i44 := $i48;
    goto $bb10;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb10;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i44 := $i42;
    goto $bb10;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i38);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64(0, 16);
    goto $bb3;
}



const cyapa_gen5_do_calibrate: ref;

axiom cyapa_gen5_do_calibrate == $sub.ref(0, 283534);

procedure cyapa_gen5_do_calibrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.28, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_do_calibrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i12: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "cyapa_gen5_do_calibrate:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p4 := dev_get_drvdata($p0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i6 := cyapa_gen5_suspend_scanning($p5);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 305} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i10 := cyapa_gen5_calibrate_pwcs($p5, 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 307} {:cexpr "calibrate_error"} boogie_si_record_i32($i10);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i13 := cyapa_gen5_calibrate_pwcs($p5, 2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 311} {:cexpr "calibrate_error"} boogie_si_record_i32($i13);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i15 := cyapa_gen5_resume_scanning($p5);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 309} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i16 == 1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i15, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i19 := $i12;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    goto $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb13;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_initialize: ref;

axiom cyapa_gen5_initialize == $sub.ref(0, 284566);

procedure cyapa_gen5_initialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen5_initialize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(160, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} init_completion($p4);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} atomic_set($p5, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __mutex_init($p6, .str.99, $p1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $sub.i8(0, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $sub.i16(0, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cyapa_gen5_state_parse: ref;

axiom cyapa_gen5_state_parse == $sub.ref(0, 285598);

procedure cyapa_gen5_state_parse($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_state_parse($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i6: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "cyapa_gen5_state_parse:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i2, 2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i8 := get_unaligned_le16($p1);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 319} {:cexpr "length"} boogie_si_record_i32($i9);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 2);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, 32);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i9, 238);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i23 == 1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i9, 250);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i9, 29);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i41 == 1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 3);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i45 == 1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 5);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i49 == 1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 6);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i53 == 1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 4);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i57 == 1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 48);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb50, $bb52;

  $bb52:
    assume !($i62 == 1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 31);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 5);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 11);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb56:
    assume $i71 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_95 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 6);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i75 == 1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 5);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb59;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_94 := gen5_cmd_resp_header_parse($p0, $p1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb51;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_93 := gen5_report_data_header_parse($p0, $p1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb39;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb39;

  $bb32:
    assume $i31 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 254);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb34;

  $bb35:
    assume $i35 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 5);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 5);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 246);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb28;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 5);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 6);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb24;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 255);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i17 == 1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 247);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_92 := gen5_hid_description_header_parse($p0, $p1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_91 := gen5_idle_state_parse($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const cyapa_gen5_do_operational_check: ref;

axiom cyapa_gen5_do_operational_check == $sub.ref(0, 286630);

procedure cyapa_gen5_do_operational_check($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.25, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_do_operational_check($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i17: i32;
  var $i8: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 5);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i17 := $i31;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i19 := cyapa_gen5_set_power_mode($p0, $sub.i8(0, 4), 0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 326} {:cexpr "error"} boogie_si_record_i32($i19);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i21 := cyapa_gen5_get_query_data($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 332} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i23 := strlen(product_id);
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i26 := memcmp($p25, product_id, $i23);
    call {:si_unique_call 336} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i21;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb27;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} dev_err.ref.ref.ref.ref($p3, .str.102, .str.101, $p29);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb26;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb16;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i20 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} dev_warn.ref.ref.ref($p3, .str.100, .str.101);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb11;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i14 := cyapa_gen5_bl_exit($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 328} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 6);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_96 := cyapa_gen5_bl_query_data($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb16;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const cyapa_gen5_irq_handler: ref;

axiom cyapa_gen5_irq_handler == $sub.ref(0, 287662);

procedure cyapa_gen5_irq_handler($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation cyapa_gen5_irq_handler($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p1 := $alloc($mul.ref(127, $zext.i32.i64(1)));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 5);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 6);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i19 := cyapa_i2c_pip_read($p0, $p18, 2);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 342} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 2);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i24 := get_unaligned_le16($p23);
    call {:si_unique_call 345} {:cexpr "tmp___0"} boogie_si_record_i16($i24);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 346} {:cexpr "report_len"} boogie_si_record_i32($i25);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i26 := $ule.i32($i25, 1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i25, 2);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i25);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i38 := cyapa_i2c_pip_read($p0, $p36, $i37);
    call {:si_unique_call 349} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    call {:si_unique_call 350} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i25);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    call {:si_unique_call 352} {:cexpr "report_id"} boogie_si_record_i8($i43);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i43);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i43);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i43);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 3);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i61 == 1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i43);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 5);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i63 == 1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i43);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 6);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i43);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i69 == 1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} cyapa_gen5_report_buttons($p0, $p1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb59:
    assume $i69 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} cyapa_gen5_report_touches($p0, $p1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i66 := $ule.i32($i25, 5);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i66 == 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i25, 14);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb52;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} dev_err.ref.ref.i32($p4, .str.109, $i25);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb54;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb46;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i25, 6);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i58 == 1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i25, 127);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb38;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} dev_err.ref.ref.i32($p4, .str.108, $i25);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb40;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i43);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 3);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb27;

  $bb28:
    assume $i50 == 1;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i43);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 5);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb27;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i43);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 6);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb27;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i43);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} dev_err.ref.ref.i32($p4, .str.107, $i55);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i25, 4);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb22;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} dev_err.ref.ref.i32.i32($p4, .str.106, $i25, $i39);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} dev_err.ref.ref.i32.i32.i32($p4, .str.105, $i25, $i30, $i34);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} dev_err.ref.ref.i32($p4, .str.104, $i20);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} dev_err.ref.ref.i32.i32($p4, .str.103, $i14, $i16);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const cyapa_gen5_irq_cmd_handler: ref;

axiom cyapa_gen5_irq_cmd_handler == $sub.ref(0, 288694);

procedure cyapa_gen5_irq_cmd_handler($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.0, $CurrAddr;



implementation cyapa_gen5_irq_cmd_handler($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i80: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $i10: i1;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var vslice_dummy_var_97: i64;
  var vslice_dummy_var_98: i64;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i5 := atomic_read($p4);
    call {:si_unique_call 360} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(261, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb3:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_97 := cyapa_i2c_pip_read($p0, $p12, 2);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i16 := get_unaligned_le16($p15);
    call {:si_unique_call 363} {:cexpr "tmp"} boogie_si_record_i16($i16);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, $i17);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.19, $p1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32(2, $i18);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.19, $p1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, $i20);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.19, $p1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.19, $p1);
    call {:si_unique_call 365} $i38 := devirtbounce($p34, $p0, $p36, $i37);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 366} {:cexpr "tmp___0"} boogie_si_record_i8($i39);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} atomic_dec($p94);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(160, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} complete_($p95);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb32:
    assume $i69 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb34;

  $bb35:
    assume $i73 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.19, $p1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i74, $i77);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i78 == 1);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i80 := $i83;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i80);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 370} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p87, $p89, $i93, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i78 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.19, $p1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i80 := $i79;
    goto $bb39;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_99 := cyapa_empty_pip_output_data($p0, $p51, $p1, $p53);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.19, $p1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb26;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.19, $p1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i61);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} atomic_dec($p64);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(160, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} complete_($p65);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p1, $i49);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb18;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.19, $p1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_98 := cyapa_i2c_pip_read($p0, $p25, $i27);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i20 := 2;
    goto $bb9;
}



const cyapa_empty_pip_output_data: ref;

axiom cyapa_empty_pip_output_data == $sub.ref(0, 289726);

procedure cyapa_empty_pip_output_data($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cyapa_empty_pip_output_data($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i10: i32;
  var $i12: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i13: i32;
  var $i14: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i66: i64;
  var $i67: i1;
  var $i68: i1;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i74: i8;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i65: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i82: i1;
  var $i83: i32;
  var $i18: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 8;
    goto $bb7;

  $bb7:
    call $i15, $i16, $i17, $i13, $i14, $p19, $p20, $i21, $i22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i65, $i31, $i32, $i33, $i82, $i83 := cyapa_empty_pip_output_data_loop_$bb7($p0, $p1, $p3, $p5, $i12, $i15, $i16, $i17, $i13, $i14, $p19, $p20, $i21, $i22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i66, $i67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i65, $i31, $i32, $i33, $i82, $i83);
    goto $bb7_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i21 := cyapa_i2c_pip_read($p0, $p20, 2);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    call {:si_unique_call 375} {:cexpr "error"} boogie_si_record_i32($i22);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i27 := get_unaligned_le16($p26);
    call {:si_unique_call 377} {:cexpr "tmp___0"} boogie_si_record_i16($i27);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    call {:si_unique_call 378} {:cexpr "length"} boogie_si_record_i32($i28);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i28, 256);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i28, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i28);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i54 := cyapa_i2c_pip_read($p0, $p52, $i53);
    call {:si_unique_call 384} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 385} {:cexpr "error"} boogie_si_record_i32($i55);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i14, 1);
    call {:si_unique_call 386} {:cexpr "report_count"} boogie_si_record_i32($i58);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i61 := get_unaligned_le16($p60);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i16($i61);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    call {:si_unique_call 389} {:cexpr "length"} boogie_si_record_i32($i62);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i63 := $sle.i32($i62, 2);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i63 == 1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i31, $i32, $i33 := $i58, $i65, $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i31, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i15, $i16, $i83 := $i31, $i32, $i33;
    assume true;
    goto $bb8, $bb60;

  $bb60:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i18 := $i83;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 5);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i13, $i14 := $i16, $i15;
    goto $bb10_dummy;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb46:
    assume $i67 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i12, 0);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb48;

  $bb49:
    assume $i68 == 1;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p3);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb48;

  $bb51:
    assume $i70 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    call {:si_unique_call 391} $i73 := devirtbounce($p3, $p0, $p72, $i62);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i8($i73);
    call {:si_unique_call 392} {:cexpr "tmp___4"} boogie_si_record_i8($i74);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i74);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i76 := $i62;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i12, $i76);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i77 == 1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i78 := $i76;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i78);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 393} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p1, $p80, $i81, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i78);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb55:
    assume $i77 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i78 := $i12;
    goto $bb57;

  $bb43:
    assume $i63 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i64 := $add.i32(0, 1);
    call {:si_unique_call 390} {:cexpr "empty_count"} boogie_si_record_i32($i64);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb45;

  $bb40:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i18 := $i57;
    goto $bb11;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i31, $i32, $i33 := $i14, $i13, $i22;
    goto $bb18;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i12, 0);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p3);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb25;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    call {:si_unique_call 380} $i43 := devirtbounce($p3, $p0, $p42, 2);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 381} {:cexpr "tmp___1"} boogie_si_record_i8($i44);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i12, 2);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i46 == 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i47 := 2;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i47);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 382} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p1, $p49, $i50, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i47);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb32:
    assume $i46 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i47 := $i12;
    goto $bb34;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb11;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i13, 1);
    call {:si_unique_call 379} {:cexpr "empty_count"} boogie_si_record_i32($i30);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i31, $i32, $i33 := $i14, $i30, $i22;
    goto $bb18;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i18 := $i24;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p2);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32(256, $i8);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i10 := 256;
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const cyapa_gen5_set_power_mode: ref;

axiom cyapa_gen5_set_power_mode == $sub.ref(0, 290758);

procedure cyapa_gen5_set_power_mode($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_set_power_mode($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i8;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i89: i32;
  var $i90: i16;
  var $i91: i8;
  var $p92: ref;
  var $i9: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "cyapa_gen5_set_power_mode:arg:power_mode"} boogie_si_record_i8($i1);
    call {:si_unique_call 395} {:cexpr "cyapa_gen5_set_power_mode:arg:sleep_time"} boogie_si_record_i16($i2);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 6);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_100 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 255);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 65535);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, $i31);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 252);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i56 == 1);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 4);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i61 == 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 65535);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i68 == 1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i71, $i72);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i2);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i80 := $ule.i32($i79, 50);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := 4;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i84 := cyapa_gen5_change_power_state($p0, $i83);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 414} {:cexpr "error"} boogie_si_record_i32($i84);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_101 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_102 := cyapa_gen5_disable_pip_report($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i2);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i91 := cyapa_sleep_time_to_pwr_cmd($i90);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i91);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i85 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i81);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} dev_err.ref.ref.i32.i32($p5, .str.114, $i86, $i84);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i9 := $i84;
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i80 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i81 := 3;
    goto $bb65;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i76 := cyapa_gen5_set_interval_time($p0, 76, $i75);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 412} {:cexpr "tmp___0"} boogie_si_record_i32($i76);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i77 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p78, $i2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb55;

  $bb48:
    assume $i61 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i62 := cyapa_gen5_change_power_state($p0, 5);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 409} {:cexpr "error"} boogie_si_record_i32($i62);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 4);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i63 == 1;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} dev_err.ref.ref.i32($p5, .str.113, $i62);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i9 := $i62;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i56 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i57 := cyapa_gen5_change_power_state($p0, 1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 406} {:cexpr "error"} boogie_si_record_i32($i57);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $sub.i8(0, 4));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i58 == 1;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} dev_err.ref.ref.i32($p5, .str.112, $i57);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i9 := $i57;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i52 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i53 := cyapa_gen5_deep_sleep($p0, 0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 403} {:cexpr "error"} boogie_si_record_i32($i53);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} dev_err.ref.ref.i32($p5, .str.111, $i53);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i9 := $i53;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i46 := cyapa_gen5_deep_sleep($p0, 1);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 400} {:cexpr "error"} boogie_si_record_i32($i46);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb32:
    assume $i47 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} dev_err.ref.ref.i32($p5, .str.110, $i46);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i34 == 1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 252);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 4);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, $i42);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb20;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb20;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i25 := cyapa_gen5_get_interval_time($p0, 76, $p24);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(68, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $sub.i16(0, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(66, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const cyapa_gen5_get_interval_time: ref;

axiom cyapa_gen5_get_interval_time == $sub.ref(0, 291790);

procedure cyapa_gen5_get_interval_time($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_get_interval_time($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i1;
  var $i59: i16;
  var $i60: i16;
  var $i74: i16;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i16;
  var $i17: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p3 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p4 := $alloc($mul.ref(11, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 422} {:cexpr "cyapa_gen5_get_interval_time:arg:parameter_id"} boogie_si_record_i8($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 423} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p6, 0, 256, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 77);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 79);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 79);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} put_unaligned_le16(1, $p19);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16(8);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 65534);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} put_unaligned_le16($i23, $p25);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 47);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 5);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 11);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p4);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i31 := cyapa_i2c_pip_cmd_irq_sync($p0, $p29, 8, $p30, $p5, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 427} {:cexpr "error"} boogie_si_record_i32($i31);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 11)), $mul.ref(5, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, $i36);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 11)), $mul.ref(6, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 31);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 11)), $mul.ref(3, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 11)), $mul.ref(4, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 127);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 5);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i16($i16);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i59, $i60 := 0, 0;
    goto $bb33;

  $bb33:
    call $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i59, $i60, $i74 := cyapa_gen5_get_interval_time_loop_$bb33($i58, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i59, $i60, $i74);
    goto $bb33_last;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i59);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i61, 8);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32(255, $i62);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i65 := $sext.i16.i32($i64);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i60);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i65, $i66);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    call {:si_unique_call 428} {:cexpr "mask"} boogie_si_record_i16($i68);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i59);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    call {:si_unique_call 429} {:cexpr "i"} boogie_si_record_i16($i71);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i58, $i72);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i74 := $i68;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(7, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i77 := get_unaligned_le16($p76);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i16($i77);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i74);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i78, $i79);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i81);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb15;

  $bb35:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i59, $i60 := $i71, $i68;
    goto $bb35_dummy;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i31, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i17 := $i56;
    goto $bb15;

  $bb29:
    assume $i55 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i56 := $i31;
    goto $bb31;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb17;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 77);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb13;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 76);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb13;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;
}



const cyapa_gen5_deep_sleep: ref;

axiom cyapa_gen5_deep_sleep == $sub.ref(0, 292822);

procedure cyapa_gen5_deep_sleep($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_deep_sleep($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p3 := $alloc($mul.ref(5, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 435} {:cexpr "cyapa_gen5_deep_sleep:arg:state"} boogie_si_record_i8($i1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p5, 5);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p6, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p7, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p8, 8);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 3);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p12, $i11);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 5);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i15 := cyapa_i2c_pip_cmd_irq_sync($p0, $p13, 4, $p14, $p4, 500, cyapa_gen5_sort_deep_sleep_data, 0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 437} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 3);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i20, $i21);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 293854);

procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_change_power_state: ref;

axiom cyapa_gen5_change_power_state == $sub.ref(0, 294886);

procedure cyapa_gen5_change_power_state($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_change_power_state($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 441} {:cexpr "cyapa_gen5_change_power_state:arg:power_state"} boogie_si_record_i8($i1);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p5, 4);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p6, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p7, 6);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p8, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p9, 47);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p10, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p11, 8);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p12, 1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.21 := $store.i8($M.21, $p13, $i1);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 6);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i16 := cyapa_i2c_pip_cmd_irq_sync($p0, $p14, 8, $p15, $p4, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 443} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 31);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 127);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 8);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i16, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb15;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i36 := $i16;
    goto $bb14;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_set_interval_time: ref;

axiom cyapa_gen5_set_interval_time == $sub.ref(0, 295918);

procedure cyapa_gen5_set_interval_time($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_set_interval_time($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i17: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p3 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p4 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 447} {:cexpr "cyapa_gen5_set_interval_time:arg:parameter_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 448} {:cexpr "cyapa_gen5_set_interval_time:arg:interval_time"} boogie_si_record_i16($i2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 449} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p6, 0, 256, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 77);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 79);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 79);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} put_unaligned_le16(4, $p19);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i16($i16);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16(13);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 65530);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} put_unaligned_le16($i26, $p28);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 47);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 6);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i16);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} put_unaligned_le32($i33, $p35);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 7);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p3);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i38 := cyapa_i2c_pip_cmd_irq_sync($p0, $p36, 13, $p37, $p5, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 454} {:cexpr "error"} boogie_si_record_i32($i38);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i39 == 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i42, $i43);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i16);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i47, $i48);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 31);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 127);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 6);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb15;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i38, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i17 := $i64;
    goto $bb15;

  $bb29:
    assume $i63 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i64 := $i38;
    goto $bb31;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb17;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 77);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb13;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 76);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb13;
}



const cyapa_gen5_disable_pip_report: ref;

axiom cyapa_gen5_disable_pip_report == $sub.ref(0, 296950);

procedure cyapa_gen5_disable_pip_report($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_disable_pip_report($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $p1 := $alloc($mul.ref(10, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p2 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 458} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p4, 0, 10, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} put_unaligned_le16(1, $p7);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} put_unaligned_le16(8, $p9);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 47);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 6);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(0, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 8);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(1, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(2, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 7);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i20 := cyapa_i2c_pip_cmd_irq_sync($p0, $p18, 10, $p19, $p3, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 462} {:cexpr "error"} boogie_si_record_i32($i20);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i21 == 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 8);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 31);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 127);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 6);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i20, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb17;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i44 := $i20;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb2;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const cyapa_sleep_time_to_pwr_cmd: ref;

axiom cyapa_sleep_time_to_pwr_cmd == $sub.ref(0, 297982);

procedure cyapa_sleep_time_to_pwr_cmd($i0: i16) returns ($r: i8);
  free requires assertsPassed;



implementation cyapa_sleep_time_to_pwr_cmd($i0: i16) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i32;
  var $i5: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i12: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i21: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "cyapa_sleep_time_to_pwr_cmd:arg:sleep_time"} boogie_si_record_i16($i0);
    call {:si_unique_call 464} {:cexpr "cyapa_sleep_time_to_pwr_cmd:arg:__max1"} boogie_si_record_i16($i0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32(20);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, $i2);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32(20);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i5);
    call {:si_unique_call 465} {:cexpr "__min1"} boogie_si_record_i16($i7);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32(1000);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, $i9);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32(1000);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i12);
    call {:si_unique_call 466} {:cexpr "sleep_time"} boogie_si_record_i16($i14);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, 99);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i14);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i23 := $udiv.i32($i22, 20);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 5);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i21);
    call {:si_unique_call 467} {:cexpr "encoded_time"} boogie_si_record_i16($i27);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32($i28, 2);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i14);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, 10);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i7);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 299014);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const put_unaligned_le16: ref;

axiom put_unaligned_le16 == $sub.ref(0, 300046);

procedure put_unaligned_le16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le16($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "put_unaligned_le16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_sort_tsg_pip_app_resp_data: ref;

axiom cyapa_gen5_sort_tsg_pip_app_resp_data == $sub.ref(0, 301078);

procedure cyapa_gen5_sort_tsg_pip_app_resp_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_tsg_pip_app_resp_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i16;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "cyapa_gen5_sort_tsg_pip_app_resp_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i2, 4);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 31);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i17 := get_unaligned_le16($p1);
    call {:si_unique_call 471} {:cexpr "tmp"} boogie_si_record_i16($i17);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    call {:si_unique_call 472} {:cexpr "resp_len"} boogie_si_record_i32($i18);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 127);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 127);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, $i38);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i18, 6);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i27, $i30);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const cyapa_i2c_pip_cmd_irq_sync: ref;

axiom cyapa_i2c_pip_cmd_irq_sync == $sub.ref(0, 302110);

procedure cyapa_i2c_pip_cmd_irq_sync($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $i7: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed, $CurrAddr;



implementation cyapa_i2c_pip_cmd_irq_sync($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i64, $p6: ref, $i7: i1) returns ($r: i32)
{
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $i61: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "cyapa_i2c_pip_cmd_irq_sync:arg:cmd_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 474} {:cexpr "cyapa_i2c_pip_cmd_irq_sync:arg:timeout"} boogie_si_record_i64($i5);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 475} {:cexpr "cyapa_i2c_pip_cmd_irq_sync:arg:irq_mode"} boogie_si_record_i1($i7);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i16 := ldv_mutex_lock_interruptible_112($p15);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 477} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p6);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p3);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p4);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i2, 6);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i2, 12);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i8);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(261, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i2);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i64 := cyapa_do_i2c_pip_cmd_polling($p0, $p1, $i63, $p3, $p4, $i5, $p6);
    call {:si_unique_call 481} {:cexpr "error"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(264, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $0.ref);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(272, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $0.ref);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $sub.i8(0, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(0, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} ldv_mutex_unlock_113($p69);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i14 := $i61;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(261, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i2);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i43 := cyapa_do_i2c_pip_cmd_irq_sync($p0, $p1, $i42, $i5);
    call {:si_unique_call 479} {:cexpr "error"} boogie_si_record_i32($i43);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, $sub.i32(0, 110));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i60 := $i43;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb46;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p3);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb27;

  $bb28:
    assume $i46 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p4);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb27;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p4);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb27;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p6);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb27;

  $bb34:
    assume $i52 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i53 := cyapa_empty_pip_output_data($p0, $p3, $p4, $p6);
    call {:si_unique_call 483} {:cexpr "error"} boogie_si_record_i32($i53);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i54 == 1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p4);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i53;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb45;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i53, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i57 == 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 110);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb44;

  $bb41:
    assume $i57 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i58 := $i53;
    goto $bb43;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb37;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 64);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb19;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref(7, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 47);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref(6, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 127);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(260, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const ldv_mutex_lock_interruptible_112: ref;

axiom ldv_mutex_lock_interruptible_112 == $sub.ref(0, 303142);

procedure ldv_mutex_lock_interruptible_112($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_interruptible_112($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i2 := ldv_mutex_lock_interruptible_cmd_lock_of_cyapa_gen5_cmd_states($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 488} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const cyapa_do_i2c_pip_cmd_irq_sync: ref;

axiom cyapa_do_i2c_pip_cmd_irq_sync == $sub.ref(0, 304174);

procedure cyapa_do_i2c_pip_cmd_irq_sync($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_do_i2c_pip_cmd_irq_sync($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "cyapa_do_i2c_pip_cmd_irq_sync:arg:cmd_len"} boogie_si_record_i64($i2);
    call {:si_unique_call 490} {:cexpr "cyapa_do_i2c_pip_cmd_irq_sync:arg:timeout"} boogie_si_record_i64($i3);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(160, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} init_completion($p6);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} atomic_inc($p7);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i8 := cyapa_i2c_pip_write($p0, $p1, $i2);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 495} {:cexpr "error"} boogie_si_record_i32($i9);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i3);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i16 := msecs_to_jiffies($i15);
    call {:si_unique_call 498} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(160, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i18 := wait_for_completion_timeout($p17, $i16);
    call {:si_unique_call 500} {:cexpr "timeout"} boogie_si_record_i64($i18);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} atomic_dec($p20);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 110);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} atomic_dec($p11);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    goto $bb5;
}



const cyapa_do_i2c_pip_cmd_polling: ref;

axiom cyapa_do_i2c_pip_cmd_polling == $sub.ref(0, 305206);

procedure cyapa_do_i2c_pip_cmd_polling($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $i5: i64, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cyapa_do_i2c_pip_cmd_polling($p0: ref, $p1: ref, $i2: i64, $p3: ref, $p4: ref, $i5: i64, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i37: i32;
  var $i38: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "cyapa_do_i2c_pip_cmd_polling:arg:cmd_len"} boogie_si_record_i64($i2);
    call {:si_unique_call 503} {:cexpr "cyapa_do_i2c_pip_cmd_polling:arg:timeout"} boogie_si_record_i64($i5);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} atomic_inc($p9);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i10 := cyapa_i2c_pip_write($p0, $p1, $i2);
    call {:si_unique_call 506} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 507} {:cexpr "error"} boogie_si_record_i32($i11);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p4);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p3);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i50 := $i11;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} atomic_dec($p51);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i16 := $i50;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i20, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p6);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i64($i5, 5);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    call {:si_unique_call 509} {:cexpr "tries"} boogie_si_record_i32($i29);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb20;

  $bb20:
    call $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, $i41, $i42 := cyapa_do_i2c_pip_cmd_polling_loop_$bb20($p0, $p3, $p4, $p6, $i20, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, $i41, $i42);
    goto $bb20_last;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} usleep_range(3000, 5000);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i20);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i31 := cyapa_empty_pip_output_data($p0, $p3, $p4, $p6);
    call {:si_unique_call 512} {:cexpr "error"} boogie_si_record_i32($i31);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i32 == 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p4);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i30, $i31;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i36, $i35;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i37, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i43 == 1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i38, 0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i37;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb42;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i37, 0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i47 == 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 110);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb41;

  $bb38:
    assume $i47 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i48 := $i37;
    goto $bb40;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb32;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i30, 1);
    call {:si_unique_call 513} {:cexpr "tries"} boogie_si_record_i32($i39);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i31, $i39;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i41, $i42;
    goto $bb27;

  $bb28:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i39;
    goto $bb28_dummy;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb22;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p4);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb10;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(256, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} atomic_dec($p13);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb5;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 306238);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} ldv_mutex_unlock_cmd_lock_of_cyapa_gen5_cmd_states($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} mutex_unlock($p0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_cmd_lock_of_cyapa_gen5_cmd_states: ref;

axiom ldv_mutex_unlock_cmd_lock_of_cyapa_gen5_cmd_states == $sub.ref(0, 307270);

procedure ldv_mutex_unlock_cmd_lock_of_cyapa_gen5_cmd_states($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_unlock_cmd_lock_of_cyapa_gen5_cmd_states($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 518} {:cexpr "ldv_mutex_cmd_lock_of_cyapa_gen5_cmd_states"} boogie_si_record_i32(1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} ldv_error();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 308302);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 309334);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 519} __VERIFIER_error();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 310366);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 520} devirtbounce.1(0, $p1, $p1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_i2c_pip_write: ref;

axiom cyapa_i2c_pip_write == $sub.ref(0, 311398);

procedure cyapa_i2c_pip_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_i2c_pip_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "cyapa_i2c_pip_write:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i2, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i2);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i10 := i2c_master_send($p8, $p1, $i9);
    call {:si_unique_call 523} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $i2);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 5);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb6;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i10);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 312430);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 524} devirtbounce.1(0, $p1, $p1);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    return;
}



const i2c_master_send: ref;

axiom i2c_master_send == $sub.ref(0, 313462);

procedure i2c_master_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_master_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 525} {:cexpr "i2c_master_send:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 314494);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __init_waitqueue_head($p3, .str.94, $p1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 315526);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 532} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 316558);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 533} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 534} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 535} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 317590);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 318622);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 319654);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 540} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_cmd_lock_of_cyapa_gen5_cmd_states: ref;

axiom ldv_mutex_lock_interruptible_cmd_lock_of_cyapa_gen5_cmd_states == $sub.ref(0, 320686);

procedure ldv_mutex_lock_interruptible_cmd_lock_of_cyapa_gen5_cmd_states($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_mutex_lock_interruptible_cmd_lock_of_cyapa_gen5_cmd_states($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i3 := ldv_undef_int();
    call {:si_unique_call 543} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 544} {:cexpr "ldv_mutex_cmd_lock_of_cyapa_gen5_cmd_states"} boogie_si_record_i32(2);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_error();
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 321718);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 545} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 322750);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_le16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i2 := __le16_to_cpup($p1);
    call {:si_unique_call 549} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 323782);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 324814);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_sort_deep_sleep_data: ref;

axiom cyapa_gen5_sort_deep_sleep_data == $sub.ref(0, 325846);

procedure cyapa_gen5_sort_deep_sleep_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_deep_sleep_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "cyapa_gen5_sort_deep_sleep_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 5);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 240);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 8);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb8;
}



const cyapa_i2c_pip_read: ref;

axiom cyapa_i2c_pip_read == $sub.ref(0, 326878);

procedure cyapa_i2c_pip_read($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_i2c_pip_read($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "cyapa_i2c_pip_read:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i2, 256);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i11 := i2c_master_recv($p9, $p1, $i10);
    call {:si_unique_call 554} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, $i2);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i4 := $i16;
    goto $bb3;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i11);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 327910);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const i2c_master_recv: ref;

axiom i2c_master_recv == $sub.ref(0, 328942);

procedure i2c_master_recv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_master_recv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} {:cexpr "i2c_master_recv:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 329974);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 331006);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_report_touches: ref;

axiom cyapa_gen5_report_touches == $sub.ref(0, 332038);

procedure cyapa_gen5_report_touches($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cyapa_gen5_report_touches($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 31);
    call {:si_unique_call 558} {:cexpr "touch_num"} boogie_si_record_i32($i8);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} input_mt_sync_frame($p3);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} input_sync($p3);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $p14, $i15, $i16, $i10 := cyapa_gen5_report_touches_loop_$bb4($p0, $p1, $i8, $p11, $p12, $i13, $p14, $i15, $i16, $i10);
    goto $bb4_last;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(7, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 12));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} cyapa_gen5_report_slot_data($p0, $p14);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i10, 1);
    call {:si_unique_call 560} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, $i8);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;
}



const cyapa_gen5_report_buttons: ref;

axiom cyapa_gen5_report_buttons == $sub.ref(0, 333070);

procedure cyapa_gen5_report_buttons($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cyapa_gen5_report_buttons($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 127)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 563} {:cexpr "buttons"} boogie_si_record_i8($i6);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 3);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 56);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 564} {:cexpr "buttons"} boogie_si_record_i8($i12);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 16);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} input_sync($p3);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i12);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} input_report_key($p3, 273, $i39);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i12);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 32);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} input_report_key($p3, 274, $i30);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i12);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} input_report_key($p3, 272, $i21);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const input_report_key: ref;

axiom input_report_key == $sub.ref(0, 334102);

procedure input_report_key($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation input_report_key($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "input_report_key:arg:code"} boogie_si_record_i32($i1);
    call {:si_unique_call 570} {:cexpr "input_report_key:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} input_event($p0, 1, $i1, $i4);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    return;
}



const input_sync: ref;

axiom input_sync == $sub.ref(0, 335134);

procedure input_sync($p0: ref);
  free requires assertsPassed;



implementation input_sync($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} input_event($p0, 0, 0, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    return;
}



const input_event: ref;

axiom input_event == $sub.ref(0, 336166);

procedure input_event($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation input_event($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "input_event:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 574} {:cexpr "input_event:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 575} {:cexpr "input_event:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_report_slot_data: ref;

axiom cyapa_gen5_report_slot_data == $sub.ref(0, 337198);

procedure cyapa_gen5_report_slot_data($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cyapa_gen5_report_slot_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i32($i6, 5);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 576} {:cexpr "event_id"} boogie_si_record_i8($i11);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 31);
    call {:si_unique_call 577} {:cexpr "slot"} boogie_si_record_i32($i15);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i11);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 3);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} input_mt_slot($p3, $i15);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} input_mt_report_slot_state($p3, 0, 1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(3, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 8);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i21, $i24);
    call {:si_unique_call 580} {:cexpr "x"} boogie_si_record_i32($i25);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(108, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} input_report_abs($p3, 53, $i33);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 8);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, $i40);
    call {:si_unique_call 583} {:cexpr "y"} boogie_si_record_i32($i41);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(109, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i41;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} input_report_abs($p3, 54, $i49);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} input_report_abs($p3, 58, $i52);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(7, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} input_report_abs($p3, 48, $i55);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} input_report_abs($p3, 49, $i58);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} input_report_abs($p3, 50, $i61);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} input_report_abs($p3, 51, $i64);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(11, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} input_report_abs($p3, 52, $i67);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, $i41);
    call {:si_unique_call 584} {:cexpr "y"} boogie_si_record_i32($i48);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb10;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, $i25);
    call {:si_unique_call 581} {:cexpr "x"} boogie_si_record_i32($i32);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const input_mt_sync_frame: ref;

axiom input_mt_sync_frame == $sub.ref(0, 338230);

procedure input_mt_sync_frame($p0: ref);
  free requires assertsPassed;



implementation input_mt_sync_frame($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    return;
}



const input_mt_slot: ref;

axiom input_mt_slot == $sub.ref(0, 339262);

procedure input_mt_slot($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation input_mt_slot($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "input_mt_slot:arg:slot"} boogie_si_record_i32($i1);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} input_event($p0, 3, 47, $i1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    return;
}



const input_mt_report_slot_state: ref;

axiom input_mt_report_slot_state == $sub.ref(0, 340294);

procedure input_mt_report_slot_state($p0: ref, $i1: i32, $i2: i1);
  free requires assertsPassed;



implementation input_mt_report_slot_state($p0: ref, $i1: i32, $i2: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "input_mt_report_slot_state:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 595} {:cexpr "input_mt_report_slot_state:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    return;
}



const input_report_abs: ref;

axiom input_report_abs == $sub.ref(0, 341326);

procedure input_report_abs($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation input_report_abs($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "input_report_abs:arg:code"} boogie_si_record_i32($i1);
    call {:si_unique_call 597} {:cexpr "input_report_abs:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} input_event($p0, 3, $i1, $i2);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_bl_exit: ref;

axiom cyapa_gen5_bl_exit == $sub.ref(0, 342358);

procedure cyapa_gen5_bl_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_bl_exit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p1 := $alloc($mul.ref(13, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p2 := $alloc($mul.ref(11, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(0, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p4, 4);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p5, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(2, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p6, 11);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(3, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p7, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(4, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p8, 64);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p9, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(6, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p10, 1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p11, 59);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(8, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p12, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(9, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p13, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(10, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p14, 32);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p15, $sub.i8(0, 57));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(12, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p16, 23);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 11);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i19 := cyapa_i2c_pip_cmd_irq_sync($p0, $p17, 13, $p18, $p3, 5000, cyapa_gen5_sort_bl_exit_data, 0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 603} {:cexpr "error"} boogie_si_record_i32($i19);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p3);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 11);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 48);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 11)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 11)), $mul.ref(1, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb13;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_bl_query_data: ref;

axiom cyapa_gen5_bl_query_data == $sub.ref(0, 343390);

procedure cyapa_gen5_bl_query_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_bl_query_data($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $i29: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p1 := $alloc($mul.ref(13, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p2 := $alloc($mul.ref(31, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p4, 4);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(1, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p5, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(2, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p6, 11);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(3, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p7, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(4, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p8, 64);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(5, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p9, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(6, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p10, 1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(7, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p11, 60);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(8, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p12, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(9, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p13, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(10, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p14, $sub.i8(0, 80));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(11, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p15, 66);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 13)), $mul.ref(12, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p16, 23);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 31);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i19 := cyapa_i2c_pip_cmd_irq_sync($p0, $p17, 13, $p18, $p3, 500, cyapa_gen5_sort_tsg_pip_bl_resp_data, 0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 608} {:cexpr "error"} boogie_si_record_i32($i19);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i20 == 1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p3);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 31);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 31)), $mul.ref(5, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(8, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 609} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p31, $p33, 5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(5, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 45);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(6, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(13, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 610} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p38, $p40, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(12, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 45);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(13, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(19, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 611} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p45, $p47, 2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(15, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 31)), $mul.ref(22, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(86, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 31)), $mul.ref(23, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(87, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i54);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i19, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 5);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb11;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i28 := $i19;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 344422);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen5_get_query_data: ref;

axiom cyapa_gen5_get_query_data == $sub.ref(0, 345454);

procedure cyapa_gen5_get_query_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_get_query_data($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $i19: i32;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p1 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p2 := $alloc($mul.ref(71, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(0, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p4, 4);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(1, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p5, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p6, 5);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p7, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p8, 47);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p9, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p10, 2);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 71);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i13 := cyapa_i2c_pip_cmd_irq_sync($p0, $p11, 7, $p12, $p3, 2000, cyapa_gen5_sort_system_info_data, 0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 616} {:cexpr "error"} boogie_si_record_i32($i13);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p3);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, 70);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(7, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i22 := get_unaligned_le16($p21);
    call {:si_unique_call 618} {:cexpr "product_family"} boogie_si_record_i16($i22);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 61440);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 4096);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(15, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(86, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i27);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(16, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(87, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(52, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(53, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(54, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i42 := get_unaligned_le16($p41);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i16($i42);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i44 := $udiv.i32($i43, 100);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(100, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(56, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i48 := get_unaligned_le16($p47);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i16($i48);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i49, 100);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(104, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(58, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i54 := get_unaligned_le16($p53);
    call {:si_unique_call 624} {:cexpr "tmp___1"} boogie_si_record_i16($i54);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p2);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(60, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i59 := get_unaligned_le16($p58);
    call {:si_unique_call 626} {:cexpr "tmp___2"} boogie_si_record_i16($i59);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(62, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i64 := get_unaligned_le16($p63);
    call {:si_unique_call 628} {:cexpr "tmp___3"} boogie_si_record_i16($i64);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(128, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(64, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(108, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(65, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(109, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, $i77);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 71)), $mul.ref(70, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i82 := $shl.i32($i81, 3);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 56);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, $i86);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(33, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 629} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p89, $p91, 5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(5, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 45);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(6, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p2);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(38, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 630} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p96, $p98, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(12, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 45);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(13, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p2);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(44, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 631} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p103, $p105, 2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(15, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i110 == 1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i113 == 1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(100, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i116 == 1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(104, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i119 == 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i122 == 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i125 == 1);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(128, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb15;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb15;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb15;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb9;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i18 := $i13;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 346486);

procedure strlen($p0: ref) returns ($r: i64);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 347518);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const cyapa_gen5_sort_system_info_data: ref;

axiom cyapa_gen5_sort_system_info_data == $sub.ref(0, 348550);

procedure cyapa_gen5_sort_system_info_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_system_info_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} {:cexpr "cyapa_gen5_sort_system_info_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 31);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 127);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 2);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;
}



const cyapa_gen5_sort_tsg_pip_bl_resp_data: ref;

axiom cyapa_gen5_sort_tsg_pip_bl_resp_data == $sub.ref(0, 349582);

procedure cyapa_gen5_sort_tsg_pip_bl_resp_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_tsg_pip_bl_resp_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} {:cexpr "cyapa_gen5_sort_tsg_pip_bl_resp_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i2, 10);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 48);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const cyapa_gen5_sort_bl_exit_data: ref;

axiom cyapa_gen5_sort_bl_exit_data == $sub.ref(0, 350614);

procedure cyapa_gen5_sort_bl_exit_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_bl_exit_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} {:cexpr "cyapa_gen5_sort_bl_exit_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i2, 1);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 11);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 48);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb19:
    assume $i22 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb21:
    assume $i26 == 1;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(10, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 23);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const gen5_idle_state_parse: ref;

axiom gen5_idle_state_parse == $sub.ref(0, 351646);

procedure gen5_idle_state_parse($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, $M.22, assertsPassed;



implementation gen5_idle_state_parse($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i12: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_103 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 639} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p5, 0, 32, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i7 := cyapa_i2c_pip_read($p0, $p6, 3);
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 642} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 3);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i14 := get_unaligned_le16($p13);
    call {:si_unique_call 644} {:cexpr "tmp___0"} boogie_si_record_i16($i14);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i15);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p2);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 5);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_104 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p20, 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p21, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 32);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i24 := cyapa_i2c_pip_cmd_irq_sync($p0, $p22, 2, $p23, $p2, 300, cyapa_gen5_sort_hid_descriptor_data, 0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 647} {:cexpr "error"} boogie_si_record_i32($i24);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i27 := get_unaligned_le16($p26);
    call {:si_unique_call 649} {:cexpr "tmp___1"} boogie_si_record_i16($i27);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i28);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(16, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i31 := get_unaligned_le16($p30);
    call {:si_unique_call 651} {:cexpr "tmp___2"} boogie_si_record_i16($i31);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    call {:si_unique_call 652} {:cexpr "max_output_len"} boogie_si_record_i32($i32);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 32);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p2);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p2);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 32);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i44 == 1);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p2);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 247);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb29;

  $bb30:
    assume $i50 == 1;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i32, 254);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb29;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 6);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb25;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 255);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb18;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i32, 256);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb18;

  $bb21:
    assume $i41 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 5);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb14;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i12 := $i24;
    goto $bb6;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb5;
}



const gen5_hid_description_header_parse: ref;

axiom gen5_hid_description_header_parse == $sub.ref(0, 352678);

procedure gen5_hid_description_header_parse($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gen5_hid_description_header_parse($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i4 := cyapa_i2c_pip_read($p0, $p3, 32);
    call {:si_unique_call 655} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 32);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i11 := get_unaligned_le16($p10);
    call {:si_unique_call 658} {:cexpr "tmp___0"} boogie_si_record_i16($i11);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    call {:si_unique_call 659} {:cexpr "length"} boogie_si_record_i32($i12);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(16, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i15 := get_unaligned_le16($p14);
    call {:si_unique_call 661} {:cexpr "tmp___1"} boogie_si_record_i16($i15);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    call {:si_unique_call 662} {:cexpr "max_output_len"} boogie_si_record_i32($i16);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 2);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i12, 32);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i12, 32);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 247);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb24;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i16, 254);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb24;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 5);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 6);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 255);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i16, 256);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb16;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 5);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 5);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 255);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 5);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 6);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 5);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 5);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb5;
}



const gen5_report_data_header_parse: ref;

axiom gen5_report_data_header_parse == $sub.ref(0, 353710);

procedure gen5_report_data_header_parse($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gen5_report_data_header_parse($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i2 := get_unaligned_le16($p1);
    call {:si_unique_call 664} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    call {:si_unique_call 665} {:cexpr "length"} boogie_si_record_i32($i3);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i3, 5);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i16 == 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i3, 14);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 5);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 6);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb22;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb26;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i3, 4);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume $i18 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb22;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i3, 6);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i13 == 1);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i3, 127);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb18;
}



const gen5_cmd_resp_header_parse: ref;

axiom gen5_cmd_resp_header_parse == $sub.ref(0, 354742);

procedure gen5_cmd_resp_header_parse($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gen5_cmd_resp_header_parse($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(304, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i4 := get_unaligned_le16($p1);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 668} {:cexpr "length"} boogie_si_record_i32($i5);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i9 := cyapa_i2c_pip_read($p0, $p7, $i8);
    call {:si_unique_call 670} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 671} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, $i5);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i5, 2);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref(2, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 48);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref(2, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 31);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref(3, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb26;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 5);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 6);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref(3, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb16;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref(4, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb16;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 800)), $mul.ref(544, 1)), $mul.ref($i40, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 23);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb16;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 5);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 5);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 48);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 5);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 6);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 5);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 5);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb5;
}



const cyapa_gen5_sort_hid_descriptor_data: ref;

axiom cyapa_gen5_sort_hid_descriptor_data == $sub.ref(0, 355774);

procedure cyapa_gen5_sort_hid_descriptor_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_hid_descriptor_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i1;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} {:cexpr "cyapa_gen5_sort_hid_descriptor_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 32);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i5 := get_unaligned_le16($p1);
    call {:si_unique_call 674} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 675} {:cexpr "resp_len"} boogie_si_record_i32($i6);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(16, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i8 := get_unaligned_le16($p7);
    call {:si_unique_call 677} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 678} {:cexpr "max_output_len"} boogie_si_record_i32($i9);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 32);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 255);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 247);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i9, 254);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, 256);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 356806);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 357838);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 358870);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cyapa_gen5_suspend_scanning: ref;

axiom cyapa_gen5_suspend_scanning == $sub.ref(0, 359902);

procedure cyapa_gen5_suspend_scanning($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_suspend_scanning($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p1 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p4, 4);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(1, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p5, 0);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p6, 5);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p7, 0);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p8, 47);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p9, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p10, 3);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_105 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 6);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i14 := cyapa_i2c_pip_cmd_irq_sync($p0, $p12, 7, $p13, $p3, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 685} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 31);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 127);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 3);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_106 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_calibrate_pwcs: ref;

axiom cyapa_gen5_calibrate_pwcs == $sub.ref(0, 360934);

procedure cyapa_gen5_calibrate_pwcs($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_calibrate_pwcs($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p3 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 690} {:cexpr "cyapa_gen5_calibrate_pwcs:arg:calibrate_sensing_mode_type"} boogie_si_record_i8($i1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_107 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 692} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p6, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} put_unaligned_le16(4, $p9);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} put_unaligned_le16(6, $p11);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 47);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 40);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(0, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 6);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i18 := cyapa_i2c_pip_cmd_irq_sync($p0, $p16, 8, $p17, $p4, 5000, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 696} {:cexpr "error"} boogie_si_record_i32($i18);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 31);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 127);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 40);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i18, 0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 11);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb15;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i38 := $i18;
    goto $bb14;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_resume_scanning: ref;

axiom cyapa_gen5_resume_scanning == $sub.ref(0, 361966);

procedure cyapa_gen5_resume_scanning($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_resume_scanning($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p1 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p4, 4);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(1, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p5, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(2, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p6, 5);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p7, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(4, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p8, 47);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p9, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p10, 4);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_108 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 6);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i14 := cyapa_i2c_pip_cmd_irq_sync($p0, $p12, 7, $p13, $p3, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 702} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 31);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 127);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 4);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_109 := cyapa_empty_pip_output_data($p0, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_read_mutual_idac_data: ref;

axiom cyapa_gen5_read_mutual_idac_data == $sub.ref(0, 362998);

procedure cyapa_gen5_read_mutual_idac_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.13, $M.14, $M.29, $M.30, $M.31, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_read_mutual_idac_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p3, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p2, 0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p1, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p6, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p5, 0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p7, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i8 := cyapa_gen5_read_idac_data($p0, 36, 0, $p7, $p1, $p2, $p3);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 706} {:cexpr "error"} boogie_si_record_i32($i8);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i11 := cyapa_gen5_read_idac_data($p0, 36, 0, $p7, $p4, $p5, $p6);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 708} {:cexpr "error"} boogie_si_record_i32($i11);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_read_self_idac_data: ref;

axiom cyapa_gen5_read_self_idac_data == $sub.ref(0, 364030);

procedure cyapa_gen5_read_self_idac_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.15, $M.13, $M.14, $M.29, $M.30, $M.31, $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_read_self_idac_data($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p2, 0);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p1, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p5, 0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p4, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p3, 0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p6, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i7 := cyapa_gen5_read_idac_data($p0, 36, 1, $p6, $p3, $p4, $p5);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 711} {:cexpr "error"} boogie_si_record_i32($i7);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.14, $p3);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p1, $i10);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.13, $p4);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p2, $i11);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i12 := cyapa_gen5_read_idac_data($p0, 36, 1, $p6, $p3, $p4, $p5);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 713} {:cexpr "error"} boogie_si_record_i32($i12);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_execute_panel_scan: ref;

axiom cyapa_gen5_execute_panel_scan == $sub.ref(0, 365062);

procedure cyapa_gen5_execute_panel_scan($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_execute_panel_scan($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p1 := $alloc($mul.ref(7, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 717} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p4, 0, 7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} put_unaligned_le16(4, $p7);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} put_unaligned_le16(5, $p9);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 47);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 42);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 6);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i14 := cyapa_i2c_pip_cmd_irq_sync($p0, $p12, 7, $p13, $p3, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 721} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p3);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 6);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 31);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 127);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 42);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i14, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64(0, 11);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb17;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i14);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb2;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const cyapa_gen5_read_panel_scan_raw_data: ref;

axiom cyapa_gen5_read_panel_scan_raw_data == $sub.ref(0, 366094);

procedure cyapa_gen5_read_panel_scan_raw_data($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.16, $M.0, $M.18, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_read_panel_scan_raw_data($p0: ref, $i1: i8, $i2: i8, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i53: i32;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i131: i32;
  var $i132: i32;
  var $i103: i32;
  var $i104: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $i88: i32;
  var $i89: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p8 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p9 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 725} {:cexpr "cyapa_gen5_read_panel_scan_raw_data:arg:cmd_code"} boogie_si_record_i8($i1);
    call {:si_unique_call 726} {:cexpr "cyapa_gen5_read_panel_scan_raw_data:arg:raw_data_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 727} {:cexpr "cyapa_gen5_read_panel_scan_raw_data:arg:raw_data_max_num"} boogie_si_record_i32($i3);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 43);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i2);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 5);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p5);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p6);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p7);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, $sub.i32(0, 2147483648));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p5, 2147483647);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32(61, 4);
    call {:si_unique_call 728} {:cexpr "read_len"} boogie_si_record_i32($i23);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p8);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} put_unaligned_le16(4, $p26);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} put_unaligned_le16(10, $p28);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 47);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i33, $i34, $i35, $i36, $i37 := 61, $i23, 0, 0, 0;
    goto $bb14;

  $bb14:
    call $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p50, $i51, $i52, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i53, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p108, $i109, $i110, $i111, $p112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $p126, $i127, $i128, $i129, $i130, $i105, $i106, $i107, $i131, $i132, $i103, $i104, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141 := cyapa_gen5_read_panel_scan_raw_data_loop_$bb14($p0, $i1, $i2, $i3, $p4, $p5, $p8, $p9, $p10, $p22, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $i44, $p45, $p46, $p47, $i48, $p49, $p50, $i51, $i52, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i53, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p108, $i109, $i110, $i111, $p112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $p126, $i127, $i128, $i129, $i130, $i105, $i106, $i107, $i131, $i132, $i103, $i104, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141);
    goto $bb14_last;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i35);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} put_unaligned_le16($i39, $p41);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i33);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p32, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} put_unaligned_le16($i44, $p46);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p32, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i2);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i34, 10);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i48);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p9);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i51 := cyapa_i2c_pip_cmd_irq_sync($p0, $p49, 12, $p50, $p10, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 734} {:cexpr "error"} boogie_si_record_i32($i51);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i52 == 1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p10);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 9);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(2, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 31);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(3, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 127);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i67, $i68);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(5, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(6, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i76, $i77);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p9);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(7, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i83 := get_unaligned_le16($p82);
    call {:si_unique_call 736} {:cexpr "tmp"} boogie_si_record_i16($i83);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    call {:si_unique_call 737} {:cexpr "read_elements"} boogie_si_record_i32($i84);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i86, $i87 := $i36, $i37;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 7);
    call {:si_unique_call 738} {:cexpr "data_size"} boogie_si_record_i32($i93);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i84);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i35);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i95, $i96);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    call {:si_unique_call 739} {:cexpr "offset"} boogie_si_record_i16($i98);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i84, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i133, $i134 := $i36, $i37;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i135 := $sge.i32($i134, $i3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i136, $i137 := $i133, $i134;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i93);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i139 := $udiv.i64(246, $i138);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i64.i32($i139);
    call {:si_unique_call 748} {:cexpr "read_elements"} boogie_si_record_i32($i140);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i141 := $mul.i32($i140, $i93);
    call {:si_unique_call 749} {:cexpr "read_len"} boogie_si_record_i32($i141);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i33, $i34, $i35, $i36, $i37 := $i140, $i141, $i98, $i133, $i134;
    goto corral_source_split_4513_dummy;

  $bb58:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i88, $i89 := $i136, $i137;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i89, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i142 == 1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p6, $i144);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i143 := $sdiv.i32($i88, $i89);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb63;

  $bb38:
    assume $i99 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i100 := $mul.i32($i84, $i93);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 10);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i101, 10);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i103, $i104 := $i36, $i37;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i133, $i134 := $i103, $i104;
    goto $bb57;

  $bb40:
    assume $i102 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i105, $i106, $i107 := 10, $i37, $i36;
    goto $bb43;

  $bb43:
    call $p108, $i109, $i110, $i111, $p112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $p126, $i127, $i128, $i129, $i130, $i105, $i106, $i107, $i131, $i132 := cyapa_gen5_read_panel_scan_raw_data_loop_$bb43($p4, $p5, $p9, $p22, $i93, $i101, $p108, $i109, $i110, $i111, $p112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $p126, $i127, $i128, $i129, $i130, $i105, $i106, $i107, $i131, $i132);
    goto $bb43_last;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p9);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i105);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p112, $mul.ref($i113, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i115 := cyapa_parse_structure_data($i111, $p114, $i93);
    call {:si_unique_call 741} {:cexpr "value"} boogie_si_record_i32($i115);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.16, $p5);
    call {:si_unique_call 742} {:cexpr "_min2"} boogie_si_record_i32($i116);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i115, $i116);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i117 == 1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i118 := $i116;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p5, $i118);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.17, $p4);
    call {:si_unique_call 743} {:cexpr "_max2"} boogie_si_record_i32($i119);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i115, $i119);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i120 == 1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, $i121);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p22);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i107, $i115);
    call {:si_unique_call 745} {:cexpr "sum"} boogie_si_record_i32($i127);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i106, 1);
    call {:si_unique_call 746} {:cexpr "count"} boogie_si_record_i32($i128);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i105, $i93);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32($i129);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i101, $i129);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i127, $i128;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i103, $i104 := $i131, $i132;
    goto $bb42;

  $bb54:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i105, $i106, $i107 := $i129, $i128, $i127;
    goto $bb54_dummy;

  $bb51:
    assume $i123 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p22);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i106);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p124, $mul.ref($i125, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} put_unaligned_le32($i115, $p126);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i120 == 1;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i121 := $i115;
    goto $bb50;

  $bb45:
    assume $i117 == 1;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i118 := $i115;
    goto $bb47;

  $bb34:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i88, $i89 := $i86, $i87;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i53, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32(0, 11);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i21 := $i80;
    goto $bb12;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i80 := $i53;
    goto $bb32;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb16;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb16;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb16;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb16;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb54_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  corral_source_split_4513_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4365;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 367126);

procedure scnprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 754} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 755} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 757} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 758} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 761} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32, p.17: i32, p.18: i32, p.19: i32, p.20: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32, p.17: i32, p.18: i32, p.19: i32, p.20: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 762} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 765} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_parse_structure_data: ref;

axiom cyapa_parse_structure_data == $sub.ref(0, 368158);

procedure cyapa_parse_structure_data($i0: i8, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_parse_structure_data($i0: i8, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i8;
  var $i21: i32;
  var $i23: i1;
  var $i24: i16;
  var $i25: i32;
  var $i27: i16;
  var $i28: i32;
  var $i26: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i31: i32;
  var $i22: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "cyapa_parse_structure_data:arg:data_format"} boogie_si_record_i8($i0);
    call {:si_unique_call 769} {:cexpr "cyapa_parse_structure_data:arg:buf_len"} boogie_si_record_i32($i2);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 7);
    call {:si_unique_call 770} {:cexpr "data_size"} boogie_si_record_i32($i4);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 771} {:cexpr "big_endian"} boogie_si_record_i8($i8);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 32);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 772} {:cexpr "unsigned_type"} boogie_si_record_i8($i12);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, $i4);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i12);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i4, 8);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i35 := twos_complement_to_s32($i22, $i34);
    call {:si_unique_call 785} {:cexpr "value"} boogie_si_record_i32($i35);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i14 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb25:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i22;
    goto $bb27;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i8);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i32 := get_unaligned_le32($p1);
    call {:si_unique_call 783} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i22 := $i31;
    goto $bb17;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i30 := get_unaligned_be32($p1);
    call {:si_unique_call 781} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i8);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i23 == 1);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i27 := get_unaligned_le16($p1);
    call {:si_unique_call 778} {:cexpr "tmp___0"} boogie_si_record_i16($i27);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    call {:si_unique_call 779} {:cexpr "value"} boogie_si_record_i32($i28);
    assume {:verifier.code 0} true;
    $i26 := $i28;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i22 := $i26;
    goto $bb17;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i24 := get_unaligned_be16($p1);
    call {:si_unique_call 775} {:cexpr "tmp"} boogie_si_record_i16($i24);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 776} {:cexpr "value"} boogie_si_record_i32($i25);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb20;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    call {:si_unique_call 773} {:cexpr "value"} boogie_si_record_i32($i21);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb17;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const get_unaligned_be16: ref;

axiom get_unaligned_be16 == $sub.ref(0, 369190);

procedure get_unaligned_be16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_be16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i2 := __be16_to_cpup($p1);
    call {:si_unique_call 787} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_unaligned_be32: ref;

axiom get_unaligned_be32 == $sub.ref(0, 370222);

procedure get_unaligned_be32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_unaligned_be32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i2 := __be32_to_cpup($p1);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_unaligned_le32: ref;

axiom get_unaligned_le32 == $sub.ref(0, 371254);

procedure get_unaligned_le32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_unaligned_le32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i2 := __le32_to_cpup($p1);
    call {:si_unique_call 791} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const twos_complement_to_s32: ref;

axiom twos_complement_to_s32 == $sub.ref(0, 372286);

procedure twos_complement_to_s32($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation twos_complement_to_s32($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} {:cexpr "twos_complement_to_s32:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 793} {:cexpr "twos_complement_to_s32:arg:num_bits"} boogie_si_record_i32($i1);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i0, $i2);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($sub.i32(0, 1), $i1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i0);
    call {:si_unique_call 794} {:cexpr "value"} boogie_si_record_i32($i6);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 373318);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __le32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __be32_to_cpup: ref;

axiom __be32_to_cpup == $sub.ref(0, 374350);

procedure __be32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __be32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i1 := __swab32p($p0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __swab32p: ref;

axiom __swab32p == $sub.ref(0, 375382);

procedure __swab32p($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __swab32p($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i2 := __fswab32($i1);
    call {:si_unique_call 798} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 376414);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i1 := __arch_swab32($i0);
    call {:si_unique_call 801} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 377446);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 803} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 804} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __be16_to_cpup: ref;

axiom __be16_to_cpup == $sub.ref(0, 378478);

procedure __be16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __be16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i1 := __swab16p($p0);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __swab16p: ref;

axiom __swab16p == $sub.ref(0, 379510);

procedure __swab16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __swab16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i4 := __fswab16($i3);
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 380542);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const cyapa_gen5_read_idac_data: ref;

axiom cyapa_gen5_read_idac_data == $sub.ref(0, 381574);

procedure cyapa_gen5_read_idac_data($p0: ref, $i1: i8, $i2: i8, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.13, $M.30, $M.31, $M.29, $M.0, $M.15, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_read_idac_data($p0: ref, $i1: i8, $i2: i8, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i75: i16;
  var $i76: i32;
  var $i44: i8;
  var $i45: i16;
  var $i46: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i16;
  var $p109: ref;
  var $p110: ref;
  var $i111: i16;
  var $i112: i32;
  var $i113: i16;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i124: i32;
  var $i150: i1;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $i154: i16;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i187: i8;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i8;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i64;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i16;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $i207: i16;
  var $i208: i32;
  var $i209: i1;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $i228: i8;
  var $p229: ref;
  var $i230: i64;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $i245: i1;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i32;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i284: i32;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i1;
  var $p298: ref;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i1;
  var $p304: ref;
  var $i305: i32;
  var $i307: i32;
  var $i306: i32;
  var $p308: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i315: i32;
  var $i317: i32;
  var $i316: i32;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $p321: ref;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i32;
  var $i327: i32;
  var $i326: i32;
  var $p328: ref;
  var $p329: ref;
  var $i26: i32;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p7 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p8 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 815} {:cexpr "cyapa_gen5_read_idac_data:arg:cmd_code"} boogie_si_record_i8($i1);
    call {:si_unique_call 816} {:cexpr "cyapa_gen5_read_idac_data:arg:idac_data_type"} boogie_si_record_i8($i2);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 36);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p3);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p4);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p5);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p6);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, $sub.i32(0, 2147483648));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p5, 2147483647);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p11, 0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.30, $p11);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p10, $i27);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.29, $p3);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.29, $p3);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 4);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i2);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i78, $i80);
    call {:si_unique_call 823} {:cexpr "max_element_cnt"} boogie_si_record_i32($i81);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, 3);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 4));
    call {:si_unique_call 824} {:cexpr "max_element_cnt"} boogie_si_record_i32($i83);
    assume {:verifier.code 0} true;
    $i75, $i76 := 2, $i83;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i44, $i45, $i46 := 0, $i75, $i76;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p7);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 819} cmdloc_dummy_var_50 := $memset.i8(cmdloc_dummy_var_49, $p84, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p7);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} put_unaligned_le16(4, $p87);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} put_unaligned_le16(10, $p89);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 47);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $i1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99 := $i45, 0, 0, $sub.i32(0, 2147483648), 2147483647, 0, 0, 0;
    goto $bb37;

  $bb37:
    call $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $p114, $p115, $p116, $p118, $i119, $p120, $p121, $i122, $i123, $i125, $i126, $p127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $i124, $p152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $p225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i281, $i282, $i283, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i210, $i211, $i212, $i213, $i214, $i215, $i216 := cyapa_gen5_read_idac_data_loop_$bb37($p0, $i1, $i2, $p3, $p4, $p5, $p7, $p8, $p9, $i44, $i46, $p85, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $p110, $i111, $i112, $i113, $p114, $p115, $p116, $p118, $i119, $p120, $p121, $i122, $i123, $i125, $i126, $p127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $p145, $i146, $i147, $i148, $i149, $i124, $p152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $p225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i281, $i282, $i283, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i210, $i211, $i212, $i213, $i214, $i215, $i216);
    goto $bb37_last;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.29, $p3);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i101 := $sdiv.i32(246, $i100);
    call {:si_unique_call 826} {:cexpr "read_elements"} boogie_si_record_i32($i101);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32($i46, $i94);
    call {:si_unique_call 827} {:cexpr "_min2"} boogie_si_record_i32($i102);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i101, $i102);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i103 == 1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.29, $p3);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i106 := $mul.i32($i105, $i104);
    call {:si_unique_call 828} {:cexpr "read_len"} boogie_si_record_i32($i106);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i92);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} put_unaligned_le16($i108, $p110);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i106);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(2, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} put_unaligned_le16($i113, $p116);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p85, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(4, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, $i2);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i106, 10);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i119);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p7);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p8);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i122 := cyapa_i2c_pip_cmd_irq_sync($p0, $p120, 12, $p121, $p9, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 832} {:cexpr "error"} boogie_si_record_i32($i122);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i123 == 1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p9);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i126 := $sle.i32($i125, 9);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i126 == 1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(2, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 31);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i130 == 1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(3, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i134 == 1);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 127);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i138, $i139);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i140 == 1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(5, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i144 == 1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(6, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i2);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i147, $i148);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i124 := $i122;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p8);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p152, $mul.ref(7, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i154 := get_unaligned_le16($p153);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i16($i154);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    call {:si_unique_call 835} {:cexpr "read_len"} boogie_si_record_i32($i155);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i157, $i158, $i159, $i160, $i161, $i162 := $i93, $i94, $i95, $i96, $i97, $i99;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 7);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, $i172);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.29, $p3);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i174 := $sgt.i32($i173, $i155);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i8.i1($i44);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i155);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i92);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i204, $i205);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i16($i206);
    call {:si_unique_call 838} {:cexpr "offset"} boogie_si_record_i16($i207);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i155, 10);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i209 := $sgt.i32($i208, 10);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i210, $i211, $i212, $i213, $i214, $i215, $i216 := $i93, $i94, $i95, $i96, $i97, $i98, $i99;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99 := $i207, $i210, $i211, $i212, $i213, $i214, $i215, $i216;
    goto $bb110_dummy;

  $bb73:
    assume $i209 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224 := 10, $i99, $i98, $i97, $i96, $i95, $i94, $i93;
    goto $bb76;

  $bb76:
    call $p225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i281, $i282, $i283, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i284, $i285, $i286, $i287, $i288, $i289, $i290 := cyapa_gen5_read_idac_data_loop_$bb76($p0, $i2, $p3, $p4, $p5, $p8, $i44, $i46, $i208, $p225, $i226, $i227, $i228, $p229, $i230, $p231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $p242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i281, $i282, $i283, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i284, $i285, $i286, $i287, $i288, $i289, $i290);
    goto $bb76_last;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i8($i227);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p8);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i217);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p229, $mul.ref($i230, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.29, $p3);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i233 := cyapa_parse_structure_data($i228, $p231, $i232);
    call {:si_unique_call 840} {:cexpr "value"} boogie_si_record_i32($i233);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.13, $p5);
    call {:si_unique_call 841} {:cexpr "_min2___0"} boogie_si_record_i32($i234);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i233, $i234);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i235 == 1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i236 := $i234;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p5, $i236);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.14, $p4);
    call {:si_unique_call 842} {:cexpr "_max2"} boogie_si_record_i32($i237);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i238 := $sgt.i32($i233, $i237);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i238 == 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i239 := $i237;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, $i239);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i2);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i261, $i262, $i263, $i264, $i265 := $i222, $i221, $i220, $i219, $i218;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i224, $i233);
    call {:si_unique_call 846} {:cexpr "sum"} boogie_si_record_i32($i266);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i267 := $add.i32($i223, 1);
    call {:si_unique_call 847} {:cexpr "count"} boogie_si_record_i32($i267);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i268 := $sge.i32($i267, $i46);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i269, $i270, $i271, $i272, $i273, $i274 := $i261, $i262, $i263, $i265, $i266, $i267;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.29, $p3);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i282 := $add.i32($i281, $i217);
    call {:si_unique_call 848} {:cexpr "i"} boogie_si_record_i32($i282);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i283 := $sgt.i32($i208, $i282);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i284, $i285, $i286, $i287, $i288, $i289, $i290 := $i266, $i267, $i261, $i262, $i263, $i264, $i265;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i210, $i211, $i212, $i213, $i214, $i215, $i216 := $i284, $i285, $i286, $i287, $i288, $i289, $i290;
    goto $bb75;

  $bb108:
    assume $i283 == 1;
    assume {:verifier.code 0} true;
    $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224 := $i282, $i265, $i264, $i263, $i262, $i261, $i267, $i266;
    goto $bb108_dummy;

  $bb104:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i275, $i276, $i277, $i278, $i279, $i280 := $i273, $i274, $i269, $i270, $i271, $i272;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i276, 0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i291 == 1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i293 := 0;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p6, $i293);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i294 := $trunc.i8.i1($i44);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb114:
    assume $i294 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb116;

  $bb117:
    assume $i296 == 1;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i280, 0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.0, $p298);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, $i280);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i300 == 1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.31, $p10);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i280, $i309);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i310 == 1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.0, $p321);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i323 == 1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.30, $p11);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i326 := $i327;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p328, $i326);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p329, $i280);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p5, $i278);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, $i277);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p6, $i279);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i323 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.0, $p324);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i326 := $i325;
    goto $bb136;

  $bb128:
    assume $i310 == 1;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i313 == 1);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.31, $p10);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i316 := $i317;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p318, $i316);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.31, $p10);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, $i319);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb130:
    assume $i313 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.0, $p314);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i316 := $i315;
    goto $bb132;

  $bb122:
    assume $i300 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.0, $p301);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 0);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i303 == 1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.31, $p10);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i306 := $i307;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p308, $i306);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i303 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i306 := $i305;
    goto $bb126;

  $bb119:
    assume $i297 == 1;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb17;

  $bb111:
    assume $i291 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i292 := $sdiv.i32($i275, $i276);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i293 := $i292;
    goto $bb113;

  $bb84:
    assume $i241 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i244 := $sgt.i32($i243, $i218);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb86;

  $bb87:
    assume $i244 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i8.i1($i44);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb86;

  $bb89:
    assume $i245 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i220, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  $bb93:
    assume !($i246 == 1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i247 := $sdiv.i32($i220, 2);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, $i233);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i256, $i257, $i258, $i259, $i260 := $i222, $i221, $i220, $i219, $i218;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i261, $i262, $i263, $i264, $i265 := $i256, $i257, $i258, $i259, $i260;
    goto $bb103;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i249 := $slt.i32($i233, $i221);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i249 == 1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i250 := $i221;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i251 := $sgt.i32($i233, $i222);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i251 == 1);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i252 := $i222;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i253 := $add.i32($i219, $i233);
    call {:si_unique_call 843} {:cexpr "tmp_sum"} boogie_si_record_i32($i253);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i254 := $add.i32($i218, 1);
    call {:si_unique_call 844} {:cexpr "tmp_count"} boogie_si_record_i32($i254);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i255 := $sdiv.i32($i253, $i254);
    call {:si_unique_call 845} {:cexpr "tmp_ave"} boogie_si_record_i32($i255);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i256, $i257, $i258, $i259, $i260 := $i252, $i250, $i255, $i253, $i254;
    goto $bb102;

  $bb99:
    assume $i251 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i252 := $i233;
    goto $bb101;

  $bb96:
    assume $i249 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i250 := $i233;
    goto $bb98;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb92;

  $bb81:
    assume $i238 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i239 := $i233;
    goto $bb83;

  $bb78:
    assume $i235 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i236 := $i233;
    goto $bb80;

  $bb67:
    assume $i175 == 1;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i2);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i178, $i179, $i180, $i181, $i182, $i183 := $i93, $i94, $i95, $i96, $i97, $i99;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb69;

  $bb70:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p8);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(10, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.29, $p3);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i191 := cyapa_parse_structure_data($i187, $p189, $i190);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p4, $i191);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i8($i194);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p8);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.29, $p3);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 10);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i198);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p196, $mul.ref($i199, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.29, $p3);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i202 := cyapa_parse_structure_data($i195, $p200, $i201);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p5, $i202);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i163, $i164, $i165, $i166, $i167, $i168 := $i178, $i179, $i180, $i181, $i182, $i183;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i275, $i276, $i277, $i278, $i279, $i280 := $i163, $i164, $i165, $i166, $i167, $i168;
    goto $bb106;

  $bb64:
    assume $i174 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb17;

  $bb60:
    assume $i156 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i163, $i164, $i165, $i166, $i167, $i168 := $i157, $i158, $i159, $i160, $i161, $i162;
    goto $bb62;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i124, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i150 == 1);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32(0, 11);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i26 := $i151;
    goto $bb17;

  $bb56:
    assume $i150 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i151 := $i124;
    goto $bb58;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb42;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb42;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb42;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb42;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb42;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i103 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i104 := $i101;
    goto $bb40;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.29, $p3);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i54, $i57);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    call {:si_unique_call 822} {:cexpr "offset"} boogie_si_record_i16($i59);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i61, $i63);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i64 == 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p11, $i68);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 7);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, $sub.i32(0, 8));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.30, $p11);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i72, $i73);
    call {:si_unique_call 825} {:cexpr "max_element_cnt"} boogie_si_record_i32($i74);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i59, $i74;
    goto $bb36;

  $bb33:
    assume $i64 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p11, $i66);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 4);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 4);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i43 := 2;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i44, $i45, $i46 := 1, 0, $i43;
    goto $bb27;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 7);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, $sub.i32(0, 8));
    call {:si_unique_call 818} {:cexpr "max_element_cnt"} boogie_si_record_i32($i42);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb26;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} cyapa_gen5_guess_electrodes($p0, $p10, $p11);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.31, $p10);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 3);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 4));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb2;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb108_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  $bb110_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4779;
}



const cyapa_gen5_guess_electrodes: ref;

axiom cyapa_gen5_guess_electrodes == $sub.ref(0, 382606);

procedure cyapa_gen5_guess_electrodes($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.31, $M.30;



implementation cyapa_gen5_guess_electrodes($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i14: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 849} {:cexpr "_min1"} boogie_si_record_i32($i18);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 850} {:cexpr "_min2"} boogie_si_record_i32($i20);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i18, $i20);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p2, $i22);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 851} {:cexpr "_max1"} boogie_si_record_i32($i24);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 852} {:cexpr "_max2"} boogie_si_record_i32($i26);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i24, $i26);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p1, $i28);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(120, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p1, $i7);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.31, $p1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, $i10);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(112, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p2, $i14);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(116, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb5;
}



const cyapa_gen5_write_fw_block: ref;

axiom cyapa_gen5_write_fw_block == $sub.ref(0, 383638);

procedure cyapa_gen5_write_fw_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_gen5_write_fw_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p2 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p3 := $alloc($mul.ref(11, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 134)), $mul.ref(0, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 856} {:cexpr "flash_array_id"} boogie_si_record_i8($i6);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 134)), $mul.ref(2, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i9 := get_unaligned_be16($p8);
    call {:si_unique_call 858} {:cexpr "flash_row_id"} boogie_si_record_i16($i9);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 134)), $mul.ref(4, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i12 := get_unaligned_be16($p11);
    call {:si_unique_call 860} {:cexpr "record_len"} boogie_si_record_i16($i12);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 134)), $mul.ref(6, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 861} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p15, 0, 256, $zext.i32.i64(16), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(0, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} put_unaligned_le16(4, $p19);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32(144);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 65534);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} put_unaligned_le16($i22, $p24);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 64);
    $p26 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    $p27 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 57);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i12);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 3);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 864} {:cexpr "data_len"} boogie_si_record_i16($i30);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    $p33 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} put_unaligned_le16($i32, $p34);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(10, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i6);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i9);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} put_unaligned_le16($i39, $p41);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p36, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i64($i12);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 867} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p43, $p14, $i44, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p16, $mul.ref(0, 10)), $mul.ref(10, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i64($i30);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p17);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i64($i30);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 4);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i52 := crc_itu_t($sub.i16(0, 1), $p49, $i51);
    call {:si_unique_call 869} {:cexpr "crc"} boogie_si_record_i16($i52);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p46, $mul.ref($i47, 4)), $mul.ref(0, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} put_unaligned_le16($i54, $p56);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref($i47, 4)), $mul.ref(2, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 23);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 11);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32(144);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i61 := cyapa_i2c_pip_cmd_irq_sync($p0, $p58, $i59, $p60, $p4, 500, cyapa_gen5_sort_tsg_pip_bl_resp_data, 1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 872} {:cexpr "error"} boogie_si_record_i32($i61);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i62 == 1);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p4);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 11);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i64 == 1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 11)), $mul.ref(2, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 48);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i68 == 1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 11)), $mul.ref(5, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $r := $i75;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i61, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i73 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 11);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb13;

  $bb10:
    assume $i73 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i74 := $i61;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb2;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const crc_itu_t: ref;

axiom crc_itu_t == $sub.ref(0, 384670);

procedure crc_itu_t($i0: i16, $p1: ref, $i2: i64) returns ($r: i16);
  free requires assertsPassed;



implementation crc_itu_t($i0: i16, $p1: ref, $i2: i64) returns ($r: i16)
{
  var $i3: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} {:cexpr "crc_itu_t:arg:arg0"} boogie_si_record_i16($i0);
    call {:si_unique_call 874} {:cexpr "crc_itu_t:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} $i3 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 876} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i3);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_poll_state: ref;

axiom cyapa_poll_state == $sub.ref(0, 385702);

procedure cyapa_poll_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_poll_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} {:cexpr "cyapa_poll_state:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i32($i1, 100);
    call {:si_unique_call 878} {:cexpr "tries"} boogie_si_record_i32($i2);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i3 := $i2;
    goto $bb1;

  $bb1:
    call $i3, $i4, $i5, $p6, $i7, $i8, $i10, $i11, $i12 := cyapa_poll_state_loop_$bb1($p0, $i3, $i4, $i5, $p6, $i7, $i8, $i10, $i11, $i12);
    goto $bb1_last;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i4 := cyapa_get_state($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 880} {:cexpr "error"} boogie_si_record_i32($i4);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} msleep(100);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i3, 1);
    call {:si_unique_call 882} {:cexpr "tries"} boogie_si_record_i32($i10);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i3, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, $sub.i32(0, 11));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 110);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $sub.i32(0, 110));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb15:
    assume $i14 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb17;

  $bb9:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb9_dummy;

  $bb2:
    assume $i5 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb4;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb7;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5235;
}



const cyapa_gen5_sort_application_launch_data: ref;

axiom cyapa_gen5_sort_application_launch_data == $sub.ref(0, 386734);

procedure cyapa_gen5_sort_application_launch_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_gen5_sort_application_launch_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} {:cexpr "cyapa_gen5_sort_application_launch_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i2, 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p1);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const cyapa_get_state: ref;

axiom cyapa_get_state == $sub.ref(0, 387766);

procedure cyapa_get_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_get_state($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i87: i1;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i28: i32;
  var $i92: i1;
  var $i93: i32;
  var $i91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p1 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(2, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 886} {:cexpr "even_addr"} boogie_si_record_i8($i10);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i13 := cyapa_i2c_reg_read_block($p0, 0, 3, $p12);
    call {:si_unique_call 888} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 889} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(57, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25, $i26 := 0, $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 3);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29, $i30 := 2, $i26;
    goto $bb17;

  $bb17:
    call $i29, $i30, $p31, $i32, $p34, $p35, $i36, $p38, $p39, $i40, $p42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i86 := cyapa_get_state_loop_$bb17($p0, $p1, $p2, $i10, $i25, $i29, $i30, $p31, $i32, $p34, $p35, $i36, $p38, $p39, $i40, $p42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i86);
    goto $bb17_last;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i32);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i36);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i40);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i46 == 1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i30;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i59 == 1);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 5);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i70 := $i55;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i25);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i71 == 1);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, $p72, 0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, $p73, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p2);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i75 := cyapa_i2c_write($p0, 0, 2, $p74);
    call {:si_unique_call 898} {:cexpr "error"} boogie_si_record_i32($i75);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i77 := $i75;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} msleep(50);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i79 := cyapa_i2c_read($p0, 0, 3, $p78);
    call {:si_unique_call 901} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    call {:si_unique_call 902} {:cexpr "error"} boogie_si_record_i32($i80);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i83 := $i80;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i29, 1);
    call {:si_unique_call 903} {:cexpr "retries"} boogie_si_record_i32($i84);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i84, 0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i86 := $i83;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i28 := $i86;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i28, 0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i92 == 1);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 11);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i91 := $i93;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $r := $i91;
    return;

  $bb61:
    assume $i92 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i93 := $i28;
    goto $bb63;

  $bb51:
    assume $i85 == 1;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i25);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i86 := $i83;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i29, $i30 := $i84, $i83;
    goto $bb55_dummy;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb53;

  $bb47:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i28 := $i82;
    goto $bb15;

  $bb44:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i28 := $i77;
    goto $bb15;

  $bb42:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i83 := $i70;
    goto $bb50;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i25);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i64 == 1);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i10);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb33;

  $bb36:
    assume $i65 == 1;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(72, 1)));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p1);
    call {:si_unique_call 895} $i68 := devirtbounce.3($p66, $p0, $p67, 3);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 896} {:cexpr "error"} boogie_si_record_i32($i68);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    goto $bb41;

  $bb38:
    assume $i69 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i90 := $ule.i32($i89, 1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb59;

  $bb57:
    assume $i90 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32(0, 11);
    goto $bb59;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb29;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(72, 1)));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    call {:si_unique_call 893} $i53 := devirtbounce.3($p51, $p0, $p52, 3);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 894} {:cexpr "error"} boogie_si_record_i32($i53);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb27;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb19;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb15;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, $sub.i32(0, 110));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, $sub.i32(0, 6));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i10);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i22 := cyapa_read_block($p0, 6, $p21);
    call {:si_unique_call 891} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    call {:si_unique_call 892} {:cexpr "error"} boogie_si_record_i32($i23);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i25, $i26 := 1, $i24;
    goto $bb12;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i14;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb5;

  $bb55_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;
}



const cyapa_i2c_reg_read_block: ref;

axiom cyapa_i2c_reg_read_block == $sub.ref(0, 388798);

procedure cyapa_i2c_reg_read_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_i2c_reg_read_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "cyapa_i2c_reg_read_block:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 905} {:cexpr "cyapa_i2c_reg_read_block:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i8($i2);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i11 := i2c_smbus_read_i2c_block_data($p5, $i7, $i10, $p3);
    call {:si_unique_call 907} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const cyapa_read_block: ref;

axiom cyapa_read_block == $sub.ref(0, 389830);

procedure cyapa_read_block($p0: ref, $i1: i8, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_read_block($p0: ref, $i1: i8, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i32;
  var $i18: i8;
  var $i19: i64;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i32;
  var $i33: i8;
  var $i34: i64;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "cyapa_read_block:arg:cmd_idx"} boogie_si_record_i8($i1);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(57, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref($i22, 2)), $mul.ref(0, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.9, $p24);
    call {:si_unique_call 913} {:cexpr "cmd"} boogie_si_record_i8($i25);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i1);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref($i27, 2)), $mul.ref(1, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.34, $p29);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    call {:si_unique_call 914} {:cexpr "len"} boogie_si_record_i64($i31);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i25);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i34 := cyapa_i2c_reg_read_block($p0, $i33, $i31, $p2);
    call {:si_unique_call 916} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i20 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref($i7, 2)), $mul.ref(0, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.8, $p9);
    call {:si_unique_call 909} {:cexpr "cmd"} boogie_si_record_i8($i10);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref($i12, 2)), $mul.ref(1, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.33, $p14);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    call {:si_unique_call 910} {:cexpr "len"} boogie_si_record_i64($i16);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i10);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i19 := cyapa_smbus_read_block($p0, $i18, $i16, $p2);
    call {:si_unique_call 912} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;
}



const cyapa_i2c_write: ref;

axiom cyapa_i2c_write == $sub.ref(0, 390862);

procedure cyapa_i2c_write($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $CurrAddr;



implementation cyapa_i2c_write($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i8: i32;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 918} {:cexpr "cyapa_i2c_write:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 919} {:cexpr "cyapa_i2c_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i2, 31);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, $p9, $i1);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.32;
    cmdloc_dummy_var_57 := $M.32;
    call {:si_unique_call 920} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p11, $p3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.32 := cmdloc_dummy_var_58;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i2);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i15 := i2c_master_send($p6, $p12, $i14);
    call {:si_unique_call 922} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i2, 1);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i15, 0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 5);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i8 := $i20;
    goto $bb3;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const cyapa_i2c_read: ref;

axiom cyapa_i2c_read == $sub.ref(0, 391894);

procedure cyapa_i2c_read($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $CurrAddr;



implementation cyapa_i2c_read($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i1);
    call {:si_unique_call 925} {:cexpr "cyapa_i2c_read:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(2, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.35 := $store.i16($M.35, $p11, $i9);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.36 := $store.i16($M.36, $p13, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p15, 1);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p17, $p4);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(2, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.35 := $store.i16($M.35, $p21, $i19);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.36 := $store.i16($M.36, $p23, 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i2);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $M.37 := $store.i16($M.37, $p26, $i24);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p28, $p3);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0, 1488)), $mul.ref(24, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i32 := i2c_transfer($p30, $p31, 2);
    call {:si_unique_call 927} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 0);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb6;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i32);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb5;
}



const i2c_transfer: ref;

axiom i2c_transfer == $sub.ref(0, 392926);

procedure i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} {:cexpr "i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_smbus_read_block: ref;

axiom cyapa_smbus_read_block == $sub.ref(0, 393958);

procedure cyapa_smbus_read_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_smbus_read_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i64;
  var $i20: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $i50: i1;
  var $i22: i8;
  var $i51: i64;
  var $i21: i64;
  var $i19: i64;
  var $i52: i1;
  var $i53: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "cyapa_smbus_read_block:arg:cmd"} boogie_si_record_i8($i1);
    call {:si_unique_call 932} {:cexpr "cyapa_smbus_read_block:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i1);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i6, 0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 64);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64(0, $i2);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i21 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i64($i19, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i53 := $i19;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i8 := $i53;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i53 := $i2;
    goto $bb22;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    call $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i22, $i51 := cyapa_smbus_read_block_loop_$bb12($i1, $i2, $p3, $p5, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i22, $i51);
    goto $bb12_last;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 3);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i27, $i28);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    call {:si_unique_call 937} {:cexpr "smbus_cmd"} boogie_si_record_i8($i30);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    call {:si_unique_call 938} {:cexpr "smbus_cmd"} boogie_si_record_i8($i33);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i22);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 32);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p3, $mul.ref($i36, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i33);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i40 := i2c_smbus_read_block_data($p5, $i39, $p37);
    call {:si_unique_call 940} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    call {:si_unique_call 941} {:cexpr "ret"} boogie_si_record_i64($i41);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i42 := $slt.i64($i41, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i22);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 942} {:cexpr "index"} boogie_si_record_i8($i46);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i48 := $mul.i32($i47, 32);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i50 := $ult.i64($i49, $i2);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i51 := $i41;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i21 := $i51;
    goto $bb11;

  $bb17:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i46;
    goto $bb17_dummy;

  $bb14:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i19 := $i43;
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 933} {:cexpr "smbus_cmd"} boogie_si_record_i8($i14);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i17 := i2c_smbus_read_block_data($p5, $i16, $p3);
    call {:si_unique_call 935} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    call {:si_unique_call 936} {:cexpr "ret"} boogie_si_record_i64($i18);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;
}



const i2c_smbus_read_block_data: ref;

axiom i2c_smbus_read_block_data == $sub.ref(0, 394990);

procedure i2c_smbus_read_block_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_block_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} {:cexpr "i2c_smbus_read_block_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 945} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2c_smbus_read_i2c_block_data: ref;

axiom i2c_smbus_read_i2c_block_data == $sub.ref(0, 396022);

procedure i2c_smbus_read_i2c_block_data($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_i2c_block_data($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} {:cexpr "i2c_smbus_read_i2c_block_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 947} {:cexpr "i2c_smbus_read_i2c_block_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 949} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cyapa_probe: ref;

axiom cyapa_probe == $sub.ref(0, 397054);

procedure cyapa_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.10, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.23, $M.24, $M.25, $M.39, $M.20, $M.21, $M.32, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation cyapa_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i7: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $p2 := $alloc($mul.ref(34, $zext.i32.i64(1)));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i4 := cyapa_check_adapter_functionality($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 952} {:cexpr "adapter_func"} boogie_si_record_i8($i4);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(24, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(2, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i14 := i2c_smbus_xfer($p9, $i13, 0, 1, 0, 1, $p2);
    call {:si_unique_call 955} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p16 := devm_kzalloc($p3, 1104, 208);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i4);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p17);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} i2c_set_clientdata($p0, $p24);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 1104)), $mul.ref(24, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(24, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1944)), $mul.ref(1600, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(2, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_110 := sprintf.ref.ref.i32.i32($p26, .str.40, $i30, $i33);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i35 := cyapa_initialize($p17);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 960} {:cexpr "error"} boogie_si_record_i32($i35);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i39 := sysfs_create_group($p38, cyapa_sysfs_group);
    call {:si_unique_call 963} {:cexpr "error"} boogie_si_record_i32($i39);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p17);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i42 := devm_add_action($p3, cyapa_remove_sysfs_group, $p41);
    call {:si_unique_call 966} {:cexpr "error"} boogie_si_record_i32($i42);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i45 := cyapa_prepare_wakeup_controls($p17);
    call {:si_unique_call 970} {:cexpr "error"} boogie_si_record_i32($i45);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i47 := cyapa_start_runtime($p17);
    call {:si_unique_call 973} {:cexpr "error"} boogie_si_record_i32($i47);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p17);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i52 := ldv_devm_request_threaded_irq_39($p3, $i50, $0.ref, cyapa_irq, 8194, .str.24, $p51);
    call {:si_unique_call 976} {:cexpr "error"} boogie_si_record_i32($i52);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} disable_irq($i55);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p17, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb32:
    assume $i58 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i59 := cyapa_create_input_dev($p17);
    call {:si_unique_call 980} {:cexpr "error"} boogie_si_record_i32($i59);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} dev_err.ref.ref.i32($p3, .str, $i59);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i7 := $i59;
    goto $bb3;

  $bb29:
    assume $i53 == 1;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} dev_err.ref.ref.i32($p3, .str.46, $i52);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i7 := $i52;
    goto $bb3;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} dev_err.ref.ref.i32($p3, .str.45, $i47);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i7 := $i47;
    goto $bb3;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} dev_err.ref.ref.i32($p3, .str.44, $i45);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i7 := $i45;
    goto $bb3;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p17);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} cyapa_remove_sysfs_group($p44);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} dev_err.ref.ref.i32($p3, .str.43, $i42);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i7 := $i42;
    goto $bb3;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} dev_err.ref.ref.i32($p3, .str.42, $i39);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i7 := $i39;
    goto $bb3;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} dev_err.ref.ref($p3, .str.41);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 1104)), $mul.ref(57, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} dev_err.ref.ref($p3, .str.39);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const cyapa_check_adapter_functionality: ref;

axiom cyapa_check_adapter_functionality == $sub.ref(0, 398086);

procedure cyapa_check_adapter_functionality($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $M.24, $M.25, $M.39, $M.32, $CurrAddr, $M.20, $M.21, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation cyapa_check_adapter_functionality($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(24, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i3 := i2c_check_functionality($p2, 1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(24, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i11 := i2c_check_functionality($p10, 253231104);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 986} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i8);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 2);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 987} {:cexpr "ret"} boogie_si_record_i8($i15);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32(0);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 984} {:cexpr "ret"} boogie_si_record_i8($i7);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const i2c_smbus_xfer: ref;

axiom i2c_smbus_xfer == $sub.ref(0, 399118);

procedure i2c_smbus_xfer($p0: ref, $i1: i16, $i2: i16, $i3: i8, $i4: i8, $i5: i32, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_xfer($p0: ref, $i1: i16, $i2: i16, $i3: i8, $i4: i8, $i5: i32, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} {:cexpr "i2c_smbus_xfer:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 989} {:cexpr "i2c_smbus_xfer:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 990} {:cexpr "i2c_smbus_xfer:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 991} {:cexpr "i2c_smbus_xfer:arg:arg4"} boogie_si_record_i8($i4);
    call {:si_unique_call 992} {:cexpr "i2c_smbus_xfer:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 994} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 400150);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 996} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const i2c_set_clientdata: ref;

axiom i2c_set_clientdata == $sub.ref(0, 401182);

procedure i2c_set_clientdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2c_set_clientdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} dev_set_drvdata($p2, $p1);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 402214);

procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const cyapa_initialize: ref;

axiom cyapa_initialize == $sub.ref(0, 403246);

procedure cyapa_initialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, $M.23, $M.24, $M.25, $M.39, $M.20, $M.21, $M.32, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation cyapa_initialize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i19: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __mutex_init($p4, .str.47, $p1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 20);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i10 := cyapa_pwr_cmd_to_sleep_time($i9);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(60, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(64, 1)));
    call {:si_unique_call 1002} $i13 := devirtbounce.4($p12, $p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 1003} {:cexpr "error"} boogie_si_record_i32($i13);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i20 := cyapa_detect($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 1007} {:cexpr "error"} boogie_si_record_i32($i20);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 1008} vslice_dummy_var_111 := devirtbounce.5($p28, $p0, 0, 0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb6;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(64, 1)));
    call {:si_unique_call 1004} $i16 := devirtbounce.4($p15, $p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 1005} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const sysfs_create_group: ref;

axiom sysfs_create_group == $sub.ref(0, 404278);

procedure sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1009} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cyapa_remove_sysfs_group: ref;

axiom cyapa_remove_sysfs_group == $sub.ref(0, 405310);

procedure cyapa_remove_sysfs_group($p0: ref);
  free requires assertsPassed;



implementation cyapa_remove_sysfs_group($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} sysfs_remove_group($p5, cyapa_sysfs_group);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    return;
}



const devm_add_action: ref;

axiom devm_add_action == $sub.ref(0, 406342);

procedure devm_add_action($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_add_action($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1012} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1013} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_prepare_wakeup_controls: ref;

axiom cyapa_prepare_wakeup_controls == $sub.ref(0, 407374);

procedure cyapa_prepare_wakeup_controls($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_prepare_wakeup_controls($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i4 := device_can_wakeup($p3);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1015} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i9 := sysfs_merge_group($p8, cyapa_power_wakeup_group);
    call {:si_unique_call 1017} {:cexpr "error"} boogie_si_record_i32($i9);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i13 := devm_add_action($p3, cyapa_remove_power_wakeup_group, $p12);
    call {:si_unique_call 1020} {:cexpr "error"} boogie_si_record_i32($i13);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} cyapa_remove_power_wakeup_group($p15);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} dev_err.ref.ref.i32($p3, .str.55, $i13);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb5;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} dev_err.ref.ref.i32($p3, .str.54, $i9);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb5;
}



const cyapa_start_runtime: ref;

axiom cyapa_start_runtime == $sub.ref(0, 408406);

procedure cyapa_start_runtime($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cyapa_start_runtime($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(62, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 12);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(62, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i9 := cyapa_pwr_cmd_to_sleep_time($i8);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(64, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i12 := sysfs_merge_group($p11, cyapa_power_runtime_group);
    call {:si_unique_call 1025} {:cexpr "error"} boogie_si_record_i32($i12);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i16 := devm_add_action($p3, cyapa_remove_power_runtime_group, $p15);
    call {:si_unique_call 1028} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} pm_runtime_set_suspended($p3);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} pm_runtime_use_autosuspend($p3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} pm_runtime_set_autosuspend_delay($p3, 2000);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} cyapa_remove_power_runtime_group($p18);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} dev_err.ref.ref.i32($p3, .str.58, $i16);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} dev_err.ref.ref.i32($p3, .str.57, $i12);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;
}



const cyapa_irq: ref;

axiom cyapa_irq == $sub.ref(0, 409438);

procedure cyapa_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.0, $M.10, $M.39, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr, $M.32, $M.20, $M.21, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation cyapa_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} {:cexpr "cyapa_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_112 := pm_runtime_get_sync($p5);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i7 := device_may_wakeup($p5);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1037} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1039} $i14 := devirtbounce.6($p13, $p2);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1040} {:cexpr "tmp___2"} boogie_si_record_i8($i15);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} pm_runtime_mark_last_busy($p5);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_114 := pm_runtime_put_sync_autosuspend($p5);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i36 := ldv_mutex_trylock_17($p35);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 1047} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_116 := cyapa_reinitialize($p2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_mutex_unlock_18($p44);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 1048} vslice_dummy_var_115 := devirtbounce.7($p41, $p2, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 1044} $i33 := devirtbounce.4($p32, $p2);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 1045} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 1041} vslice_dummy_var_113 := devirtbounce.7($p24, $p2, $0.ref, $0.ref, $0.ref);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} pm_wakeup_event($p5, 0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_devm_request_threaded_irq_39: ref;

axiom ldv_devm_request_threaded_irq_39 == $sub.ref(0, 410470);

procedure ldv_devm_request_threaded_irq_39($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52;



implementation ldv_devm_request_threaded_irq_39($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "ldv_devm_request_threaded_irq_39:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1052} {:cexpr "ldv_devm_request_threaded_irq_39:arg:ldv_func_arg5"} boogie_si_record_i64($i4);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i7 := devm_request_threaded_irq($p0, $i1, $p2, $p3, $i4, $p5, $p6);
    call {:si_unique_call 1054} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i8 := reg_check_2($p2, $p3);
    call {:si_unique_call 1056} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i7, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} activate_suitable_irq_2($p0, $i1, $p6);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const disable_irq: ref;

axiom disable_irq == $sub.ref(0, 411502);

procedure disable_irq($i0: i32);
  free requires assertsPassed;



implementation disable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} {:cexpr "disable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_create_input_dev: ref;

axiom cyapa_create_input_dev == $sub.ref(0, 412534);

procedure cyapa_create_input_dev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cyapa_create_input_dev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(100, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(104, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p11 := devm_input_allocate_device($p3);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(0, 1));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str.4);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(24, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(8, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p15);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, 24);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(24, 1)), $mul.ref(6, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(816, 1)), $mul.ref(0, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(536, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, cyapa_open);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(544, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, cyapa_close);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} input_set_drvdata($p11, $p31);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(40, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __set_bit(3, $p33);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} input_set_abs_params($p11, 53, 0, $i35, 0, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} input_set_abs_params($p11, 54, 0, $i37, 0, 0);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(128, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} input_set_abs_params($p11, 58, 0, $i39, 0, 0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i32($i42, 3);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(100, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i52 := $sdiv.i32($i49, $i51);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} input_abs_set_res($p11, 53, $i52);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(104, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i54, $i56);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} input_abs_set_res($p11, 54, $i57);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 8);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 32);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 16);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 8);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i85 := input_mt_init_slots($p11, 15, 5);
    call {:si_unique_call 1078} {:cexpr "error"} boogie_si_record_i32($i85);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i87 := input_register_device($p11);
    call {:si_unique_call 1081} {:cexpr "error"} boogie_si_record_i32($i87);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p11);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb32:
    assume $i88 == 1;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} dev_err.ref.ref.i32($p3, .str.6, $i87);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i10 := $i87;
    goto $bb6;

  $bb29:
    assume $i86 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} dev_err.ref.ref.i32($p3, .str.5, $i85);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i10 := $i85;
    goto $bb6;

  $bb26:
    assume $i82 == 1;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(32, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __set_bit(2, $p84);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(48, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __set_bit(273, $p78);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(48, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __set_bit(274, $p71);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p11, $mul.ref(0, 2296)), $mul.ref(48, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __set_bit(272, $p64);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} input_set_abs_params($p11, 50, 0, 255, 0, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} input_set_abs_params($p11, 51, 0, 255, 0, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} input_set_abs_params($p11, 48, 0, 255, 0, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} input_set_abs_params($p11, 49, 0, 255, 0, 0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} input_set_abs_params($p11, 52, $sub.i32(0, 127), 127, 0, 0);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} dev_err.ref.ref($p3, .str.3);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const devm_input_allocate_device: ref;

axiom devm_input_allocate_device == $sub.ref(0, 413566);

procedure devm_input_allocate_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_input_allocate_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p1 := external_alloc();
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cyapa_open: ref;

axiom cyapa_open == $sub.ref(0, 414598);

procedure cyapa_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.20, $M.21, assertsPassed, $CurrAddr, $M.32, $M.10, $M.22, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.26;



implementation cyapa_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i20: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p38: ref;
  var $i19: i32;
  var $p39: ref;
  var $i8: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p1 := input_get_drvdata($p0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i6 := ldv_mutex_lock_interruptible_13($p5);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 1086} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i21 := cyapa_reinitialize($p2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 1090} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i22 == 1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i21, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 11);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i19 := $i27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_mutex_unlock_14($p39);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i27 := $i21;
    goto $bb19;

  $bb15:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} enable_irq($i29);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i31 := pm_runtime_enabled($p30);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 1095} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb9;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_117 := pm_runtime_set_active($p36);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} pm_runtime_enable($p38);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb23;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb13;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1087} $i16 := devirtbounce.5($p15, $p2, $sub.i8(0, 4), 0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 1088} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb11;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} dev_warn.ref.ref.i32($p18, .str.7, $i16);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb9;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const cyapa_close: ref;

axiom cyapa_close == $sub.ref(0, 415630);

procedure cyapa_close($p0: ref);



const input_set_drvdata: ref;

axiom input_set_drvdata == $sub.ref(0, 416662);

procedure input_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation input_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(816, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 417694);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1100} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    return;
}



const input_set_abs_params: ref;

axiom input_set_abs_params == $sub.ref(0, 418726);

procedure input_set_abs_params($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;



implementation input_set_abs_params($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "input_set_abs_params:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1102} {:cexpr "input_set_abs_params:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1103} {:cexpr "input_set_abs_params:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1104} {:cexpr "input_set_abs_params:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1105} {:cexpr "input_set_abs_params:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    return;
}



const input_abs_set_res: ref;

axiom input_abs_set_res == $sub.ref(0, 419758);

procedure input_abs_set_res($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation input_abs_set_res($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} {:cexpr "input_abs_set_res:arg:axis"} boogie_si_record_i32($i1);
    call {:si_unique_call 1107} {:cexpr "input_abs_set_res:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} input_alloc_absinfo($p0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(408, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(408, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 24)), $mul.ref(20, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i2);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const input_mt_init_slots: ref;

axiom input_mt_init_slots == $sub.ref(0, 420790);

procedure input_mt_init_slots($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation input_mt_init_slots($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} {:cexpr "input_mt_init_slots:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1110} {:cexpr "input_mt_init_slots:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const input_register_device: ref;

axiom input_register_device == $sub.ref(0, 421822);

procedure input_register_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation input_register_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const input_alloc_absinfo: ref;

axiom input_alloc_absinfo == $sub.ref(0, 422854);

procedure input_alloc_absinfo($p0: ref);
  free requires assertsPassed;



implementation input_alloc_absinfo($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 423886);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    return;
}



const input_get_drvdata: ref;

axiom input_get_drvdata == $sub.ref(0, 424918);

procedure input_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation input_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2296)), $mul.ref(816, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_15: ref;

axiom ldv_mutex_lock_15 == $sub.ref(0, 425950);

procedure ldv_mutex_lock_15($p0: ref);



const pm_runtime_enabled: ref;

axiom pm_runtime_enabled == $sub.ref(0, 426982);

procedure pm_runtime_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pm_runtime_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1048, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pm_runtime_disable: ref;

axiom pm_runtime_disable == $sub.ref(0, 428014);

procedure pm_runtime_disable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __pm_runtime_disable($p0, 1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_suspended: ref;

axiom pm_runtime_set_suspended == $sub.ref(0, 429046);

procedure pm_runtime_set_suspended($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_set_suspended($p0: ref)
{
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_118 := __pm_runtime_set_status($p0, 2);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 430078);

procedure ldv_mutex_unlock_16($p0: ref);



const ldv_mutex_unlock_state_sync_lock_of_cyapa: ref;

axiom ldv_mutex_unlock_state_sync_lock_of_cyapa == $sub.ref(0, 431110);

procedure ldv_mutex_unlock_state_sync_lock_of_cyapa($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_state_sync_lock_of_cyapa($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1119} {:cexpr "ldv_mutex_state_sync_lock_of_cyapa"} boogie_si_record_i32(1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_error();
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const __pm_runtime_set_status: ref;

axiom __pm_runtime_set_status == $sub.ref(0, 432142);

procedure __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} {:cexpr "__pm_runtime_set_status:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_disable: ref;

axiom __pm_runtime_disable == $sub.ref(0, 433174);

procedure __pm_runtime_disable($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_disable($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} {:cexpr "__pm_runtime_disable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_state_sync_lock_of_cyapa: ref;

axiom ldv_mutex_lock_state_sync_lock_of_cyapa == $sub.ref(0, 434206);

procedure ldv_mutex_lock_state_sync_lock_of_cyapa($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_state_sync_lock_of_cyapa($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1125} {:cexpr "ldv_mutex_state_sync_lock_of_cyapa"} boogie_si_record_i32(2);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_error();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 435238);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_13: ref;

axiom ldv_mutex_lock_interruptible_13 == $sub.ref(0, 436270);

procedure ldv_mutex_lock_interruptible_13($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_13($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 1129} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const cyapa_reinitialize: ref;

axiom cyapa_reinitialize == $sub.ref(0, 437302);

procedure cyapa_reinitialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.32, $M.10, $CurrAddr, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.39, $M.22, $M.26, assertsPassed;



implementation cyapa_reinitialize($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i19: i32;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i1;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i6 := pm_runtime_enabled($p3);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i17 := cyapa_detect($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 1135} {:cexpr "error"} boogie_si_record_i32($i17);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p5);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := $i17;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i19 := $i27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p5);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i29 == 1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 2296)), $mul.ref(808, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i32 == 1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i19, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb29:
    assume $i41 == 1;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_121 := pm_runtime_set_active($p3);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} pm_runtime_enable($p3);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1139} vslice_dummy_var_120 := devirtbounce.5($p39, $p0, 0, 0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb21;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i25 := cyapa_create_input_dev($p0);
    call {:si_unique_call 1137} {:cexpr "error"} boogie_si_record_i32($i25);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb19;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} dev_err.ref.ref.i32($p3, .str, $i25);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb9;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb9;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1133} vslice_dummy_var_119 := devirtbounce.5($p15, $p0, $sub.i8(0, 4), 0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} pm_runtime_disable($p3);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 438334);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_active: ref;

axiom pm_runtime_set_active == $sub.ref(0, 439366);

procedure pm_runtime_set_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_set_active($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i1 := __pm_runtime_set_status($p0, 0);
    call {:si_unique_call 1144} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_enable: ref;

axiom pm_runtime_enable == $sub.ref(0, 440398);

procedure pm_runtime_enable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_14: ref;

axiom ldv_mutex_unlock_14 == $sub.ref(0, 441430);

procedure ldv_mutex_unlock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} mutex_unlock($p0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const cyapa_detect: ref;

axiom cyapa_detect == $sub.ref(0, 442462);

procedure cyapa_detect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.10, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.39, $CurrAddr, $M.26, $M.20, $M.21, assertsPassed, $M.22;



implementation cyapa_detect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i4 := cyapa_check_is_operational($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 1148} {:cexpr "error"} boogie_si_record_i32($i4);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i4, $sub.i32(0, 110));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} dev_err.ref.ref.i32($p3, .str.2, $i4);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i11 := $i4;
    goto $bb10;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, $sub.i32(0, 19));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i8 := cyapa_is_bootloader_mode($p0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1150} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} dev_warn.ref.ref($p3, .str.1);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb10;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const cyapa_check_is_operational: ref;

axiom cyapa_check_is_operational == $sub.ref(0, 443494);

procedure cyapa_check_is_operational($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.10, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.39, $CurrAddr, $M.26, $M.20, $M.21, assertsPassed, $M.22;



implementation cyapa_check_is_operational($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i1 := cyapa_poll_state($p0, 4000);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 1154} {:cexpr "error"} boogie_si_record_i32($i1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, cyapa_gen5_ops);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1155} $i16 := devirtbounce.4($p15, $p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 1156} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i3 := $i16;
    goto $bb3;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i18 := cyapa_is_operational_mode($p0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 1158} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, cyapa_gen3_ops);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const cyapa_is_bootloader_mode: ref;

axiom cyapa_is_bootloader_mode == $sub.ref(0, 444526);

procedure cyapa_is_bootloader_mode($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_is_bootloader_mode($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 5);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 3);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 5);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;
}



const cyapa_is_operational_mode: ref;

axiom cyapa_is_operational_mode == $sub.ref(0, 445558);

procedure cyapa_is_operational_mode($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cyapa_is_operational_mode($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 5);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 4);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 6);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb6;
}



const ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa: ref;

axiom ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa == $sub.ref(0, 446590);

procedure ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i3 := ldv_undef_int();
    call {:si_unique_call 1161} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_mutex_state_sync_lock_of_cyapa"} boogie_si_record_i32(2);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} ldv_error();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 447622);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1163} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1164} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 448654);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1166} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1167} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const reg_check_2: ref;

axiom reg_check_2 == $sub.ref(0, 449686);

procedure reg_check_2($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_2($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, $p2i.ref.i64(cyapa_irq));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;
}



const activate_suitable_irq_2: ref;

axiom activate_suitable_irq_2 == $sub.ref(0, 450718);

procedure activate_suitable_irq_2($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52;



implementation activate_suitable_irq_2($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} {:cexpr "activate_suitable_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $M.44;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.48;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.52;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.54 := $i1;
    call {:si_unique_call 1176} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1177} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.50 := $i1;
    call {:si_unique_call 1174} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $M.51 := $p2;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1175} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.46 := $i1;
    call {:si_unique_call 1172} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $M.47 := $p2;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1173} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $M.42 := $i1;
    call {:si_unique_call 1170} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.43 := $p2;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1171} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 451750);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_may_wakeup: ref;

axiom device_may_wakeup == $sub.ref(0, 452782);

procedure device_may_wakeup($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation device_may_wakeup($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(524, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(200, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const pm_wakeup_event: ref;

axiom pm_wakeup_event == $sub.ref(0, 453814);

procedure pm_wakeup_event($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_wakeup_event($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} {:cexpr "pm_wakeup_event:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_trylock_17: ref;

axiom ldv_mutex_trylock_17 == $sub.ref(0, 454846);

procedure ldv_mutex_trylock_17($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_trylock_17($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i1 := mutex_trylock($p0);
    call {:si_unique_call 1182} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i2 := ldv_mutex_trylock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 1184} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_18: ref;

axiom ldv_mutex_unlock_18 == $sub.ref(0, 455878);

procedure ldv_mutex_unlock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} mutex_unlock($p0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 456910);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_sync_autosuspend: ref;

axiom pm_runtime_put_sync_autosuspend == $sub.ref(0, 457942);

procedure pm_runtime_put_sync_autosuspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put_sync_autosuspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i1 := __pm_runtime_suspend($p0, 12);
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_suspend: ref;

axiom __pm_runtime_suspend == $sub.ref(0, 458974);

procedure __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1189} {:cexpr "__pm_runtime_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1190} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1191} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 460006);

procedure mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_state_sync_lock_of_cyapa: ref;

axiom ldv_mutex_trylock_state_sync_lock_of_cyapa == $sub.ref(0, 461038);

procedure ldv_mutex_trylock_state_sync_lock_of_cyapa($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_trylock_state_sync_lock_of_cyapa($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i1 := $M.39;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i3 := ldv_undef_int();
    call {:si_unique_call 1196} {:cexpr "is_mutex_held_by_another_thread"} boogie_si_record_i32($i3);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1197} {:cexpr "ldv_mutex_state_sync_lock_of_cyapa"} boogie_si_record_i32(2);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_error();
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 462070);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1199} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1200} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sysfs_merge_group: ref;

axiom sysfs_merge_group == $sub.ref(0, 463102);

procedure sysfs_merge_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_merge_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cyapa_remove_power_runtime_group: ref;

axiom cyapa_remove_power_runtime_group == $sub.ref(0, 464134);

procedure cyapa_remove_power_runtime_group($p0: ref);
  free requires assertsPassed;



implementation cyapa_remove_power_runtime_group($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} sysfs_unmerge_group($p5, cyapa_power_runtime_group);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_use_autosuspend: ref;

axiom pm_runtime_use_autosuspend == $sub.ref(0, 465166);

procedure pm_runtime_use_autosuspend($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_use_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} __pm_runtime_use_autosuspend($p0, 1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 466198);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_use_autosuspend: ref;

axiom __pm_runtime_use_autosuspend == $sub.ref(0, 467230);

procedure __pm_runtime_use_autosuspend($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_use_autosuspend($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "__pm_runtime_use_autosuspend:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_unmerge_group: ref;

axiom sysfs_unmerge_group == $sub.ref(0, 468262);

procedure sysfs_unmerge_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_unmerge_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    return;
}



const device_can_wakeup: ref;

axiom device_can_wakeup == $sub.ref(0, 469294);

procedure device_can_wakeup($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation device_can_wakeup($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(4, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cyapa_remove_power_wakeup_group: ref;

axiom cyapa_remove_power_wakeup_group == $sub.ref(0, 470326);

procedure cyapa_remove_power_wakeup_group($p0: ref);
  free requires assertsPassed;



implementation cyapa_remove_power_wakeup_group($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} sysfs_unmerge_group($p5, cyapa_power_wakeup_group);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_group: ref;

axiom sysfs_remove_group == $sub.ref(0, 471358);

procedure sysfs_remove_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 472390);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1209} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p3 := external_alloc();
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i2c_check_functionality: ref;

axiom i2c_check_functionality == $sub.ref(0, 473422);

procedure i2c_check_functionality($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $M.24, $M.25, $M.39, $M.32, $CurrAddr, $M.20, $M.21, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation i2c_check_functionality($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} {:cexpr "i2c_check_functionality:arg:func"} boogie_si_record_i32($i1);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i2 := i2c_get_functionality($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 1213} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $i1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const i2c_get_functionality: ref;

axiom i2c_get_functionality == $sub.ref(0, 474454);

procedure i2c_get_functionality($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $M.24, $M.25, $M.39, $M.32, $CurrAddr, $M.20, $M.21, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation i2c_get_functionality($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1944)), $mul.ref(16, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 1214} $i5 := devirtbounce.9($p4, $p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 1215} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const cyapa_suspend: ref;

axiom cyapa_suspend == $sub.ref(0, 475486);

procedure cyapa_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, assertsPassed, $M.20, $M.21, $CurrAddr, $M.22;



implementation cyapa_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $p46: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i6 := ldv_mutex_lock_interruptible_40($p5);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 1218} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i9 := pm_runtime_enabled($p0);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1220} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(1456, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} disable_irq($i13);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i37 := device_may_wakeup($p0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 1230} {:cexpr "tmp___3"} boogie_si_record_i8($i38);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} ldv_mutex_unlock_41($p46);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(1456, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i42 := enable_irq_wake($i41);
    call {:si_unique_call 1232} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(56, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i43);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i45);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i17 := device_may_wakeup($p0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1224} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 1225} {:cexpr "power_mode"} boogie_si_record_i8($i24);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i24);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(60, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    call {:si_unique_call 1226} $i35 := devirtbounce.5($p28, $p4, $i30, $i34);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 1227} {:cexpr "error"} boogie_si_record_i32($i35);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} dev_err.ref.ref.i32($p0, .str.10, $i35);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb12;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} pm_runtime_disable($p0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const cyapa_resume: ref;

axiom cyapa_resume == $sub.ref(0, 476518);

procedure cyapa_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, assertsPassed, $M.20, $M.21, $M.32, $M.10, $CurrAddr, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.22, $M.26;



implementation cyapa_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 1488));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} ldv_mutex_lock_42($p5);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i6 := device_may_wakeup($p0);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1237} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i16 := cyapa_reinitialize($p4);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 1240} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(1456, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} enable_irq($i19);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} ldv_mutex_unlock_43($p20);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} dev_warn.ref.ref.i32($p0, .str.9, $i16);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(56, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 1488)), $mul.ref(1456, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_122 := disable_irq_wake($i13);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(56, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const cyapa_runtime_suspend: ref;

axiom cyapa_runtime_suspend == $sub.ref(0, 477550);

procedure cyapa_runtime_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_runtime_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(62, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(64, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 1245} $i15 := devirtbounce.5($p6, $p2, $i10, $i14);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 1246} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} dev_warn.ref.ref.i32($p0, .str.11, $i15);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const cyapa_runtime_resume: ref;

axiom cyapa_runtime_resume == $sub.ref(0, 478582);

procedure cyapa_runtime_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_runtime_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1249} $i7 := devirtbounce.5($p6, $p2, $sub.i8(0, 4), 0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 1250} {:cexpr "error"} boogie_si_record_i32($i7);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} dev_warn.ref.ref.i32($p0, .str.8, $i7);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const i2c_get_clientdata: ref;

axiom i2c_get_clientdata == $sub.ref(0, 479614);

procedure i2c_get_clientdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_clientdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_42: ref;

axiom ldv_mutex_lock_42 == $sub.ref(0, 480646);

procedure ldv_mutex_lock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} ldv_mutex_lock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} mutex_lock($p0);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const disable_irq_wake: ref;

axiom disable_irq_wake == $sub.ref(0, 481678);

procedure disable_irq_wake($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation disable_irq_wake($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "disable_irq_wake:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i1 := irq_set_irq_wake($i0, 0);
    call {:si_unique_call 1257} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 482710);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} mutex_unlock($p0);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const irq_set_irq_wake: ref;

axiom irq_set_irq_wake == $sub.ref(0, 483742);

procedure irq_set_irq_wake($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_wake($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1260} {:cexpr "irq_set_irq_wake:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1261} {:cexpr "irq_set_irq_wake:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1263} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_interruptible_40: ref;

axiom ldv_mutex_lock_interruptible_40 == $sub.ref(0, 484774);

procedure ldv_mutex_lock_interruptible_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1265} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 1267} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const enable_irq_wake: ref;

axiom enable_irq_wake == $sub.ref(0, 485806);

procedure enable_irq_wake($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation enable_irq_wake($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "enable_irq_wake:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i1 := irq_set_irq_wake($i0, 1);
    call {:si_unique_call 1270} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 486838);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} mutex_unlock($p0);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const cyapa_show_fm_ver: ref;

axiom cyapa_show_fm_ver == $sub.ref(0, 487870);

procedure cyapa_show_fm_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation cyapa_show_fm_ver($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i6 := ldv_mutex_lock_interruptible_27($p5);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 1275} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(86, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(87, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i16 := scnprintf.ref.i64.ref.i32.i32($p2, 4096, .str.20, $i12, $i15);
    call {:si_unique_call 1277} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} ldv_mutex_unlock_28($p17);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i16);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_27: ref;

axiom ldv_mutex_lock_interruptible_27 == $sub.ref(0, 488902);

procedure ldv_mutex_lock_interruptible_27($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_27($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1280} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 1282} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 489934);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} mutex_unlock($p0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const cyapa_show_product_id: ref;

axiom cyapa_show_product_id == $sub.ref(0, 490966);

procedure cyapa_show_product_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation cyapa_show_product_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i6 := ldv_mutex_lock_interruptible_29($p5);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 1287} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i12 := scnprintf.ref.i64.ref.ref($p2, 4096, .str.12, $p11);
    call {:si_unique_call 1289} {:cexpr "size"} boogie_si_record_i32($i12);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_mutex_unlock_30($p13);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_29: ref;

axiom ldv_mutex_lock_interruptible_29 == $sub.ref(0, 491998);

procedure ldv_mutex_lock_interruptible_29($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_29($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1292} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 1294} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_30: ref;

axiom ldv_mutex_unlock_30 == $sub.ref(0, 493030);

procedure ldv_mutex_unlock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} mutex_unlock($p0);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const cyapa_update_fw_store: ref;

axiom cyapa_update_fw_store == $sub.ref(0, 494062);

procedure cyapa_update_fw_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.39, $CurrAddr, assertsPassed, $M.20, $M.21, $M.10, $M.32, $M.23, $M.24, $M.25, $M.35, $M.36, $M.37, $M.38, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.22, $M.26;



implementation cyapa_update_fw_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $i9: i64;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p4 := $alloc($mul.ref(255, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1299} {:cexpr "cyapa_update_fw_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p6 := dev_get_drvdata($p0);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i3, 254);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 1302} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p10, $p2, $i3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i3, 1);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 255)), $mul.ref($i11, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 10);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 255)), $mul.ref($i3, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i27 := ldv_mutex_lock_interruptible_31($p26);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 1305} {:cexpr "error"} boogie_si_record_i32($i27);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i32 := cyapa_firmware($p7, $p31);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 1308} {:cexpr "error"} boogie_si_record_i32($i32);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.28);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.29);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.30);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.31);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1051);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 1311} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i50 := cyapa_reinitialize($p7);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 1313} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i32;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} ldv_mutex_unlock_32($p55);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i54, 0);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i58 := $i3;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i9 := $i58;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i54);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb28;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} dev_err.ref.ref.i32($p0, .str.32, $i50);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i32, 0);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i53 := $i50;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb25;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i53 := $i32;
    goto $bb24;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} __dynamic_dev_dbg.ref.ref.ref($p5, $p0, .str.31);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} dev_err.ref.ref.i32($p0, .str.27, $i32);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_123 := cyapa_reinitialize($p7);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i27);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i9 := $i30;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} input_unregister_device($p24);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i3, 1);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 255)), $mul.ref($i16, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} dev_err.ref.ref($p0, .str.26);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 22);
    goto $bb3;
}



const input_unregister_device: ref;

axiom input_unregister_device == $sub.ref(0, 495094);

procedure input_unregister_device($p0: ref);
  free requires assertsPassed;



implementation input_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_interruptible_31: ref;

axiom ldv_mutex_lock_interruptible_31 == $sub.ref(0, 496126);

procedure ldv_mutex_lock_interruptible_31($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_31($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1318} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 1320} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const cyapa_firmware: ref;

axiom cyapa_firmware == $sub.ref(0, 497158);

procedure cyapa_firmware($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, $M.23, $M.24, $M.25, $M.39, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.20, $M.21, $M.32, assertsPassed, $M.22, $M.35, $M.36, $M.37, $M.38, $M.26;



implementation cyapa_firmware($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i25: i32;
  var $i17: i32;
  var $p48: ref;
  var $i8: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1488)), $mul.ref(32, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i6 := request_firmware($p2, $p1, $p5);
    call {:si_unique_call 1323} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.56, $p2);
    call {:si_unique_call 1325} $i15 := devirtbounce.10($p13, $p0, $p14);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 1326} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_124 := pm_runtime_get_sync($p5);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} cyapa_enable_irq_for_cmd($p0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1331} $i23 := devirtbounce.4($p22, $p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 1332} {:cexpr "error"} boogie_si_record_i32($i23);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1336} $i30 := devirtbounce.4($p29, $p0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 1337} {:cexpr "error"} boogie_si_record_i32($i30);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.56, $p2);
    call {:si_unique_call 1339} $i38 := devirtbounce.10($p36, $p0, $p37);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1340} {:cexpr "error"} boogie_si_record_i32($i38);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.56, $p2);
    call {:si_unique_call 1342} $i46 := devirtbounce.10($p44, $p0, $p45);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1343} {:cexpr "error"} boogie_si_record_i32($i46);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i25 := $i46;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} cyapa_disable_irq_for_cmd($p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} pm_runtime_put_noidle($p5);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i17 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.56, $p2);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} release_firmware($p48);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i8 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} dev_err.ref.ref.i32($p5, .str.38, $i46);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i25 := $i46;
    goto $bb11;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} dev_err.ref.ref.i32($p5, .str.37, $i38);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i25 := $i38;
    goto $bb11;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} dev_err.ref.ref.i32($p5, .str.36, $i30);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb11;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} dev_err.ref.ref.i32($p5, .str.35, $i23);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb11;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} dev_err.ref.ref.ref($p5, .str.34, $p1);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb7;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} dev_err.ref.ref.ref.i32($p5, .str.33, $p1, $i6);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 498190);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 1346} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 499222);

procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_32: ref;

axiom ldv_mutex_unlock_32 == $sub.ref(0, 500254);

procedure ldv_mutex_unlock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} mutex_unlock($p0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 501286);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cyapa_enable_irq_for_cmd: ref;

axiom cyapa_enable_irq_for_cmd == $sub.ref(0, 502318);

procedure cyapa_enable_irq_for_cmd($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_enable_irq_for_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2296)), $mul.ref(808, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i9 == 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 4);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} enable_irq($i25);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1351} vslice_dummy_var_125 := devirtbounce.5($p16, $p0, $sub.i8(0, 4), 0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb7;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const cyapa_disable_irq_for_cmd: ref;

axiom cyapa_disable_irq_for_cmd == $sub.ref(0, 503350);

procedure cyapa_disable_irq_for_cmd($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_disable_irq_for_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2296)), $mul.ref(808, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 4);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 1354} vslice_dummy_var_126 := devirtbounce.5($p24, $p0, 0, 0);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb10;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1488)), $mul.ref(1456, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} disable_irq($i15);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const pm_runtime_put_noidle: ref;

axiom pm_runtime_put_noidle == $sub.ref(0, 504382);

procedure pm_runtime_put_noidle($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_put_noidle($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(528, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_127 := atomic_add_unless($p2, $sub.i32(0, 1), 0);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 505414);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 506446);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 1357} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 507478);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 1361} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i3 := atomic_read($p0);
    call {:si_unique_call 1363} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1365} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 1367} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 508510);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1373} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 1374} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1375} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1376} $i4 := devirtbounce.11(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 1377} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cyapa_show_baseline: ref;

axiom cyapa_show_baseline == $sub.ref(0, 509542);

procedure cyapa_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, assertsPassed, $M.20, $M.21, $M.27, $M.15, $M.13, $M.14, $M.29, $M.28, $M.17, $M.16, $M.18, $CurrAddr, $M.30, $M.31, $M.22;



implementation cyapa_show_baseline($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i6 := ldv_mutex_lock_interruptible_35($p5);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1380} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1381} {:cexpr "error"} boogie_si_record_i64($i7);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 16);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} ldv_mutex_unlock_36($p19);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} cyapa_enable_irq_for_cmd($p4);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1383} $i17 := devirtbounce.12($p16, $p0, $p1, $p2);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 1384} {:cexpr "error"} boogie_si_record_i64($i17);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} cyapa_disable_irq_for_cmd($p4);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb7;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_35: ref;

axiom ldv_mutex_lock_interruptible_35 == $sub.ref(0, 510574);

procedure ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_35($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1388} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 1390} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_36: ref;

axiom ldv_mutex_unlock_36 == $sub.ref(0, 511606);

procedure ldv_mutex_unlock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} mutex_unlock($p0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const cyapa_calibrate_store: ref;

axiom cyapa_calibrate_store == $sub.ref(0, 512638);

procedure cyapa_calibrate_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, assertsPassed, $M.20, $M.21, $M.27, $M.28, $CurrAddr, $M.10, $M.22, $M.32, $M.23, $M.24, $M.25, $M.35, $M.36, $M.37, $M.38, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.26;



implementation cyapa_calibrate_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} {:cexpr "cyapa_calibrate_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p4 := dev_get_drvdata($p0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i7 := ldv_mutex_lock_interruptible_33($p6);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 1396} {:cexpr "error"} boogie_si_record_i32($i7);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(7, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 16);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_mutex_unlock_34($p21);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 0);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i24 := $i3;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i20);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb10;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} cyapa_enable_irq_for_cmd($p5);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1398} $i18 := devirtbounce.13($p17, $p0, $p1, $p2, $i3);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 1399} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1400} {:cexpr "error"} boogie_si_record_i32($i19);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} cyapa_disable_irq_for_cmd($p5);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_33: ref;

axiom ldv_mutex_lock_interruptible_33 == $sub.ref(0, 513670);

procedure ldv_mutex_lock_interruptible_33($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_33($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1404} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 1406} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_34: ref;

axiom ldv_mutex_unlock_34 == $sub.ref(0, 514702);

procedure ldv_mutex_unlock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} mutex_unlock($p0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const cyapa_show_mode: ref;

axiom cyapa_show_mode == $sub.ref(0, 515734);

procedure cyapa_show_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation cyapa_show_mode($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i6 := ldv_mutex_lock_interruptible_37($p5);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    call {:si_unique_call 1411} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p10 := cyapa_state_to_string($p4);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i14 := scnprintf.ref.i64.ref.i32.ref($p2, 4096, .str.13, $i13, $p10);
    call {:si_unique_call 1414} {:cexpr "size"} boogie_si_record_i32($i14);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_mutex_unlock_38($p15);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_37: ref;

axiom ldv_mutex_lock_interruptible_37 == $sub.ref(0, 516766);

procedure ldv_mutex_lock_interruptible_37($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_37($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1417} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 1419} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const cyapa_state_to_string: ref;

axiom cyapa_state_to_string == $sub.ref(0, 517798);

procedure cyapa_state_to_string($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation cyapa_state_to_string($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p10 := .str.19;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := .str.18;
    goto $bb18;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p10 := .str.17;
    goto $bb18;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p10 := .str.16;
    goto $bb18;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p10 := .str.15;
    goto $bb18;

  $bb12:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p10 := .str.14;
    goto $bb18;
}



const ldv_mutex_unlock_38: ref;

axiom ldv_mutex_unlock_38 == $sub.ref(0, 518830);

procedure ldv_mutex_unlock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} mutex_unlock($p0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const cyapa_show_suspend_scanrate: ref;

axiom cyapa_show_suspend_scanrate == $sub.ref(0, 519862);

procedure cyapa_show_suspend_scanrate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation cyapa_show_suspend_scanrate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i16;
  var $i29: i32;
  var $i31: i32;
  var $i30: i32;
  var $i32: i32;
  var $i20: i32;
  var $i33: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i6 := ldv_mutex_lock_interruptible_19($p5);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    call {:si_unique_call 1424} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 1425} {:cexpr "pwr_cmd"} boogie_si_record_i8($i11);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(60, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    call {:si_unique_call 1426} {:cexpr "sleep_time"} boogie_si_record_i16($i13);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_mutex_unlock_20($p14);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i11);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 3);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i13);
    call {:si_unique_call 1435} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i30 := $i31;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i32 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.23, $i30);
    call {:si_unique_call 1437} {:cexpr "len"} boogie_si_record_i32($i32);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i20 := $i32;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i20);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i11);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i28 := cyapa_pwr_cmd_to_sleep_time($i27);
    call {:si_unique_call 1433} {:cexpr "tmp___0"} boogie_si_record_i16($i28);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    call {:si_unique_call 1434} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb17;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i19 := scnprintf.ref.i64.ref.ref($p2, 4096, .str.12, .str.21);
    call {:si_unique_call 1429} {:cexpr "len"} boogie_si_record_i32($i19);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb13;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i21 := scnprintf.ref.i64.ref.ref($p2, 4096, .str.12, .str.22);
    call {:si_unique_call 1431} {:cexpr "len"} boogie_si_record_i32($i21);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb13;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const cyapa_update_suspend_scanrate: ref;

axiom cyapa_update_suspend_scanrate == $sub.ref(0, 520894);

procedure cyapa_update_suspend_scanrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.39, $CurrAddr, assertsPassed;



implementation cyapa_update_suspend_scanrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i29: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i8;
  var $p38: ref;
  var $i39: i64;
  var $i21: i64;
  var $i16: i64;
  var $p40: ref;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1439} {:cexpr "cyapa_update_suspend_scanrate:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i8 := ldv_mutex_lock_interruptible_21($p7);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 1442} {:cexpr "error"} boogie_si_record_i32($i8);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i12 := sysfs_streq($p2, .str.21);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1444} {:cexpr "tmp___2"} boogie_si_record_i8($i13);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i17 := sysfs_streq($p2, .str.22);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1446} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i22 := kstrtou16($p2, 10, $p4);
    call {:si_unique_call 1449} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i39 := $sub.i64(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_mutex_unlock_22($p40);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.58, $p4);
    call {:si_unique_call 1450} {:cexpr "__min1"} boogie_si_record_i16($i24);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32(1000);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, $i26);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32(1000);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i29 := $i30;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i29);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(60, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i31);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(60, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i37 := cyapa_sleep_time_to_pwr_cmd($i36);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i39 := $i3;
    goto $bb16;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i24);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb15;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i21 := $i3;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 4);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_21: ref;

axiom ldv_mutex_lock_interruptible_21 == $sub.ref(0, 521926);

procedure ldv_mutex_lock_interruptible_21($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_21($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 1455} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const sysfs_streq: ref;

axiom sysfs_streq == $sub.ref(0, 522958);

procedure sysfs_streq($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation sysfs_streq($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kstrtou16: ref;

axiom kstrtou16 == $sub.ref(0, 523990);

procedure kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} {:cexpr "kstrtou16:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_22: ref;

axiom ldv_mutex_unlock_22 == $sub.ref(0, 525022);

procedure ldv_mutex_unlock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} mutex_unlock($p0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_19: ref;

axiom ldv_mutex_lock_interruptible_19 == $sub.ref(0, 526054);

procedure ldv_mutex_lock_interruptible_19($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_19($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1464} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 1466} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_20: ref;

axiom ldv_mutex_unlock_20 == $sub.ref(0, 527086);

procedure ldv_mutex_unlock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} mutex_unlock($p0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const cyapa_show_rt_suspend_scanrate: ref;

axiom cyapa_show_rt_suspend_scanrate == $sub.ref(0, 528118);

procedure cyapa_show_rt_suspend_scanrate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation cyapa_show_rt_suspend_scanrate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i8;
  var $i21: i16;
  var $i22: i32;
  var $i24: i32;
  var $i23: i32;
  var $i25: i32;
  var $i26: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $i6 := ldv_mutex_lock_interruptible_23($p5);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 1471} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(62, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 1472} {:cexpr "pwr_cmd"} boogie_si_record_i8($i11);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(64, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    call {:si_unique_call 1473} {:cexpr "sleep_time"} boogie_si_record_i16($i13);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} ldv_mutex_unlock_24($p14);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i13);
    call {:si_unique_call 1478} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i25 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.23, $i23);
    call {:si_unique_call 1480} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i9 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i11);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i21 := cyapa_pwr_cmd_to_sleep_time($i20);
    call {:si_unique_call 1476} {:cexpr "tmp___0"} boogie_si_record_i16($i21);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    call {:si_unique_call 1477} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb7;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i6);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const cyapa_update_rt_suspend_scanrate: ref;

axiom cyapa_update_rt_suspend_scanrate == $sub.ref(0, 529150);

procedure cyapa_update_rt_suspend_scanrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.39, $CurrAddr, assertsPassed;



implementation cyapa_update_rt_suspend_scanrate($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i23: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i10: i64;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1482} {:cexpr "cyapa_update_rt_suspend_scanrate:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p2);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i3, 0);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i11 := kstrtou16($p2, 10, $p4);
    call {:si_unique_call 1486} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_128 := pm_runtime_get_sync($p0);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i15 := ldv_mutex_lock_interruptible_25($p14);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    call {:si_unique_call 1490} {:cexpr "error"} boogie_si_record_i32($i15);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.58, $p4);
    call {:si_unique_call 1491} {:cexpr "__min1"} boogie_si_record_i16($i18);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32(1000);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, $i20);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32(1000);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i23);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(64, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(64, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i31 := cyapa_sleep_time_to_pwr_cmd($i30);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(62, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_mutex_unlock_26($p33);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_129 := pm_runtime_put_sync_autosuspend($p0);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i18);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb16;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i15);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb6;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} dev_err.ref.ref($p0, .str.25);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} dev_err.ref.ref($p0, .str.25);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const ldv_mutex_lock_interruptible_25: ref;

axiom ldv_mutex_lock_interruptible_25 == $sub.ref(0, 530182);

procedure ldv_mutex_lock_interruptible_25($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_25($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1496} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    call {:si_unique_call 1498} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_26: ref;

axiom ldv_mutex_unlock_26 == $sub.ref(0, 531214);

procedure ldv_mutex_unlock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} mutex_unlock($p0);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_interruptible_23: ref;

axiom ldv_mutex_lock_interruptible_23 == $sub.ref(0, 532246);

procedure ldv_mutex_lock_interruptible_23($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_lock_interruptible_23($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1502} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i2 := ldv_mutex_lock_interruptible_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 1504} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 533278);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_mutex_unlock_state_sync_lock_of_cyapa($p0);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} mutex_unlock($p0);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const cyapa_gen3_bl_query_data: ref;

axiom cyapa_gen3_bl_query_data == $sub.ref(0, 534310);

procedure cyapa_gen3_bl_query_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_bl_query_data($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i3 := cyapa_i2c_reg_read_block($p0, 0, 16, $p2);
    call {:si_unique_call 1509} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1510} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 16);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.59, $p9);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 17);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.59, $p13);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(86, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.59, $p16);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(87, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb5;
}



const cyapa_gen3_bl_exit: ref;

axiom cyapa_gen3_bl_exit == $sub.ref(0, 535342);

procedure cyapa_gen3_bl_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_bl_exit($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $i1 := cyapa_i2c_reg_write_block($p0, 0, 11, bl_exit);
    call {:si_unique_call 1512} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    call {:si_unique_call 1513} {:cexpr "error"} boogie_si_record_i32($i2);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} usleep_range(50000, 100000);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i5 := cyapa_poll_state($p0, 4000);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1516} {:cexpr "error"} boogie_si_record_i32($i5);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 4);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 11);
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const cyapa_gen3_get_query_data: ref;

axiom cyapa_gen3_get_query_data == $sub.ref(0, 536374);

procedure cyapa_gen3_get_query_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_get_query_data($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i5: i32;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p1 := $alloc($mul.ref(27, $zext.i32.i64(1)));
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 4);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i7 := cyapa_read_block($p0, 5, $p6);
    call {:si_unique_call 1519} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 1520} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 27);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1521} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p13, $p14, 5, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(5, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 45);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(6, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(5, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 1522} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p19, $p21, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(12, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 45);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(13, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(11, 1));
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 1523} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p26, $p28, 2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(70, 1)), $mul.ref(15, 1));
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(15, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(86, 1));
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i32);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(16, 1));
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(87, 1));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(19, 1));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 56);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(88, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(20, 1));
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 15);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, $i47);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(21, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 240);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 4);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(22, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i53, $i56);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(92, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(21, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 15);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 8);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(23, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i63, $i66);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(96, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(24, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 240);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32($i72, 4);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(25, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i73, $i76);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(100, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(24, 1));
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 15);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 8);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 27)), $mul.ref(26, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i83, $i86);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(104, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(128, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 255);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 0);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 5);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb3;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;
}



const cyapa_i2c_reg_write_block: ref;

axiom cyapa_i2c_reg_write_block == $sub.ref(0, 537406);

procedure cyapa_i2c_reg_write_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cyapa_i2c_reg_write_block($p0: ref, $i1: i8, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} {:cexpr "cyapa_i2c_reg_write_block:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 1525} {:cexpr "cyapa_i2c_reg_write_block:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1104)), $mul.ref(8, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i8($i2);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i11 := i2c_smbus_write_i2c_block_data($p5, $i7, $i10, $p3);
    call {:si_unique_call 1527} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const i2c_smbus_write_i2c_block_data: ref;

axiom i2c_smbus_write_i2c_block_data == $sub.ref(0, 538438);

procedure i2c_smbus_write_i2c_block_data($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_write_i2c_block_data($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} {:cexpr "i2c_smbus_write_i2c_block_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 1529} {:cexpr "i2c_smbus_write_i2c_block_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1530} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1531} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cyapa_gen3_write_blocks: ref;

axiom cyapa_gen3_write_blocks == $sub.ref(0, 539470);

procedure cyapa_gen3_write_blocks($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_write_blocks($p0: ref, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i1;
  var $i5: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} {:cexpr "cyapa_gen3_write_blocks:arg:start_block"} boogie_si_record_i64($i1);
    call {:si_unique_call 1533} {:cexpr "cyapa_gen3_write_blocks:arg:block_count"} boogie_si_record_i64($i2);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64(0, $i2);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i5 := cyapa_gen3_write_blocks_loop_$bb4($p0, $i1, $i2, $p3, $i6, $i7, $i8, $i9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i5);
    goto $bb4_last;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i1);
    call {:si_unique_call 1534} {:cexpr "block"} boogie_si_record_i64($i7);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i5, 64);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    call {:si_unique_call 1535} {:cexpr "addr"} boogie_si_record_i64($i9);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i16($i7);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i14 := cyapa_gen3_write_fw_block($p0, $i13, $p10);
    call {:si_unique_call 1537} {:cexpr "error"} boogie_si_record_i32($i14);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i5, 1);
    call {:si_unique_call 1538} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i20 := $ult.i64($i19, $i2);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7733;
}



const cyapa_gen3_write_fw_block: ref;

axiom cyapa_gen3_write_fw_block == $sub.ref(0, 540502);

procedure cyapa_gen3_write_fw_block($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_write_fw_block($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i32: i32;
  var $i39: i1;
  var $i40: i32;
  var $i33: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i59: i32;
  var $i27: i32;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p3 := $alloc($mul.ref(78, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p4 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    call {:si_unique_call 1541} {:cexpr "cyapa_gen3_write_fw_block:arg:block"} boogie_si_record_i16($i1);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $sub.i8(0, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(1, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 57);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(2, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 1542} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p8, security_key, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(10, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} put_unaligned_be16($i10, $p12);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(12, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 1544} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p14, $p2, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(12, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i17 := cyapa_gen3_csum($p16, 64);
    call {:si_unique_call 1546} {:cexpr "tmp"} boogie_si_record_i16($i17);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i16.i8($i17);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(76, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i21 := cyapa_gen3_csum($p20, 77);
    call {:si_unique_call 1548} {:cexpr "tmp___0"} boogie_si_record_i16($i21);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i16.i8($i21);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 78)), $mul.ref(77, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i25 := cyapa_gen3_write_buffer($p0, $p24, 78);
    call {:si_unique_call 1550} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} usleep_range(10000, 20000);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i29 := cyapa_i2c_reg_read_block($p0, 0, 3, $p28);
    call {:si_unique_call 1553} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    call {:si_unique_call 1554} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 3);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i33 := 11;
    goto $bb8;

  $bb8:
    call $i34, $i35, $i36, $i37, $i38, $i33, $p41, $i42, $i43, $i44, $i45, $i46 := cyapa_gen3_write_fw_block_loop_$bb8($p0, $p4, $p28, $i34, $i35, $i36, $i37, $i38, $i33, $p41, $i42, $i43, $i44, $i45, $i46);
    goto $bb8_last;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.60, $p41);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.60, $p47);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 145);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    call {:si_unique_call 1560} {:cexpr "bl_status"} boogie_si_record_i8($i51);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.60, $p52);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 252);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    call {:si_unique_call 1561} {:cexpr "bl_error"} boogie_si_record_i8($i56);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i57 := $sext.i8.i32($i51);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i58 == 1);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i51);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 16);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i61 == 1);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i56);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 32);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59 := $i64;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i27 := $i59;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb29;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb25;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 110);
    goto $bb23;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i33, 1);
    call {:si_unique_call 1559} {:cexpr "tries"} boogie_si_record_i32($i45);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i34 := $i45;
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i46 == 1);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} usleep_range(10000, 20000);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i35 := cyapa_i2c_reg_read_block($p0, 0, 3, $p28);
    call {:si_unique_call 1557} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 1558} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 3);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb11_dummy;

  $bb10:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i32 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i32, 0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 5);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i27 := $i40;
    goto $bb3;

  $bb12:
    assume $i39 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i40 := $i32;
    goto $bb14;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const put_unaligned_be16: ref;

axiom put_unaligned_be16 == $sub.ref(0, 541534);

procedure put_unaligned_be16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_be16($i0: i16, $p1: ref)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} {:cexpr "put_unaligned_be16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i4 := __fswab16($i3);
    call {:si_unique_call 1564} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_gen3_csum: ref;

axiom cyapa_gen3_csum == $sub.ref(0, 542566);

procedure cyapa_gen3_csum($p0: ref, $i1: i64) returns ($r: i16);
  free requires assertsPassed;



implementation cyapa_gen3_csum($p0: ref, $i1: i64) returns ($r: i16)
{
  var $i2: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;
  var $i4: i16;
  var $i5: i32;
  var $i17: i16;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} {:cexpr "cyapa_gen3_csum:arg:count"} boogie_si_record_i64($i1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i2 := $ult.i64(0, $i1);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i4, $i5 := 0, 0;
    goto $bb4;

  $bb4:
    call $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i4, $i5, $i17 := cyapa_gen3_csum_loop_$bb4($p0, $i1, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i4, $i5, $i17);
    goto $bb4_last;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref($i6, 1));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i16($i8);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i4);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i10, $i11);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 1566} {:cexpr "csum"} boogie_si_record_i16($i13);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i5, 1);
    call {:si_unique_call 1567} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i15, $i1);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i3 := $i17;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i4, $i5 := $i13, $i14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7864;
}



const cyapa_gen3_write_buffer: ref;

axiom cyapa_gen3_write_buffer == $sub.ref(0, 543598);

procedure cyapa_gen3_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_write_buffer($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i9: i64;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i22: i64;
  var $i23: i1;
  var $i5: i64;
  var $i21: i32;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $p3 := $alloc($mul.ref(17, $zext.i32.i64(1)));
    call {:si_unique_call 1569} {:cexpr "cyapa_gen3_write_buffer:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64(0, $i2);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $i10, $i9, $i11, $p12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $i22, $i23, $i5, cmdloc_dummy_var_77, cmdloc_dummy_var_78, cmdloc_dummy_var_79 := cyapa_gen3_write_buffer_loop_$bb4($p0, $p1, $i2, $p3, $p6, $i7, $i8, $i10, $i9, $i11, $p12, $p13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $i22, $i23, $i5, cmdloc_dummy_var_77, cmdloc_dummy_var_78, cmdloc_dummy_var_79);
    goto $bb4_last;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref($i5, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i2, $i5);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i8 := $ult.i64(16, $i7);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i2, $i5);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i8($i5);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 17)), $mul.ref(0, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(1, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 1570} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p14, $p6, $i9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i9, 1);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i17 := cyapa_i2c_reg_write_block($p0, 0, $i15, $p16);
    call {:si_unique_call 1572} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 1573} {:cexpr "error"} boogie_si_record_i32($i18);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i5, 16);
    call {:si_unique_call 1574} {:cexpr "i"} boogie_si_record_i64($i22);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i23 := $ult.i64($i22, $i2);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb13_dummy;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i9 := 16;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7885;
}



const ldv_successful_malloc: ref;

axiom ldv_successful_malloc == $sub.ref(0, 544630);

procedure ldv_successful_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_successful_malloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "ldv_successful_malloc:arg:__size"} boogie_si_record_i64($i0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p1 := malloc($i0);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 1} true;
    $i2 := $ne.ref($p1, $0.ref);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 1} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} __VERIFIER_assume($i3);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 545662);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1578} $r := $malloc($i0);
    return;
}



const check_fw_dummy: ref;

axiom check_fw_dummy == $sub.ref(0, 546694);

procedure check_fw_dummy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_fw_dummy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bl_enter_dummy: ref;

axiom bl_enter_dummy == $sub.ref(0, 547726);

procedure bl_enter_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bl_enter_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bl_activate_dummy: ref;

axiom bl_activate_dummy == $sub.ref(0, 548758);

procedure bl_activate_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bl_activate_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bl_initiate_dummy: ref;

axiom bl_initiate_dummy == $sub.ref(0, 549790);

procedure bl_initiate_dummy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bl_initiate_dummy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1586} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const update_fw_dummy: ref;

axiom update_fw_dummy == $sub.ref(0, 550822);

procedure update_fw_dummy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation update_fw_dummy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1587} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1588} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const bl_deactivate_dummy: ref;

axiom bl_deactivate_dummy == $sub.ref(0, 551854);

procedure bl_deactivate_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bl_deactivate_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const show_baseline_dummy: ref;

axiom show_baseline_dummy == $sub.ref(0, 552886);

procedure show_baseline_dummy($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const calibrate_store_dummy: ref;

axiom calibrate_store_dummy == $sub.ref(0, 553918);

procedure calibrate_store_dummy($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: ref);



const initialize_dummy: ref;

axiom initialize_dummy == $sub.ref(0, 554950);

procedure initialize_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation initialize_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const state_parse_dummy: ref;

axiom state_parse_dummy == $sub.ref(0, 555982);

procedure state_parse_dummy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation state_parse_dummy($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} {:cexpr "state_parse_dummy:arg:p3"} boogie_si_record_i32($i2);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1594} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const operational_check_dummy: ref;

axiom operational_check_dummy == $sub.ref(0, 557014);

procedure operational_check_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation operational_check_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irq_handler_dummy: ref;

axiom irq_handler_dummy == $sub.ref(0, 558046);

procedure irq_handler_dummy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation irq_handler_dummy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1598} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irq_cmd_handler_dummy: ref;

axiom irq_cmd_handler_dummy == $sub.ref(0, 559078);

procedure irq_cmd_handler_dummy($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation irq_cmd_handler_dummy($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1601} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sort_empty_output_data_dummy: ref;

axiom sort_empty_output_data_dummy == $sub.ref(0, 560110);

procedure sort_empty_output_data_dummy($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sort_empty_output_data_dummy($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const set_power_mode_dummy: ref;

axiom set_power_mode_dummy == $sub.ref(0, 561142);

procedure set_power_mode_dummy($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation set_power_mode_dummy($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} {:cexpr "set_power_mode_dummy:arg:p2"} boogie_si_record_i8($i1);
    call {:si_unique_call 1605} {:cexpr "set_power_mode_dummy:arg:p3"} boogie_si_record_i16($i2);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1606} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 562174);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p1 := calloc(1, $i0);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} __VERIFIER_assume($i4);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 563206);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1612} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 1613} cmdloc_dummy_var_81 := $memset.i8(cmdloc_dummy_var_80, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 564238);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.40, $M.19, $M.0, $M.10, $M.39, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr, $M.32, $M.20, $M.21, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1616} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_stop();
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i18 := $M.52;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i19 := $M.54;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p20 := $M.55;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $M.40 := $i21;
    call {:si_unique_call 1620} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i14 := $M.48;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i15 := $M.50;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p16 := $M.51;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.40 := $i17;
    call {:si_unique_call 1618} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i10 := $M.44;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i11 := $M.46;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p12 := $M.47;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $M.40 := $i13;
    call {:si_unique_call 1622} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i6 := $M.40;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i7 := $M.42;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p8 := $M.43;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $M.40 := $i9;
    call {:si_unique_call 1624} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 565270);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.0, $M.10, $M.39, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr, $M.32, $M.20, $M.21, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i1;
  var $i14: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1627} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1628} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1629} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1630} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1633} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} ldv_stop();
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i0, 2);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_130 := cyapa_irq($i1, $p2);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb19;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 1);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 2);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i3, 2);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb19;

  $bb16:
    assume $i12 == 1;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb18;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 566302);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_device_attribute_13: ref;

axiom ldv_initialize_device_attribute_13 == $sub.ref(0, 567334);

procedure ldv_initialize_device_attribute_13();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.63 := $p2;
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_14: ref;

axiom ldv_initialize_device_attribute_14 == $sub.ref(0, 568366);

procedure ldv_initialize_device_attribute_14();
  free requires assertsPassed;
  modifies $M.64, $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $M.65 := $p2;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 569398);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.66, $M.19, $M.0, $M.10, $M.39, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr, $M.32, $M.20, $M.21, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1644} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_stop();
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i18 := $M.75;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i19 := $M.76;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p20 := $M.77;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.66 := $i21;
    call {:si_unique_call 1648} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i14 := $M.72;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i15 := $M.73;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $p16 := $M.74;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.66 := $i17;
    call {:si_unique_call 1646} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i10 := $M.69;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i11 := $M.70;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p12 := $M.71;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.66 := $i13;
    call {:si_unique_call 1650} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i6 := $M.66;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i7 := $M.67;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p8 := $M.68;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $M.66 := $i9;
    call {:si_unique_call 1652} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 570430);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.0, $M.10, $M.39, $M.23, $M.24, $M.25, assertsPassed, $CurrAddr, $M.32, $M.20, $M.21, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i1;
  var $i14: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1655} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1657} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1658} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1661} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_stop();
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i0, 2);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_131 := cyapa_irq($i1, $p2);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i14 := $i0;
    goto $bb19;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 1);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 2);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i3, 2);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb19;

  $bb16:
    assume $i12 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb18;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;
}



const ldv_dev_pm_ops_6: ref;

axiom ldv_dev_pm_ops_6 == $sub.ref(0, 571462);

procedure ldv_dev_pm_ops_6();
  free requires assertsPassed;
  modifies $M.78, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 572494);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.78, $M.80, $M.62, $M.81, $M.82, $M.83, $M.65, $M.84, $M.85, $M.64, $M.63, $M.86, $M.0, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.40, $M.66, $M.124, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.125, $M.48, $M.44, $M.75, $M.72, $M.69, $M.52, $M.129, $M.42, $M.43, $M.46, $M.47, $M.50, $M.51, $M.54, $M.55, $M.67, $M.68, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.39, $M.128, $M.127, $M.126, $M.22, $M.9, $M.34, $M.8, $M.33, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.146, $M.170, $M.199, $M.200, $M.201, $CurrAddr, $M.19, $M.10, $M.11, $M.12, $M.20, $M.21, assertsPassed, $M.27, $M.28, $M.23, $M.24, $M.25, $M.26, $M.15, $M.13, $M.14, $M.29, $M.17, $M.16, $M.18, $M.32, $M.30, $M.31, $M.35, $M.36, $M.37, $M.38;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $i248: i32;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i64;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i1;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i32;
  var $i325: i1;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $i338: i64;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i64;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i1;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i32;
  var $i366: i32;
  var $i367: i1;
  var $i369: i32;
  var $i370: i32;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i64;
  var vslice_dummy_var_139: i64;
  var vslice_dummy_var_140: i64;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: i64;
  var vslice_dummy_var_144: i64;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i64;
  var vslice_dummy_var_147: i32;

  $bb0:
    call {:si_unique_call 1667} $initialize();
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p4 := ldv_successful_malloc(1104);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $M.79 := $p4;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $p6 := ldv_successful_malloc(1424);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.78 := $p6;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $M.80 := $p6;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p8 := ldv_successful_malloc(48);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.62 := $p8;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $M.81 := $p8;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $M.82 := $p4;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.83 := $p6;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.65 := $p6;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.84 := $p8;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p10 := ldv_successful_malloc(32);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $M.85 := $p10;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.64 := $p8;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $M.63 := $p6;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.86 := $p10;
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p12 := ldv_successful_malloc(1);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1678} $i13 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1679} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i13);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i13);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $p14 := ldv_successful_malloc(1);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1681} $i15 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1682} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i15);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i15);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p16 := ldv_successful_malloc(1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} $i17 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1685} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i17);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i17);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $p18 := ldv_successful_malloc(1);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} $i19 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1688} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i19);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i19);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p20 := ldv_successful_malloc(1);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} $i21 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1691} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i21);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i21);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i22 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i22);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p0, $i22);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $p23 := ldv_successful_malloc(1);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} $i24 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1696} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i24);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i24);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $p25 := ldv_successful_malloc(1);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} $i26 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i26);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i26);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} $i27 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1701} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i27);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i27);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $p28 := ldv_successful_malloc(1);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} $i29 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i29);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i29);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $p30 := ldv_successful_malloc(1);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1706} $i31 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1707} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i31);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i31);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1708} $i32 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1709} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i32);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i32);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} $i33 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i33);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i33);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $p34 := ldv_successful_malloc(1);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1713} $i35 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1714} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i35);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i35);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} $p36 := ldv_successful_malloc(32);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $p38 := ldv_successful_malloc(1488);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p40 := ldv_successful_malloc(2296);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(16, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p40);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1718} $i43 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1719} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i43);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(58, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p45 := ldv_successful_malloc(160);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(136, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p46);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_82 := $M.0;
    cmdloc_dummy_var_83 := $M.0;
    call {:si_unique_call 1721} cmdloc_dummy_var_84 := $memcpy.i8(cmdloc_dummy_var_82, cmdloc_dummy_var_83, $p48, $p49, 160, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_84;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p50 := ldv_successful_malloc(120);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 1104)), $mul.ref(296, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p50);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1723} $i53 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1724} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i53);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p41, $mul.ref(0, 2296)), $mul.ref(808, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, check_fw_dummy);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, bl_enter_dummy);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, bl_activate_dummy);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, bl_initiate_dummy);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, update_fw_dummy);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, bl_deactivate_dummy);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(48, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, show_baseline_dummy);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(56, 1));
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, calibrate_store_dummy);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(64, 1));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, initialize_dummy);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, state_parse_dummy);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, operational_check_dummy);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, irq_handler_dummy);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, irq_cmd_handler_dummy);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, sort_empty_output_data_dummy);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p51, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, set_power_mode_dummy);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p4);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} ldv_initialize();
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} vslice_dummy_var_132 := ldv_memset($p75, 0, 8);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p1);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} vslice_dummy_var_133 := ldv_memset($p77, 0, 8);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p2);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_134 := ldv_memset($p79, 0, 8);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p3);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} vslice_dummy_var_135 := ldv_memset($p81, 0, 8);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.98 := 0;
    call {:si_unique_call 1741} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $M.100 := 0;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $M.102 := 0;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i266, $i267, $i268, $i269, $i270, $i271, $i273, $i274, $i275, $i276, $i277, $i278, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $p290, $p291, $i292, $i294, $i295, $p296, $p297, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $p336, $p337, $i338, $i340, $i341, $p342, $p343, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147 := main_loop_$bb1($p0, $p1, $p2, $p3, $p7, $p9, $p12, $p14, $p16, $p18, $p20, $p23, $p25, $p28, $p30, $p34, $p37, $p39, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i144, $i145, $i146, $i147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i266, $i267, $i268, $i269, $i270, $i271, $i273, $i274, $i275, $i276, $i277, $i278, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $p290, $p291, $i292, $i294, $i295, $p296, $p297, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $i332, $i333, $i334, $i335, $p336, $p337, $i338, $i340, $i341, $p342, $p343, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i83, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i83, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i83, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i83, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} ldv_stop();
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb219_dummy;

  $bb11:
    assume $i88 == 1;
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i353 := $M.102;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb374:
    assume $i354 == 1;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} $i355 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i355);
    call {:si_unique_call 1927} {:cexpr "tmp___34"} boogie_si_record_i32($i355);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i356 := $slt.i32($i355, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i355, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i357 == 1);
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} ldv_stop();
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb379:
    assume $i357 == 1;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i366 := $M.102;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 2);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb391:
    assume $i367 == 1;
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} vslice_dummy_var_147 := ldv_release_5();
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i369 := $M.98;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i370 := $sub.i32($i369, 1);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $M.98 := $i370;
    call {:si_unique_call 1934} {:cexpr "ref_cnt"} boogie_si_record_i32($i370);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb377:
    assume $i356 == 1;
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i355, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb381;

  $bb382:
    assume $i358 == 1;
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i359 := $M.102;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 1);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb384:
    assume $i360 == 1;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i361 := cyapa_probe($p39, $p37);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $M.125 := $i361;
    call {:si_unique_call 1929} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i361);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i362 := $M.125;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 0);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb386:
    assume $i363 == 1;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i364 := $M.98;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i365 := $add.i32($i364, 1);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.98 := $i365;
    call {:si_unique_call 1931} {:cexpr "ref_cnt"} boogie_si_record_i32($i365);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    goto $bb388;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i87 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i345 := $M.101;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb362:
    assume $i346 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1919} $i347 := __VERIFIER_nondet_int();
    call {:si_unique_call 1920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i347);
    call {:si_unique_call 1921} {:cexpr "tmp___33"} boogie_si_record_i32($i347);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_stop();
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb365:
    assume $i348 == 1;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i349 := $M.101;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 1);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb367:
    assume $i350 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.0, $p3);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} vslice_dummy_var_146 := cyapa_update_fw_store($p7, $p9, $p34, $i351);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb369;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i83, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i89 == 1);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i328 := $M.100;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb342:
    assume $i329 == 1;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} $i330 := __VERIFIER_nondet_int();
    call {:si_unique_call 1912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i330);
    call {:si_unique_call 1913} {:cexpr "tmp___32"} boogie_si_record_i32($i330);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $i331 := $slt.i32($i330, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i330, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_stop();
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb347:
    assume $i332 == 1;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i340 := $M.100;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 1);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb356:
    assume $i341 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p342 := $M.63;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p343 := $M.62;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} vslice_dummy_var_145 := cyapa_show_rt_suspend_scanrate($p342, $p343, $p28);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto $bb358;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb345:
    assume $i331 == 1;
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i330, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb349;

  $bb350:
    assume $i333 == 1;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i334 := $M.100;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 1);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb352:
    assume $i335 == 1;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p336 := $M.63;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p337 := $M.62;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i338 := $load.i64($M.0, $p2);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} vslice_dummy_var_144 := cyapa_update_rt_suspend_scanrate($p336, $p337, $p30, $i338);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    goto $bb354;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i89 == 1;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i311 := $M.99;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb312:
    assume $i312 == 1;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1864} $i313 := __VERIFIER_nondet_int();
    call {:si_unique_call 1865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i313);
    call {:si_unique_call 1866} {:cexpr "tmp___31"} boogie_si_record_i32($i313);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $i314 := $slt.i32($i313, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i313, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_stop();
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb317:
    assume $i315 == 1;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i321 := $M.99;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb330:
    assume $i322 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i323 := cyapa_driver_init();
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.124 := $i323;
    call {:si_unique_call 1890} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i323);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i324 := $M.124;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 0);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i326 := $M.124;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb335:
    assume $i327 == 1;
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ldv_check_final_state();
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p5);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} free_($p371);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} free_($p18);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} free_($p16);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} free_($p23);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} free_($p20);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} free_($p14);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} free_($p12);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p51);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} free_($p372);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p7);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} free_($p373);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p41);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} free_($p374);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p9);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} free_($p375);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} free_($p34);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p376 := $bitcast.ref.ref($p39);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} free_($p376);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p46);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} free_($p377);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p37);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} free_($p378);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p379 := $bitcast.ref.ref($p11);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} free_($p379);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} free_($p28);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} free_($p25);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} free_($p30);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i325 == 1;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1891} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1893} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_initialize_device_attribute_13();
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_initialize_cyapa_dev_ops_4();
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1898} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_initialize_device_attribute_14();
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1901} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_initialize_cyapa_dev_ops_3();
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_dev_pm_ops_6();
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb315:
    assume $i314 == 1;
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i313, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb319;

  $bb320:
    assume $i316 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i317 := $M.99;
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 3);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    assume !($i318 == 1);
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb322:
    assume $i318 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i319 := $M.98;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 0);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb324;

  $bb325:
    assume $i320 == 1;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} cyapa_driver_exit();
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb5:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i83, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i83, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i91 == 1);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i309 := $M.97;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb309:
    assume $i310 == 1;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} ldv_main_exported_4();
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb311;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i91 == 1;
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i307 := $M.96;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb306:
    assume $i308 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} choose_interrupt_1();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb308;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i83, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i92 == 1);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i299 := $M.95;
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb294:
    assume $i300 == 1;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1856} $i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i301);
    call {:si_unique_call 1858} {:cexpr "tmp___30"} boogie_si_record_i32($i301);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_stop();
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb297:
    assume $i302 == 1;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i303 := $M.95;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb299:
    assume $i304 == 1;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i305 := $load.i64($M.0, $p1);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} vslice_dummy_var_143 := cyapa_calibrate_store($p7, $p9, $p25, $i305);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    goto $bb301;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i92 == 1;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i282 := $M.94;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb274:
    assume $i283 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1848} $i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1849} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i284);
    call {:si_unique_call 1850} {:cexpr "tmp___29"} boogie_si_record_i32($i284);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} ldv_stop();
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb279:
    assume $i286 == 1;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i294 := $M.94;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 1);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb288:
    assume $i295 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p296 := $M.65;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p297 := $M.64;
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} vslice_dummy_var_142 := cyapa_show_suspend_scanrate($p296, $p297, $p23);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1854} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    goto $bb290;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb277:
    assume $i285 == 1;
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb281;

  $bb282:
    assume $i287 == 1;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i288 := $M.94;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb284:
    assume $i289 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p290 := $M.65;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p291 := $M.64;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i292 := $load.i64($M.0, $p0);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} vslice_dummy_var_141 := cyapa_update_suspend_scanrate($p290, $p291, $p20, $i292);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb286;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i83, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i83, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i83, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i280 := $M.93;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb271:
    assume $i281 == 1;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} choose_interrupt_2();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb273;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i273 := $M.92;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb259:
    assume $i274 == 1;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1841} $i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 1842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i275);
    call {:si_unique_call 1843} {:cexpr "tmp___28"} boogie_si_record_i32($i275);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} ldv_stop();
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb262:
    assume $i276 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i277 := $M.92;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 1);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb264:
    assume $i278 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_140 := cyapa_show_fm_ver($p7, $p9, $p18);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    goto $bb266;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i83, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i96 == 1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i266 := $M.91;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb247:
    assume $i267 == 1;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1835} $i268 := __VERIFIER_nondet_int();
    call {:si_unique_call 1836} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i268);
    call {:si_unique_call 1837} {:cexpr "tmp___27"} boogie_si_record_i32($i268);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_stop();
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb250:
    assume $i269 == 1;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $i270 := $M.91;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb252:
    assume $i271 == 1;
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} vslice_dummy_var_139 := cyapa_show_baseline($p7, $p9, $p16);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    goto $bb254;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i96 == 1;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i259 := $M.90;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb235:
    assume $i260 == 1;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} $i261 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i261);
    call {:si_unique_call 1831} {:cexpr "tmp___26"} boogie_si_record_i32($i261);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_stop();
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb238:
    assume $i262 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i263 := $M.90;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 1);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb240:
    assume $i264 == 1;
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} vslice_dummy_var_138 := cyapa_show_mode($p7, $p9, $p14);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    goto $bb242;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i83, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i83, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i98 == 1);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i257 := $M.89;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb232:
    assume $i258 == 1;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_main_exported_3();
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb234;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i98 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i250 := $M.88;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb220:
    assume $i251 == 1;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} $i252 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i252);
    call {:si_unique_call 1824} {:cexpr "tmp___25"} boogie_si_record_i32($i252);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_stop();
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb223:
    assume $i253 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i254 := $M.88;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i255 == 1;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_137 := cyapa_show_product_id($p7, $p9, $p12);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i83, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb13;

  $bb34:
    assume $i99 == 1;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i100 := $M.87;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb36:
    assume $i101 == 1;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1749} $i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 1750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i102);
    call {:si_unique_call 1751} {:cexpr "tmp___24"} boogie_si_record_i32($i102);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i102, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i102, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i102, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i102, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb49:
    assume $i108 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i245 := $M.87;
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 16);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb213:
    assume $i246 == 1;
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} vslice_dummy_var_136 := ldv_complete_6();
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i248 := $M.98;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i249 := $sub.i32($i248, 1);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $M.98 := $i249;
    call {:si_unique_call 1820} {:cexpr "ref_cnt"} boogie_si_record_i32($i249);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb47:
    assume $i107 == 1;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i240 := $M.87;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 4);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb207:
    assume $i241 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $i242 := ldv_suspend_noirq_6();
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.123 := $i242;
    call {:si_unique_call 1816} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i242);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i243 := $M.123;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 0);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb209:
    assume $i244 == 1;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $M.87 := 8;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(8);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i235 := $M.87;
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 9);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb201:
    assume $i236 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i237 := ldv_restore_noirq_6();
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.122 := $i237;
    call {:si_unique_call 1813} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i237);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i238 := $M.122;
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 0);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb203:
    assume $i239 == 1;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.87 := 14;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb43:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i102, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i102, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i110 == 1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i230 := $M.87;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 5);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb195:
    assume $i231 == 1;
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i232 := ldv_poweroff_late_6();
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $M.121 := $i232;
    call {:si_unique_call 1810} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i232);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i233 := $M.121;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 0);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb197:
    assume $i234 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.87 := 10;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(10);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb54:
    assume $i110 == 1;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i225 := $M.87;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 5);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb189:
    assume $i226 == 1;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i227 := ldv_poweroff_noirq_6();
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.120 := $i227;
    call {:si_unique_call 1807} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i227);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i228 := $M.120;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 0);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume $i229 == 1;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.87 := 9;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(9);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb52:
    assume $i109 == 1;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i220 := $M.87;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 11);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb183:
    assume $i221 == 1;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $i222 := ldv_thaw_noirq_6();
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.119 := $i222;
    call {:si_unique_call 1804} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i222);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i223 := $M.119;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb185:
    assume $i224 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.87 := 15;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb41:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i102, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i102, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i102, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i113 == 1);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i215 := $M.87;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 6);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb177:
    assume $i216 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i217 := ldv_freeze_late_6();
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.118 := $i217;
    call {:si_unique_call 1801} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i217);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i218 := $M.118;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb179:
    assume $i219 == 1;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $M.87 := 12;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(12);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb60:
    assume $i113 == 1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i208 := $M.87;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb171:
    assume $i209 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i210 := ldv_prepare_6();
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $M.117 := $i210;
    call {:si_unique_call 1797} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i210);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i211 := $M.117;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb173:
    assume $i212 == 1;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i213 := $M.98;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i214 := $add.i32($i213, 1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $M.98 := $i214;
    call {:si_unique_call 1799} {:cexpr "ref_cnt"} boogie_si_record_i32($i214);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb58:
    assume $i112 == 1;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i203 := $M.87;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 6);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb165:
    assume $i204 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $i205 := ldv_freeze_noirq_6();
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.116 := $i205;
    call {:si_unique_call 1794} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i205);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i206 := $M.116;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 0);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb167:
    assume $i207 == 1;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $M.87 := 11;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(11);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb56:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i102, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i114 == 1);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i198 := $M.87;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 8);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb159:
    assume $i199 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} $i200 := ldv_resume_noirq_6();
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $M.115 := $i200;
    call {:si_unique_call 1791} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i200);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i201 := $M.115;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 0);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb161:
    assume $i202 == 1;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $M.87 := 13;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb62:
    assume $i114 == 1;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i193 := $M.87;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 12);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb153:
    assume $i194 == 1;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i195 := ldv_thaw_early_6();
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.114 := $i195;
    call {:si_unique_call 1788} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i195);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i196 := $M.114;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 0);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb155:
    assume $i197 == 1;
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $M.87 := 15;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb39:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i102, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i102, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i102, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i118 == 1);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i188 := $M.87;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 7);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb147:
    assume $i189 == 1;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} $i190 := ldv_resume_early_6();
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $M.113 := $i190;
    call {:si_unique_call 1785} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i190);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i191 := $M.113;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i192 == 1;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.87 := 13;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb70:
    assume $i118 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i183 := $M.87;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 10);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb141:
    assume $i184 == 1;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i185 := ldv_restore_early_6();
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $M.112 := $i185;
    call {:si_unique_call 1782} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i185);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i186 := $M.112;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 0);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i187 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.87 := 14;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb68:
    assume $i117 == 1;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i178 := $M.87;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 4);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb135:
    assume $i179 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $i180 := ldv_suspend_late_6();
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $M.111 := $i180;
    call {:si_unique_call 1779} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i180);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i181 := $M.111;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume $i182 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $M.87 := 7;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(7);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb66:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i102, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i102, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i120 == 1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i172 := $M.87;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 13);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb129:
    assume $i173 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $p174 := $M.78;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i175 := cyapa_resume($p174);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.110 := $i175;
    call {:si_unique_call 1776} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i175);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i176 := $M.110;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume $i177 == 1;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i120 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i166 := $M.87;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 3);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb123:
    assume $i167 == 1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p168 := $M.78;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i169 := cyapa_suspend($p168);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.109 := $i169;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i169);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i170 := $M.109;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i171 == 1;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.87 := 6;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(6);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i119 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i160 := $M.87;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb117:
    assume $i161 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p162 := $M.78;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i163 := cyapa_suspend($p162);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.108 := $i163;
    call {:si_unique_call 1770} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i163);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i164 := $M.108;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i165 == 1;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.87 := 5;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i102, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i102, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i102, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i123 == 1);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i152 := $M.87;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb111:
    assume $i153 == 1;
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p154 := $M.78;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $i155 := cyapa_runtime_suspend($p154);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.107 := $i155;
    call {:si_unique_call 1766} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i155);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i156 := $M.107;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i157 == 1;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i158 := $M.98;
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i158, 1);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $M.98 := $i159;
    call {:si_unique_call 1768} {:cexpr "ref_cnt"} boogie_si_record_i32($i159);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i123 == 1;
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i146 := $M.87;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 14);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb105:
    assume $i147 == 1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p148 := $M.78;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} $i149 := cyapa_resume($p148);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $M.106 := $i149;
    call {:si_unique_call 1763} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i149);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i150 := $M.106;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i151 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i122 == 1;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i140 := $M.87;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 3);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb99:
    assume $i141 == 1;
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p142 := $M.78;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i143 := cyapa_suspend($p142);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.105 := $i143;
    call {:si_unique_call 1760} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i143);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i144 := $M.105;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i145 == 1;
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.87 := 4;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i124 == 1);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i134 := $M.87;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 15);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb93:
    assume $i135 == 1;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p136 := $M.78;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $i137 := cyapa_resume($p136);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.104 := $i137;
    call {:si_unique_call 1757} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i137);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i138 := $M.104;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i139 == 1;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb51;

  $bb84:
    assume $i125 == 1;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i126 := $M.87;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb86:
    assume $i127 == 1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p128 := $M.78;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $i129 := cyapa_runtime_resume($p128);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.103 := $i129;
    call {:si_unique_call 1753} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i129);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i130 := $M.103;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 0);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i131 == 1;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i132 := $M.98;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32($i132, 1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $M.98 := $i133;
    call {:si_unique_call 1755} {:cexpr "ref_cnt"} boogie_si_record_i32($i133);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb219_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1746} $i83 := __VERIFIER_nondet_int();
    call {:si_unique_call 1747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i83);
    call {:si_unique_call 1748} {:cexpr "tmp___23"} boogie_si_record_i32($i83);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 573526);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    return;
}



const ldv_suspend_late_6: ref;

axiom ldv_suspend_late_6 == $sub.ref(0, 574558);

procedure ldv_suspend_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1937} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1938} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_6: ref;

axiom ldv_restore_early_6 == $sub.ref(0, 575590);

procedure ldv_restore_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1939} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_6: ref;

axiom ldv_resume_early_6 == $sub.ref(0, 576622);

procedure ldv_resume_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1941} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1942} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_6: ref;

axiom ldv_thaw_early_6 == $sub.ref(0, 577654);

procedure ldv_thaw_early_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1943} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_6: ref;

axiom ldv_resume_noirq_6 == $sub.ref(0, 578686);

procedure ldv_resume_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1945} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1946} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_6: ref;

axiom ldv_freeze_noirq_6 == $sub.ref(0, 579718);

procedure ldv_freeze_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1947} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1948} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_6: ref;

axiom ldv_prepare_6 == $sub.ref(0, 580750);

procedure ldv_prepare_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1949} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1950} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_6: ref;

axiom ldv_freeze_late_6 == $sub.ref(0, 581782);

procedure ldv_freeze_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1951} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_6: ref;

axiom ldv_thaw_noirq_6 == $sub.ref(0, 582814);

procedure ldv_thaw_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_6: ref;

axiom ldv_poweroff_noirq_6 == $sub.ref(0, 583846);

procedure ldv_poweroff_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1955} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_6: ref;

axiom ldv_poweroff_late_6 == $sub.ref(0, 584878);

procedure ldv_poweroff_late_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1957} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_6: ref;

axiom ldv_restore_noirq_6 == $sub.ref(0, 585910);

procedure ldv_restore_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1959} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1960} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_6: ref;

axiom ldv_suspend_noirq_6 == $sub.ref(0, 586942);

procedure ldv_suspend_noirq_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1961} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_6: ref;

axiom ldv_complete_6 == $sub.ref(0, 587974);

procedure ldv_complete_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1963} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1964} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 589006);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.0, $M.19, $M.89, $M.10, $M.11, $M.12, $M.20, $M.21, $M.27, $M.28, $M.23, $M.24, $M.25, $M.26, $M.15, $M.13, $M.14, $M.29, $M.17, $M.16, $M.18, $CurrAddr, $M.32, $M.30, $M.31, $M.22, $M.35, $M.36, $M.37, $M.38, assertsPassed;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var vslice_dummy_var_148: ref;
  var vslice_dummy_var_149: ref;
  var vslice_dummy_var_150: ref;
  var vslice_dummy_var_151: ref;
  var vslice_dummy_var_152: ref;
  var vslice_dummy_var_153: i1;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i64;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} $p5 := ldv_init_zalloc(4);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} vslice_dummy_var_148 := ldv_memset($p11, 0, 4);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} vslice_dummy_var_149 := ldv_memset($p13, 0, 8);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vslice_dummy_var_150 := ldv_memset($p15, 0, 8);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} vslice_dummy_var_151 := ldv_memset($p3, 0, 1);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p4);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_152 := ldv_memset($p18, 0, 2);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1980} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 1981} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 1982} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} ldv_stop();
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i106 := $M.89;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb78:
    assume $i107 == 1;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p108 := $M.83;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p109 := $M.84;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} vslice_dummy_var_167 := cyapa_gen5_show_baseline($p108, $p109, $p9);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2012} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i101 := $M.89;
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb75:
    assume $i102 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $p103 := $M.79;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p0);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} vslice_dummy_var_166 := cyapa_gen5_state_parse($p103, $p8, $i104);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2010} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i97 := $M.89;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb72:
    assume $i98 == 1;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p99 := $M.79;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} vslice_dummy_var_165 := cyapa_gen5_bl_activate($p99);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2008} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i93 := $M.89;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb69:
    assume $i94 == 1;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p95 := $M.79;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} vslice_dummy_var_164 := cyapa_gen5_bl_deactivate($p95);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2006} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i20, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i20, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $i89 := $M.89;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb66:
    assume $i90 == 1;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p91 := $M.79;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} vslice_dummy_var_163 := cyapa_gen5_do_operational_check($p91);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i84 := $M.89;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb63:
    assume $i85 == 1;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p86 := $M.79;
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p87 := $M.85;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} vslice_dummy_var_162 := cyapa_gen5_bl_initiate($p86, $p87);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2002} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i20, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i80 := $M.89;
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb60:
    assume $i81 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p82 := $M.79;
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} vslice_dummy_var_161 := cyapa_gen5_bl_enter($p82);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 2000} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i74 := $M.89;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb57:
    assume $i75 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p76 := $M.83;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p77 := $M.84;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p2);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_160 := cyapa_gen5_do_calibrate($p76, $p77, $p10, $i78);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1998} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i20, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i70 := $M.89;
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb54:
    assume $i71 == 1;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p72 := $M.79;
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} vslice_dummy_var_159 := cyapa_gen5_initialize($p72);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1996} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i65 := $M.89;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb51:
    assume $i66 == 1;
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p67 := $M.79;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p1);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} vslice_dummy_var_158 := cyapa_empty_pip_output_data($p67, $p7, $p6, $p68);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb23:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i61 := $M.89;
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb48:
    assume $i62 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p63 := $M.79;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} vslice_dummy_var_157 := cyapa_gen5_irq_handler($p63);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1992} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i56 := $M.89;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p58 := $M.79;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p59 := $M.85;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} vslice_dummy_var_156 := cyapa_gen5_do_fw_update($p58, $p59);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1990} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i35 == 1);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i46 := $M.89;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume $i47 == 1;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p48 := $M.79;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p3);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p4);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} vslice_dummy_var_155 := cyapa_gen5_set_power_mode($p48, $i51, $i54);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1988} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i35 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i41 := $M.89;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i42 == 1;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p43 := $M.79;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p44 := $M.85;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} vslice_dummy_var_154 := cyapa_gen5_check_fw($p43, $p44);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1986} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb29:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb33:
    assume $i36 == 1;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i37 := $M.89;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i38 == 1;
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p39 := $M.79;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} vslice_dummy_var_153 := cyapa_gen5_irq_cmd_handler($p39);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb37;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 590038);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.0, $M.97, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.32, $M.35, $M.36, $M.37, $M.38, $M.26, $M.22, assertsPassed;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i16;
  var $i53: i32;
  var $i54: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var vslice_dummy_var_168: ref;
  var vslice_dummy_var_169: ref;
  var vslice_dummy_var_170: ref;
  var vslice_dummy_var_171: ref;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: i1;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i64;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $p9 := ldv_init_zalloc(4);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} vslice_dummy_var_168 := ldv_memset($p11, 0, 8);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} vslice_dummy_var_169 := ldv_memset($p13, 0, 2);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} vslice_dummy_var_170 := ldv_memset($p15, 0, 4);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} vslice_dummy_var_171 := ldv_memset($p3, 0, 1);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p4);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} vslice_dummy_var_172 := ldv_memset($p18, 0, 8);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2029} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 2030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 2031} {:cexpr "tmp___4"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} ldv_stop();
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i106 := $M.97;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb78:
    assume $i107 == 1;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p108 := $M.80;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p109 := $M.81;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} vslice_dummy_var_187 := cyapa_gen3_show_baseline($p108, $p109, $p6);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2061} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i101 := $M.97;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb75:
    assume $i102 == 1;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p103 := $M.82;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p2);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} vslice_dummy_var_186 := cyapa_gen3_state_parse($p103, $p8, $i104);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2059} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i97 := $M.97;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb72:
    assume $i98 == 1;
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p99 := $M.82;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} vslice_dummy_var_185 := cyapa_gen3_bl_activate($p99);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2057} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i93 := $M.97;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb69:
    assume $i94 == 1;
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p95 := $M.82;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} vslice_dummy_var_184 := cyapa_gen3_bl_deactivate($p95);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2055} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i20, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i20, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i89 := $M.97;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb66:
    assume $i90 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p91 := $M.82;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} vslice_dummy_var_183 := cyapa_gen3_do_operational_check($p91);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2053} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i84 := $M.97;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb63:
    assume $i85 == 1;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p86 := $M.82;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p87 := $M.86;
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} vslice_dummy_var_182 := cyapa_gen3_bl_initiate($p86, $p87);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2051} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i20, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i80 := $M.97;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb60:
    assume $i81 == 1;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p82 := $M.82;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} vslice_dummy_var_181 := cyapa_gen3_bl_enter($p82);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2049} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i74 := $M.97;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb57:
    assume $i75 == 1;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $p76 := $M.80;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p77 := $M.81;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p4);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} vslice_dummy_var_180 := cyapa_gen3_do_calibrate($p76, $p77, $p7, $i78);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2047} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb2:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i20, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i70 := $M.97;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb54:
    assume $i71 == 1;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $p72 := $M.82;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} vslice_dummy_var_179 := cyapa_gen3_initialize($p72);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2045} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i65 := $M.97;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb51:
    assume $i66 == 1;
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $p67 := $M.82;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} vslice_dummy_var_178 := cyapa_gen3_empty_output_data($p67, $p5, $p10, $p68);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2043} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb23:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i61 := $M.97;
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb48:
    assume $i62 == 1;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p63 := $M.82;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} vslice_dummy_var_177 := cyapa_gen3_irq_handler($p63);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2041} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i56 := $M.97;
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p58 := $M.82;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p59 := $M.86;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} vslice_dummy_var_176 := cyapa_gen3_do_fw_update($p58, $p59);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2039} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb21:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i35 == 1);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i46 := $M.97;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb42:
    assume $i47 == 1;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p48 := $M.82;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p3);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p1);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} vslice_dummy_var_175 := cyapa_gen3_set_power_mode($p48, $i51, $i54);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2037} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb31:
    assume $i35 == 1;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i41 := $M.97;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i42 == 1;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p43 := $M.82;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p44 := $M.86;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} vslice_dummy_var_174 := cyapa_gen3_check_fw($p43, $p44);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2035} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb29:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb33:
    assume $i36 == 1;
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i37 := $M.97;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i38 == 1;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p39 := $M.82;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} vslice_dummy_var_173 := cyapa_gen3_irq_cmd_handler($p39);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb37;
}



const cyapa_driver_exit: ref;

axiom cyapa_driver_exit == $sub.ref(0, 591070);

procedure cyapa_driver_exit();
  free requires assertsPassed;



implementation cyapa_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} i2c_del_driver(cyapa_driver);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    return;
}



const cyapa_driver_init: ref;

axiom cyapa_driver_init == $sub.ref(0, 592102);

procedure cyapa_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation cyapa_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} $i0 := i2c_register_driver(__this_module, cyapa_driver);
    call {:si_unique_call 2065} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_cyapa_dev_ops_4: ref;

axiom ldv_initialize_cyapa_dev_ops_4 == $sub.ref(0, 593134);

procedure ldv_initialize_cyapa_dev_ops_4();
  free requires assertsPassed;
  modifies $M.86, $M.82, $M.81, $M.80, $M.0, $CurrAddr;



implementation ldv_initialize_cyapa_dev_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $p2 := ldv_init_zalloc(1104);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $M.82 := $p2;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $p4 := ldv_init_zalloc(48);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $M.81 := $p4;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $p6 := ldv_init_zalloc(1416);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $M.80 := $p6;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_cyapa_dev_ops_3: ref;

axiom ldv_initialize_cyapa_dev_ops_3 == $sub.ref(0, 594166);

procedure ldv_initialize_cyapa_dev_ops_3();
  free requires assertsPassed;
  modifies $M.85, $M.79, $M.84, $M.83, $M.0, $CurrAddr;



implementation ldv_initialize_cyapa_dev_ops_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $M.85 := $p0;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $p2 := ldv_init_zalloc(1104);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $M.79 := $p2;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $p4 := ldv_init_zalloc(48);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $M.84 := $p4;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p6 := ldv_init_zalloc(1416);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $M.83 := $p6;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_5: ref;

axiom ldv_release_5 == $sub.ref(0, 595198);

procedure ldv_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2074} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2075} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 596230);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.126;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.127;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.128;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.39;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} ldv_error();
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} ldv_error();
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} ldv_error();
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} ldv_error();
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} ldv_error();
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 597262);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 2081} $free($p0);
    return;
}



const i2c_register_driver: ref;

axiom i2c_register_driver == $sub.ref(0, 598294);

procedure i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2082} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2083} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_del_driver: ref;

axiom i2c_del_driver == $sub.ref(0, 599326);

procedure i2c_del_driver($p0: ref);
  free requires assertsPassed;



implementation i2c_del_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 600358);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2084} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 1} true;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 601390);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 602422);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 603454);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 604486);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 605518);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 606550);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 607582);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2085} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 2086} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 2087} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2088} __VERIFIER_assume($i6);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 608614);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 609646);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 610678);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 611710);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 612742);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2089} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 2090} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2091} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2092} __VERIFIER_assume($i6);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 613774);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 614806);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 615838);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2093} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2094} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2095} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2096} __VERIFIER_assume($i4);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 616870);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 617902);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 618934);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 619966);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2097} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2098} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2099} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2100} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2101} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2102} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2103} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2104} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2105} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2106} __VERIFIER_assume($i7);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2107} __VERIFIER_assume($i11);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 620998);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 622030);

procedure __VERIFIER_nondet_long() returns ($r: i64);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 623062);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 624094);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 625126);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 626158);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 627190);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2108} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2109} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2110} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2111} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2112} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2113} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2114} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2115} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2116} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2117} __VERIFIER_assume($i7);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2118} __VERIFIER_assume($i11);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 628222);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 629254);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 630286);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 631318);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 632350);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 633382);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 634414);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 635446);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 636478);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2119} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2121} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2122} __VERIFIER_assume($i10);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 637510);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2123} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 2124} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 2125} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 638542);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2126} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 2127} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2128} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 639574);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2129} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2130} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2131} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 640606);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2132} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2133} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2134} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 641638);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2135} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2136} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 642670);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 643702);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2137} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2138} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 644734);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 645766);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 646798);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2139} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2140} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $p6 := malloc($i5);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 2144} cmdloc_dummy_var_86 := $memset.i8(cmdloc_dummy_var_85, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_86;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 647830);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 648862);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.40, $M.48, $M.44, $M.75, $M.66, $M.72, $M.69, $M.52, $M.129, $M.42, $M.43, $M.46, $M.47, $M.50, $M.51, $M.54, $M.55, $M.62, $M.63, $M.64, $M.65, $M.67, $M.68, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.39, $M.128, $M.127, $M.126, $M.22, $M.9, $M.34, $M.8, $M.33, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.146, $M.170, $M.199, $M.200, $M.201;



implementation __SMACK_static_init()
{

  $bb0:
    $M.40 := 0;
    call {:si_unique_call 2145} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2146} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 2147} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 2148} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 2149} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 2150} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 2151} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.69 := 0;
    call {:si_unique_call 2152} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2153} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.129 := $store.i8($M.129, product_id, 67);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(product_id, $mul.ref(0, 6)), $mul.ref(1, 1)), 89);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(product_id, $mul.ref(0, 6)), $mul.ref(2, 1)), 84);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(product_id, $mul.ref(0, 6)), $mul.ref(3, 1)), 82);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(product_id, $mul.ref(0, 6)), $mul.ref(4, 1)), 65);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(product_id, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.42 := 0;
    call {:si_unique_call 2154} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.46 := 0;
    call {:si_unique_call 2155} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.47 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 2156} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.51 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 2157} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.55 := $0.ref;
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 2158} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.68 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 2159} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.71 := $0.ref;
    $M.73 := 0;
    call {:si_unique_call 2160} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.76 := 0;
    call {:si_unique_call 2161} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := $0.ref;
    $M.81 := $0.ref;
    $M.82 := $0.ref;
    $M.83 := $0.ref;
    $M.84 := $0.ref;
    $M.85 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 2162} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 2163} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 2164} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 2165} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 2166} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 2167} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 2168} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 2169} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 2170} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2171} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2172} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 2173} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 2174} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 2175} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 2176} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 2177} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 2178} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 2179} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 2180} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 2181} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 2182} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 2183} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 2184} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 2185} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 2186} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 2187} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 2188} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 2189} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 2190} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 2191} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.117 := 0;
    call {:si_unique_call 2192} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.118 := 0;
    call {:si_unique_call 2193} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.119 := 0;
    call {:si_unique_call 2194} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 2195} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.121 := 0;
    call {:si_unique_call 2196} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 2197} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 2198} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.124 := 0;
    call {:si_unique_call 2199} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.125 := 0;
    call {:si_unique_call 2200} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, cyapa_gen3_ops, cyapa_gen3_check_fw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(8, 1)), cyapa_gen3_bl_enter);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(16, 1)), cyapa_gen3_bl_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(24, 1)), cyapa_gen3_bl_initiate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(32, 1)), cyapa_gen3_do_fw_update);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(40, 1)), cyapa_gen3_bl_deactivate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(48, 1)), cyapa_gen3_show_baseline);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(56, 1)), cyapa_gen3_do_calibrate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(64, 1)), cyapa_gen3_initialize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(72, 1)), cyapa_gen3_state_parse);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(80, 1)), cyapa_gen3_do_operational_check);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(88, 1)), cyapa_gen3_irq_handler);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(96, 1)), cyapa_gen3_irq_cmd_handler);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(104, 1)), cyapa_gen3_empty_output_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(112, 1)), cyapa_gen3_set_power_mode);
    $M.39 := 1;
    call {:si_unique_call 2201} {:cexpr "ldv_mutex_state_sync_lock_of_cyapa"} boogie_si_record_i32(1);
    $M.128 := 1;
    call {:si_unique_call 2202} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.127 := 1;
    call {:si_unique_call 2203} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.126 := 1;
    call {:si_unique_call 2204} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.22 := 1;
    call {:si_unique_call 2205} {:cexpr "ldv_mutex_cmd_lock_of_cyapa_gen5_cmd_states"} boogie_si_record_i32(1);
    $M.0 := $store.i8($M.0, cyapa_gen5_bl_cmd_key, $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 2));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(6, 1)), $sub.i8(0, 3));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(cyapa_gen5_bl_cmd_key, $mul.ref(0, 8)), $mul.ref(7, 1)), 90);
    $M.0 := $store.i8($M.0, bl_exit, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(2, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(5, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(7, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(8, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(9, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_exit, $mul.ref(0, 11)), $mul.ref(10, 1)), 7);
    $M.0 := $store.i8($M.0, bl_deactivate, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(2, 1)), 59);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(5, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(7, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(8, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(9, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_deactivate, $mul.ref(0, 11)), $mul.ref(10, 1)), 7);
    $M.0 := $store.i8($M.0, security_key, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(3, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(5, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(security_key, $mul.ref(0, 8)), $mul.ref(7, 1)), 7);
    $M.0 := $store.i8($M.0, bl_activate, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(2, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(5, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(7, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(8, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(9, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(bl_activate, $mul.ref(0, 11)), $mul.ref(10, 1)), 7);
    $M.9 := $store.i8($M.9, cyapa_i2c_cmds, 40);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(0, 2)), $mul.ref(1, 1)), 1);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(1, 2)), $mul.ref(0, 1)), 41);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(1, 2)), $mul.ref(1, 1)), 1);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(2, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(2, 2)), $mul.ref(1, 1)), 1);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(3, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(3, 2)), $mul.ref(1, 1)), 27);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(4, 2)), $mul.ref(0, 1)), 40);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(4, 2)), $mul.ref(1, 1)), 0);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(5, 2)), $mul.ref(0, 1)), 42);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(5, 2)), $mul.ref(1, 1)), 27);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(6, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(6, 2)), $mul.ref(1, 1)), 3);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(7, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(7, 2)), $mul.ref(1, 1)), 16);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(8, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(8, 2)), $mul.ref(1, 1)), 16);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(9, 2)), $mul.ref(0, 1)), 16);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(9, 2)), $mul.ref(1, 1)), 16);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(10, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(10, 2)), $mul.ref(1, 1)), 32);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(11, 2)), $mul.ref(0, 1)), 42);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(11, 2)), $mul.ref(1, 1)), 16);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(12, 2)), $mul.ref(0, 1)), 0);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(12, 2)), $mul.ref(1, 1)), 32);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(13, 2)), $mul.ref(0, 1)), 38);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(13, 2)), $mul.ref(1, 1)), 1);
    $M.9 := $store.i8($M.9, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(14, 2)), $mul.ref(0, 1)), 39);
    $M.34 := $store.i8($M.34, $add.ref($add.ref($add.ref(cyapa_i2c_cmds, $mul.ref(0, 30)), $mul.ref(14, 2)), $mul.ref(1, 1)), 1);
    $M.8 := $store.i8($M.8, cyapa_smbus_cmds, 0);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(0, 2)), $mul.ref(1, 1)), 1);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(1, 2)), $mul.ref(0, 1)), 2);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(1, 2)), $mul.ref(1, 1)), 1);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(2, 2)), $mul.ref(0, 1)), 4);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(2, 2)), $mul.ref(1, 1)), 1);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(3, 2)), $mul.ref(0, 1)), $sub.i8(0, 128));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(3, 2)), $mul.ref(1, 1)), 27);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(4, 2)), $mul.ref(0, 1)), $sub.i8(0, 112));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(4, 2)), $mul.ref(1, 1)), 2);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(5, 2)), $mul.ref(0, 1)), $sub.i8(0, 104));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(5, 2)), $mul.ref(1, 1)), 27);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(6, 2)), $mul.ref(0, 1)), $sub.i8(0, 64));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(6, 2)), $mul.ref(1, 1)), 3);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(7, 2)), $mul.ref(0, 1)), $sub.i8(0, 62));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(7, 2)), $mul.ref(1, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(8, 2)), $mul.ref(0, 1)), $sub.i8(0, 60));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(8, 2)), $mul.ref(1, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(9, 2)), $mul.ref(0, 1)), $sub.i8(0, 58));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(9, 2)), $mul.ref(1, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(10, 2)), $mul.ref(0, 1)), $sub.i8(0, 56));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(10, 2)), $mul.ref(1, 1)), 32);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(11, 2)), $mul.ref(0, 1)), $sub.i8(0, 54));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(11, 2)), $mul.ref(1, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(12, 2)), $mul.ref(0, 1)), $sub.i8(0, 52));
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(12, 2)), $mul.ref(1, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(13, 2)), $mul.ref(0, 1)), 6);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(13, 2)), $mul.ref(1, 1)), 1);
    $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(14, 2)), $mul.ref(0, 1)), 8);
    $M.33 := $store.i8($M.33, $add.ref($add.ref($add.ref(cyapa_smbus_cmds, $mul.ref(0, 30)), $mul.ref(14, 2)), $mul.ref(1, 1)), 1);
    $M.134 := $store.ref($M.134, dev_attr_runtime_suspend_scanrate_ms, .str.59);
    $M.134 := $store.i16($M.134, $add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.134 := $store.ref($M.134, $add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_rt_suspend_scanrate);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(dev_attr_runtime_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(40, 1)), cyapa_update_rt_suspend_scanrate);
    $M.135 := $store.ref($M.135, cyapa_power_runtime_entries, dev_attr_runtime_suspend_scanrate_ms);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(cyapa_power_runtime_entries, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.136 := $store.ref($M.136, cyapa_power_runtime_group, power_group_name);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(cyapa_power_runtime_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(cyapa_power_runtime_group, $mul.ref(0, 32)), $mul.ref(16, 1)), cyapa_power_runtime_entries);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(cyapa_power_runtime_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.134 := $store.ref($M.134, dev_attr_suspend_scanrate_ms, .str.56);
    $M.134 := $store.i16($M.134, $add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.134 := $store.ref($M.134, $add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.i8($M.134, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_suspend_scanrate);
    $M.134 := $store.ref($M.134, $add.ref($add.ref(dev_attr_suspend_scanrate_ms, $mul.ref(0, 48)), $mul.ref(40, 1)), cyapa_update_suspend_scanrate);
    $M.135 := $store.ref($M.135, cyapa_power_wakeup_entries, dev_attr_suspend_scanrate_ms);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(cyapa_power_wakeup_entries, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.136 := $store.ref($M.136, cyapa_power_wakeup_group, power_group_name);
    $M.137 := $store.ref($M.137, $add.ref($add.ref(cyapa_power_wakeup_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref(cyapa_power_wakeup_group, $mul.ref(0, 32)), $mul.ref(16, 1)), cyapa_power_wakeup_entries);
    $M.139 := $store.ref($M.139, $add.ref($add.ref(cyapa_power_wakeup_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.140 := $store.ref($M.140, dev_attr_mode, .str.53);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_mode);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_mode, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.140 := $store.ref($M.140, dev_attr_calibrate, .str.52);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_calibrate, $mul.ref(0, 48)), $mul.ref(40, 1)), cyapa_calibrate_store);
    $M.140 := $store.ref($M.140, dev_attr_baseline, .str.51);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_baseline);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_baseline, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.140 := $store.ref($M.140, dev_attr_update_fw, .str.50);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_update_fw, $mul.ref(0, 48)), $mul.ref(40, 1)), cyapa_update_fw_store);
    $M.140 := $store.ref($M.140, dev_attr_product_id, .str.49);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_product_id);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_product_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.140 := $store.ref($M.140, dev_attr_firmware_version, .str.48);
    $M.140 := $store.i16($M.140, $add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.i8($M.140, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(32, 1)), cyapa_show_fm_ver);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(dev_attr_firmware_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.141 := $store.ref($M.141, cyapa_sysfs_entries, dev_attr_firmware_version);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(1, 8)), dev_attr_product_id);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(2, 8)), dev_attr_update_fw);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(3, 8)), dev_attr_baseline);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(4, 8)), dev_attr_calibrate);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(5, 8)), dev_attr_mode);
    $M.141 := $store.ref($M.141, $add.ref($add.ref(cyapa_sysfs_entries, $mul.ref(0, 56)), $mul.ref(6, 8)), $0.ref);
    $M.146 := $store.i8($M.146, cyapa_id_table, 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 121);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.146 := $store.i64($M.146, $add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.146 := $store.i8($M.146, $add.ref($add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.146 := $store.i64($M.146, $add.ref($add.ref($add.ref(cyapa_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.170 := $store.i8($M.170, cyapa_acpi_id, 67);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 89);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 80);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.170 := $store.i64($M.170, $add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 67);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 89);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 65);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 80);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 49);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.170 := $store.i64($M.170, $add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.170 := $store.i64($M.170, $add.ref($add.ref($add.ref(cyapa_acpi_id, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.199 := $store.i8($M.199, __mod_acpi__cyapa_acpi_id_device_table, 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.199 := $store.i64($M.199, $add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.199 := $store.i64($M.199, $add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.199 := $store.i64($M.199, $add.ref($add.ref($add.ref(__mod_acpi__cyapa_acpi_id_device_table, $mul.ref(0, 72)), $mul.ref(2, 24)), $mul.ref(16, 1)), 0);
    $M.200 := $store.i8($M.200, __mod_i2c__cyapa_id_table_device_table, 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.200 := $store.i64($M.200, $add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.200 := $store.i8($M.200, $add.ref($add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.200 := $store.i64($M.200, $add.ref($add.ref($add.ref(__mod_i2c__cyapa_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, cyapa_gen5_ops, cyapa_gen5_check_fw);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(8, 1)), cyapa_gen5_bl_enter);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(16, 1)), cyapa_gen5_bl_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(24, 1)), cyapa_gen5_bl_initiate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(32, 1)), cyapa_gen5_do_fw_update);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(40, 1)), cyapa_gen5_bl_deactivate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(48, 1)), cyapa_gen5_show_baseline);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(56, 1)), cyapa_gen5_do_calibrate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(64, 1)), cyapa_gen5_initialize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(72, 1)), cyapa_gen5_state_parse);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(80, 1)), cyapa_gen5_do_operational_check);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(88, 1)), cyapa_gen5_irq_handler);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(96, 1)), cyapa_gen5_irq_cmd_handler);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(104, 1)), cyapa_empty_pip_output_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(112, 1)), cyapa_gen5_set_power_mode);
    $M.201 := $store.i8($M.201, .str.40, 105);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(1, 1)), 50);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(3, 1)), 45);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(4, 1)), 37);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(6, 1)), 45);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(7, 1)), 37);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(8, 1)), 48);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(9, 1)), 52);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(10, 1)), 120);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(11, 1)), 47);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(12, 1)), 105);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(16, 1)), 116);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(17, 1)), 48);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(.str.40, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    call {:si_unique_call 2206} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 649894);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(cyapa_gen5_sort_application_launch_data, $p0);
    assume {:branchcond $i14} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(cyapa_gen5_sort_hid_descriptor_data, $p0);
    assume {:branchcond $i13} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(cyapa_gen5_sort_bl_exit_data, $p0);
    assume {:branchcond $i12} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(cyapa_gen5_sort_tsg_pip_bl_resp_data, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(cyapa_gen5_sort_system_info_data, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(cyapa_gen5_sort_deep_sleep_data, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(cyapa_gen5_sort_tsg_pip_app_resp_data, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    call {:si_unique_call 2207} $i1 := cyapa_gen5_sort_tsg_pip_app_resp_data(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2208} $i2 := cyapa_gen5_sort_deep_sleep_data(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 2209} $i3 := cyapa_gen5_sort_system_info_data(arg, arg1, arg2);
    $r := $i3;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 2210} $i4 := cyapa_gen5_sort_tsg_pip_bl_resp_data(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 2211} $i5 := cyapa_gen5_sort_bl_exit_data(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 2212} $i6 := cyapa_gen5_sort_hid_descriptor_data(arg, arg1, arg2);
    $r := $i6;
    return;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 2213} $i7 := cyapa_gen5_sort_application_launch_data(arg, arg1, arg2);
    $r := $i7;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 650926);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 651958);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 652990);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, $M.22, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(state_parse_dummy, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(cyapa_gen5_state_parse, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(cyapa_gen3_state_parse, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2214} $i1 := cyapa_gen3_state_parse(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2215} $i2 := cyapa_gen5_state_parse(arg, arg1, arg2);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    $r := $i2;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2216} $i3 := state_parse_dummy(arg, arg1, arg2);
    $r := $i3;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 654022);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $M.24, $M.25, $M.39, $M.32, $CurrAddr, $M.20, $M.21, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i51 := $eq.ref(irq_handler_dummy, $p0);
    assume {:branchcond $i51} true;
    goto $bb24, $bb47;

  $bb47:
    assume !($i51 == 1);
    $i50 := $eq.ref(operational_check_dummy, $p0);
    assume true;
    goto $bb23, $bb46;

  $bb46:
    assume !($i50 == 1);
    $i49 := $eq.ref(initialize_dummy, $p0);
    assume {:branchcond $i49} true;
    goto $bb22, $bb45;

  $bb45:
    assume !($i49 == 1);
    $i48 := $eq.ref(bl_deactivate_dummy, $p0);
    assume {:branchcond $i48} true;
    goto $bb21, $bb44;

  $bb44:
    assume !($i48 == 1);
    $i47 := $eq.ref(bl_activate_dummy, $p0);
    assume {:branchcond $i47} true;
    goto $bb20, $bb43;

  $bb43:
    assume !($i47 == 1);
    $i46 := $eq.ref(bl_enter_dummy, $p0);
    assume true;
    goto $bb19, $bb42;

  $bb42:
    assume !($i46 == 1);
    $i45 := $eq.ref(cyapa_runtime_resume, $p0);
    assume true;
    goto $bb18, $bb41;

  $bb41:
    assume !($i45 == 1);
    $i44 := $eq.ref(cyapa_runtime_suspend, $p0);
    assume true;
    goto $bb17, $bb40;

  $bb40:
    assume !($i44 == 1);
    $i43 := $eq.ref(cyapa_resume, $p0);
    assume {:branchcond $i43} true;
    goto $bb16, $bb39;

  $bb39:
    assume !($i43 == 1);
    $i42 := $eq.ref(cyapa_suspend, $p0);
    assume true;
    goto $bb15, $bb38;

  $bb38:
    assume !($i42 == 1);
    $i41 := $eq.ref(cyapa_open, $p0);
    assume {:branchcond $i41} true;
    goto $bb14, $bb37;

  $bb37:
    assume !($i41 == 1);
    $i40 := $eq.ref(cyapa_gen5_irq_handler, $p0);
    assume true;
    goto $bb13, $bb36;

  $bb36:
    assume !($i40 == 1);
    $i39 := $eq.ref(cyapa_gen5_do_operational_check, $p0);
    assume {:branchcond $i39} true;
    goto $bb12, $bb35;

  $bb35:
    assume !($i39 == 1);
    $i38 := $eq.ref(cyapa_gen5_initialize, $p0);
    assume true;
    goto $bb11, $bb34;

  $bb34:
    assume !($i38 == 1);
    $i37 := $eq.ref(cyapa_gen5_bl_deactivate, $p0);
    assume true;
    goto $bb10, $bb33;

  $bb33:
    assume !($i37 == 1);
    $i36 := $eq.ref(cyapa_gen5_bl_activate, $p0);
    assume {:branchcond $i36} true;
    goto $bb9, $bb32;

  $bb32:
    assume !($i36 == 1);
    $i35 := $eq.ref(cyapa_gen5_bl_enter, $p0);
    assume true;
    goto $bb8, $bb31;

  $bb31:
    assume !($i35 == 1);
    $i34 := $eq.ref(cyapa_gen3_irq_handler, $p0);
    assume true;
    goto $bb7, $bb30;

  $bb30:
    assume !($i34 == 1);
    $i33 := $eq.ref(cyapa_gen3_do_operational_check, $p0);
    assume {:branchcond $i33} true;
    goto $bb6, $bb29;

  $bb29:
    assume !($i33 == 1);
    $i32 := $eq.ref(cyapa_gen3_initialize, $p0);
    assume true;
    goto $bb5, $bb28;

  $bb28:
    assume !($i32 == 1);
    $i31 := $eq.ref(cyapa_gen3_bl_deactivate, $p0);
    assume true;
    goto $bb4, $bb27;

  $bb27:
    assume !($i31 == 1);
    $i30 := $eq.ref(cyapa_gen3_bl_activate, $p0);
    assume true;
    goto $bb3, $bb26;

  $bb26:
    assume !($i30 == 1);
    $i29 := $eq.ref(cyapa_gen3_bl_enter, $p0);
    assume true;
    goto $bb2, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume false;
    return;

  $bb2:
    assume $i29 == 1;
    call {:si_unique_call 2217} $i1 := cyapa_gen3_bl_enter(arg);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    $r := $i1;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i30 == 1;
    call {:si_unique_call 2218} $i2 := cyapa_gen3_bl_activate(arg);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    $r := $i2;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    call {:si_unique_call 2219} $i3 := cyapa_gen3_bl_deactivate(arg);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    $r := $i3;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i32 == 1;
    call {:si_unique_call 2220} $i4 := cyapa_gen3_initialize(arg);
    $r := $i4;
    return;

  $bb6:
    assume $i33 == 1;
    call {:si_unique_call 2221} $i5 := cyapa_gen3_do_operational_check(arg);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    $r := $i5;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    call {:si_unique_call 2222} $i6 := cyapa_gen3_irq_handler(arg);
    $r := $i6;
    return;

  $bb8:
    assume $i35 == 1;
    call {:si_unique_call 2223} $i7 := cyapa_gen5_bl_enter(arg);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    $r := $i7;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i36 == 1;
    call {:si_unique_call 2224} $i8 := cyapa_gen5_bl_activate(arg);
    $r := $i8;
    return;

  $bb10:
    assume $i37 == 1;
    call {:si_unique_call 2225} $i9 := cyapa_gen5_bl_deactivate(arg);
    $r := $i9;
    return;

  $bb11:
    assume $i38 == 1;
    call {:si_unique_call 2226} $i10 := cyapa_gen5_initialize(arg);
    $r := $i10;
    return;

  $bb12:
    assume $i39 == 1;
    call {:si_unique_call 2227} $i11 := cyapa_gen5_do_operational_check(arg);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    $r := $i11;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i40 == 1;
    call {:si_unique_call 2228} $i12 := cyapa_gen5_irq_handler(arg);
    $r := $i12;
    return;

  $bb14:
    assume $i41 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2229} $i14 := cyapa_open($p13);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    $r := $i14;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i42 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2230} $i16 := cyapa_suspend($p15);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    $r := $i16;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i43 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2231} $i18 := cyapa_resume($p17);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    $r := $i18;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i44 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2232} $i20 := cyapa_runtime_suspend($p19);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    $r := $i20;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i45 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2233} $i22 := cyapa_runtime_resume($p21);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    $r := $i22;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i46 == 1;
    call {:si_unique_call 2234} $i23 := bl_enter_dummy(arg);
    $r := $i23;
    return;

  $bb20:
    assume $i47 == 1;
    call {:si_unique_call 2235} $i24 := bl_activate_dummy(arg);
    $r := $i24;
    return;

  $bb21:
    assume $i48 == 1;
    call {:si_unique_call 2236} $i25 := bl_deactivate_dummy(arg);
    $r := $i25;
    return;

  $bb22:
    assume $i49 == 1;
    call {:si_unique_call 2237} $i26 := initialize_dummy(arg);
    $r := $i26;
    return;

  $bb23:
    assume $i50 == 1;
    call {:si_unique_call 2238} $i27 := operational_check_dummy(arg);
    $r := $i27;
    return;

  $bb24:
    assume $i51 == 1;
    call {:si_unique_call 2239} $i28 := irq_handler_dummy(arg);
    $r := $i28;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 655054);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i8, arg2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i8, arg2: i16) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(set_power_mode_dummy, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(cyapa_gen5_set_power_mode, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(cyapa_gen3_set_power_mode, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2240} $i1 := cyapa_gen3_set_power_mode(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2241} $i2 := cyapa_gen5_set_power_mode(arg, arg1, arg2);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    $r := $i2;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2242} $i3 := set_power_mode_dummy(arg, arg1, arg2);
    $r := $i3;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 656086);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.19, $M.0, $CurrAddr;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(irq_cmd_handler_dummy, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(cyapa_gen5_irq_cmd_handler, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(cyapa_gen3_irq_cmd_handler, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2243} $i1 := cyapa_gen3_irq_cmd_handler(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2244} $i2 := cyapa_gen5_irq_cmd_handler(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2245} $i3 := irq_cmd_handler_dummy(arg);
    $r := $i3;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 657118);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(sort_empty_output_data_dummy, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(cyapa_empty_pip_output_data, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(cyapa_gen3_empty_output_data, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2246} $i1 := cyapa_gen3_empty_output_data(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2247} $i2 := cyapa_empty_pip_output_data(arg, arg1, arg2, arg3);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 2248} $i3 := sort_empty_output_data_dummy(arg, arg1, arg2, arg3);
    $r := $i3;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 658150);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 659182);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $M.24, $M.25, $M.39, $M.32, $CurrAddr, $M.20, $M.21, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.22, $M.26;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i69 := $eq.ref(irq_handler_dummy, $p0);
    assume true;
    goto $bb24, $bb47;

  $bb47:
    assume !($i69 == 1);
    $i68 := $eq.ref(operational_check_dummy, $p0);
    assume true;
    goto $bb23, $bb46;

  $bb46:
    assume !($i68 == 1);
    $i67 := $eq.ref(initialize_dummy, $p0);
    assume true;
    goto $bb22, $bb45;

  $bb45:
    assume !($i67 == 1);
    $i66 := $eq.ref(bl_deactivate_dummy, $p0);
    assume {:branchcond $i66} true;
    goto $bb21, $bb44;

  $bb44:
    assume !($i66 == 1);
    $i65 := $eq.ref(bl_activate_dummy, $p0);
    assume true;
    goto $bb20, $bb43;

  $bb43:
    assume !($i65 == 1);
    $i64 := $eq.ref(bl_enter_dummy, $p0);
    assume true;
    goto $bb19, $bb42;

  $bb42:
    assume !($i64 == 1);
    $i63 := $eq.ref(cyapa_runtime_resume, $p0);
    assume true;
    goto $bb18, $bb41;

  $bb41:
    assume !($i63 == 1);
    $i62 := $eq.ref(cyapa_runtime_suspend, $p0);
    assume {:branchcond $i62} true;
    goto $bb17, $bb40;

  $bb40:
    assume !($i62 == 1);
    $i61 := $eq.ref(cyapa_resume, $p0);
    assume {:branchcond $i61} true;
    goto $bb16, $bb39;

  $bb39:
    assume !($i61 == 1);
    $i60 := $eq.ref(cyapa_suspend, $p0);
    assume {:branchcond $i60} true;
    goto $bb15, $bb38;

  $bb38:
    assume !($i60 == 1);
    $i59 := $eq.ref(cyapa_open, $p0);
    assume true;
    goto $bb14, $bb37;

  $bb37:
    assume !($i59 == 1);
    $i58 := $eq.ref(cyapa_gen5_irq_handler, $p0);
    assume {:branchcond $i58} true;
    goto $bb13, $bb36;

  $bb36:
    assume !($i58 == 1);
    $i57 := $eq.ref(cyapa_gen5_do_operational_check, $p0);
    assume {:branchcond $i57} true;
    goto $bb12, $bb35;

  $bb35:
    assume !($i57 == 1);
    $i56 := $eq.ref(cyapa_gen5_initialize, $p0);
    assume true;
    goto $bb11, $bb34;

  $bb34:
    assume !($i56 == 1);
    $i55 := $eq.ref(cyapa_gen5_bl_deactivate, $p0);
    assume true;
    goto $bb10, $bb33;

  $bb33:
    assume !($i55 == 1);
    $i54 := $eq.ref(cyapa_gen5_bl_activate, $p0);
    assume true;
    goto $bb9, $bb32;

  $bb32:
    assume !($i54 == 1);
    $i53 := $eq.ref(cyapa_gen5_bl_enter, $p0);
    assume {:branchcond $i53} true;
    goto $bb8, $bb31;

  $bb31:
    assume !($i53 == 1);
    $i52 := $eq.ref(cyapa_gen3_irq_handler, $p0);
    assume true;
    goto $bb7, $bb30;

  $bb30:
    assume !($i52 == 1);
    $i51 := $eq.ref(cyapa_gen3_do_operational_check, $p0);
    assume {:branchcond $i51} true;
    goto $bb6, $bb29;

  $bb29:
    assume !($i51 == 1);
    $i50 := $eq.ref(cyapa_gen3_initialize, $p0);
    assume true;
    goto $bb5, $bb28;

  $bb28:
    assume !($i50 == 1);
    $i49 := $eq.ref(cyapa_gen3_bl_deactivate, $p0);
    assume {:branchcond $i49} true;
    goto $bb4, $bb27;

  $bb27:
    assume !($i49 == 1);
    $i48 := $eq.ref(cyapa_gen3_bl_activate, $p0);
    assume {:branchcond $i48} true;
    goto $bb3, $bb26;

  $bb26:
    assume !($i48 == 1);
    $i47 := $eq.ref(cyapa_gen3_bl_enter, $p0);
    assume {:branchcond $i47} true;
    goto $bb2, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume false;
    return;

  $bb2:
    assume $i47 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2249} $i2 := cyapa_gen3_bl_enter($p1);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    $r := $i2;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i48 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2250} $i4 := cyapa_gen3_bl_activate($p3);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    $r := $i4;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i49 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2251} $i6 := cyapa_gen3_bl_deactivate($p5);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    $r := $i6;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i50 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2252} $i8 := cyapa_gen3_initialize($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i51 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2253} $i10 := cyapa_gen3_do_operational_check($p9);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    $r := $i10;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i52 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2254} $i12 := cyapa_gen3_irq_handler($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i53 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2255} $i14 := cyapa_gen5_bl_enter($p13);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    $r := $i14;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i54 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2256} $i16 := cyapa_gen5_bl_activate($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i55 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2257} $i18 := cyapa_gen5_bl_deactivate($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i56 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2258} $i20 := cyapa_gen5_initialize($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i57 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2259} $i22 := cyapa_gen5_do_operational_check($p21);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    $r := $i22;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i58 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2260} $i24 := cyapa_gen5_irq_handler($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i59 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2261} $i26 := cyapa_open($p25);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    $r := $i26;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i60 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2262} $i28 := cyapa_suspend($p27);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    $r := $i28;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i61 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2263} $i30 := cyapa_resume($p29);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    $r := $i30;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i62 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2264} $i32 := cyapa_runtime_suspend($p31);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    $r := $i32;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i63 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2265} $i34 := cyapa_runtime_resume($p33);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    $r := $i34;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i64 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2266} $i36 := bl_enter_dummy($p35);
    $r := $i36;
    return;

  $bb20:
    assume $i65 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2267} $i38 := bl_activate_dummy($p37);
    $r := $i38;
    return;

  $bb21:
    assume $i66 == 1;
    $p39 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2268} $i40 := bl_deactivate_dummy($p39);
    $r := $i40;
    return;

  $bb22:
    assume $i67 == 1;
    $p41 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2269} $i42 := initialize_dummy($p41);
    $r := $i42;
    return;

  $bb23:
    assume $i68 == 1;
    $p43 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2270} $i44 := operational_check_dummy($p43);
    $r := $i44;
    return;

  $bb24:
    assume $i69 == 1;
    $p45 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2271} $i46 := irq_handler_dummy($p45);
    $r := $i46;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 660214);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.10, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.22, $M.23, $M.24, $M.25, $M.39, $M.20, $M.21, assertsPassed, $M.32, $M.35, $M.36, $M.37, $M.38, $M.26;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(update_fw_dummy, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i22 == 1);
    $i21 := $eq.ref(bl_initiate_dummy, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i21 == 1);
    $i20 := $eq.ref(check_fw_dummy, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i20 == 1);
    $i19 := $eq.ref(cyapa_probe, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i19 == 1);
    $i18 := $eq.ref(cyapa_gen5_do_fw_update, $p0);
    assume {:branchcond $i18} true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i18 == 1);
    $i17 := $eq.ref(cyapa_gen5_bl_initiate, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i17 == 1);
    $i16 := $eq.ref(cyapa_gen5_check_fw, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i16 == 1);
    $i15 := $eq.ref(cyapa_gen3_do_fw_update, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i15 == 1);
    $i14 := $eq.ref(cyapa_gen3_bl_initiate, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(cyapa_gen3_check_fw, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    call {:si_unique_call 2272} $i1 := cyapa_gen3_check_fw(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i14 == 1;
    call {:si_unique_call 2273} $i2 := cyapa_gen3_bl_initiate(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i15 == 1;
    call {:si_unique_call 2274} $i3 := cyapa_gen3_do_fw_update(arg, arg1);
    $r := $i3;
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 2275} $i4 := cyapa_gen5_check_fw(arg, arg1);
    $r := $i4;
    return;

  $bb6:
    assume $i17 == 1;
    call {:si_unique_call 2276} $i5 := cyapa_gen5_bl_initiate(arg, arg1);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    $r := $i5;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    call {:si_unique_call 2277} $i6 := cyapa_gen5_do_fw_update(arg, arg1);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    $r := $i6;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2278} $i9 := cyapa_probe($p7, $p8);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    $r := $i9;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 2279} $i10 := check_fw_dummy(arg, arg1);
    $r := $i10;
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 2280} $i11 := bl_initiate_dummy(arg, arg1);
    $r := $i11;
    return;

  $bb11:
    assume $i22 == 1;
    call {:si_unique_call 2281} $i12 := update_fw_dummy(arg, arg1);
    $r := $i12;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 661246);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 662278);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.27, $M.0, $M.15, $M.13, $M.14, $M.29, $M.28, $M.17, $M.16, $M.18, $M.39, $CurrAddr, $M.30, $M.31, assertsPassed, $M.20, $M.21, $M.22;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(cyapa_show_rt_suspend_scanrate, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(cyapa_show_suspend_scanrate, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(cyapa_show_mode, $p0);
    assume {:branchcond $i14} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(cyapa_show_baseline, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(cyapa_show_product_id, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(cyapa_show_fm_ver, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(cyapa_gen5_show_baseline, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(cyapa_gen3_show_baseline, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 2282} $i1 := cyapa_gen3_show_baseline(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 2283} $i2 := cyapa_gen5_show_baseline(arg, arg1, arg2);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    $r := $i2;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 2284} $i3 := cyapa_show_fm_ver(arg, arg1, arg2);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    $r := $i3;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 2285} $i4 := cyapa_show_product_id(arg, arg1, arg2);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    $r := $i4;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 2286} $i5 := cyapa_show_baseline(arg, arg1, arg2);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    $r := $i5;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    call {:si_unique_call 2287} $i6 := cyapa_show_mode(arg, arg1, arg2);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    $r := $i6;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    call {:si_unique_call 2288} $i7 := cyapa_show_suspend_scanrate(arg, arg1, arg2);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    $r := $i7;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    call {:si_unique_call 2289} $i8 := cyapa_show_rt_suspend_scanrate(arg, arg1, arg2);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    $r := $i8;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 663310);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.27, $M.28, $M.39, $CurrAddr, assertsPassed, $M.20, $M.21, $M.10, $M.22, $M.32, $M.23, $M.24, $M.25, $M.35, $M.36, $M.37, $M.38, $M.42, $M.43, $M.40, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.26;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(cyapa_update_rt_suspend_scanrate, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(cyapa_update_suspend_scanrate, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(cyapa_calibrate_store, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(cyapa_update_fw_store, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(cyapa_gen5_do_calibrate, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(cyapa_gen3_do_calibrate, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    call {:si_unique_call 2290} $i1 := cyapa_gen3_do_calibrate(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 2291} $i2 := cyapa_gen5_do_calibrate(arg, arg1, arg2, arg3);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    $r := $i2;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 2292} $i3 := cyapa_update_fw_store(arg, arg1, arg2, arg3);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    $r := $i3;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 2293} $i4 := cyapa_calibrate_store(arg, arg1, arg2, arg3);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    $r := $i4;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 2294} $i5 := cyapa_update_suspend_scanrate(arg, arg1, arg2, arg3);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    $r := $i5;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    call {:si_unique_call 2295} $i6 := cyapa_update_rt_suspend_scanrate(arg, arg1, arg2, arg3);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    $r := $i6;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.40, $M.48, $M.44, $M.75, $M.66, $M.72, $M.69, $M.52, $M.129, $M.42, $M.43, $M.46, $M.47, $M.50, $M.51, $M.54, $M.55, $M.62, $M.63, $M.64, $M.65, $M.67, $M.68, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.39, $M.128, $M.127, $M.126, $M.22, $M.9, $M.34, $M.8, $M.33, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.146, $M.170, $M.199, $M.200, $M.201, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2296} __SMACK_static_init();
    call {:si_unique_call 2297} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.79, $M.78, $M.80, $M.62, $M.81, $M.82, $M.83, $M.65, $M.84, $M.85, $M.64, $M.63, $M.86, $M.0, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.40, $M.66, $M.124, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.125, $M.48, $M.44, $M.75, $M.72, $M.69, $M.52, $M.129, $M.42, $M.43, $M.46, $M.47, $M.50, $M.51, $M.54, $M.55, $M.67, $M.68, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.39, $M.128, $M.127, $M.126, $M.22, $M.9, $M.34, $M.8, $M.33, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.146, $M.170, $M.199, $M.200, $M.201, $CurrAddr, $M.19, $M.10, $M.11, $M.12, $M.20, $M.21, $M.27, $M.28, $M.23, $M.24, $M.25, $M.26, $M.15, $M.13, $M.14, $M.29, $M.17, $M.16, $M.18, $M.32, $M.30, $M.31, $M.35, $M.36, $M.37, $M.38;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation cyapa_gen3_bl_enter_loop_$bb14(in_$p0: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i19: i32, in_$i18: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i20: i32, in_$i31: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i19: i32, out_$i18: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i20: i32, out_$i31: i1)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i18, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i31 := in_$i14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i18, in_$p21, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i20, in_$i31;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  $bb29:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i20;
    goto $bb29_dummy;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i20, 0);
    goto corral_source_split_115;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i30;
    goto $bb19;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i19;
    goto $bb19;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i14, $sub.i32(0, 500));
    call {:si_unique_call 16} {:cexpr "waiting_time"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_112;

  $bb17:
    assume out_$i17 == 1;
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i15;
    assume true;
    goto $bb17;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, $sub.i32(0, 110));
    goto corral_source_split_109;

  $bb15:
    assume out_$i16 == 1;
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_106;

  SeqInstr_6:
    call {:si_unique_call 15} {:cexpr "error"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_105;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} out_$i15 := cyapa_poll_state(in_$p0, 500);
    goto SeqInstr_5;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i14, $sub.i32(0, 100));
    call {:si_unique_call 18} {:cexpr "waiting_time"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_135;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} msleep(100);
    goto corral_source_split_134;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb24;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 2);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_122;

  $bb22:
    assume out_$i23 == 1;
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 2);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_118;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_117;

  $bb16:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i18, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i31 := cyapa_gen3_bl_enter_loop_$bb14(in_$p0, out_$i14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i18, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i20, out_$i31);
    return;

  exit:
    return;
}



procedure cyapa_gen3_bl_enter_loop_$bb14(in_$p0: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i19: i32, in_$i18: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i20: i32, in_$i31: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i19: i32, out_$i18: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i20: i32, out_$i31: i1);
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_gen3_show_baseline_loop_$bb14(in_$p5: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i16: i32, in_$i17: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i16: i32, out_$i17: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i16, out_$i17, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i16, in_$i17, in_$i22, in_$i23, in_$i24, in_$i26, in_$i27, in_$i28;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i19, out_$i18;
    goto $bb17_dummy;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb17;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} out_$i19 := cyapa_read_byte(in_$p5, 2);
    call {:si_unique_call 52} {:cexpr "ret"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} usleep_range(10000, 20000);
    goto corral_source_split_245;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$i18, out_$i28 := out_$i26, out_$i26;
    assume true;
    goto $bb15;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_260;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 53} {:cexpr "tries"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_259;

  $bb20:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i17;
    assume true;
    goto $bb20;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 3);
    goto corral_source_split_252;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i16, 3);
    goto corral_source_split_251;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i16, out_$i17, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28 := cyapa_gen3_show_baseline_loop_$bb14(in_$p5, out_$i18, out_$i19, out_$i20, out_$i21, out_$i16, out_$i17, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure cyapa_gen3_show_baseline_loop_$bb14(in_$p5: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i16: i32, in_$i17: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i16: i32, out_$i17: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32);



implementation cyapa_gen3_do_calibrate_loop_$bb14(in_$p6: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i17: i32, in_$i18: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i17: i32, out_$i18: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$i22, out_$i17, out_$i18, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32 := in_$i19, in_$i20, in_$i21, in_$i22, in_$i17, in_$i18, in_$i23, in_$i24, in_$i25, in_$i26, in_$i29, in_$i30, in_$i31, in_$i32;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i20, out_$i19;
    goto $bb17_dummy;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb17;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} out_$i20 := cyapa_read_byte(in_$p6, 2);
    call {:si_unique_call 82} {:cexpr "ret"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} usleep_range(100000, 200000);
    goto corral_source_split_339;

  $bb15:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i19, out_$i31, out_$i32 := out_$i29, out_$i17, out_$i29;
    assume true;
    goto $bb15;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_354;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i18, 1);
    call {:si_unique_call 83} {:cexpr "tries"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_353;

  $bb20:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i25, out_$i26 := out_$i18, out_$i17;
    assume true;
    goto $bb20;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 3);
    goto corral_source_split_346;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i17, 3);
    goto corral_source_split_345;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$i22, out_$i17, out_$i18, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32 := cyapa_gen3_do_calibrate_loop_$bb14(in_$p6, out_$i19, out_$i20, out_$i21, out_$i22, out_$i17, out_$i18, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32);
    return;

  exit:
    return;
}



procedure cyapa_gen3_do_calibrate_loop_$bb14(in_$p6: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i17: i32, in_$i18: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i17: i32, out_$i18: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32);



implementation cyapa_gen3_irq_handler_loop_$bb16(in_$p1: ref, in_$p3: ref, in_$i36: i32, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i38: i32)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i38 := in_$p39, in_$p40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i38;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  $bb18:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i68;
    goto $bb18_dummy;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, in_$i36);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i38, 1);
    call {:si_unique_call 120} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} input_report_abs(in_$p3, 58, out_$i67);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.7, out_$p65);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(3, 1));
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} input_report_abs(in_$p3, 54, out_$i64);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$i64 := $or.i32(out_$i60, out_$i63);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.7, out_$p61);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(2, 1));
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$i60 := $shl.i32(out_$i59, 8);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 15);
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.7, out_$p56);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(0, 1));
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} input_report_abs(in_$p3, 53, out_$i55);
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i55 := $or.i32(out_$i51, out_$i54);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i32(out_$i53);
    goto corral_source_split_667;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.7, out_$p52);
    goto corral_source_split_666;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(1, 1));
    goto corral_source_split_665;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    out_$i51 := $shl.i32(out_$i50, 4);
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, 240);
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_662;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.7, out_$p47);
    goto corral_source_split_661;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(0, 1));
    goto corral_source_split_660;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} input_mt_report_slot_state(in_$p3, 0, 1);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} input_mt_slot(in_$p3, out_$i46);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, $sub.i32(0, 1));
    call {:si_unique_call 114} {:cexpr "slot"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.7, out_$p43);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 5)), $mul.ref(4, 1));
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i38);
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_651;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 27)), $mul.ref(2, 1));
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i38 := cyapa_gen3_irq_handler_loop_$bb16(in_$p1, in_$p3, in_$i36, out_$p39, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i38);
    return;

  exit:
    return;
}



procedure cyapa_gen3_irq_handler_loop_$bb16(in_$p1: ref, in_$p3: ref, in_$i36: i32, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i38: i32);



implementation cyapa_gen5_check_fw_loop_$bb24(in_$p7: ref, in_$i60: i32, in_$i62: i32, in_$i67: i32, in_$i68: i64, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i16, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i65: i32, in_$i66: i16, in_$i78: i16) returns (out_$i67: i32, out_$i68: i64, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i16, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i65: i32, out_$i66: i16, out_$i78: i16)
{

  entry:
    out_$i67, out_$i68, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i65, out_$i66, out_$i78 := in_$i67, in_$i68, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i65, in_$i66, in_$i78;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;

  $bb26:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i65, out_$i66 := out_$i76, out_$i75;
    goto $bb26_dummy;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i75;
    assume true;
    goto $bb26;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(in_$i62, out_$i76);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i65, 1);
    call {:si_unique_call 205} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} out_$i75 := crc_itu_t(out_$i74, out_$p72, 128);
    call {:si_unique_call 204} {:cexpr "app_crc"} boogie_si_record_i16(out_$i75);
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i16(out_$i73);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i16.i32(out_$i66);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 14)), $mul.ref(14, 1)), $mul.ref(out_$i68, 134)), $mul.ref(6, 1));
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_1043;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(in_$i60, out_$i65);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i67, out_$i68, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i65, out_$i66, out_$i78 := cyapa_gen5_check_fw_loop_$bb24(in_$p7, in_$i60, in_$i62, out_$i67, out_$i68, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i65, out_$i66, out_$i78);
    return;

  exit:
    return;
}



procedure cyapa_gen5_check_fw_loop_$bb24(in_$p7: ref, in_$i60: i32, in_$i62: i32, in_$i67: i32, in_$i68: i64, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i16, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i65: i32, in_$i66: i16, in_$i78: i16) returns (out_$i67: i32, out_$i68: i64, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i16, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i65: i32, out_$i66: i16, out_$i78: i16);



implementation cyapa_gen5_do_fw_update_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i14: i32, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i25: i32, out_$i26: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i16 := in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i25, in_$i26, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1262;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i25;
    goto $bb10_dummy;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(in_$i14, out_$i25);
    goto corral_source_split_1277;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i16, 1);
    call {:si_unique_call 243} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1276;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    assume true;
    goto $bb7;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1269;

  SeqInstr_30:
    call {:si_unique_call 241} {:cexpr "error"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1268;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_$i21 := cyapa_gen5_write_fw_block(in_$p0, out_$p20);
    goto SeqInstr_29;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 134));
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1265;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 14)), $mul.ref(14, 1));
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i16 := cyapa_gen5_do_fw_update_loop_$bb4(in_$p0, in_$p7, in_$i14, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i16);
    return;

  exit:
    return;
}



procedure cyapa_gen5_do_fw_update_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i14: i32, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i25: i32, out_$i26: i1, out_$i16: i32);
  modifies $M.0, $CurrAddr, $M.22, assertsPassed;



implementation cyapa_empty_pip_output_data_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i12: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i14: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i1, in_$i38: i1, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i66: i64, in_$i67: i1, in_$i68: i1, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$i74: i8, in_$i75: i1, in_$i76: i32, in_$i65: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i82: i1, in_$i83: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i13: i32, out_$i14: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i1, out_$i38: i1, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i66: i64, out_$i67: i1, out_$i68: i1, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$i74: i8, out_$i75: i1, out_$i76: i32, out_$i65: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i82: i1, out_$i83: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i13, out_$i14, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65, out_$i31, out_$i32, out_$i33, out_$i82, out_$i83 := in_$i15, in_$i16, in_$i17, in_$i13, in_$i14, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i65, in_$i31, in_$i32, in_$i33, in_$i82, in_$i83;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i16, out_$i15;
    goto $bb10_dummy;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, 5);
    goto corral_source_split_1967;

  $bb8:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i83 := out_$i31, out_$i32, out_$i33;
    assume true;
    goto $bb8;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i31, 0);
    goto corral_source_split_1994;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32, out_$i33 := out_$i58, out_$i65, $sub.i32(0, 22);
    goto $bb18;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32, out_$i33 := out_$i14, out_$i13, out_$i22;
    goto $bb18;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32, out_$i33 := out_$i14, out_$i30, out_$i22;
    goto $bb18;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i13, 1);
    call {:si_unique_call 379} {:cexpr "empty_count"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1988;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 2);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    call {:si_unique_call 378} {:cexpr "length"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} out_$i27 := get_unaligned_le16(out_$p26);
    call {:si_unique_call 377} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i27);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_1982;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_1981;

  $bb14:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    assume true;
    goto $bb14;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    call {:si_unique_call 375} {:cexpr "error"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} out_$i21 := cyapa_i2c_pip_read(in_$p0, out_$p20, 2);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_1974;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_1973;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i1.i8(out_$i43);
    call {:si_unique_call 381} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i44);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    call {:si_unique_call 380} out_$i43 := devirtbounce(in_$p3, in_$p0, out_$p42, 2);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2013;

  $bb28:
    assume out_$i40 == 1;
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2009;

  $bb26:
    assume out_$i38 == 1;
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(in_$i12, 0);
    goto corral_source_split_2006;

  $bb23:
    assume out_$i37 == 1;
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2002;

  $bb21:
    assume out_$i35 == 1;
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i28, 0);
    goto corral_source_split_1999;

  $bb20:
    assume !(out_$i34 == 1);
    goto corral_source_split_1998;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i28, 256);
    goto corral_source_split_1991;

  $bb17:
    assume !(out_$i29 == 1);
    goto corral_source_split_1990;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb25;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb25;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb45;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i64;
    goto $bb45;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(0, 1);
    call {:si_unique_call 390} {:cexpr "empty_count"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_2049;

  $bb43:
    assume out_$i63 == 1;
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i63 := $sle.i32(out_$i62, 2);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i61);
    call {:si_unique_call 389} {:cexpr "length"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i61 := get_unaligned_le16(out_$p60);
    call {:si_unique_call 388} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i61);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2042;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 386} {:cexpr "report_count"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2041;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb41;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i64.i32(out_$i54);
    call {:si_unique_call 385} {:cexpr "error"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_$i54 := cyapa_i2c_pip_read(in_$p0, out_$p52, out_$i53);
    call {:si_unique_call 384} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i28);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_2033;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2032;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb22:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i62;
    assume true;
    goto $bb54;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i8.i1(out_$i74);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i8(out_$i73);
    call {:si_unique_call 392} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i74);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    call {:si_unique_call 391} out_$i73 := devirtbounce(in_$p3, in_$p0, out_$p72, out_$i62);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p5, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2065;

  $bb51:
    assume out_$i70 == 1;
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_2061;

  $bb49:
    assume out_$i68 == 1;
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(in_$i12, 0);
    goto corral_source_split_2058;

  $bb46:
    assume out_$i67 == 1;
    goto corral_source_split_2057;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2052;

  $bb44:
    assume !(out_$i63 == 1);
    goto corral_source_split_2051;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb48;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb48;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i13, out_$i14, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65, out_$i31, out_$i32, out_$i33, out_$i82, out_$i83 := cyapa_empty_pip_output_data_loop_$bb7(in_$p0, in_$p1, in_$p3, in_$p5, in_$i12, out_$i15, out_$i16, out_$i17, out_$i13, out_$i14, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i65, out_$i31, out_$i32, out_$i33, out_$i82, out_$i83);
    return;

  exit:
    return;
}



procedure cyapa_empty_pip_output_data_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i12: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i13: i32, in_$i14: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i1, in_$i38: i1, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i16, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i66: i64, in_$i67: i1, in_$i68: i1, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$i74: i8, in_$i75: i1, in_$i76: i32, in_$i65: i32, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i82: i1, in_$i83: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i13: i32, out_$i14: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i1, out_$i38: i1, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i16, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i66: i64, out_$i67: i1, out_$i68: i1, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$i74: i8, out_$i75: i1, out_$i76: i32, out_$i65: i32, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i82: i1, out_$i83: i32);



implementation cyapa_gen5_get_interval_time_loop_$bb33(in_$i58: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i59: i16, in_$i60: i16, in_$i74: i16) returns (out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i59: i16, out_$i60: i16, out_$i74: i16)
{

  entry:
    out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i59, out_$i60, out_$i74 := in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i59, in_$i60, in_$i74;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  $bb35:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i71, out_$i68;
    goto $bb35_dummy;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i68;
    assume true;
    goto $bb35;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i32(in_$i58, out_$i72);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i71);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i32.i16(out_$i70);
    call {:si_unique_call 429} {:cexpr "i"} boogie_si_record_i16(out_$i71);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i69, 1);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i59);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i16(out_$i67);
    call {:si_unique_call 428} {:cexpr "mask"} boogie_si_record_i16(out_$i68);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i67 := $or.i32(out_$i65, out_$i66);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i16.i32(out_$i60);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i16.i32(out_$i64);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i16(out_$i63);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i63 := $shl.i32(255, out_$i62);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$i62 := $mul.i32(out_$i61, 8);
    goto corral_source_split_2332;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i59);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i59, out_$i60, out_$i74 := cyapa_gen5_get_interval_time_loop_$bb33(in_$i58, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i59, out_$i60, out_$i74);
    return;

  exit:
    return;
}



procedure cyapa_gen5_get_interval_time_loop_$bb33(in_$i58: i32, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i32, in_$i71: i16, in_$i72: i32, in_$i73: i1, in_$i59: i16, in_$i60: i16, in_$i74: i16) returns (out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i32, out_$i71: i16, out_$i72: i32, out_$i73: i1, out_$i59: i16, out_$i60: i16, out_$i74: i16);



implementation cyapa_do_i2c_pip_cmd_polling_loop_$bb20(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i20: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32) returns (out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42 := in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i39, in_$i40, in_$i41, in_$i42;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  $bb28:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i39;
    goto $bb28_dummy;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i31, out_$i39;
    assume true;
    goto $bb28;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i40 := $sgt.i32(out_$i39, 0);
    goto corral_source_split_2940;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 513} {:cexpr "tries"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_2939;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb22;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_$i31 := cyapa_empty_pip_output_data(in_$p0, in_$p3, in_$p4, in_$p6);
    call {:si_unique_call 512} {:cexpr "error"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p4, in_$i20);
    goto corral_source_split_2929;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} usleep_range(3000, 5000);
    goto corral_source_split_2928;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i30, out_$i31;
    assume true;
    goto $bb24;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, in_$p4);
    goto corral_source_split_2934;

  $bb23:
    assume !(out_$i32 == 1);
    goto corral_source_split_2933;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42 := cyapa_do_i2c_pip_cmd_polling_loop_$bb20(in_$p0, in_$p3, in_$p4, in_$p6, in_$i20, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i39, out_$i40, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure cyapa_do_i2c_pip_cmd_polling_loop_$bb20(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i20: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32) returns (out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32);
  modifies $M.0;



implementation cyapa_gen5_report_touches_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i10: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i10 := in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i15;
    goto $bb6_dummy;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i15, in_$i8);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i10, 1);
    call {:si_unique_call 560} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} cyapa_gen5_report_slot_data(in_$p0, out_$p14);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 12));
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_3144;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref(0, 127)), $mul.ref(7, 1));
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i10 := cyapa_gen5_report_touches_loop_$bb4(in_$p0, in_$p1, in_$i8, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i10);
    return;

  exit:
    return;
}



procedure cyapa_gen5_report_touches_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i10: i32);



implementation cyapa_gen5_read_panel_scan_raw_data_loop_$bb43(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p22: ref, in_$i93: i32, in_$i101: i32, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i131: i32, in_$i132: i32) returns (out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i131: i32, out_$i132: i32)
{

  entry:
    out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132 := in_$p108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i105, in_$i106, in_$i107, in_$i131, in_$i132;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  $bb54:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i105, out_$i106, out_$i107 := out_$i129, out_$i128, out_$i127;
    goto $bb54_dummy;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$i131, out_$i132 := out_$i127, out_$i128;
    assume true;
    goto $bb54;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i130 := $sgt.i32(in_$i101, out_$i129);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i105, in_$i93);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i106, 1);
    call {:si_unique_call 746} {:cexpr "count"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_4499;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i107, out_$i115);
    call {:si_unique_call 745} {:cexpr "sum"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_4498;

  $bb52:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} put_unaligned_le32(out_$i115, out_$p126);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref(out_$p124, $mul.ref(out_$i125, 1));
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i106);
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p22);
    goto corral_source_split_4493;

  $bb51:
    assume out_$i123 == 1;
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i64(out_$i122, 0);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i122 := $p2i.ref.i64(in_$p22);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, in_$p4, out_$i121);
    goto corral_source_split_4488;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i119;
    goto $bb50;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i115;
    goto $bb50;

  $bb48:
    assume out_$i120 == 1;
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i115, out_$i119);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.17, in_$p4);
    call {:si_unique_call 743} {:cexpr "_max2"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, out_$i118);
    goto corral_source_split_4479;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i116;
    goto $bb47;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i115;
    goto $bb47;

  $bb45:
    assume out_$i117 == 1;
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i115, out_$i116);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.16, in_$p5);
    call {:si_unique_call 742} {:cexpr "_min2"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} out_$i115 := cyapa_parse_structure_data(out_$i111, out_$p114, in_$i93);
    call {:si_unique_call 741} {:cexpr "value"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(out_$p112, $mul.ref(out_$i113, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    goto corral_source_split_4464;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb46:
    assume !(out_$i117 == 1);
    goto corral_source_split_4476;

  $bb49:
    assume !(out_$i120 == 1);
    goto corral_source_split_4485;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132 := cyapa_gen5_read_panel_scan_raw_data_loop_$bb43(in_$p4, in_$p5, in_$p9, in_$p22, in_$i93, in_$i101, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132);
    return;

  exit:
    return;
}



procedure cyapa_gen5_read_panel_scan_raw_data_loop_$bb43(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p22: ref, in_$i93: i32, in_$i101: i32, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i131: i32, in_$i132: i32) returns (out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i131: i32, out_$i132: i32);
  modifies $M.0, $M.17, $M.16;



implementation cyapa_gen5_read_panel_scan_raw_data_loop_$bb14(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p22: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i16, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i53: i32, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i16, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i131: i32, in_$i132: i32, in_$i103: i32, in_$i104: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i64, in_$i139: i64, in_$i140: i32, in_$i141: i32) returns (out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i16, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i53: i32, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i16, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i131: i32, out_$i132: i32, out_$i103: i32, out_$i104: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i64, out_$i139: i64, out_$i140: i32, out_$i141: i32)
{

  entry:
    out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i53, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132, out_$i103, out_$i104, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141 := in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i53, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i105, in_$i106, in_$i107, in_$i131, in_$i132, in_$i103, in_$i104, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4365;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := out_$i140, out_$i141, out_$i98, out_$i133, out_$i134;
    goto corral_source_split_4513_dummy;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i141 := $mul.i32(out_$i140, out_$i93);
    call {:si_unique_call 749} {:cexpr "read_len"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i64.i32(out_$i139);
    call {:si_unique_call 748} {:cexpr "read_elements"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i139 := $udiv.i64(246, out_$i138);
    goto corral_source_split_4511;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i93);
    goto corral_source_split_4510;

  $bb59:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i133, out_$i134;
    assume true;
    goto $bb59;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i135 := $sge.i32(out_$i134, in_$i3);
    goto corral_source_split_4506;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  $bb39:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i133, out_$i134 := out_$i36, out_$i37;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i133, out_$i134 := out_$i103, out_$i104;
    goto $bb57;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb42;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104 := out_$i131, out_$i132;
    goto $bb42;

  $bb55:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$i131, out_$i132 := out_$i127, out_$i128;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i130 := $sgt.i32(out_$i101, out_$i129);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i105, out_$i93);
    call {:si_unique_call 747} {:cexpr "i"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(out_$i106, 1);
    call {:si_unique_call 746} {:cexpr "count"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_4499;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i127 := $add.i32(out_$i107, out_$i115);
    call {:si_unique_call 745} {:cexpr "sum"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_4498;

  $bb52:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} put_unaligned_le32(out_$i115, out_$p126);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref(out_$p124, $mul.ref(out_$i125, 1));
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i106);
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p22);
    goto corral_source_split_4493;

  $bb51:
    assume out_$i123 == 1;
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i64(out_$i122, 0);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$i122 := $p2i.ref.i64(in_$p22);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, in_$p4, out_$i121);
    goto corral_source_split_4488;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i119;
    goto $bb50;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i115;
    goto $bb50;

  $bb48:
    assume out_$i120 == 1;
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i115, out_$i119);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.17, in_$p4);
    call {:si_unique_call 743} {:cexpr "_max2"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, in_$p5, out_$i118);
    goto corral_source_split_4479;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i116;
    goto $bb47;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i115;
    goto $bb47;

  $bb45:
    assume out_$i117 == 1;
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i115, out_$i116);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.16, in_$p5);
    call {:si_unique_call 742} {:cexpr "_min2"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} out_$i115 := cyapa_parse_structure_data(out_$i111, out_$p114, out_$i93);
    call {:si_unique_call 741} {:cexpr "value"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(out_$p112, $mul.ref(out_$i113, 1));
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i8(out_$i110);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    goto corral_source_split_4464;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    call out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132 := cyapa_gen5_read_panel_scan_raw_data_loop_$bb43(in_$p4, in_$p5, in_$p9, in_$p22, out_$i93, out_$i101, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132);
    goto $bb43_last;

  $bb43_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106, out_$i107 := 10, out_$i37, out_$i36;
    goto $bb43;

  $bb54:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i105, out_$i106, out_$i107 := out_$i129, out_$i128, out_$i127;
    assume false;
    return;

  $bb40:
    assume out_$i102 == 1;
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104 := out_$i36, out_$i37;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i102 := $sgt.i32(out_$i101, 10);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, 10);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i100 := $mul.i32(out_$i84, out_$i93);
    goto corral_source_split_4455;

  $bb38:
    assume out_$i99 == 1;
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i84, 0);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$i98 := $trunc.i32.i16(out_$i97);
    call {:si_unique_call 739} {:cexpr "offset"} boogie_si_record_i16(out_$i98);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i95, out_$i96);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(out_$i35);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i16.i32(out_$i94);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i16(out_$i84);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i32(out_$i92, 7);
    call {:si_unique_call 738} {:cexpr "data_size"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.0, out_$p90);
    goto corral_source_split_4444;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4443;

  $bb35:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i86, out_$i87 := out_$i36, out_$i37;
    assume true;
    goto $bb35;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    call {:si_unique_call 737} {:cexpr "read_elements"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_4435;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_$i83 := get_unaligned_le16(out_$p82);
    call {:si_unique_call 736} {:cexpr "tmp"} boogie_si_record_i16(out_$i83);
    goto corral_source_split_4434;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p81, $mul.ref(7, 1));
    goto corral_source_split_4433;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_4432;

  $bb29:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb29;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i76, out_$i77);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(6, 1));
    goto corral_source_split_4420;

  $bb27:
    assume !(out_$i73 == 1);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb27;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(5, 1));
    goto corral_source_split_4414;

  $bb25:
    assume !(out_$i69 == 1);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb25;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i67, out_$i68);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(in_$i1);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i66, 127);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p64);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_4406;

  $bb23:
    assume !(out_$i63 == 1);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb23;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(3, 1));
    goto corral_source_split_4400;

  $bb21:
    assume !(out_$i59 == 1);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb21;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 31);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p9, $mul.ref(0, 256)), $mul.ref(2, 1));
    goto corral_source_split_4394;

  $bb19:
    assume !(out_$i55 == 1);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb19;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i55 := $sle.i32(out_$i54, 9);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, in_$p10);
    goto corral_source_split_4390;

  $bb17:
    assume !(out_$i52 == 1);
    goto corral_source_split_4389;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb17;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_4384;

  SeqInstr_189:
    call {:si_unique_call 734} {:cexpr "error"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4383;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_$i51 := cyapa_i2c_pip_cmd_irq_sync(in_$p0, out_$p49, 12, out_$p50, in_$p10, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_188;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p10, out_$i48);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i34, 10);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p47, in_$i2);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p32, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} put_unaligned_le16(out_$i44, out_$p46);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p32, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i33);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} put_unaligned_le16(out_$i39, out_$p41);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p32, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i35);
    goto corral_source_split_4366;

  $bb46:
    assume !(out_$i117 == 1);
    goto corral_source_split_4476;

  $bb49:
    assume !(out_$i120 == 1);
    goto corral_source_split_4485;

  corral_source_split_4513_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i53, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132, out_$i103, out_$i104, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141 := cyapa_gen5_read_panel_scan_raw_data_loop_$bb14(in_$p0, in_$i1, in_$i2, in_$i3, in_$p4, in_$p5, in_$p8, in_$p9, in_$p10, in_$p22, in_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i53, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i105, out_$i106, out_$i107, out_$i131, out_$i132, out_$i103, out_$i104, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141);
    return;

  exit:
    return;
}



procedure cyapa_gen5_read_panel_scan_raw_data_loop_$bb14(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p22: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i16, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i53: i32, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i32, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i32, in_$i94: i16, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i16, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i8, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i64, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i131: i32, in_$i132: i32, in_$i103: i32, in_$i104: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i64, in_$i139: i64, in_$i140: i32, in_$i141: i32) returns (out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i16, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i53: i32, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i32, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i32, out_$i94: i16, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i16, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i8, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i64, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i131: i32, out_$i132: i32, out_$i103: i32, out_$i104: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i64, out_$i139: i64, out_$i140: i32, out_$i141: i32);
  modifies $M.0, $M.17, $M.16, $M.22, assertsPassed, $CurrAddr;



implementation cyapa_gen5_read_idac_data_loop_$bb76(in_$p0: ref, in_$i2: i8, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i44: i8, in_$i46: i32, in_$i208: i32, in_$p225: ref, in_$i226: i8, in_$i227: i32, in_$i228: i8, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i32) returns (out_$p225: ref, out_$i226: i8, out_$i227: i32, out_$i228: i8, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i32)
{

  entry:
    out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290 := in_$p225, in_$i226, in_$i227, in_$i228, in_$p229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i281, in_$i282, in_$i283, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  $bb108:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224 := out_$i282, out_$i265, out_$i264, out_$i263, out_$i262, out_$i261, out_$i267, out_$i266;
    goto $bb108_dummy;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290 := out_$i266, out_$i267, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265;
    assume true;
    goto $bb108;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i283 := $sgt.i32(in_$i208, out_$i282);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i282 := $add.i32(out_$i281, out_$i217);
    call {:si_unique_call 848} {:cexpr "i"} boogie_si_record_i32(out_$i282);
    goto corral_source_split_4996;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4995;

  $bb105:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274 := out_$i261, out_$i262, out_$i263, out_$i265, out_$i266, out_$i267;
    assume true;
    goto $bb105;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i268 := $sge.i32(out_$i267, in_$i46);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i267 := $add.i32(out_$i223, 1);
    call {:si_unique_call 847} {:cexpr "count"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i224, out_$i233);
    call {:si_unique_call 846} {:cexpr "sum"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_4986;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i261, out_$i262, out_$i263, out_$i264, out_$i265 := out_$i222, out_$i221, out_$i220, out_$i219, out_$i218;
    goto $bb103;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i261, out_$i262, out_$i263, out_$i264, out_$i265 := out_$i256, out_$i257, out_$i258, out_$i259, out_$i260;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  $bb95:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    out_$i256, out_$i257, out_$i258, out_$i259, out_$i260 := out_$i222, out_$i221, out_$i220, out_$i219, out_$i218;
    goto $bb102;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$i256, out_$i257, out_$i258, out_$i259, out_$i260 := out_$i252, out_$i250, out_$i255, out_$i253, out_$i254;
    goto $bb102;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i255 := $sdiv.i32(out_$i253, out_$i254);
    call {:si_unique_call 845} {:cexpr "tmp_ave"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i254 := $add.i32(out_$i218, 1);
    call {:si_unique_call 844} {:cexpr "tmp_count"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i253 := $add.i32(out_$i219, out_$i233);
    call {:si_unique_call 843} {:cexpr "tmp_sum"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_4979;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i222;
    goto $bb101;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i233;
    goto $bb101;

  $bb99:
    assume out_$i251 == 1;
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i251 := $sgt.i32(out_$i233, out_$i222);
    goto corral_source_split_4972;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i221;
    goto $bb98;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i233;
    goto $bb98;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_4967;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i233, out_$i221);
    goto corral_source_split_4961;

  $bb94:
    assume {:verifier.code 0} true;
    assume out_$i248 == 1;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    assume out_$i246 == 1;
    goto $bb92;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i220, 0);
    goto corral_source_split_4959;

  $bb89:
    assume out_$i245 == 1;
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i245 := $trunc.i8.i1(in_$i44);
    goto corral_source_split_4956;

  $bb87:
    assume out_$i244 == 1;
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i244 := $sgt.i32(out_$i243, out_$i218);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.0, out_$p242);
    goto corral_source_split_4952;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4951;

  $bb84:
    assume out_$i241 == 1;
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 0);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, in_$p4, out_$i239);
    goto corral_source_split_4946;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i237;
    goto $bb83;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i233;
    goto $bb83;

  $bb81:
    assume out_$i238 == 1;
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i238 := $sgt.i32(out_$i233, out_$i237);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i32($M.14, in_$p4);
    call {:si_unique_call 842} {:cexpr "_max2"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, in_$p5, out_$i236);
    goto corral_source_split_4937;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i236 := out_$i234;
    goto $bb80;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i236 := out_$i233;
    goto $bb80;

  $bb78:
    assume out_$i235 == 1;
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i233, out_$i234);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.13, in_$p5);
    call {:si_unique_call 841} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i233 := cyapa_parse_structure_data(out_$i228, out_$p231, out_$i232);
    call {:si_unique_call 840} {:cexpr "value"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref(out_$p229, $mul.ref(out_$i230, 1));
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i230 := $sext.i32.i64(out_$i217);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$p229 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i228 := $trunc.i32.i8(out_$i227);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i8.i32(out_$i226);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i8($M.0, out_$p225);
    goto corral_source_split_4921;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb79:
    assume !(out_$i235 == 1);
    goto corral_source_split_4934;

  $bb82:
    assume !(out_$i238 == 1);
    goto corral_source_split_4943;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i247, out_$i233);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i247 := $sdiv.i32(out_$i220, 2);
    goto corral_source_split_4964;

  $bb93:
    assume !(out_$i246 == 1);
    goto corral_source_split_4963;

  $bb97:
    assume !(out_$i249 == 1);
    goto corral_source_split_4969;

  $bb100:
    assume !(out_$i251 == 1);
    goto corral_source_split_4976;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb86;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i244 == 1);
    goto $bb86;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb86;

  $bb108_dummy:
    call {:si_unique_call 1} out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290 := cyapa_gen5_read_idac_data_loop_$bb76(in_$p0, in_$i2, in_$p3, in_$p4, in_$p5, in_$p8, in_$i44, in_$i46, in_$i208, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290);
    return;

  exit:
    return;
}



procedure cyapa_gen5_read_idac_data_loop_$bb76(in_$p0: ref, in_$i2: i8, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i44: i8, in_$i46: i32, in_$i208: i32, in_$p225: ref, in_$i226: i8, in_$i227: i32, in_$i228: i8, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i32) returns (out_$p225: ref, out_$i226: i8, out_$i227: i32, out_$i228: i8, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i32);
  modifies $M.14, $M.13;



implementation cyapa_gen5_read_idac_data_loop_$bb37(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i44: i8, in_$i46: i32, in_$p85: ref, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$p109: ref, in_$p110: ref, in_$i111: i16, in_$i112: i32, in_$i113: i16, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p118: ref, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i8, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i124: i32, in_$p152: ref, in_$p153: ref, in_$i154: i16, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$p169: ref, in_$i170: i8, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i203: i16, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i16, in_$i208: i32, in_$i209: i1, in_$p225: ref, in_$i226: i8, in_$i227: i32, in_$i228: i8, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i32, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i32, in_$i216: i32) returns (out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$p109: ref, out_$p110: ref, out_$i111: i16, out_$i112: i32, out_$i113: i16, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p118: ref, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i8, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i124: i32, out_$p152: ref, out_$p153: ref, out_$i154: i16, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$p169: ref, out_$i170: i8, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i203: i16, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i16, out_$i208: i32, out_$i209: i1, out_$p225: ref, out_$i226: i8, out_$i227: i32, out_$i228: i8, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i32, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i32, out_$i216: i32)
{

  entry:
    out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i124, out_$p152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216 := in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$p114, in_$p115, in_$p116, in_$p118, in_$i119, in_$p120, in_$p121, in_$i122, in_$i123, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i124, in_$p152, in_$p153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$p225, in_$i226, in_$i227, in_$i228, in_$p229, in_$i230, in_$p231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i281, in_$i282, in_$i283, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4779;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99 := out_$i207, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216;
    goto $bb110_dummy;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i209 == 1);
    goto $bb75;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216 := out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290;
    goto $bb75;

  $bb109:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290 := out_$i266, out_$i267, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i283 := $sgt.i32(out_$i208, out_$i282);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i282 := $add.i32(out_$i281, out_$i217);
    call {:si_unique_call 848} {:cexpr "i"} boogie_si_record_i32(out_$i282);
    goto corral_source_split_4996;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4995;

  $bb105:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274 := out_$i261, out_$i262, out_$i263, out_$i265, out_$i266, out_$i267;
    assume true;
    goto $bb105;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i268 := $sge.i32(out_$i267, in_$i46);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i267 := $add.i32(out_$i223, 1);
    call {:si_unique_call 847} {:cexpr "count"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i224, out_$i233);
    call {:si_unique_call 846} {:cexpr "sum"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_4986;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i261, out_$i262, out_$i263, out_$i264, out_$i265 := out_$i222, out_$i221, out_$i220, out_$i219, out_$i218;
    goto $bb103;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i261, out_$i262, out_$i263, out_$i264, out_$i265 := out_$i256, out_$i257, out_$i258, out_$i259, out_$i260;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  $bb95:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    out_$i256, out_$i257, out_$i258, out_$i259, out_$i260 := out_$i222, out_$i221, out_$i220, out_$i219, out_$i218;
    goto $bb102;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$i256, out_$i257, out_$i258, out_$i259, out_$i260 := out_$i252, out_$i250, out_$i255, out_$i253, out_$i254;
    goto $bb102;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i255 := $sdiv.i32(out_$i253, out_$i254);
    call {:si_unique_call 845} {:cexpr "tmp_ave"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i254 := $add.i32(out_$i218, 1);
    call {:si_unique_call 844} {:cexpr "tmp_count"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i253 := $add.i32(out_$i219, out_$i233);
    call {:si_unique_call 843} {:cexpr "tmp_sum"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_4979;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i222;
    goto $bb101;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i252 := out_$i233;
    goto $bb101;

  $bb99:
    assume out_$i251 == 1;
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i251 := $sgt.i32(out_$i233, out_$i222);
    goto corral_source_split_4972;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i221;
    goto $bb98;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$i250 := out_$i233;
    goto $bb98;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_4967;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i249 := $slt.i32(out_$i233, out_$i221);
    goto corral_source_split_4961;

  $bb94:
    assume {:verifier.code 0} true;
    assume out_$i248 == 1;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    assume out_$i246 == 1;
    goto $bb92;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i220, 0);
    goto corral_source_split_4959;

  $bb89:
    assume out_$i245 == 1;
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i245 := $trunc.i8.i1(in_$i44);
    goto corral_source_split_4956;

  $bb87:
    assume out_$i244 == 1;
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i244 := $sgt.i32(out_$i243, out_$i218);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.0, out_$p242);
    goto corral_source_split_4952;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(124, 1));
    goto corral_source_split_4951;

  $bb84:
    assume out_$i241 == 1;
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 0);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, in_$p4, out_$i239);
    goto corral_source_split_4946;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i237;
    goto $bb83;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i233;
    goto $bb83;

  $bb81:
    assume out_$i238 == 1;
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i238 := $sgt.i32(out_$i233, out_$i237);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i32($M.14, in_$p4);
    call {:si_unique_call 842} {:cexpr "_max2"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, in_$p5, out_$i236);
    goto corral_source_split_4937;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i236 := out_$i234;
    goto $bb80;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i236 := out_$i233;
    goto $bb80;

  $bb78:
    assume out_$i235 == 1;
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i233, out_$i234);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.13, in_$p5);
    call {:si_unique_call 841} {:cexpr "_min2___0"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_$i233 := cyapa_parse_structure_data(out_$i228, out_$p231, out_$i232);
    call {:si_unique_call 840} {:cexpr "value"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref(out_$p229, $mul.ref(out_$i230, 1));
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i230 := $sext.i32.i64(out_$i217);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$p229 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i228 := $trunc.i32.i8(out_$i227);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i8.i32(out_$i226);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i8($M.0, out_$p225);
    goto corral_source_split_4921;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    call out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290 := cyapa_gen5_read_idac_data_loop_$bb76(in_$p0, in_$i2, in_$p3, in_$p4, in_$p5, in_$p8, in_$i44, in_$i46, out_$i208, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290);
    goto $bb76_last;

  $bb76_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224 := 10, out_$i99, out_$i98, out_$i97, out_$i96, out_$i95, out_$i94, out_$i93;
    goto $bb76;

  $bb108:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224 := out_$i282, out_$i265, out_$i264, out_$i263, out_$i262, out_$i261, out_$i267, out_$i266;
    assume false;
    return;

  $bb73:
    assume out_$i209 == 1;
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216 := out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i209 := $sgt.i32(out_$i208, 10);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i208 := $add.i32(out_$i155, 10);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$i207 := $trunc.i32.i16(out_$i206);
    call {:si_unique_call 838} {:cexpr "offset"} boogie_si_record_i16(out_$i207);
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i206 := $add.i32(out_$i204, out_$i205);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i205 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i16.i32(out_$i203);
    goto corral_source_split_4909;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i203 := $trunc.i32.i16(out_$i155);
    goto corral_source_split_4908;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i175 == 1);
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i177 == 1);
    goto $bb69;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183 := out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i99;
    assume true;
    goto $bb71;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4882;

  $bb67:
    assume out_$i175 == 1;
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i175 := $trunc.i8.i1(in_$i44);
    goto corral_source_split_4879;

  $bb65:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i174 := $sgt.i32(out_$i173, out_$i155);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, in_$p3, out_$i172);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i32(out_$i171, 7);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i8.i32(out_$i170);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i8($M.0, out_$p169);
    goto corral_source_split_4870;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(9, 1));
    goto corral_source_split_4869;

  $bb61:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162 := out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i99;
    assume true;
    goto $bb61;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 0);
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i16.i32(out_$i154);
    call {:si_unique_call 835} {:cexpr "read_len"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_4862;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i154 := get_unaligned_le16(out_$p153);
    call {:si_unique_call 834} {:cexpr "tmp"} boogie_si_record_i16(out_$i154);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref(out_$p152, $mul.ref(7, 1));
    goto corral_source_split_4860;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_4859;

  $bb55:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb55;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i147, out_$i148);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$i147 := $zext.i8.i32(out_$i146);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i8($M.0, out_$p145);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(6, 1));
    goto corral_source_split_4847;

  $bb53:
    assume !(out_$i144 == 1);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb53;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i32(out_$i143, 0);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i8.i32(out_$i142);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i8($M.0, out_$p141);
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(5, 1));
    goto corral_source_split_4841;

  $bb51:
    assume !(out_$i140 == 1);
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb51;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i138, out_$i139);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i8.i32(in_$i1);
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i138 := $and.i32(out_$i137, 127);
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i136);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.0, out_$p135);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(4, 1));
    goto corral_source_split_4833;

  $bb49:
    assume !(out_$i134 == 1);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb49;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i32(out_$i133, 0);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i32(out_$i132);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i8($M.0, out_$p131);
    goto corral_source_split_4828;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(3, 1));
    goto corral_source_split_4827;

  $bb47:
    assume !(out_$i130 == 1);
    goto corral_source_split_4826;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb47;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 31);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i32(out_$i128);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.0, out_$p127);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p8, $mul.ref(0, 256)), $mul.ref(2, 1));
    goto corral_source_split_4821;

  $bb45:
    assume !(out_$i126 == 1);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb45;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i126 := $sle.i32(out_$i125, 9);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, in_$p9);
    goto corral_source_split_4817;

  $bb43:
    assume !(out_$i123 == 1);
    goto corral_source_split_4816;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i122;
    assume true;
    goto $bb43;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_4811;

  SeqInstr_192:
    call {:si_unique_call 832} {:cexpr "error"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_4810;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_$i122 := cyapa_i2c_pip_cmd_irq_sync(in_$p0, out_$p120, 12, out_$p121, in_$p9, 500, cyapa_gen5_sort_tsg_pip_app_resp_data, 1);
    goto SeqInstr_191;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$p121 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p9, out_$i119);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i106, 10);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p118, in_$i2);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(in_$p85, $mul.ref(0, 8)), $mul.ref(7, 1)), $mul.ref(4, 1));
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} put_unaligned_le16(out_$i113, out_$p116);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(out_$p115, $mul.ref(2, 1));
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p85, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i32.i16(out_$i112);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i16.i32(out_$i111);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i111 := $trunc.i32.i16(out_$i106);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} put_unaligned_le16(out_$i108, out_$p110);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(out_$p109);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p85, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i16(out_$i107);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i106 := $mul.i32(out_$i105, out_$i104);
    call {:si_unique_call 828} {:cexpr "read_len"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4790;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i102;
    goto $bb40;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i101;
    goto $bb40;

  $bb38:
    assume out_$i103 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i101, out_$i102);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i102 := $sub.i32(in_$i46, out_$i94);
    call {:si_unique_call 827} {:cexpr "_min2"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i101 := $sdiv.i32(246, out_$i100);
    call {:si_unique_call 826} {:cexpr "read_elements"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.29, in_$p3);
    goto corral_source_split_4780;

  $bb39:
    assume !(out_$i103 == 1);
    goto corral_source_split_4787;

  $bb79:
    assume !(out_$i235 == 1);
    goto corral_source_split_4934;

  $bb82:
    assume !(out_$i238 == 1);
    goto corral_source_split_4943;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i247, out_$i233);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i247 := $sdiv.i32(out_$i220, 2);
    goto corral_source_split_4964;

  $bb93:
    assume !(out_$i246 == 1);
    goto corral_source_split_4963;

  $bb97:
    assume !(out_$i249 == 1);
    goto corral_source_split_4969;

  $bb100:
    assume !(out_$i251 == 1);
    goto corral_source_split_4976;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb86;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i244 == 1);
    goto $bb86;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb86;

  $bb110_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i124, out_$p152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216 := cyapa_gen5_read_idac_data_loop_$bb37(in_$p0, in_$i1, in_$i2, in_$p3, in_$p4, in_$p5, in_$p7, in_$p8, in_$p9, in_$i44, in_$i46, in_$p85, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$p118, out_$i119, out_$p120, out_$p121, out_$i122, out_$i123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i124, out_$p152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i281, out_$i282, out_$i283, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216);
    return;

  exit:
    return;
}



procedure cyapa_gen5_read_idac_data_loop_$bb37(in_$p0: ref, in_$i1: i8, in_$i2: i8, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i44: i8, in_$i46: i32, in_$p85: ref, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$p109: ref, in_$p110: ref, in_$i111: i16, in_$i112: i32, in_$i113: i16, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p118: ref, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i132: i8, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i8, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i8, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i124: i32, in_$p152: ref, in_$p153: ref, in_$i154: i16, in_$i155: i32, in_$i156: i1, in_$i157: i32, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i32, in_$p169: ref, in_$i170: i8, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i203: i16, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$i207: i16, in_$i208: i32, in_$i209: i1, in_$p225: ref, in_$i226: i8, in_$i227: i32, in_$i228: i8, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i217: i32, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i32, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i32, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i32, in_$i216: i32) returns (out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$p109: ref, out_$p110: ref, out_$i111: i16, out_$i112: i32, out_$i113: i16, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p118: ref, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i132: i8, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i8, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i8, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i124: i32, out_$p152: ref, out_$p153: ref, out_$i154: i16, out_$i155: i32, out_$i156: i1, out_$i157: i32, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i32, out_$p169: ref, out_$i170: i8, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i203: i16, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$i207: i16, out_$i208: i32, out_$i209: i1, out_$p225: ref, out_$i226: i8, out_$i227: i32, out_$i228: i8, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i217: i32, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i32, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i32, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i32, out_$i216: i32);
  modifies $M.14, $M.13, $M.29, $M.0, $M.22, assertsPassed, $CurrAddr;



implementation cyapa_poll_state_loop_$bb1(in_$p0: ref, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12 := in_$i3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i12;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5235;

  $bb9:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i10;
    goto $bb9_dummy;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i3, 0);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i3, 1);
    call {:si_unique_call 882} {:cexpr "tries"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5249;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} msleep(100);
    goto corral_source_split_5248;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb4;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb4;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, 1);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, out_$p6);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(0, 1));
    goto corral_source_split_5240;

  $bb2:
    assume out_$i5 == 1;
    goto corral_source_split_5239;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i4, 0);
    goto corral_source_split_5237;

  SeqInstr_198:
    call {:si_unique_call 880} {:cexpr "error"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_5236;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i4 := cyapa_get_state(in_$p0);
    goto SeqInstr_197;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12 := cyapa_poll_state_loop_$bb1(in_$p0, out_$i3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure cyapa_poll_state_loop_$bb1(in_$p0: ref, in_$i3: i32, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32) returns (out_$i3: i32, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32);
  modifies $M.0, $M.32, $M.35, $M.36, $M.37, $M.38, $CurrAddr, $M.26, $M.22, assertsPassed;



implementation cyapa_get_state_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i10: i8, in_$i25: i8, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i8, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i87: i1, in_$i86: i32) returns (out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i8, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i87: i1, out_$i86: i32)
{

  entry:
    out_$i29, out_$i30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i86 := in_$i29, in_$i30, in_$p31, in_$i32, in_$p34, in_$p35, in_$i36, in_$p38, in_$p39, in_$i40, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i87, in_$i86;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  $bb55:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i29, out_$i30 := out_$i84, out_$i83;
    goto $bb55_dummy;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i83;
    assume true;
    goto $bb55;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i8.i1(in_$i25);
    goto corral_source_split_5408;

  $bb51:
    assume out_$i85 == 1;
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i83;
    assume true;
    goto $bb51;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i85 := $sgt.i32(out_$i84, 0);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i84 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 903} {:cexpr "retries"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_5404;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5403;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i80;
    goto $bb50;

  $bb42:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := out_$i70;
    goto $bb50;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i8.i1(in_$i25);
    goto corral_source_split_5382;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i55;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i68;
    goto $bb41;

  $bb39:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_5377;

  SeqInstr_204:
    call {:si_unique_call 896} {:cexpr "error"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_5376;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(in_$p1);
    call {:si_unique_call 895} out_$i68 := devirtbounce.3(out_$p66, in_$p0, out_$p67, 3);
    goto SeqInstr_203;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen5_ops, $mul.ref(0, 120)), $mul.ref(72, 1)));
    goto corral_source_split_5375;

  $bb36:
    assume out_$i65 == 1;
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i8.i1(in_$i10);
    goto corral_source_split_5372;

  $bb35:
    assume !(out_$i64 == 1);
    goto corral_source_split_5371;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(in_$i25);
    goto corral_source_split_5363;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb29;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5358;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5357;

  $bb22:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i30;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    goto $bb27;

  $bb24:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 0);
    goto corral_source_split_5343;

  SeqInstr_201:
    call {:si_unique_call 894} {:cexpr "error"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5342;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p1);
    call {:si_unique_call 893} out_$i53 := devirtbounce.3(out_$p51, in_$p0, out_$p52, 3);
    goto SeqInstr_200;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, $add.ref($add.ref(cyapa_gen3_ops, $mul.ref(0, 120)), $mul.ref(72, 1)));
    goto corral_source_split_5341;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i50 == 1;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb19;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p43);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, out_$i40);
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p39);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p38, out_$i36);
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_5328;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p34, out_$i32);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p31);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 3);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.0, out_$p47);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5346;

  $bb20:
    assume !(out_$i46 == 1);
    goto corral_source_split_5345;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 5);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i32(out_$i61);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p60);
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1104)), $mul.ref(89, 1));
    goto corral_source_split_5366;

  $bb30:
    assume !(out_$i59 == 1);
    goto corral_source_split_5365;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i64 == 1;
    goto $bb33;

  $bb48:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i80;
    assume true;
    goto $bb48;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i64.i32(out_$i79);
    call {:si_unique_call 902} {:cexpr "error"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_$i79 := cyapa_i2c_read(in_$p0, 0, 3, out_$p78);
    call {:si_unique_call 901} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_5396;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} msleep(50);
    goto corral_source_split_5395;

  $bb45:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i75;
    assume true;
    goto $bb45;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} out_$i75 := cyapa_i2c_write(in_$p0, 0, 2, out_$p74);
    call {:si_unique_call 898} {:cexpr "error"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, out_$p73, 0);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.32 := $store.i8($M.32, out_$p72, 0);
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5385;

  $bb43:
    assume !(out_$i71 == 1);
    goto corral_source_split_5384;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i86 := cyapa_get_state_loop_$bb17(in_$p0, in_$p1, in_$p2, in_$i10, in_$i25, out_$i29, out_$i30, out_$p31, out_$i32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i86);
    return;

  exit:
    return;
}



procedure cyapa_get_state_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i10: i8, in_$i25: i8, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$i32: i8, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i8, in_$i62: i32, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i87: i1, in_$i86: i32) returns (out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$i32: i8, out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i8, out_$i62: i32, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i87: i1, out_$i86: i32);
  modifies $M.0, $M.26, $CurrAddr, $M.22, assertsPassed, $M.35, $M.36, $M.37, $M.38, $M.32;



implementation cyapa_smbus_read_block_loop_$bb12(in_$i1: i8, in_$i2: i64, in_$p3: ref, in_$p5: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i64, in_$i50: i1, in_$i22: i8, in_$i51: i64) returns (out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i64, out_$i50: i1, out_$i22: i8, out_$i51: i64)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i22, out_$i51 := in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i22, in_$i51;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  $bb17:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i46;
    goto $bb17_dummy;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i41;
    assume true;
    goto $bb17;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$i50 := $ult.i64(out_$i49, in_$i2);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$i48 := $mul.i32(out_$i47, 32);
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    call {:si_unique_call 942} {:cexpr "index"} boogie_si_record_i8(out_$i46);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    goto corral_source_split_5597;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i22);
    goto corral_source_split_5596;

  $bb15:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i41;
    assume true;
    goto $bb15;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i64(out_$i41, 0);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    call {:si_unique_call 941} {:cexpr "ret"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} out_$i40 := i2c_smbus_read_block_data(in_$p5, out_$i39, out_$p37);
    call {:si_unique_call 940} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i8(out_$i38);
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i33);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p3, $mul.ref(out_$i36, 1));
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i35 := $mul.i32(out_$i34, 32);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i22);
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i32.i8(out_$i32);
    call {:si_unique_call 938} {:cexpr "smbus_cmd"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_5583;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i32 := $or.i32(out_$i31, 1);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i8(out_$i29);
    call {:si_unique_call 937} {:cexpr "smbus_cmd"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i32(out_$i27, out_$i28);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(in_$i1);
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i8.i32(out_$i26);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i8(out_$i25);
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$i25 := $shl.i32(out_$i24, 1);
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 3);
    goto corral_source_split_5574;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i22, out_$i51 := cyapa_smbus_read_block_loop_$bb12(in_$i1, in_$i2, in_$p3, in_$p5, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i22, out_$i51);
    return;

  exit:
    return;
}



procedure cyapa_smbus_read_block_loop_$bb12(in_$i1: i8, in_$i2: i64, in_$p3: ref, in_$p5: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$i42: i1, in_$i43: i64, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i64, in_$i50: i1, in_$i22: i8, in_$i51: i64) returns (out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$i42: i1, out_$i43: i64, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i64, out_$i50: i1, out_$i22: i8, out_$i51: i64);



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_7182;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_7181;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 1369} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 1367} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_7172;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_7171;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation cyapa_gen3_write_blocks_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i2: i64, in_$p3: ref, in_$i6: i64, in_$i7: i64, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i32, in_$i19: i64, in_$i20: i1, in_$i5: i32) returns (out_$i6: i64, out_$i7: i64, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i32, out_$i19: i64, out_$i20: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i20, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7733;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i18;
    goto $bb10_dummy;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i64(out_$i19, in_$i2);
    goto corral_source_split_7752;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_7751;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1538} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7750;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i14;
    assume true;
    goto $bb7;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_7744;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} out_$i14 := cyapa_gen3_write_fw_block(in_$p0, out_$i13, out_$p10);
    call {:si_unique_call 1537} {:cexpr "error"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i16(out_$i12);
    goto corral_source_split_7742;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_7741;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i64.i16(out_$i7);
    goto corral_source_split_7740;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(in_$p3, $mul.ref(out_$i9, 1));
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    call {:si_unique_call 1535} {:cexpr "addr"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    out_$i8 := $mul.i32(out_$i5, 64);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i64(out_$i6, in_$i1);
    call {:si_unique_call 1534} {:cexpr "block"} boogie_si_record_i64(out_$i7);
    goto corral_source_split_7736;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i5 := cyapa_gen3_write_blocks_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$p3, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i5);
    return;

  exit:
    return;
}



procedure cyapa_gen3_write_blocks_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i2: i64, in_$p3: ref, in_$i6: i64, in_$i7: i64, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$i11: i16, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i32, in_$i19: i64, in_$i20: i1, in_$i5: i32) returns (out_$i6: i64, out_$i7: i64, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$i11: i16, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i32, out_$i19: i64, out_$i20: i1, out_$i5: i32);
  modifies $M.0, $CurrAddr;



implementation cyapa_gen3_write_fw_block_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p28: ref, in_$i34: i32, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i33: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1) returns (out_$i34: i32, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i33: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i33, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i33, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    goto $bb11_dummy;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb11;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 3);
    goto corral_source_split_7806;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    call {:si_unique_call 1558} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_7805;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_$i35 := cyapa_i2c_reg_read_block(in_$p0, 0, 3, in_$p28);
    call {:si_unique_call 1557} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_7804;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} usleep_range(10000, 20000);
    goto corral_source_split_7803;

  $bb9:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7802;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i45;
    assume true;
    goto $bb9;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_7823;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 1559} {:cexpr "tries"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_7822;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_7821;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 0);
    goto corral_source_split_7819;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i8.i32(out_$i42);
    goto corral_source_split_7818;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.60, out_$p41);
    goto corral_source_split_7817;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7816;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i33, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := cyapa_gen3_write_fw_block_loop_$bb8(in_$p0, in_$p4, in_$p28, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i33, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure cyapa_gen3_write_fw_block_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p28: ref, in_$i34: i32, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i33: i32, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1) returns (out_$i34: i32, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i33: i32, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1);



implementation cyapa_gen3_csum_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i6: i64, in_$p7: ref, in_$i8: i8, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i64, in_$i16: i1, in_$i4: i16, in_$i5: i32, in_$i17: i16) returns (out_$i6: i64, out_$p7: ref, out_$i8: i8, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i64, out_$i16: i1, out_$i4: i16, out_$i5: i32, out_$i17: i16)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4, out_$i5, out_$i17 := in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i4, in_$i5, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7864;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i4, out_$i5 := out_$i13, out_$i14;
    goto $bb6_dummy;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i64(out_$i15, in_$i1);
    goto corral_source_split_7876;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_7875;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1567} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_7874;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i16(out_$i12);
    call {:si_unique_call 1566} {:cexpr "csum"} boogie_si_record_i16(out_$i13);
    goto corral_source_split_7873;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i10, out_$i11);
    goto corral_source_split_7872;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i4);
    goto corral_source_split_7871;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_7870;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i16(out_$i8);
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i8($M.0, out_$p7);
    goto corral_source_split_7868;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(in_$p0, $mul.ref(out_$i6, 1));
    goto corral_source_split_7867;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_7866;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4, out_$i5, out_$i17 := cyapa_gen3_csum_loop_$bb4(in_$p0, in_$i1, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4, out_$i5, out_$i17);
    return;

  exit:
    return;
}



procedure cyapa_gen3_csum_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i6: i64, in_$p7: ref, in_$i8: i8, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i64, in_$i16: i1, in_$i4: i16, in_$i5: i32, in_$i17: i16) returns (out_$i6: i64, out_$p7: ref, out_$i8: i8, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i64, out_$i16: i1, out_$i4: i16, out_$i5: i32, out_$i17: i16);



implementation cyapa_gen3_write_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p3: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i10: i64, in_$i9: i64, in_$i11: i8, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i22: i64, in_$i23: i1, in_$i5: i64, in_cmdloc_dummy_var_77: [ref]i8, in_cmdloc_dummy_var_78: [ref]i8, in_cmdloc_dummy_var_79: [ref]i8) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i10: i64, out_$i9: i64, out_$i11: i8, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i22: i64, out_$i23: i1, out_$i5: i64, out_cmdloc_dummy_var_77: [ref]i8, out_cmdloc_dummy_var_78: [ref]i8, out_cmdloc_dummy_var_79: [ref]i8)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$i10, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i5, out_cmdloc_dummy_var_77, out_cmdloc_dummy_var_78, out_cmdloc_dummy_var_79 := in_$p6, in_$i7, in_$i8, in_$i10, in_$i9, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i22, in_$i23, in_$i5, in_cmdloc_dummy_var_77, in_cmdloc_dummy_var_78, in_cmdloc_dummy_var_79;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7885;

  $bb13:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i22;
    goto $bb13_dummy;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    out_$i23 := $ult.i64(out_$i22, in_$i2);
    goto corral_source_split_7914;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i5, 16);
    call {:si_unique_call 1574} {:cexpr "i"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_7913;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb10;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_7907;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i64.i32(out_$i17);
    call {:si_unique_call 1573} {:cexpr "error"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7906;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} out_$i17 := cyapa_i2c_reg_write_block(in_$p0, 0, out_$i15, out_$p16);
    call {:si_unique_call 1572} {:cexpr "tmp"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_7905;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7904;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i64(out_$i9, 1);
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_77 := $M.0;
    out_cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 1570} out_cmdloc_dummy_var_79 := $memcpy.i8(out_cmdloc_dummy_var_77, out_cmdloc_dummy_var_78, out_$p14, out_$p6, out_$i9, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_79;
    goto corral_source_split_7902;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p13, $mul.ref(1, 1));
    goto corral_source_split_7901;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7900;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p12, out_$i11);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 17)), $mul.ref(0, 1));
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i64.i8(out_$i5);
    goto corral_source_split_7897;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    goto $bb8;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$i9 := 16;
    goto $bb8;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_7891;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    out_$i8 := $ult.i64(16, out_$i7);
    goto corral_source_split_7889;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    out_$i7 := $sub.i64(in_$i2, out_$i5);
    goto corral_source_split_7888;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(in_$p1, $mul.ref(out_$i5, 1));
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i64(in_$i2, out_$i5);
    goto corral_source_split_7894;

  $bb7:
    assume !(out_$i8 == 1);
    goto corral_source_split_7893;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$i10, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i5, out_cmdloc_dummy_var_77, out_cmdloc_dummy_var_78, out_cmdloc_dummy_var_79 := cyapa_gen3_write_buffer_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p3, out_$p6, out_$i7, out_$i8, out_$i10, out_$i9, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i22, out_$i23, out_$i5, out_cmdloc_dummy_var_77, out_cmdloc_dummy_var_78, out_cmdloc_dummy_var_79);
    return;

  exit:
    return;
}



procedure cyapa_gen3_write_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$p3: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i10: i64, in_$i9: i64, in_$i11: i8, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i22: i64, in_$i23: i1, in_$i5: i64, in_cmdloc_dummy_var_77: [ref]i8, in_cmdloc_dummy_var_78: [ref]i8, in_cmdloc_dummy_var_79: [ref]i8) returns (out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i10: i64, out_$i9: i64, out_$i11: i8, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i22: i64, out_$i23: i1, out_$i5: i64, out_cmdloc_dummy_var_77: [ref]i8, out_cmdloc_dummy_var_78: [ref]i8, out_cmdloc_dummy_var_79: [ref]i8);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p23: ref, in_$p25: ref, in_$p28: ref, in_$p30: ref, in_$p34: ref, in_$p37: ref, in_$p39: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i64, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i32, in_$i325: i1, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$i338: i64, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i64, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i1, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i64, in_vslice_dummy_var_139: i64, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i64, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32) returns (out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i64, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i32, out_$i325: i1, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$i338: i64, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i64, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i1, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i64, out_vslice_dummy_var_139: i64, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i64, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32)
{

  entry:
    out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$p291, out_$i292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$p290, in_$p291, in_$i292, in_$i294, in_$i295, in_$p296, in_$p297, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$i333, in_$i334, in_$i335, in_$p336, in_$p337, in_$i338, in_$i340, in_$i341, in_$p342, in_$p343, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i369, in_$i370, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1746} out_$i83 := __VERIFIER_nondet_int();
    call {:si_unique_call 1747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i83);
    call {:si_unique_call 1748} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i83);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb219_dummy;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb37:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $M.98 := out_$i133;
    call {:si_unique_call 1755} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_8435;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i132, 1);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i132 := $M.98;
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8432;

  $bb88:
    assume out_$i131 == 1;
    goto corral_source_split_8431;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 0);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$i130 := $M.103;
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.103 := out_$i129;
    call {:si_unique_call 1753} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_8427;

  SeqInstr_546:
    goto corral_source_split_8426;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} out_$i129 := cyapa_runtime_resume(out_$p128);
    goto SeqInstr_545;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$p128 := $M.78;
    goto corral_source_split_8425;

  $bb86:
    assume out_$i127 == 1;
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 2);
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i126 := $M.87;
    goto corral_source_split_8421;

  $bb84:
    assume out_$i125 == 1;
    goto corral_source_split_8420;

  $bb82:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i102, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb76:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i102, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb64:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i102, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb39:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i102, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_8334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1749} out_$i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 1750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i102);
    call {:si_unique_call 1751} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i102);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i101 == 1;
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i100, 0);
    goto corral_source_split_8332;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$i100 := $M.87;
    goto corral_source_split_8331;

  $bb34:
    assume out_$i99 == 1;
    goto corral_source_split_8330;

  $bb30:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i83, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb22:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i83, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb3:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i83, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i83, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb94:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8445;

  $bb95:
    assume out_$i139 == 1;
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 0);
    goto corral_source_split_8442;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    out_$i138 := $M.104;
    goto corral_source_split_8441;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.104 := out_$i137;
    call {:si_unique_call 1757} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_8440;

  SeqInstr_549:
    goto corral_source_split_8439;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_$i137 := cyapa_resume(out_$p136);
    goto SeqInstr_548;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    out_$p136 := $M.78;
    goto corral_source_split_8438;

  $bb93:
    assume out_$i135 == 1;
    goto corral_source_split_8437;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 15);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    out_$i134 := $M.87;
    goto corral_source_split_8417;

  $bb83:
    assume !(out_$i124 == 1);
    goto corral_source_split_8416;

  $bb100:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.87 := 4;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8455;

  $bb101:
    assume out_$i145 == 1;
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_8452;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$i144 := $M.105;
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.105 := out_$i143;
    call {:si_unique_call 1760} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_8450;

  SeqInstr_552:
    goto corral_source_split_8449;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} out_$i143 := cyapa_suspend(out_$p142);
    goto SeqInstr_551;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    out_$p142 := $M.78;
    goto corral_source_split_8448;

  $bb99:
    assume out_$i141 == 1;
    goto corral_source_split_8447;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 3);
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$i140 := $M.87;
    goto corral_source_split_8405;

  $bb78:
    assume out_$i122 == 1;
    goto corral_source_split_8404;

  $bb77:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i102, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb106:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8465;

  $bb107:
    assume out_$i151 == 1;
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 0);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$i150 := $M.106;
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $M.106 := out_$i149;
    call {:si_unique_call 1763} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_8460;

  SeqInstr_555:
    goto corral_source_split_8459;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_$i149 := cyapa_resume(out_$p148);
    goto SeqInstr_554;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$p148 := $M.78;
    goto corral_source_split_8458;

  $bb105:
    assume out_$i147 == 1;
    goto corral_source_split_8457;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 14);
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$i146 := $M.87;
    goto corral_source_split_8409;

  $bb80:
    assume out_$i123 == 1;
    goto corral_source_split_8408;

  $bb79:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i102, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb112:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $M.98 := out_$i159;
    call {:si_unique_call 1768} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(out_$i158, 1);
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    out_$i158 := $M.98;
    goto corral_source_split_8476;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8475;

  $bb113:
    assume out_$i157 == 1;
    goto corral_source_split_8474;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 0);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i156 := $M.107;
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.107 := out_$i155;
    call {:si_unique_call 1766} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_8470;

  SeqInstr_558:
    goto corral_source_split_8469;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} out_$i155 := cyapa_runtime_suspend(out_$p154);
    goto SeqInstr_557;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    out_$p154 := $M.78;
    goto corral_source_split_8468;

  $bb111:
    assume out_$i153 == 1;
    goto corral_source_split_8467;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$i152 := $M.87;
    goto corral_source_split_8413;

  $bb81:
    assume !(out_$i123 == 1);
    goto corral_source_split_8412;

  $bb118:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.87 := 5;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(5);
    goto corral_source_split_8488;

  $bb119:
    assume out_$i165 == 1;
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 0);
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$i164 := $M.108;
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.108 := out_$i163;
    call {:si_unique_call 1770} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_8483;

  SeqInstr_561:
    goto corral_source_split_8482;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} out_$i163 := cyapa_suspend(out_$p162);
    goto SeqInstr_560;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$p162 := $M.78;
    goto corral_source_split_8481;

  $bb117:
    assume out_$i161 == 1;
    goto corral_source_split_8480;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$i160 := $M.87;
    goto corral_source_split_8393;

  $bb72:
    assume out_$i119 == 1;
    goto corral_source_split_8392;

  $bb66:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i102, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb65:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i102, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb124:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.87 := 6;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(6);
    goto corral_source_split_8498;

  $bb125:
    assume out_$i171 == 1;
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 0);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$i170 := $M.109;
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.109 := out_$i169;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_8493;

  SeqInstr_564:
    goto corral_source_split_8492;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_$i169 := cyapa_suspend(out_$p168);
    goto SeqInstr_563;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$p168 := $M.78;
    goto corral_source_split_8491;

  $bb123:
    assume out_$i167 == 1;
    goto corral_source_split_8490;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 3);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$i166 := $M.87;
    goto corral_source_split_8397;

  $bb74:
    assume out_$i120 == 1;
    goto corral_source_split_8396;

  $bb73:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i102, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb130:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb132:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.87 := 16;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(16);
    goto corral_source_split_8508;

  $bb131:
    assume out_$i177 == 1;
    goto corral_source_split_8507;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i176 := $M.110;
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.110 := out_$i175;
    call {:si_unique_call 1776} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_8503;

  SeqInstr_567:
    goto corral_source_split_8502;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} out_$i175 := cyapa_resume(out_$p174);
    goto SeqInstr_566;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$p174 := $M.78;
    goto corral_source_split_8501;

  $bb129:
    assume out_$i173 == 1;
    goto corral_source_split_8500;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 13);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$i172 := $M.87;
    goto corral_source_split_8401;

  $bb75:
    assume !(out_$i120 == 1);
    goto corral_source_split_8400;

  $bb136:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $M.87 := 7;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(7);
    goto corral_source_split_8517;

  $bb137:
    assume out_$i182 == 1;
    goto corral_source_split_8516;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 0);
    goto corral_source_split_8514;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$i181 := $M.111;
    goto corral_source_split_8513;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $M.111 := out_$i180;
    call {:si_unique_call 1779} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_8512;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_$i180 := ldv_suspend_late_6();
    goto corral_source_split_8511;

  $bb135:
    assume out_$i179 == 1;
    goto corral_source_split_8510;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 4);
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i178 := $M.87;
    goto corral_source_split_8381;

  $bb68:
    assume out_$i117 == 1;
    goto corral_source_split_8380;

  $bb67:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i102, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb142:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.87 := 14;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_8526;

  $bb143:
    assume out_$i187 == 1;
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 0);
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i186 := $M.112;
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $M.112 := out_$i185;
    call {:si_unique_call 1782} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} out_$i185 := ldv_restore_early_6();
    goto corral_source_split_8520;

  $bb141:
    assume out_$i184 == 1;
    goto corral_source_split_8519;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 10);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$i183 := $M.87;
    goto corral_source_split_8385;

  $bb70:
    assume out_$i118 == 1;
    goto corral_source_split_8384;

  $bb69:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i102, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb148:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb150:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.87 := 13;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_8535;

  $bb149:
    assume out_$i192 == 1;
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$i191 := $M.113;
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $M.113 := out_$i190;
    call {:si_unique_call 1785} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_$i190 := ldv_resume_early_6();
    goto corral_source_split_8529;

  $bb147:
    assume out_$i189 == 1;
    goto corral_source_split_8528;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 7);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$i188 := $M.87;
    goto corral_source_split_8389;

  $bb71:
    assume !(out_$i118 == 1);
    goto corral_source_split_8388;

  $bb154:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $M.87 := 15;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_8544;

  $bb155:
    assume out_$i197 == 1;
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 0);
    goto corral_source_split_8541;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    out_$i196 := $M.114;
    goto corral_source_split_8540;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.114 := out_$i195;
    call {:si_unique_call 1788} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_8539;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} out_$i195 := ldv_thaw_early_6();
    goto corral_source_split_8538;

  $bb153:
    assume out_$i194 == 1;
    goto corral_source_split_8537;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 12);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i193 := $M.87;
    goto corral_source_split_8373;

  $bb62:
    assume out_$i114 == 1;
    goto corral_source_split_8372;

  $bb56:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i102, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb41:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i102, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb40:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i102, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb160:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb162:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $M.87 := 13;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(13);
    goto corral_source_split_8553;

  $bb161:
    assume out_$i202 == 1;
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 0);
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i201 := $M.115;
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $M.115 := out_$i200;
    call {:si_unique_call 1791} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i200);
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_$i200 := ldv_resume_noirq_6();
    goto corral_source_split_8547;

  $bb159:
    assume out_$i199 == 1;
    goto corral_source_split_8546;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 8);
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$i198 := $M.87;
    goto corral_source_split_8377;

  $bb63:
    assume !(out_$i114 == 1);
    goto corral_source_split_8376;

  $bb166:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb168:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $M.87 := 11;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(11);
    goto corral_source_split_8562;

  $bb167:
    assume out_$i207 == 1;
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 0);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i206 := $M.116;
    goto corral_source_split_8558;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.116 := out_$i205;
    call {:si_unique_call 1794} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} out_$i205 := ldv_freeze_noirq_6();
    goto corral_source_split_8556;

  $bb165:
    assume out_$i204 == 1;
    goto corral_source_split_8555;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 6);
    goto corral_source_split_8362;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i203 := $M.87;
    goto corral_source_split_8361;

  $bb58:
    assume out_$i112 == 1;
    goto corral_source_split_8360;

  $bb57:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i102, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb172:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $M.98 := out_$i214;
    call {:si_unique_call 1799} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i214);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i214 := $add.i32(out_$i213, 1);
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$i213 := $M.98;
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8571;

  $bb173:
    assume out_$i212 == 1;
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 0);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i211 := $M.117;
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $M.117 := out_$i210;
    call {:si_unique_call 1797} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} out_$i210 := ldv_prepare_6();
    goto corral_source_split_8565;

  $bb171:
    assume out_$i209 == 1;
    goto corral_source_split_8564;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i208 := $M.87;
    goto corral_source_split_8365;

  $bb60:
    assume out_$i113 == 1;
    goto corral_source_split_8364;

  $bb59:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i102, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb178:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb180:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $M.87 := 12;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(12);
    goto corral_source_split_8583;

  $bb179:
    assume out_$i219 == 1;
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    out_$i218 := $M.118;
    goto corral_source_split_8579;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.118 := out_$i217;
    call {:si_unique_call 1801} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} out_$i217 := ldv_freeze_late_6();
    goto corral_source_split_8577;

  $bb177:
    assume out_$i216 == 1;
    goto corral_source_split_8576;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 6);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$i215 := $M.87;
    goto corral_source_split_8369;

  $bb61:
    assume !(out_$i113 == 1);
    goto corral_source_split_8368;

  $bb184:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb186:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.87 := 15;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(15);
    goto corral_source_split_8592;

  $bb185:
    assume out_$i224 == 1;
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 0);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i223 := $M.119;
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $M.119 := out_$i222;
    call {:si_unique_call 1804} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} out_$i222 := ldv_thaw_noirq_6();
    goto corral_source_split_8586;

  $bb183:
    assume out_$i221 == 1;
    goto corral_source_split_8585;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 11);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i220 := $M.87;
    goto corral_source_split_8349;

  $bb52:
    assume out_$i109 == 1;
    goto corral_source_split_8348;

  $bb43:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i102, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb42:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i102, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb190:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb192:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.87 := 9;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(9);
    goto corral_source_split_8601;

  $bb191:
    assume out_$i229 == 1;
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 0);
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i228 := $M.120;
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $M.120 := out_$i227;
    call {:si_unique_call 1807} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i227);
    goto corral_source_split_8596;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} out_$i227 := ldv_poweroff_noirq_6();
    goto corral_source_split_8595;

  $bb189:
    assume out_$i226 == 1;
    goto corral_source_split_8594;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 5);
    goto corral_source_split_8354;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    out_$i225 := $M.87;
    goto corral_source_split_8353;

  $bb54:
    assume out_$i110 == 1;
    goto corral_source_split_8352;

  $bb53:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i102, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb196:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb198:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.87 := 10;
    call {:si_unique_call 1811} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(10);
    goto corral_source_split_8610;

  $bb197:
    assume out_$i234 == 1;
    goto corral_source_split_8609;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 0);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$i233 := $M.121;
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $M.121 := out_$i232;
    call {:si_unique_call 1810} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i232);
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_$i232 := ldv_poweroff_late_6();
    goto corral_source_split_8604;

  $bb195:
    assume out_$i231 == 1;
    goto corral_source_split_8603;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 5);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$i230 := $M.87;
    goto corral_source_split_8357;

  $bb55:
    assume !(out_$i110 == 1);
    goto corral_source_split_8356;

  $bb202:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.87 := 14;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(14);
    goto corral_source_split_8619;

  $bb203:
    assume out_$i239 == 1;
    goto corral_source_split_8618;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 0);
    goto corral_source_split_8616;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    out_$i238 := $M.122;
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.122 := out_$i237;
    call {:si_unique_call 1813} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} out_$i237 := ldv_restore_noirq_6();
    goto corral_source_split_8613;

  $bb201:
    assume out_$i236 == 1;
    goto corral_source_split_8612;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 9);
    goto corral_source_split_8338;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    out_$i235 := $M.87;
    goto corral_source_split_8337;

  $bb45:
    assume out_$i106 == 1;
    goto corral_source_split_8336;

  $bb44:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i102, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb208:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb210:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $M.87 := 8;
    call {:si_unique_call 1817} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(8);
    goto corral_source_split_8628;

  $bb209:
    assume out_$i244 == 1;
    goto corral_source_split_8627;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 0);
    goto corral_source_split_8625;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    out_$i243 := $M.123;
    goto corral_source_split_8624;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.123 := out_$i242;
    call {:si_unique_call 1816} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_8623;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} out_$i242 := ldv_suspend_noirq_6();
    goto corral_source_split_8622;

  $bb207:
    assume out_$i241 == 1;
    goto corral_source_split_8621;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 4);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i240 := $M.87;
    goto corral_source_split_8341;

  $bb47:
    assume out_$i107 == 1;
    goto corral_source_split_8340;

  $bb46:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i102, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb214:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $M.98 := out_$i249;
    call {:si_unique_call 1820} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i249);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$i249 := $sub.i32(out_$i248, 1);
    goto corral_source_split_8634;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$i248 := $M.98;
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8632;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} out_vslice_dummy_var_136 := ldv_complete_6();
    goto corral_source_split_8631;

  $bb213:
    assume out_$i246 == 1;
    goto corral_source_split_8630;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 16);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i245 := $M.87;
    goto corral_source_split_8345;

  $bb49:
    assume out_$i108 == 1;
    goto corral_source_split_8344;

  $bb48:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i102, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_8637;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb51;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb51;

  $bb221:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8647;

  SeqInstr_570:
    goto corral_source_split_8646;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} out_vslice_dummy_var_137 := cyapa_show_product_id(in_$p7, in_$p9, in_$p12);
    goto SeqInstr_569;

  $bb225:
    assume out_$i255 == 1;
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    out_$i254 := $M.88;
    goto corral_source_split_8642;

  $bb223:
    assume out_$i253 == 1;
    goto corral_source_split_8641;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_8639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} out_$i252 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i252);
    call {:si_unique_call 1824} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i252);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume out_$i251 == 1;
    goto corral_source_split_8639;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$i251 := $ne.i32(out_$i250, 0);
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    out_$i250 := $M.88;
    goto corral_source_split_8323;

  $bb32:
    assume out_$i98 == 1;
    goto corral_source_split_8322;

  $bb31:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i83, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_stop();
    goto corral_source_split_8649;

  $bb224:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb233:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb234;

  SeqInstr_573:
    goto corral_source_split_8652;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_main_exported_3();
    goto SeqInstr_572;

  $bb232:
    assume out_$i258 == 1;
    goto corral_source_split_8651;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i257 := $M.89;
    goto corral_source_split_8327;

  $bb33:
    assume !(out_$i98 == 1);
    goto corral_source_split_8326;

  $bb236:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb241:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8662;

  SeqInstr_576:
    goto corral_source_split_8661;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} out_vslice_dummy_var_138 := cyapa_show_mode(in_$p7, in_$p9, in_$p14);
    goto SeqInstr_575;

  $bb240:
    assume out_$i264 == 1;
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 1);
    goto corral_source_split_8658;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i263 := $M.90;
    goto corral_source_split_8657;

  $bb238:
    assume out_$i262 == 1;
    goto corral_source_split_8656;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_8654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} out_$i261 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i261);
    call {:si_unique_call 1831} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i261);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb235:
    assume out_$i260 == 1;
    goto corral_source_split_8654;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    out_$i260 := $ne.i32(out_$i259, 0);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$i259 := $M.90;
    goto corral_source_split_8315;

  $bb28:
    assume out_$i96 == 1;
    goto corral_source_split_8314;

  $bb24:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i83, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb23:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i83, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_stop();
    goto corral_source_split_8664;

  $bb239:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb248:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb253:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8674;

  SeqInstr_579:
    goto corral_source_split_8673;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} out_vslice_dummy_var_139 := cyapa_show_baseline(in_$p7, in_$p9, in_$p16);
    goto SeqInstr_578;

  $bb252:
    assume out_$i271 == 1;
    goto corral_source_split_8672;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    out_$i270 := $M.91;
    goto corral_source_split_8669;

  $bb250:
    assume out_$i269 == 1;
    goto corral_source_split_8668;

  $bb249:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_8666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1835} out_$i268 := __VERIFIER_nondet_int();
    call {:si_unique_call 1836} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i268);
    call {:si_unique_call 1837} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i268);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb247:
    assume out_$i267 == 1;
    goto corral_source_split_8666;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$i267 := $ne.i32(out_$i266, 0);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i266 := $M.91;
    goto corral_source_split_8319;

  $bb29:
    assume !(out_$i96 == 1);
    goto corral_source_split_8318;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_stop();
    goto corral_source_split_8676;

  $bb251:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb260:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb265:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8686;

  SeqInstr_582:
    goto corral_source_split_8685;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_vslice_dummy_var_140 := cyapa_show_fm_ver(in_$p7, in_$p9, in_$p18);
    goto SeqInstr_581;

  $bb264:
    assume out_$i278 == 1;
    goto corral_source_split_8684;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 1);
    goto corral_source_split_8682;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i277 := $M.92;
    goto corral_source_split_8681;

  $bb262:
    assume out_$i276 == 1;
    goto corral_source_split_8680;

  $bb261:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_8678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1841} out_$i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 1842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i275);
    call {:si_unique_call 1843} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i275);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb259:
    assume out_$i274 == 1;
    goto corral_source_split_8678;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$i273 := $M.92;
    goto corral_source_split_8307;

  $bb26:
    assume out_$i95 == 1;
    goto corral_source_split_8306;

  $bb25:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i83, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} ldv_stop();
    goto corral_source_split_8688;

  $bb263:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb272:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb273;

  SeqInstr_585:
    goto corral_source_split_8691;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} choose_interrupt_2();
    goto SeqInstr_584;

  $bb271:
    assume out_$i281 == 1;
    goto corral_source_split_8690;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_8312;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    out_$i280 := $M.93;
    goto corral_source_split_8311;

  $bb27:
    assume !(out_$i95 == 1);
    goto corral_source_split_8310;

  $bb275:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb285:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8708;

  SeqInstr_588:
    goto corral_source_split_8707;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} out_vslice_dummy_var_141 := cyapa_update_suspend_scanrate(out_$p290, out_$p291, in_$p20, out_$i292);
    goto SeqInstr_587;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i64($M.0, in_$p0);
    goto corral_source_split_8706;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    out_$p291 := $M.64;
    goto corral_source_split_8705;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    out_$p290 := $M.65;
    goto corral_source_split_8704;

  $bb284:
    assume out_$i289 == 1;
    goto corral_source_split_8703;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_8701;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    out_$i288 := $M.94;
    goto corral_source_split_8700;

  $bb282:
    assume out_$i287 == 1;
    goto corral_source_split_8699;

  $bb277:
    assume out_$i285 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb276:
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_8693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1848} out_$i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1849} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i284);
    call {:si_unique_call 1850} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i284);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb274:
    assume out_$i283 == 1;
    goto corral_source_split_8693;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$i283 := $ne.i32(out_$i282, 0);
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$i282 := $M.94;
    goto corral_source_split_8299;

  $bb20:
    assume out_$i92 == 1;
    goto corral_source_split_8298;

  $bb16:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i83, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb5:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i83, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb4:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i83, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb289:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1854} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8714;

  SeqInstr_591:
    goto corral_source_split_8713;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} out_vslice_dummy_var_142 := cyapa_show_suspend_scanrate(out_$p296, out_$p297, in_$p23);
    goto SeqInstr_590;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    out_$p297 := $M.64;
    goto corral_source_split_8712;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$p296 := $M.65;
    goto corral_source_split_8711;

  $bb288:
    assume out_$i295 == 1;
    goto corral_source_split_8710;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 1);
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    out_$i294 := $M.94;
    goto corral_source_split_8696;

  $bb279:
    assume out_$i286 == 1;
    goto corral_source_split_8695;

  $bb278:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} ldv_stop();
    goto corral_source_split_8716;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb280:
    assume {:verifier.code 0} true;
    assume !(out_$i286 == 1);
    goto $bb281;

  $bb283:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb281;

  $bb295:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb300:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8727;

  SeqInstr_594:
    goto corral_source_split_8726;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} out_vslice_dummy_var_143 := cyapa_calibrate_store(in_$p7, in_$p9, in_$p25, out_$i305);
    goto SeqInstr_593;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i64($M.0, in_$p1);
    goto corral_source_split_8725;

  $bb299:
    assume out_$i304 == 1;
    goto corral_source_split_8724;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_8722;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    out_$i303 := $M.95;
    goto corral_source_split_8721;

  $bb297:
    assume out_$i302 == 1;
    goto corral_source_split_8720;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_8718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1856} out_$i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i301);
    call {:si_unique_call 1858} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i301);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb294:
    assume out_$i300 == 1;
    goto corral_source_split_8718;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_8304;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$i299 := $M.95;
    goto corral_source_split_8303;

  $bb21:
    assume !(out_$i92 == 1);
    goto corral_source_split_8302;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_stop();
    goto corral_source_split_8729;

  $bb298:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb307:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    goto $bb308;

  SeqInstr_597:
    goto corral_source_split_8732;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} choose_interrupt_1();
    goto SeqInstr_596;

  $bb306:
    assume out_$i308 == 1;
    goto corral_source_split_8731;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i32(out_$i307, 0);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$i307 := $M.96;
    goto corral_source_split_8291;

  $bb18:
    assume out_$i91 == 1;
    goto corral_source_split_8290;

  $bb17:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i83, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb310:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb311;

  SeqInstr_600:
    goto corral_source_split_8735;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} ldv_main_exported_4();
    goto SeqInstr_599;

  $bb309:
    assume out_$i310 == 1;
    goto corral_source_split_8734;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i310 := $ne.i32(out_$i309, 0);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i309 := $M.97;
    goto corral_source_split_8295;

  $bb19:
    assume !(out_$i91 == 1);
    goto corral_source_split_8294;

  $bb313:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb323:
    assume {:verifier.code 0} true;
    assume !(out_$i318 == 1);
    goto $bb324;

  $bb326:
    assume {:verifier.code 0} true;
    assume !(out_$i320 == 1);
    goto $bb324;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 0);
    goto corral_source_split_8749;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    out_$i319 := $M.98;
    goto corral_source_split_8748;

  $bb322:
    assume out_$i318 == 1;
    goto corral_source_split_8747;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 3);
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$i317 := $M.99;
    goto corral_source_split_8744;

  $bb320:
    assume out_$i316 == 1;
    goto corral_source_split_8743;

  $bb315:
    assume out_$i314 == 1;
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i313, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb314:
    assume {:verifier.code 0} true;
    out_$i314 := $slt.i32(out_$i313, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_8737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1864} out_$i313 := __VERIFIER_nondet_int();
    call {:si_unique_call 1865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i313);
    call {:si_unique_call 1866} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i313);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb312:
    assume out_$i312 == 1;
    goto corral_source_split_8737;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i312 := $ne.i32(out_$i311, 0);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$i311 := $M.99;
    goto corral_source_split_8283;

  $bb14:
    assume out_$i89 == 1;
    goto corral_source_split_8282;

  $bb7:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i83, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb6:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i83, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb331:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb336:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    out_$i327 := $ne.i32(out_$i326, 0);
    goto corral_source_split_8812;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i326 := $M.124;
    goto corral_source_split_8811;

  $bb333:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_dev_pm_ops_6();
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_8807;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_initialize_cyapa_dev_ops_3();
    goto corral_source_split_8806;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8805;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8803;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1901} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_initialize_device_attribute_14();
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_8800;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1898} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8799;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_initialize_cyapa_dev_ops_4();
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_initialize_device_attribute_13();
    goto corral_source_split_8796;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8795;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1893} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8793;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $M.99 := 3;
    call {:si_unique_call 1891} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8792;

  $bb332:
    assume out_$i325 == 1;
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 0);
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    out_$i324 := $M.124;
    goto corral_source_split_8788;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.124 := out_$i323;
    call {:si_unique_call 1890} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i323);
    goto corral_source_split_8787;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} out_$i323 := cyapa_driver_init();
    goto corral_source_split_8786;

  $bb330:
    assume out_$i322 == 1;
    goto corral_source_split_8785;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_8741;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i321 := $M.99;
    goto corral_source_split_8740;

  $bb317:
    assume out_$i315 == 1;
    goto corral_source_split_8739;

  $bb316:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i313, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_stop();
    goto corral_source_split_8817;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb318:
    assume {:verifier.code 0} true;
    assume !(out_$i315 == 1);
    goto $bb319;

  $bb321:
    assume {:verifier.code 0} true;
    assume !(out_$i316 == 1);
    goto $bb319;

  $bb343:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8834;

  SeqInstr_606:
    goto corral_source_split_8833;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} out_vslice_dummy_var_144 := cyapa_update_rt_suspend_scanrate(out_$p336, out_$p337, in_$p30, out_$i338);
    goto SeqInstr_605;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    out_$i338 := $load.i64($M.0, in_$p2);
    goto corral_source_split_8832;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    out_$p337 := $M.62;
    goto corral_source_split_8831;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    out_$p336 := $M.63;
    goto corral_source_split_8830;

  $bb352:
    assume out_$i335 == 1;
    goto corral_source_split_8829;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 1);
    goto corral_source_split_8827;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    out_$i334 := $M.100;
    goto corral_source_split_8826;

  $bb350:
    assume out_$i333 == 1;
    goto corral_source_split_8825;

  $bb345:
    assume out_$i331 == 1;
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i330, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb344:
    assume {:verifier.code 0} true;
    out_$i331 := $slt.i32(out_$i330, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_8819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} out_$i330 := __VERIFIER_nondet_int();
    call {:si_unique_call 1912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i330);
    call {:si_unique_call 1913} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i330);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb342:
    assume out_$i329 == 1;
    goto corral_source_split_8819;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$i329 := $ne.i32(out_$i328, 0);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$i328 := $M.100;
    goto corral_source_split_8287;

  $bb15:
    assume !(out_$i89 == 1);
    goto corral_source_split_8286;

  $bb357:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_8840;

  SeqInstr_609:
    goto corral_source_split_8839;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} out_vslice_dummy_var_145 := cyapa_show_rt_suspend_scanrate(out_$p342, out_$p343, in_$p28);
    goto SeqInstr_608;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    out_$p343 := $M.62;
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    out_$p342 := $M.63;
    goto corral_source_split_8837;

  $bb356:
    assume out_$i341 == 1;
    goto corral_source_split_8836;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 1);
    goto corral_source_split_8823;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    out_$i340 := $M.100;
    goto corral_source_split_8822;

  $bb347:
    assume out_$i332 == 1;
    goto corral_source_split_8821;

  $bb346:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i330, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_stop();
    goto corral_source_split_8842;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb348:
    assume {:verifier.code 0} true;
    assume !(out_$i332 == 1);
    goto $bb349;

  $bb351:
    assume {:verifier.code 0} true;
    assume !(out_$i333 == 1);
    goto $bb349;

  $bb363:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb368:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8853;

  SeqInstr_612:
    goto corral_source_split_8852;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} out_vslice_dummy_var_146 := cyapa_update_fw_store(in_$p7, in_$p9, in_$p34, out_$i351);
    goto SeqInstr_611;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    out_$i351 := $load.i64($M.0, in_$p3);
    goto corral_source_split_8851;

  $bb367:
    assume out_$i350 == 1;
    goto corral_source_split_8850;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 1);
    goto corral_source_split_8848;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    out_$i349 := $M.101;
    goto corral_source_split_8847;

  $bb365:
    assume out_$i348 == 1;
    goto corral_source_split_8846;

  $bb364:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_8844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1919} out_$i347 := __VERIFIER_nondet_int();
    call {:si_unique_call 1920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i347);
    call {:si_unique_call 1921} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i347);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb362:
    assume out_$i346 == 1;
    goto corral_source_split_8844;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    out_$i346 := $ne.i32(out_$i345, 0);
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    out_$i345 := $M.101;
    goto corral_source_split_8275;

  $bb9:
    assume out_$i87 == 1;
    goto corral_source_split_8274;

  $bb8:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i83, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_stop();
    goto corral_source_split_8855;

  $bb366:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb375:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb385:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb387:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    goto $bb388;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.98 := out_$i365;
    call {:si_unique_call 1931} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i365);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i365 := $add.i32(out_$i364, 1);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    out_$i364 := $M.98;
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $M.102 := 2;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8874;

  $bb386:
    assume out_$i363 == 1;
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 0);
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$i362 := $M.125;
    goto corral_source_split_8870;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $M.125 := out_$i361;
    call {:si_unique_call 1929} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_8869;

  SeqInstr_615:
    goto corral_source_split_8868;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_$i361 := cyapa_probe(in_$p39, in_$p37);
    goto SeqInstr_614;

  $bb384:
    assume out_$i360 == 1;
    goto corral_source_split_8867;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 1);
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$i359 := $M.102;
    goto corral_source_split_8864;

  $bb382:
    assume out_$i358 == 1;
    goto corral_source_split_8863;

  $bb377:
    assume out_$i356 == 1;
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i355, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb376:
    assume {:verifier.code 0} true;
    out_$i356 := $slt.i32(out_$i355, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_8857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} out_$i355 := __VERIFIER_nondet_int();
    call {:si_unique_call 1926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i355);
    call {:si_unique_call 1927} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i355);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb374:
    assume out_$i354 == 1;
    goto corral_source_split_8857;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    out_$i354 := $ne.i32(out_$i353, 0);
    goto corral_source_split_8280;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$i353 := $M.102;
    goto corral_source_split_8279;

  $bb11:
    assume out_$i88 == 1;
    goto corral_source_split_8278;

  $bb10:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i83, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb392:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb393;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $M.98 := out_$i370;
    call {:si_unique_call 1934} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i370);
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i370 := $sub.i32(out_$i369, 1);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$i369 := $M.98;
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} out_vslice_dummy_var_147 := ldv_release_5();
    goto corral_source_split_8880;

  $bb391:
    assume out_$i367 == 1;
    goto corral_source_split_8879;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 2);
    goto corral_source_split_8861;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    out_$i366 := $M.102;
    goto corral_source_split_8860;

  $bb379:
    assume out_$i357 == 1;
    goto corral_source_split_8859;

  $bb378:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i355, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} ldv_stop();
    goto corral_source_split_8886;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb380:
    assume {:verifier.code 0} true;
    assume !(out_$i357 == 1);
    goto $bb381;

  $bb383:
    assume {:verifier.code 0} true;
    assume !(out_$i358 == 1);
    goto $bb381;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} ldv_stop();
    goto corral_source_split_8888;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb13;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb13;

  $bb219_dummy:
    call {:si_unique_call 1} out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$p291, out_$i292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p7, in_$p9, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p23, in_$p25, in_$p28, in_$p30, in_$p34, in_$p37, in_$p39, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$p290, out_$p291, out_$i292, out_$i294, out_$i295, out_$p296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$i333, out_$i334, out_$i335, out_$p336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$p343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p9: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p23: ref, in_$p25: ref, in_$p28: ref, in_$p30: ref, in_$p34: ref, in_$p37: ref, in_$p39: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i32, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i64, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i32, in_$i325: i1, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$i332: i1, in_$i333: i1, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$i338: i64, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i64, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i1, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i64, in_vslice_dummy_var_138: i64, in_vslice_dummy_var_139: i64, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i64, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32) returns (out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i32, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i64, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i32, out_$i325: i1, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$i332: i1, out_$i333: i1, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$i338: i64, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i64, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i1, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i64, out_vslice_dummy_var_138: i64, out_vslice_dummy_var_139: i64, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i64, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32);
  modifies $M.98, $M.87, $M.103, $M.0, $M.20, $M.21, $CurrAddr, $M.22, assertsPassed, $M.104, $M.39, $M.32, $M.10, $M.35, $M.36, $M.37, $M.38, $M.23, $M.24, $M.25, $M.26, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.88, $M.19, $M.89, $M.11, $M.12, $M.27, $M.28, $M.15, $M.13, $M.14, $M.29, $M.17, $M.16, $M.18, $M.30, $M.31, $M.90, $M.91, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.92, $M.40, $M.94, $M.95, $M.42, $M.43, $M.46, $M.47, $M.44, $M.50, $M.51, $M.48, $M.54, $M.55, $M.52, $M.66, $M.97, $M.78, $M.85, $M.79, $M.84, $M.83, $M.64, $M.65, $M.86, $M.82, $M.81, $M.80, $M.62, $M.63, $M.100, $M.101, $M.102, $M.99, $M.124, $M.125;


