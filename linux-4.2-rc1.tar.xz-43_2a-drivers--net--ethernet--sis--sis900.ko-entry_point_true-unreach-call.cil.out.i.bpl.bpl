var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]i64;

var $M.3: i32;

var $M.4: [ref]i32;

var $M.5: [ref]i16;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: [ref]i8;

var $M.10: [ref]i8;

var $M.11: [ref]ref;

var $M.12: [ref]i16;

var $M.13: ref;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: [ref]i32;

var $M.26: [ref]i32;

var $M.27: ref;

var $M.28: ref;

var $M.29: ref;

var $M.30: ref;

var $M.31: [ref]i32;

var $M.32: [ref]i8;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: [ref]i32;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]i32;

var $M.58: [ref]i32;

var $M.59: [ref]i64;

var $M.60: [ref]i16;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 399332);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const ldv_timer_state_2: ref;

axiom ldv_timer_state_2 == $sub.ref(0, 6168);

const sis900_netdev_ops_group1: ref;

axiom sis900_netdev_ops_group1 == $sub.ref(0, 7200);

const ldv_timer_list_2: ref;

axiom ldv_timer_list_2 == $sub.ref(0, 8232);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 9260);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 10288);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 11316);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 12344);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 13376);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 14408);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 15440);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 16472);

const sis900_pci_driver_group1: ref;

axiom sis900_pci_driver_group1 == $sub.ref(0, 17504);

const sis900_ethtool_ops_group1: ref;

axiom sis900_ethtool_ops_group1 == $sub.ref(0, 18536);

const sis900_ethtool_ops_group0: ref;

axiom sis900_ethtool_ops_group0 == $sub.ref(0, 19568);

const sis900_ethtool_ops_group2: ref;

axiom sis900_ethtool_ops_group2 == $sub.ref(0, 20600);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 21628);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 22656);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 23684);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 24712);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 25740);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 26768);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 27796);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 28824);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 29852);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 30880);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 31908);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 32936);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 33964);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 34992);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 36020);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 37048);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 38076);

const {:count 3} __mod_pci__sis900_pci_tbl_device_table: ref;

axiom __mod_pci__sis900_pci_tbl_device_table == $sub.ref(0, 39196);

const multicast_filter_limit: ref;

axiom multicast_filter_limit == $sub.ref(0, 40224);

const {:count 14} mii_chip_table: ref;

axiom mii_chip_table == $sub.ref(0, 41472);

const sis900_debug: ref;

axiom sis900_debug == $sub.ref(0, 42500);

const sis900_ethtool_ops: ref;

axiom sis900_ethtool_ops == $sub.ref(0, 43916);

const sis900_netdev_ops: ref;

axiom sis900_netdev_ops == $sub.ref(0, 45468);

const {:count 2} card_names: ref;

axiom card_names == $sub.ref(0, 46508);

const {:count 34} version: ref;

axiom version == $sub.ref(0, 47566);

const {:count 3} sis900_pci_tbl: ref;

axiom sis900_pci_tbl == $sub.ref(0, 48686);

const sis900_pci_driver: ref;

axiom sis900_pci_driver == $sub.ref(0, 50022);

const max_interrupt_work: ref;

axiom max_interrupt_work == $sub.ref(0, 51050);

const {:count 7} .str.8: ref;

axiom .str.8 == $sub.ref(0, 52081);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 53126);

const byte_rev_table: ref;

axiom byte_rev_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 48} .str.43: ref;

axiom .str.43 == $sub.ref(0, 54198);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 41} .str.6: ref;

axiom .str.6 == $sub.ref(0, 55263);

const {:count 48} .str.42: ref;

axiom .str.42 == $sub.ref(0, 56335);

const {:count 35} .str.41: ref;

axiom .str.41 == $sub.ref(0, 57394);

const {:count 66} .str.12: ref;

axiom .str.12 == $sub.ref(0, 58484);

const {:count 26} .str.13: ref;

axiom .str.13 == $sub.ref(0, 59534);

const {:count 60} .str.14: ref;

axiom .str.14 == $sub.ref(0, 60618);

const {:count 67} .str.15: ref;

axiom .str.15 == $sub.ref(0, 61709);

const {:count 32} .str.16: ref;

axiom .str.16 == $sub.ref(0, 62765);

const {:count 30} .str.17: ref;

axiom .str.17 == $sub.ref(0, 63819);

const {:count 53} .str.18: ref;

axiom .str.18 == $sub.ref(0, 64896);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 39} .str.23: ref;

axiom .str.23 == $sub.ref(0, 65959);

const {:count 42} .str.24: ref;

axiom .str.24 == $sub.ref(0, 67025);

const {:count 51} .str.25: ref;

axiom .str.25 == $sub.ref(0, 68100);

const {:count 33} .str.26: ref;

axiom .str.26 == $sub.ref(0, 69157);

const {:count 34} .str.27: ref;

axiom .str.27 == $sub.ref(0, 70215);

const {:count 55} .str.40: ref;

axiom .str.40 == $sub.ref(0, 71294);

const {:count 27} .str.22: ref;

axiom .str.22 == $sub.ref(0, 72345);

const {:count 30} .str.21: ref;

axiom .str.21 == $sub.ref(0, 73399);

const {:count 26} .str.19: ref;

axiom .str.19 == $sub.ref(0, 74449);

const {:count 27} .str.20: ref;

axiom .str.20 == $sub.ref(0, 75500);

const .str: ref;

axiom .str == $sub.ref(0, 76565);

const {:count 61} .str.1: ref;

axiom .str.1 == $sub.ref(0, 77650);

const {:count 51} .str.2: ref;

axiom .str.2 == $sub.ref(0, 78725);

const {:count 39} .str.7: ref;

axiom .str.7 == $sub.ref(0, 79788);

const {:count 57} .str.3: ref;

axiom .str.3 == $sub.ref(0, 80869);

const {:count 61} .str.4: ref;

axiom .str.4 == $sub.ref(0, 81954);

const {:count 71} .str.5: ref;

axiom .str.5 == $sub.ref(0, 83049);

const {:count 43} .str.52: ref;

axiom .str.52 == $sub.ref(0, 84116);

const {:count 49} .str.51: ref;

axiom .str.51 == $sub.ref(0, 85189);

const {:count 213} .str.45: ref;

axiom .str.45 == $sub.ref(0, 86426);

const {:count 8} .str.47: ref;

axiom .str.47 == $sub.ref(0, 87458);

const {:count 7} .str.48: ref;

axiom .str.48 == $sub.ref(0, 88489);

const {:count 5} .str.49: ref;

axiom .str.49 == $sub.ref(0, 89518);

const {:count 5} .str.50: ref;

axiom .str.50 == $sub.ref(0, 90547);

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 91604);

const {:count 27} .str.10: ref;

axiom .str.10 == $sub.ref(0, 92655);

const {:count 26} .str.11: ref;

axiom .str.11 == $sub.ref(0, 93705);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 94750);

const {:count 25} .str.28: ref;

axiom .str.28 == $sub.ref(0, 95799);

const {:count 33} .str.29: ref;

axiom .str.29 == $sub.ref(0, 96856);

const {:count 27} .str.30: ref;

axiom .str.30 == $sub.ref(0, 97907);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 98952);

const {:count 17} .str.32: ref;

axiom .str.32 == $sub.ref(0, 99993);

const {:count 24} .str.33: ref;

axiom .str.33 == $sub.ref(0, 101041);

const {:count 23} .str.34: ref;

axiom .str.34 == $sub.ref(0, 102088);

const {:count 12} .str.35: ref;

axiom .str.35 == $sub.ref(0, 103124);

const {:count 13} .str.36: ref;

axiom .str.36 == $sub.ref(0, 104161);

const {:count 13} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105198);

const {:count 20} .str.38: ref;

axiom .str.38 == $sub.ref(0, 106242);

const {:count 13} .str.39: ref;

axiom .str.39 == $sub.ref(0, 107279);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 108311);

const {:count 3} .str.1.118: ref;

axiom .str.1.118 == $sub.ref(0, 109338);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 110376);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 111404);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 112436);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 113468);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const sis900_probe: ref;

axiom sis900_probe == $sub.ref(0, 114500);

procedure sis900_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr, $M.13, assertsPassed;



implementation sis900_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i105: i32;
  var $i104: i32;
  var $i98: i32;
  var $i88: i32;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $i130: i8;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $i125: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i49: i32;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i41: i32;
  var $i27: i32;
  var $i23: i32;
  var $i11: i32;
  var vslice_dummy_var_4: i32;
  var vslice_dummy_var_5: ref;
  var vslice_dummy_var_6: i32;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(card_names, $mul.ref(0, 16)), $mul.ref($i5, 8));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p8 := pci_name($p0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i9 := pci_enable_device($p0);
    call {:si_unique_call 5} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i12 := pci_set_dma_mask($p0, 4294967295);
    call {:si_unique_call 7} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} pci_set_master($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p15 := alloc_etherdev_mqs(608, 1, 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p18);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i21 := pci_request_regions($p0, .str.8);
    call {:si_unique_call 12} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p24 := pci_iomap($p0, 0, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p28 := netdev_priv($p15);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p24);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_5 := spinlock_check($p32);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __raw_spin_lock_init($p36, .str.13, $p3);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p15);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} pci_set_drvdata($p0, $p37);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p38 := pci_alloc_consistent($p0, 192, $p2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p38);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.2, $p2);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p46 := pci_alloc_consistent($p0, 192, $p2);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p46);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.2, $p2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, sis900_netdev_ops);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(1120, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1000);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(520, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, sis900_ethtool_ops);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i57 := $M.3;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 197);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(24, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p15);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(32, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, mdio_read);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(40, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, mdio_write);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(8, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 31);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(12, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 31);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, $i73);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 2);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 129);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i86 == 1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i32($i91, 129);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 145);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i102 == 1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i105 := sis900_get_mac_addr($p0, $p15);
    call {:si_unique_call 32} {:cexpr "ret"} boogie_si_record_i32($i105);
    assume {:verifier.code 0} true;
    $i104 := $i105;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i98 := $i104;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i88 := $i98;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i88, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i110 := is_valid_ether_addr($p109);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 36} {:cexpr "tmp___1"} boogie_si_record_i8($i111);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 132);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i122 := sis900_mii_probe($p15);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 43} {:cexpr "tmp___4"} boogie_si_record_i32($i122);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p126 := pci_get_device(4153, 1584, $0.ref);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i132 := ldv_register_netdev_37($p15);
    call {:si_unique_call 49} {:cexpr "ret"} boogie_si_record_i32($i132);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_10 := printk.ref.ref.ref.ref.i32.ref(.str.17, $p135, $p7, $p24, $i137, $p139);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p24, $mul.ref(64, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i142 := ioread32($p141);
    call {:si_unique_call 52} {:cexpr "tmp___5"} boogie_si_record_i32($i142);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i143 := $lshr.i32($i142, 27);
    call {:si_unique_call 53} {:cexpr "ret"} boogie_si_record_i32($i143);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb67:
    assume $i147 == 1;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i143, 16);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb69;

  $bb70:
    assume $i149 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_11 := printk.ref.ref(.str.18, $p151);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i133 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i125 := $i132;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.0, $p156);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} pci_free_consistent($p0, 192, $p155, $i157);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i49 := $i125;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.0, $p161);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pci_free_consistent($p0, 192, $p160, $i162);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} pci_iounmap($p0, $p24);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i27 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} pci_release_regions($p0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i23 := $i27;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_free_netdev_38($p15);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i11 := $i23;
    goto $bb3;

  $bb61:
    assume $i128 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p126, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(604, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, $i130);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} pci_dev_put($p126);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume $i123 == 1;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_9 := printk.ref.ref(.str.16, $p8);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i125 := $sub.i32(0, 19);
    goto $bb59;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i119 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i120 := ioread32($p24);
    call {:si_unique_call 40} {:cexpr "tmp___3"} boogie_si_record_i32($i120);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 512);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} iowrite32($i121, $p24);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i114 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} eth_hw_addr_random($p15);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_8 := printk.ref.ref(.str.15, $p8);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i112 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb50;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} eth_hw_addr_random($p15);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_7 := printk.ref.ref(.str.15, $p8);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i102 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i103 := sis96x_get_mac_addr($p0, $p15);
    call {:si_unique_call 30} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i104 := $i103;
    goto $bb44;

  $bb36:
    assume $i92 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i96 := $ule.i32($i95, 144);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb38;

  $bb39:
    assume $i96 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i97 := sis635_get_mac_addr($p0, $p15);
    call {:si_unique_call 28} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i98 := $i97;
    goto $bb41;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i87 := sis630e_get_mac_addr($p0, $p15);
    call {:si_unique_call 26} {:cexpr "ret"} boogie_si_record_i32($i87);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb35;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_6 := printk.ref.ref.i32(.str.14, $p8, $i81);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i59 := $M.3;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p29, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 12);
    goto $bb25;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb21;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb17;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_4 := printk.ref(.str.12);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const sis900_remove: ref;

axiom sis900_remove == $sub.ref(0, 115532);

procedure sis900_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8;



implementation sis900_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p3 := netdev_priv($p2);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ldv_unregister_netdev_42($p2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} pci_free_consistent($p0, 192, $p20, $i22);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} pci_free_consistent($p0, 192, $p25, $i27);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} pci_iounmap($p0, $p29);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} ldv_free_netdev_43($p2);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} pci_release_regions($p0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17 := sis900_remove_loop_$bb4($p4, $p5, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} kfree($p14);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p5);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sis900_suspend: ref;

axiom sis900_suspend == $sub.ref(0, 116564);

procedure sis900_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation sis900_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p3, $i1);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p6 := netdev_priv($p5);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i10 := netif_running($p5);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 68} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} netif_stop_queue($p5);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} netif_device_detach($p5);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i15 := ioread32($p9);
    call {:si_unique_call 72} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 10);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} iowrite32($i16, $p9);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_12 := pci_set_power_state($p0, 3);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_13 := pci_save_state($p0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const sis900_resume: ref;

axiom sis900_resume == $sub.ref(0, 117596);

procedure sis900_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, assertsPassed;



implementation sis900_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p3 := netdev_priv($p2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i7 := netif_running($p2);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 79} {:cexpr "tmp___1"} boogie_si_record_i8($i8);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} pci_restore_state($p0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_14 := pci_set_power_state($p0, 0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} sis900_init_rxfilter($p2);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} sis900_init_tx_ring($p2);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} sis900_init_rx_ring($p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} set_rx_mode($p2);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} netif_device_attach($p2);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} netif_start_queue($p2);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} sis900_set_mode($p4, 10, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p6, $mul.ref(20, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} iowrite32(67365, $p13);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i14 := ioread32($p6);
    call {:si_unique_call 91} {:cexpr "tmp___3"} boogie_si_record_i32($i14);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 4);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} iowrite32($i15, $p6);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} iowrite32(1, $p16);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} sis900_check_mode($p2, $p18);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 118628);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 119660);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 120692);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 121724);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 122756);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sis900_init_rxfilter: ref;

axiom sis900_init_rxfilter == $sub.ref(0, 123788);

procedure sis900_init_rxfilter($p0: ref);
  free requires assertsPassed;



implementation sis900_init_rxfilter($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p1 := netdev_priv($p0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i6 := ioread32($p5);
    call {:si_unique_call 103} {:cexpr "rfcrSave"} boogie_si_record_i32($i6);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2147483647);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} iowrite32($i7, $p8);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 105} {:cexpr "w"} boogie_si_record_i32($i13);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} iowrite32(0, $p14);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} iowrite32($i13, $p15);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8192);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(1, 2));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} iowrite32(65536, $p33);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} iowrite32($i32, $p34);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 8192);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(2, 2));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} iowrite32(131072, $p50);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} iowrite32($i49, $p51);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 8192);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i6, $sub.i32(0, 2147483648));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} iowrite32($i25, $p26);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i57 := ioread32($p56);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_17 := printk.ref.ref.i32.i32(.str.41, $p59, 2, $i57);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i40 := ioread32($p39);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} vslice_dummy_var_16 := printk.ref.ref.i32.i32(.str.41, $p42, 1, $i40);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p4, $mul.ref(76, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i21 := ioread32($p20);
    call {:si_unique_call 109} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_15 := printk.ref.ref.i32.i32(.str.41, $p23, 0, $i21);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sis900_init_tx_ring: ref;

axiom sis900_init_tx_ring == $sub.ref(0, 124820);

procedure sis900_init_tx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_init_tx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i32;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i32;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i32;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p251: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i32;
  var $i257: i32;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i32;
  var $i275: i32;
  var $p276: ref;
  var $p277: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i32;
  var $p293: ref;
  var $p294: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p304: ref;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p1 := netdev_priv($p0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(0, 8));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 12);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i13);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(1, 8));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 24);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i41);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(2, 8));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 36);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i59);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(3, 8));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 48);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p79, $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i77);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p87, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(4, 8));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $0.ref);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i93);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 60);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p97, $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i95);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p101, $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p105, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(5, 8));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $0.ref);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.0, $p110);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i111);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 72);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p115, $mul.ref(5, 12)), $mul.ref(0, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i113);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p119, $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p123, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(6, 8));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $0.ref);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i64.i32($i129);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 84);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p133, $mul.ref(6, 12)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i131);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p137, $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p141, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(7, 8));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p145, $0.ref);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i64.i32($i147);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i149 := $add.i32($i148, 96);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p151, $mul.ref(7, 12)), $mul.ref(0, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i149);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p155, $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p159, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(8, 8));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, $0.ref);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.0, $p164);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i64.i32($i165);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i166, 108);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p169, $mul.ref(8, 12)), $mul.ref(0, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i167);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p173, $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p177, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(9, 8));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $0.ref);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, $p182);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i64.i32($i183);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i185 := $add.i32($i184, 120);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p187, $mul.ref(9, 12)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, $i185);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p191, $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p195, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(10, 8));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, $0.ref);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.0, $p200);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i64.i32($i201);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i203 := $add.i32($i202, 132);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p205, $mul.ref(10, 12)), $mul.ref(0, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, $i203);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p209, $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p213, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(11, 8));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p217, $0.ref);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i219 := $load.i64($M.0, $p218);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i64.i32($i219);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, 144);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p223, $mul.ref(11, 12)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, $i221);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p227, $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p231, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(12, 8));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, $0.ref);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i237 := $load.i64($M.0, $p236);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i64.i32($i237);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i239 := $add.i32($i238, 156);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p241, $mul.ref(12, 12)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i239);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p245, $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p249, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(13, 8));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p253, $0.ref);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.0, $p254);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i64.i32($i255);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i256, 168);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p259, $mul.ref(13, 12)), $mul.ref(0, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, $i257);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p263, $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p265, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p267, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p269, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(14, 8));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p271, $0.ref);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.0, $p272);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i274 := $trunc.i64.i32($i273);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i275 := $add.i32($i274, 180);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.0, $p276);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p277, $mul.ref(14, 12)), $mul.ref(0, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p279, $i275);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.0, $p280);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p281, $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p283, 0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p285, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p287, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(15, 8));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p289, $0.ref);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.0, $p290);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i64.i32($i291);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p294, $mul.ref(15, 12)), $mul.ref(0, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, $i292);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p298, $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p300, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p302, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p304, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p4, $mul.ref(32, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} iowrite32($i25, $p26);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 8192);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p4, $mul.ref(32, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i32 := ioread32($p31);
    call {:si_unique_call 123} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_18 := printk.ref.ref.i32(.str.42, $p34, $i32);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const sis900_init_rx_ring: ref;

axiom sis900_init_rx_ring == $sub.ref(0, 125852);

procedure sis900_init_rx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation sis900_init_rx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i26: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i64;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i64;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i32;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i64;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i64;
  var $i270: i64;
  var $i271: i1;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $i286: i32;
  var $p287: ref;
  var $p288: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i64;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $i306: i64;
  var $i307: i1;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i64;
  var $i319: i32;
  var $p320: ref;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p329: ref;
  var $i330: i32;
  var $i331: i64;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i335: i64;
  var $i336: i64;
  var $i337: i1;
  var $p338: ref;
  var $i339: i64;
  var $i340: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $i352: i32;
  var $p353: ref;
  var $p354: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p362: ref;
  var $i363: i32;
  var $i364: i64;
  var $i365: i32;
  var $i366: i1;
  var $i367: i32;
  var $i368: i64;
  var $i369: i64;
  var $i370: i1;
  var $p371: ref;
  var $i372: i64;
  var $i373: i1;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $i385: i32;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p395: ref;
  var $i396: i32;
  var $i397: i64;
  var $i398: i32;
  var $i399: i1;
  var $i400: i32;
  var $i401: i64;
  var $i402: i64;
  var $i403: i1;
  var $p404: ref;
  var $i405: i64;
  var $i406: i1;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $i417: i64;
  var $i418: i32;
  var $p419: ref;
  var $p420: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p428: ref;
  var $i429: i32;
  var $i430: i64;
  var $i431: i32;
  var $i432: i1;
  var $i433: i32;
  var $i434: i64;
  var $i435: i64;
  var $i436: i1;
  var $p437: ref;
  var $i438: i64;
  var $i439: i1;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $i450: i64;
  var $i451: i32;
  var $p452: ref;
  var $p453: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p461: ref;
  var $i462: i32;
  var $i463: i64;
  var $i464: i32;
  var $i465: i1;
  var $i466: i32;
  var $i467: i64;
  var $i468: i64;
  var $i469: i1;
  var $p470: ref;
  var $i471: i64;
  var $i472: i1;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $i483: i64;
  var $i484: i32;
  var $p485: ref;
  var $p486: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p494: ref;
  var $i495: i32;
  var $i496: i64;
  var $i497: i32;
  var $i498: i1;
  var $i499: i32;
  var $i500: i64;
  var $i501: i64;
  var $i502: i1;
  var $p503: ref;
  var $i504: i64;
  var $i505: i1;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $i516: i64;
  var $i517: i32;
  var $p518: ref;
  var $p519: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p527: ref;
  var $i528: i32;
  var $i529: i64;
  var $i530: i32;
  var $i531: i1;
  var $i532: i32;
  var $i533: i64;
  var $i534: i64;
  var $i535: i1;
  var $p536: ref;
  var $i537: i64;
  var $i538: i1;
  var $p540: ref;
  var $p541: ref;
  var $p542: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $i549: i64;
  var $i550: i32;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p560: ref;
  var $i561: i32;
  var $i562: i64;
  var $i563: i32;
  var $i564: i1;
  var $i565: i32;
  var $i566: i64;
  var $i567: i64;
  var $i568: i1;
  var $p570: ref;
  var $p571: ref;
  var $i572: i64;
  var $i573: i32;
  var $i574: i32;
  var $p575: ref;
  var $p576: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p586: ref;
  var $p588: ref;
  var $p589: ref;
  var $i590: i64;
  var $i591: i32;
  var $i592: i32;
  var $p593: ref;
  var $p594: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p604: ref;
  var $p606: ref;
  var $p607: ref;
  var $i608: i64;
  var $i609: i32;
  var $i610: i32;
  var $p611: ref;
  var $p612: ref;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $p622: ref;
  var $p624: ref;
  var $p625: ref;
  var $i626: i64;
  var $i627: i32;
  var $i628: i32;
  var $p629: ref;
  var $p630: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $p640: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i64;
  var $i645: i32;
  var $i646: i32;
  var $p647: ref;
  var $p648: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p658: ref;
  var $p660: ref;
  var $p661: ref;
  var $i662: i64;
  var $i663: i32;
  var $i664: i32;
  var $p665: ref;
  var $p666: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p676: ref;
  var $p678: ref;
  var $p679: ref;
  var $i680: i64;
  var $i681: i32;
  var $i682: i32;
  var $p683: ref;
  var $p684: ref;
  var $p686: ref;
  var $p687: ref;
  var $p688: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p694: ref;
  var $p696: ref;
  var $p697: ref;
  var $i698: i64;
  var $i699: i32;
  var $i700: i32;
  var $p701: ref;
  var $p702: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p712: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i64;
  var $i717: i32;
  var $i718: i32;
  var $p719: ref;
  var $p720: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p730: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i64;
  var $i735: i32;
  var $i736: i32;
  var $p737: ref;
  var $p738: ref;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $p748: ref;
  var $p750: ref;
  var $p751: ref;
  var $i752: i64;
  var $i753: i32;
  var $i754: i32;
  var $p755: ref;
  var $p756: ref;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p766: ref;
  var $p768: ref;
  var $p769: ref;
  var $i770: i64;
  var $i771: i32;
  var $i772: i32;
  var $p773: ref;
  var $p774: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p784: ref;
  var $p786: ref;
  var $p787: ref;
  var $i788: i64;
  var $i789: i32;
  var $i790: i32;
  var $p791: ref;
  var $p792: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p798: ref;
  var $p799: ref;
  var $p800: ref;
  var $p802: ref;
  var $p804: ref;
  var $p805: ref;
  var $i806: i64;
  var $i807: i32;
  var $i808: i32;
  var $p809: ref;
  var $p810: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p816: ref;
  var $p817: ref;
  var $p818: ref;
  var $p820: ref;
  var $p822: ref;
  var $p823: ref;
  var $i824: i64;
  var $i825: i32;
  var $p826: ref;
  var $p827: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $p837: ref;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p1 := netdev_priv($p0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(0, 8));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 12);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i12);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(1, 8));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p570, $0.ref);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i572 := $load.i64($M.0, $p571);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i573 := $trunc.i64.i32($i572);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i574 := $add.i32($i573, 24);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p576 := $load.ref($M.0, $p575);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p576, $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p578, $i574);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p580 := $load.ref($M.0, $p579);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p580, $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p582, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.0, $p583);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p584, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p586, 0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(2, 8));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p588, $0.ref);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i590 := $load.i64($M.0, $p589);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i591 := $trunc.i64.i32($i590);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i592 := $add.i32($i591, 36);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p594 := $load.ref($M.0, $p593);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p594, $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p596, $i592);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p598 := $load.ref($M.0, $p597);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p598, $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p600, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.0, $p601);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p602, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p604, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(3, 8));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p606, $0.ref);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i608 := $load.i64($M.0, $p607);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i609 := $trunc.i64.i32($i608);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i610 := $add.i32($i609, 48);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p612, $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p614, $i610);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p616 := $load.ref($M.0, $p615);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p616, $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p620 := $load.ref($M.0, $p619);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p620, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p622, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(4, 8));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p624, $0.ref);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i626 := $load.i64($M.0, $p625);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i627 := $trunc.i64.i32($i626);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i628 := $add.i32($i627, 60);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.0, $p629);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p630, $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p632, $i628);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p634 := $load.ref($M.0, $p633);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p634, $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p636, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.0, $p637);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p638, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p640, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(5, 8));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p642, $0.ref);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i644 := $load.i64($M.0, $p643);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i64.i32($i644);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i646 := $add.i32($i645, 72);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p648 := $load.ref($M.0, $p647);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p648, $mul.ref(5, 12)), $mul.ref(0, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p650, $i646);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.0, $p651);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p652, $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p654, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p656 := $load.ref($M.0, $p655);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p656, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p658, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(6, 8));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p660, $0.ref);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i662 := $load.i64($M.0, $p661);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i663 := $trunc.i64.i32($i662);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i664 := $add.i32($i663, 84);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.0, $p665);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p666, $mul.ref(6, 12)), $mul.ref(0, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p668, $i664);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p670, $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p672, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p674, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p676, 0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(7, 8));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p678, $0.ref);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i680 := $load.i64($M.0, $p679);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i681 := $trunc.i64.i32($i680);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i682 := $add.i32($i681, 96);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p684 := $load.ref($M.0, $p683);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p684, $mul.ref(7, 12)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p686, $i682);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.0, $p687);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p688, $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p690, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.0, $p691);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p692, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p694, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(8, 8));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p696, $0.ref);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i698 := $load.i64($M.0, $p697);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i699 := $trunc.i64.i32($i698);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i700 := $add.i32($i699, 108);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.0, $p701);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p702, $mul.ref(8, 12)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, $i700);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p706 := $load.ref($M.0, $p705);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p706, $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p708, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p710, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p712, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(9, 8));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p714, $0.ref);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i716 := $load.i64($M.0, $p715);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i717 := $trunc.i64.i32($i716);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i718 := $add.i32($i717, 120);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p720 := $load.ref($M.0, $p719);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p720, $mul.ref(9, 12)), $mul.ref(0, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p722, $i718);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p724 := $load.ref($M.0, $p723);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p724, $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p726, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p728 := $load.ref($M.0, $p727);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p728, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p730, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(10, 8));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p732, $0.ref);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i734 := $load.i64($M.0, $p733);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i735 := $trunc.i64.i32($i734);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i736 := $add.i32($i735, 132);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p738, $mul.ref(10, 12)), $mul.ref(0, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p740, $i736);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.0, $p741);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p742, $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p744, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.0, $p745);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($p746, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p748, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(11, 8));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p750, $0.ref);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i752 := $load.i64($M.0, $p751);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i753 := $trunc.i64.i32($i752);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i754 := $add.i32($i753, 144);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p756 := $load.ref($M.0, $p755);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p756, $mul.ref(11, 12)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p758, $i754);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p760 := $load.ref($M.0, $p759);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p760, $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p762, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.0, $p763);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p764, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p766, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(12, 8));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p768, $0.ref);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i770 := $load.i64($M.0, $p769);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i771 := $trunc.i64.i32($i770);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i772 := $add.i32($i771, 156);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p774 := $load.ref($M.0, $p773);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p774, $mul.ref(12, 12)), $mul.ref(0, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p776, $i772);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.0, $p777);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p778, $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p780, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p782 := $load.ref($M.0, $p781);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($add.ref($p782, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p784, 0);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(13, 8));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p786, $0.ref);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i788 := $load.i64($M.0, $p787);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i789 := $trunc.i64.i32($i788);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i790 := $add.i32($i789, 168);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p792, $mul.ref(13, 12)), $mul.ref(0, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p794, $i790);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p796 := $load.ref($M.0, $p795);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p796, $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p798, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.0, $p799);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p800, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p802, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(14, 8));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p804, $0.ref);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i806 := $load.i64($M.0, $p805);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i807 := $trunc.i64.i32($i806);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i808 := $add.i32($i807, 180);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p810 := $load.ref($M.0, $p809);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p810, $mul.ref(14, 12)), $mul.ref(0, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p812, $i808);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($p814, $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p816, 0);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p818 := $load.ref($M.0, $p817);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p818, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p820, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(15, 8));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p822, $0.ref);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i824 := $load.i64($M.0, $p823);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i825 := $trunc.i64.i32($i824);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.0, $p826);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p827, $mul.ref(15, 12)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p829, $i825);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.0, $p830);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($p831, $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p833, 0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($p835, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p837, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p22 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(0, 8));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p22);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1540);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p22, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i36 := pci_map_single($p33, $p35, 1540, 2);
    call {:si_unique_call 129} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i48 := pci_dma_mapping_error($p42, $i47);
    call {:si_unique_call 131} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i52 := ldv__builtin_expect($i51, 0);
    call {:si_unique_call 133} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i54, $p55 := 0, $p22;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p74 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i25 := 1;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(1, 8));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p74);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p80, $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 1540);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p74, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i87 := pci_map_single($p84, $p86, 1540, 2);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p90, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i88);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i101 := pci_dma_mapping_error($p94, $i100);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i103 := $zext.i1.i32($i102);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i103);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i105 := ldv__builtin_expect($i104, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i54, $p55 := 1, $p74;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p107 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i25 := 2;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(2, 8));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p107);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p113, $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 1540);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p107, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i120 := pci_map_single($p117, $p119, 1540, 2);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i64.i32($i120);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p123, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $i121);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p129, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i134 := pci_dma_mapping_error($p127, $i133);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i136 := $zext.i1.i32($i135);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i136);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i138 := ldv__builtin_expect($i137, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i54, $p55 := 2, $p107;
    assume {:branchcond $i139} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p140 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i25 := 3;
    assume {:branchcond $i142} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(3, 8));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p144, $p140);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p146, $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 1540);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p140, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i153 := pci_map_single($p150, $p152, 1540, 2);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i64.i32($i153);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p156, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i154);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p162, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i165);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i167 := pci_dma_mapping_error($p160, $i166);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i169 := $zext.i1.i32($i168);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i169);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i171 := ldv__builtin_expect($i170, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i54, $p55 := 3, $p140;
    assume {:branchcond $i172} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p173 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i174, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i25 := 4;
    assume {:branchcond $i175} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(4, 8));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p177, $p173);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p179, $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 1540);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p173, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i186 := pci_map_single($p183, $p185, 1540, 2);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i64.i32($i186);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p189, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, $i187);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p195, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i199 := $zext.i32.i64($i198);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i200 := pci_dma_mapping_error($p193, $i199);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i202 := $zext.i1.i32($i201);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i202);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i204 := ldv__builtin_expect($i203, 0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i54, $p55 := 4, $p173;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p206 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i208 := $eq.i64($i207, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i25 := 5;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(5, 8));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p210, $p206);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p212, $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, 1540);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p206, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i219 := pci_map_single($p216, $p218, 1540, 2);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i64.i32($i219);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p222, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p224, $i220);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p228, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i232 := $zext.i32.i64($i231);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i233 := pci_dma_mapping_error($p226, $i232);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i235 := $zext.i1.i32($i234);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i235);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i237 := ldv__builtin_expect($i236, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i54, $p55 := 5, $p206;
    assume {:branchcond $i238} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p239 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i241 := $eq.i64($i240, 0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i25 := 6;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(6, 8));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p243, $p239);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p245, $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, 1540);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p239, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i252 := pci_map_single($p249, $p251, 1540, 2);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i64.i32($i252);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p255, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p257, $i253);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p261, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i265 := $zext.i32.i64($i264);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i266 := pci_dma_mapping_error($p259, $i265);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i268 := $zext.i1.i32($i267);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i269 := $sext.i32.i64($i268);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i270 := ldv__builtin_expect($i269, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i271 := $ne.i64($i270, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i54, $p55 := 6, $p239;
    assume {:branchcond $i271} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p272 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i274 := $eq.i64($i273, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i25 := 7;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(7, 8));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p276, $p272);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.0, $p277);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p278, $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, 1540);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p272, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i285 := pci_map_single($p282, $p284, 1540, 2);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i64.i32($i285);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p288, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, $i286);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p294, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i298 := $zext.i32.i64($i297);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i299 := pci_dma_mapping_error($p292, $i298);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i301 := $zext.i1.i32($i300);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i302 := $sext.i32.i64($i301);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i303 := ldv__builtin_expect($i302, 0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i54, $p55 := 7, $p272;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p305 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i307 := $eq.i64($i306, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i25 := 8;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(8, 8));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p309, $p305);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p311, $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p313, 1540);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p305, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i318 := pci_map_single($p315, $p317, 1540, 2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i64.i32($i318);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p321, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p323, $i319);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p327, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i331 := $zext.i32.i64($i330);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i332 := pci_dma_mapping_error($p325, $i331);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i334 := $zext.i1.i32($i333);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i335 := $sext.i32.i64($i334);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i336 := ldv__builtin_expect($i335, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i54, $p55 := 8, $p305;
    assume {:branchcond $i337} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p338 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i340 := $eq.i64($i339, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i25 := 9;
    assume {:branchcond $i340} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(9, 8));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p342, $p338);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.0, $p343);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p344, $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p346, 1540);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p338, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i351 := pci_map_single($p348, $p350, 1540, 2);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i64.i32($i351);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.0, $p353);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p354, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p356, $i352);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.0, $p357);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p360, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i364 := $zext.i32.i64($i363);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i365 := pci_dma_mapping_error($p358, $i364);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i366 := $ne.i32($i365, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i367 := $zext.i1.i32($i366);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i368 := $sext.i32.i64($i367);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i369 := ldv__builtin_expect($i368, 0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i370 := $ne.i64($i369, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i54, $p55 := 9, $p338;
    assume {:branchcond $i370} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p371 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p371);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i373 := $eq.i64($i372, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i25 := 10;
    assume {:branchcond $i373} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(10, 8));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p375, $p371);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p377, $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p379, 1540);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p371, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i384 := pci_map_single($p381, $p383, 1540, 2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i385 := $trunc.i64.i32($i384);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p387, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p389, $i385);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p393, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i396 := $load.i32($M.0, $p395);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i397 := $zext.i32.i64($i396);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i398 := pci_dma_mapping_error($p391, $i397);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i400 := $zext.i1.i32($i399);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i401 := $sext.i32.i64($i400);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i402 := ldv__builtin_expect($i401, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i403 := $ne.i64($i402, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i54, $p55 := 10, $p371;
    assume {:branchcond $i403} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p404 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i405 := $p2i.ref.i64($p404);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i406 := $eq.i64($i405, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i25 := 11;
    assume {:branchcond $i406} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(11, 8));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p408, $p404);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p410, $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p412, 1540);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p404, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i417 := pci_map_single($p414, $p416, 1540, 2);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i418 := $trunc.i64.i32($i417);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.0, $p419);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p420, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p422, $i418);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.0, $p423);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p426, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.0, $p428);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i430 := $zext.i32.i64($i429);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i431 := pci_dma_mapping_error($p424, $i430);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i432 := $ne.i32($i431, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i433 := $zext.i1.i32($i432);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i434 := $sext.i32.i64($i433);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i435 := ldv__builtin_expect($i434, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i436 := $ne.i64($i435, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i54, $p55 := 11, $p404;
    assume {:branchcond $i436} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p437 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i438 := $p2i.ref.i64($p437);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i439 := $eq.i64($i438, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i25 := 12;
    assume {:branchcond $i439} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(12, 8));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p441, $p437);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p443, $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p445, 1540);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.0, $p446);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p437, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.0, $p448);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i450 := pci_map_single($p447, $p449, 1540, 2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i451 := $trunc.i64.i32($i450);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.0, $p452);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p453, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p455, $i451);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.0, $p456);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p459, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i463 := $zext.i32.i64($i462);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i464 := pci_dma_mapping_error($p457, $i463);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i465 := $ne.i32($i464, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i466 := $zext.i1.i32($i465);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i466);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i468 := ldv__builtin_expect($i467, 0);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i469 := $ne.i64($i468, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i54, $p55 := 12, $p437;
    assume {:branchcond $i469} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p470 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p470);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i472 := $eq.i64($i471, 0);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i25 := 13;
    assume {:branchcond $i472} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(13, 8));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p474, $p470);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p476, $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p478, 1540);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p470, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p481);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i483 := pci_map_single($p480, $p482, 1540, 2);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i484 := $trunc.i64.i32($i483);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.0, $p485);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p486, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p488, $i484);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.0, $p489);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p492, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.0, $p494);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i496 := $zext.i32.i64($i495);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i497 := pci_dma_mapping_error($p490, $i496);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i498 := $ne.i32($i497, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i499 := $zext.i1.i32($i498);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i500 := $sext.i32.i64($i499);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i501 := ldv__builtin_expect($i500, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i502 := $ne.i64($i501, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i54, $p55 := 13, $p470;
    assume {:branchcond $i502} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p503 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i504 := $p2i.ref.i64($p503);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i505 := $eq.i64($i504, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i25 := 14;
    assume {:branchcond $i505} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(14, 8));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p507, $p503);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p509 := $load.ref($M.0, $p508);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p509, $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p511, 1540);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p513 := $load.ref($M.0, $p512);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p503, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p515 := $load.ref($M.0, $p514);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i516 := pci_map_single($p513, $p515, 1540, 2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i64.i32($i516);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.0, $p518);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p519, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p521, $i517);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p525 := $load.ref($M.0, $p524);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p525, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i528 := $load.i32($M.0, $p527);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i529 := $zext.i32.i64($i528);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i530 := pci_dma_mapping_error($p523, $i529);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i531 := $ne.i32($i530, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i532 := $zext.i1.i32($i531);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i533 := $sext.i32.i64($i532);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i534 := ldv__builtin_expect($i533, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i535 := $ne.i64($i534, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i54, $p55 := 14, $p503;
    assume {:branchcond $i535} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p536 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p536);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i538 := $eq.i64($i537, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i25 := 15;
    assume {:branchcond $i538} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(15, 8));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p540, $p536);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p542, $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p544, 1540);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p546 := $load.ref($M.0, $p545);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p536, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i549 := pci_map_single($p546, $p548, 1540, 2);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i550 := $trunc.i64.i32($i549);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p552, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p554, $i550);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p556 := $load.ref($M.0, $p555);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p558 := $load.ref($M.0, $p557);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p558, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i561 := $load.i32($M.0, $p560);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i562 := $zext.i32.i64($i561);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i563 := pci_dma_mapping_error($p556, $i562);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i564 := $ne.i32($i563, 0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i565 := $zext.i1.i32($i564);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i566 := $sext.i32.i64($i565);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i567 := ldv__builtin_expect($i566, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i568 := $ne.i64($i567, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i54, $p55 := 15, $p536;
    assume {:branchcond $i568} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i26 := 16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i26, $sub.i32(0, 16));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p4, $mul.ref(48, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} iowrite32($i63, $p64);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 8192);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p4, $mul.ref(48, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i70 := ioread32($p69);
    call {:si_unique_call 137} {:cexpr "tmp___3"} boogie_si_record_i32($i70);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_19 := printk.ref.ref.i32(.str.43, $p72, $i70);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} consume_skb($p55);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i54);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i56, 8));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i26 := $i54;
    goto $bb10;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i538 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb10;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i535 == 1;
    goto $bb13;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb8;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb13;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i472 == 1;
    goto $bb8;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb13;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i439 == 1;
    goto $bb8;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i436 == 1;
    goto $bb13;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb8;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb13;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb8;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb13;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb8;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb13;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb8;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb13;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb8;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb13;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb8;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb13;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb8;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb13;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb13;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb8;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb13;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb8;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb8;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb8;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const set_rx_mode: ref;

axiom set_rx_mode == $sub.ref(0, 126884);

procedure set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $CurrAddr;



implementation set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i21: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i36: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p53: ref;
  var $i41: i32;
  var $i26: i32;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i83: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p2 := netdev_priv($p0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 2));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p6, 0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(1, 2));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p7, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(2, 2));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p110, 0);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(3, 2));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p111, 0);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 2));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p112, 0);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(5, 2));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p113, 0);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(6, 2));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p114, 0);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(7, 2));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p115, 0);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 2));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p116, 0);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(9, 2));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p117, 0);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(10, 2));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p118, 0);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(11, 2));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p119, 0);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 2));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p120, 0);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(13, 2));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p121, 0);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(14, 2));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p122, 0);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(15, 2));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p123, 0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 143);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 3);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 8;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 256);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i30 := $M.6;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i29, $i30);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i31 == 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 512);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i48, $i51);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i41 := 1073741824;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb38;

  $bb38:
    call $i84, $i85, $p86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $i83 := set_rx_mode_loop_$bb38($p1, $p5, $i16, $i84, $i85, $p86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $i83);
    goto $bb38_last;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 4);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i85 := $shl.i32($i84, 16);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} iowrite32($i85, $p86);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i83);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i87, 2));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.5, $p88);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p5, $mul.ref(76, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} iowrite32($i90, $p91);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i83, 1);
    call {:si_unique_call 207} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, $i16);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i26, $sub.i32(0, 2147483648));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} iowrite32($i94, $p95);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 8);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    return;

  $bb43:
    assume $i99 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i100 := ioread32($p5);
    call {:si_unique_call 210} {:cexpr "cr_saved"} boogie_si_record_i32($i100);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i100, 10);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} iowrite32($i101, $p5);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i103 := ioread32($p102);
    call {:si_unique_call 213} {:cexpr "tmp___2"} boogie_si_record_i32($i103);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i103, 536870912);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} iowrite32($i104, $p105);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p5, $mul.ref(52, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i107 := ioread32($p106);
    call {:si_unique_call 216} {:cexpr "tmp___3"} boogie_si_record_i32($i107);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i107, 268435456);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p5, $mul.ref(52, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} iowrite32($i108, $p109);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} iowrite32($i100, $p5);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i83 := $i92;
    goto $bb40_dummy;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p53 := $p45;
    goto $bb33;

  $bb33:
    call $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p77, $p78, $p79, $p80, $i81, $i82, $p53 := set_rx_mode_loop_$bb33($p1, $p3, $i51, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p77, $p78, $p79, $p80, $i81, $i82, $p53);
    goto $bb33_last;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i60 := sis900_mcast_bitnr($p55, $i59);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i16($i60);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    call {:si_unique_call 204} {:cexpr "bit_nr"} boogie_si_record_i32($i61);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i32($i61, 4);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i63, 2));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.5, $p64);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i61, 15);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i68 := $shl.i32(1, $i67);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i70 := $sext.i16.i32($i69);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i66, $i70);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i61, 4);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i74, 2));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p75, $i72);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, $i51);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i82 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p53 := $p78;
    goto $bb35_dummy;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb24;

  $bb24:
    call $i37, $p38, $i39, $i40, $i36 := set_rx_mode_loop_$bb24($p1, $i16, $i37, $p38, $i39, $i40, $i36);
    goto $bb24_last;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i37, 2));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p38, $sub.i16(0, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i36, 1);
    call {:si_unique_call 201} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, $i16);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i41 := 1610612736;
    goto $bb29;

  $bb26:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i39;
    goto $bb26_dummy;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb20;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb13;

  $bb13:
    call $i22, $p23, $i24, $i25, $i21 := set_rx_mode_loop_$bb13($p1, $i16, $i22, $p23, $i24, $i25, $i21);
    goto $bb13_last;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref($i22, 2));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p23, $sub.i16(0, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $i16);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i26 := 1879048192;
    goto $bb18;

  $bb15:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb15_dummy;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := 16;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 127916);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 128948);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} netif_tx_start_queue($p1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    return;
}



const sis900_set_mode: ref;

axiom sis900_set_mode == $sub.ref(0, 129980);

procedure sis900_set_mode($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation sis900_set_mode($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i17: i32;
  var $i18: i32;
  var $i15: i32;
  var $i16: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "sis900_set_mode:arg:speed"} boogie_si_record_i32($i1);
    call {:si_unique_call 222} {:cexpr "sis900_set_mode:arg:duplex"} boogie_si_record_i32($i2);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i6 := ioread32($p5);
    call {:si_unique_call 224} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8192);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9, $i10 := 268439552, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 10);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i10, 32);
    call {:si_unique_call 227} {:cexpr "rx_flags"} boogie_si_record_i32($i17);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i9, 48);
    call {:si_unique_call 228} {:cexpr "tx_flags"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    $i15, $i16 := $i18, $i17;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i2, 2);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i22, $i23 := $i15, $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 134217728);
    call {:si_unique_call 231} {:cexpr "rx_flags"} boogie_si_record_i32($i24);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p4, $mul.ref(36, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} iowrite32($i22, $p25);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p4, $mul.ref(52, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} iowrite32($i24, $p26);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i15, $sub.i32(0, 1073741824));
    call {:si_unique_call 229} {:cexpr "tx_flags"} boogie_si_record_i32($i20);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, 268435456);
    call {:si_unique_call 230} {:cexpr "rx_flags"} boogie_si_record_i32($i21);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i20, $i21;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, 48);
    call {:si_unique_call 225} {:cexpr "rx_flags"} boogie_si_record_i32($i13);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i9, 16);
    call {:si_unique_call 226} {:cexpr "tx_flags"} boogie_si_record_i32($i14);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i14, $i13;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i9, $i10 := 273682432, 5242880;
    goto $bb3;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 131012);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 132044);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sis900_check_mode: ref;

axiom sis900_check_mode == $sub.ref(0, 133076);

procedure sis900_check_mode($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_check_mode($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p2 := netdev_priv($p0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i17 := ioread32($p16);
    call {:si_unique_call 244} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 16);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} iowrite32($i18, $p19);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} sis900_set_mode($p3, 1, 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i11 := ioread32($p10);
    call {:si_unique_call 239} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 17));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} iowrite32($i12, $p13);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} sis900_set_capability($p0, $p1);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} sis900_auto_negotiate($p0, $i15);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sis900_set_capability: ref;

axiom sis900_set_capability == $sub.ref(0, 134108);

procedure sis900_set_capability($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sis900_set_capability($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i4 := mdio_read($p0, $i3, 1);
    call {:si_unique_call 248} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i7 := mdio_read($p0, $i6, 1);
    call {:si_unique_call 250} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 16384);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 257 else 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 8192);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 128 else 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i13, $i19);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 4096);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then 64 else 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i20, $i26);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 2048);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i33 := (if $i32 == 1 then 32 else 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i27, $i33);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    call {:si_unique_call 251} {:cexpr "cap"} boogie_si_record_i16($i35);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i35);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} mdio_write($p0, $i37, 4, $i38);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;
}



const sis900_auto_negotiate: ref;

axiom sis900_auto_negotiate == $sub.ref(0, 135140);

procedure sis900_auto_negotiate($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_auto_negotiate($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i6: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "sis900_auto_negotiate:arg:phy_addr"} boogie_si_record_i32($i1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p2 := netdev_priv($p0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i4 := mdio_read($p0, $i1, 1);
    call {:si_unique_call 256} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i6 := mdio_read($p0, $i1, 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i6, 4);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} mdio_write($p0, $i1, 0, 4608);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 4);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} netif_carrier_off($p0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_20 := printk.ref.ref(.str.44, $p13);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const mdio_read: ref;

axiom mdio_read == $sub.ref(0, 136172);

procedure mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mdio_read($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i16;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i16;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i16;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i16;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i16;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i32;
  var $i169: i16;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i16;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i16;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i16;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i16;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i16;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i32;
  var $i220: i16;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $p225: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i16;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i32;
  var $i237: i16;
  var $p238: ref;
  var $p239: ref;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i32;
  var $i254: i16;
  var $p255: ref;
  var $p256: ref;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $i262: i32;
  var $i263: i32;
  var $i264: i32;
  var $i265: i16;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i16;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $p276: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $i282: i16;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i36: i16;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $p295: ref;
  var $p297: ref;
  var $p298: ref;
  var $p300: ref;
  var $p301: ref;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $p307: ref;
  var $p308: ref;
  var $i310: i32;
  var $p311: ref;
  var $p312: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $p318: ref;
  var $p319: ref;
  var $i321: i32;
  var $p322: ref;
  var $p323: ref;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $p329: ref;
  var $p330: ref;
  var $i332: i32;
  var $p333: ref;
  var $p334: ref;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $p340: ref;
  var $p341: ref;
  var $i343: i32;
  var $p344: ref;
  var $p345: ref;
  var $i347: i32;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $p351: ref;
  var $p352: ref;
  var $i354: i32;
  var $p355: ref;
  var $p356: ref;
  var $i358: i32;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $p362: ref;
  var $p363: ref;
  var $i365: i32;
  var $p366: ref;
  var $p367: ref;
  var $i369: i32;
  var $i370: i32;
  var $i371: i1;
  var $i372: i32;
  var $p373: ref;
  var $p374: ref;
  var $i376: i32;
  var $p377: ref;
  var $p378: ref;
  var $i380: i32;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $p384: ref;
  var $p385: ref;
  var $i387: i32;
  var $p388: ref;
  var $p389: ref;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $p395: ref;
  var $p396: ref;
  var $i398: i32;
  var $p399: ref;
  var $p400: ref;
  var $i402: i32;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $p406: ref;
  var $p407: ref;
  var $i409: i32;
  var $p410: ref;
  var $p411: ref;
  var $i413: i32;
  var $i414: i32;
  var $i415: i1;
  var $i416: i32;
  var $p417: ref;
  var $p418: ref;
  var $i420: i32;
  var $p421: ref;
  var $p422: ref;
  var $p424: ref;
  var $p425: ref;
  var $p427: ref;
  var $p428: ref;
  var $p430: ref;
  var $p431: ref;
  var $p433: ref;
  var $p434: ref;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "mdio_read:arg:phy_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 262} {:cexpr "mdio_read:arg:location"} boogie_si_record_i32($i2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i1, 7);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, 24576);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i2, 2);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    call {:si_unique_call 263} {:cexpr "mii_cmd"} boogie_si_record_i32($i6);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p7 := netdev_priv($p0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} mdio_reset($p8);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} mdio_idle($p8);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i6, 15);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then 48 else 32);
    call {:si_unique_call 267} {:cexpr "dataval"} boogie_si_record_i32($i14);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} iowrite32($i14, $p15);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_21 := ioread32($p16);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, 64);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} iowrite32($i18, $p19);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_22 := ioread32($p20);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} iowrite32(48, $p291);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_23 := ioread32($p292);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} iowrite32(112, $p294);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_24 := ioread32($p295);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} iowrite32(48, $p297);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_57 := ioread32($p298);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} iowrite32(112, $p300);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_58 := ioread32($p301);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i303 := $ashr.i32($i6, 12);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i304 := $and.i32($i303, 1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i306 := (if $i305 == 1 then 48 else 32);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} iowrite32($i306, $p307);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_59 := ioread32($p308);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i310 := $or.i32($i306, 64);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} iowrite32($i310, $p311);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_60 := ioread32($p312);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i314 := $ashr.i32($i6, 11);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i317 := (if $i316 == 1 then 48 else 32);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} iowrite32($i317, $p318);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_61 := ioread32($p319);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i321 := $or.i32($i317, 64);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} iowrite32($i321, $p322);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_62 := ioread32($p323);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i325 := $ashr.i32($i6, 10);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, 1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i328 := (if $i327 == 1 then 48 else 32);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} iowrite32($i328, $p329);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_63 := ioread32($p330);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i332 := $or.i32($i328, 64);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} iowrite32($i332, $p333);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_64 := ioread32($p334);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i336 := $ashr.i32($i6, 9);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i337 := $and.i32($i336, 1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i338 := $ne.i32($i337, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i339 := (if $i338 == 1 then 48 else 32);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} iowrite32($i339, $p340);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_65 := ioread32($p341);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i343 := $or.i32($i339, 64);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} iowrite32($i343, $p344);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_66 := ioread32($p345);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i347 := $ashr.i32($i6, 8);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i348 := $and.i32($i347, 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i350 := (if $i349 == 1 then 48 else 32);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} iowrite32($i350, $p351);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_67 := ioread32($p352);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i354 := $or.i32($i350, 64);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} iowrite32($i354, $p355);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_68 := ioread32($p356);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i358 := $ashr.i32($i6, 7);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i359 := $and.i32($i358, 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i360 := $ne.i32($i359, 0);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i361 := (if $i360 == 1 then 48 else 32);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} iowrite32($i361, $p362);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_69 := ioread32($p363);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i365 := $or.i32($i361, 64);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} iowrite32($i365, $p366);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_70 := ioread32($p367);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i369 := $ashr.i32($i6, 6);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i370 := $and.i32($i369, 1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i372 := (if $i371 == 1 then 48 else 32);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} iowrite32($i372, $p373);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_71 := ioread32($p374);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i376 := $or.i32($i372, 64);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} iowrite32($i376, $p377);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_72 := ioread32($p378);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i380 := $ashr.i32($i6, 5);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i381 := $and.i32($i380, 1);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i383 := (if $i382 == 1 then 48 else 32);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} iowrite32($i383, $p384);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_73 := ioread32($p385);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i387 := $or.i32($i383, 64);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} iowrite32($i387, $p388);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_74 := ioread32($p389);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i391 := $ashr.i32($i6, 4);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i392 := $and.i32($i391, 1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i394 := (if $i393 == 1 then 48 else 32);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} iowrite32($i394, $p395);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_75 := ioread32($p396);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i398 := $or.i32($i394, 64);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} iowrite32($i398, $p399);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_76 := ioread32($p400);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i402 := $ashr.i32($i6, 3);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i403 := $and.i32($i402, 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i404 := $ne.i32($i403, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i405 := (if $i404 == 1 then 48 else 32);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} iowrite32($i405, $p406);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_77 := ioread32($p407);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i409 := $or.i32($i405, 64);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} iowrite32($i409, $p410);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} vslice_dummy_var_78 := ioread32($p411);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i413 := $ashr.i32($i6, 2);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i414 := $and.i32($i413, 1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i416 := (if $i415 == 1 then 48 else 32);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} iowrite32($i416, $p417);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} vslice_dummy_var_79 := ioread32($p418);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i420 := $or.i32($i416, 64);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} iowrite32($i420, $p421);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_80 := ioread32($p422);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} iowrite32(32, $p424);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_81 := ioread32($p425);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} iowrite32(96, $p427);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_82 := ioread32($p428);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} iowrite32(32, $p430);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_83 := ioread32($p431);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} iowrite32(96, $p433);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_84 := ioread32($p434);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} iowrite32(0, $p22);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_25 := ioread32($p23);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i26 := ioread32($p25);
    call {:si_unique_call 279} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 280} {:cexpr "retval"} boogie_si_record_i16($i30);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} iowrite32(64, $p31);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_26 := ioread32($p32);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} iowrite32(0, $p37);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_27 := ioread32($p38);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i41 := ioread32($p40);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i30);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i45 := $sext.i16.i32($i44);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i41, 16);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i45, $i48);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} iowrite32(64, $p51);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_28 := ioread32($p52);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} iowrite32(0, $p54);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_29 := ioread32($p55);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i58 := ioread32($p57);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i50);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i58, 16);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i62, $i65);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} iowrite32(64, $p68);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_30 := ioread32($p69);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} iowrite32(0, $p71);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_31 := ioread32($p72);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i75 := ioread32($p74);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i67);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i77 := $shl.i32($i76, 1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i79 := $sext.i16.i32($i78);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i75, 16);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i79, $i82);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} iowrite32(64, $p85);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_32 := ioread32($p86);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} iowrite32(0, $p88);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_33 := ioread32($p89);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i92 := ioread32($p91);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i84);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i94 := $shl.i32($i93, 1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i96 := $sext.i16.i32($i95);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i92, 16);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i96, $i99);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} iowrite32(64, $p102);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_34 := ioread32($p103);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} iowrite32(0, $p105);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_35 := ioread32($p106);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i109 := ioread32($p108);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i101);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32($i110, 1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i113 := $sext.i16.i32($i112);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i109, 16);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i113, $i116);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} iowrite32(64, $p119);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_36 := ioread32($p120);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} iowrite32(0, $p122);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_37 := ioread32($p123);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i126 := ioread32($p125);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i118);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i128 := $shl.i32($i127, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i130 := $sext.i16.i32($i129);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i126, 16);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i32($i132);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i130, $i133);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i16($i134);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} iowrite32(64, $p136);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_38 := ioread32($p137);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} iowrite32(0, $p139);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_39 := ioread32($p140);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i143 := ioread32($p142);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i135);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i145 := $shl.i32($i144, 1);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i147 := $sext.i16.i32($i146);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i143, 16);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i32($i149);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i147, $i150);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} iowrite32(64, $p153);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_40 := ioread32($p154);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} iowrite32(0, $p156);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_41 := ioread32($p157);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i160 := ioread32($p159);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i152);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i162 := $shl.i32($i161, 1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i164 := $sext.i16.i32($i163);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i160, 16);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i167 := $zext.i1.i32($i166);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i164, $i167);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} iowrite32(64, $p170);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_42 := ioread32($p171);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} iowrite32(0, $p173);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_43 := ioread32($p174);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i177 := ioread32($p176);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i169);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i179 := $shl.i32($i178, 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i16($i179);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i181 := $sext.i16.i32($i180);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i177, 16);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i184 := $zext.i1.i32($i183);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i185 := $or.i32($i181, $i184);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i16($i185);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} iowrite32(64, $p187);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} vslice_dummy_var_44 := ioread32($p188);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} iowrite32(0, $p190);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_45 := ioread32($p191);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i194 := ioread32($p193);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i186);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i196 := $shl.i32($i195, 1);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i198 := $sext.i16.i32($i197);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i194, 16);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i201 := $zext.i1.i32($i200);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i198, $i201);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i16($i202);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} iowrite32(64, $p204);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_46 := ioread32($p205);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} iowrite32(0, $p207);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_47 := ioread32($p208);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i211 := ioread32($p210);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i203);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i213 := $shl.i32($i212, 1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i214 := $trunc.i32.i16($i213);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i215 := $sext.i16.i32($i214);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i216 := $and.i32($i211, 16);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i218 := $zext.i1.i32($i217);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($i215, $i218);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i219);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} iowrite32(64, $p221);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_48 := ioread32($p222);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} iowrite32(0, $p224);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_49 := ioread32($p225);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i228 := ioread32($p227);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i220);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i230 := $shl.i32($i229, 1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i16($i230);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i232 := $sext.i16.i32($i231);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i228, 16);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i235 := $zext.i1.i32($i234);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i236 := $or.i32($i232, $i235);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} iowrite32(64, $p238);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_50 := ioread32($p239);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} iowrite32(0, $p241);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_51 := ioread32($p242);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i245 := ioread32($p244);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i237);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i247 := $shl.i32($i246, 1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i249 := $sext.i16.i32($i248);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i245, 16);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i252 := $zext.i1.i32($i251);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i253 := $or.i32($i249, $i252);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i32.i16($i253);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} iowrite32(64, $p255);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_52 := ioread32($p256);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} iowrite32(0, $p258);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_53 := ioread32($p259);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i262 := ioread32($p261);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i254);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i264 := $shl.i32($i263, 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i16($i264);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i266 := $sext.i16.i32($i265);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i262, 16);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i269 := $zext.i1.i32($i268);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i270 := $or.i32($i266, $i269);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i16($i270);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} iowrite32(64, $p272);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_54 := ioread32($p273);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} iowrite32(0, $p275);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_55 := ioread32($p276);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i279 := ioread32($p278);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i271);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i281 := $shl.i32($i280, 1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i282 := $trunc.i32.i16($i281);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i283 := $sext.i16.i32($i282);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i284 := $and.i32($i279, 16);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i284, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i286 := $zext.i1.i32($i285);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i287 := $or.i32($i283, $i286);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i287);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} iowrite32(64, $p288);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_56 := ioread32($p289);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} iowrite32(0, $p34);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i36);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 137204);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 417} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 418} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 421} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 423} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 425} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 426} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 429} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 431} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 138236);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    return;
}



const mdio_write: ref;

axiom mdio_write == $sub.ref(0, 139268);

procedure mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation mdio_write($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $p195: ref;
  var $p196: ref;
  var $i198: i32;
  var $p199: ref;
  var $p200: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i8;
  var $i234: i32;
  var $i235: i8;
  var $p236: ref;
  var $p237: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i8;
  var $i243: i32;
  var $i244: i8;
  var $p245: ref;
  var $p246: ref;
  var $p248: ref;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i8;
  var $i259: i32;
  var $i260: i8;
  var $p261: ref;
  var $p262: ref;
  var $i264: i8;
  var $i265: i32;
  var $i266: i32;
  var $i267: i8;
  var $i268: i32;
  var $i269: i8;
  var $p270: ref;
  var $p271: ref;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i8;
  var $i278: i32;
  var $i279: i8;
  var $p280: ref;
  var $p281: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i32;
  var $i286: i8;
  var $i287: i32;
  var $i288: i8;
  var $p289: ref;
  var $p290: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i8;
  var $i297: i32;
  var $i298: i8;
  var $p299: ref;
  var $p300: ref;
  var $i302: i8;
  var $i303: i32;
  var $i304: i32;
  var $i305: i8;
  var $i306: i32;
  var $i307: i8;
  var $p308: ref;
  var $p309: ref;
  var $i311: i32;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i8;
  var $i316: i32;
  var $i317: i8;
  var $p318: ref;
  var $p319: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i32;
  var $i324: i8;
  var $i325: i32;
  var $i326: i8;
  var $p327: ref;
  var $p328: ref;
  var $i330: i32;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $i334: i8;
  var $i335: i32;
  var $i336: i8;
  var $p337: ref;
  var $p338: ref;
  var $i340: i8;
  var $i341: i32;
  var $i342: i32;
  var $i343: i8;
  var $i344: i32;
  var $i345: i8;
  var $p346: ref;
  var $p347: ref;
  var $i349: i32;
  var $i350: i32;
  var $i351: i1;
  var $i352: i32;
  var $i353: i8;
  var $i354: i32;
  var $i355: i8;
  var $p356: ref;
  var $p357: ref;
  var $i359: i8;
  var $i360: i32;
  var $i361: i32;
  var $i362: i8;
  var $i363: i32;
  var $i364: i8;
  var $p365: ref;
  var $p366: ref;
  var $i368: i32;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i8;
  var $i373: i32;
  var $i374: i8;
  var $p375: ref;
  var $p376: ref;
  var $i378: i8;
  var $i379: i32;
  var $i380: i32;
  var $i381: i8;
  var $i382: i32;
  var $i383: i8;
  var $p384: ref;
  var $p385: ref;
  var $i387: i32;
  var $i388: i32;
  var $i389: i1;
  var $i390: i32;
  var $i391: i8;
  var $i392: i32;
  var $i393: i8;
  var $p394: ref;
  var $p395: ref;
  var $i397: i8;
  var $i398: i32;
  var $i399: i32;
  var $i400: i8;
  var $i401: i32;
  var $i402: i8;
  var $p403: ref;
  var $p404: ref;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i409: i32;
  var $i410: i8;
  var $i411: i32;
  var $i412: i8;
  var $p413: ref;
  var $p414: ref;
  var $i416: i8;
  var $i417: i32;
  var $i418: i32;
  var $i419: i8;
  var $i420: i32;
  var $i421: i8;
  var $p422: ref;
  var $p423: ref;
  var $i425: i32;
  var $i426: i32;
  var $i427: i1;
  var $i428: i32;
  var $i429: i8;
  var $i430: i32;
  var $i431: i8;
  var $p432: ref;
  var $p433: ref;
  var $i435: i8;
  var $i436: i32;
  var $i437: i32;
  var $i438: i8;
  var $i439: i32;
  var $i440: i8;
  var $p441: ref;
  var $p442: ref;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $p448: ref;
  var $p450: ref;
  var $p451: ref;
  var $p453: ref;
  var $p454: ref;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} {:cexpr "mdio_write:arg:phy_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 434} {:cexpr "mdio_write:arg:location"} boogie_si_record_i32($i2);
    call {:si_unique_call 435} {:cexpr "mdio_write:arg:value"} boogie_si_record_i32($i3);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 7);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 20482);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i2, 2);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    call {:si_unique_call 436} {:cexpr "mii_cmd"} boogie_si_record_i32($i7);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p8 := netdev_priv($p0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} mdio_reset($p9);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} mdio_idle($p9);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i7, 15);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i15 := (if $i14 == 1 then 48 else 32);
    call {:si_unique_call 440} {:cexpr "dataval"} boogie_si_record_i32($i15);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} iowrite8($i18, $p19);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} vslice_dummy_var_85 := ioread32($p20);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i15);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 64);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} iowrite8($i27, $p28);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_86 := ioread32($p29);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} iowrite8(48, $p223);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_87 := ioread32($p224);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} iowrite8(112, $p226);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_88 := ioread32($p227);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i229 := $ashr.i32($i7, 13);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i229, 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i232 := (if $i231 == 1 then 48 else 32);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i8($i232);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i8($i234);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} iowrite8($i235, $p236);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_127 := ioread32($p237);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i8($i232);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i240 := $sext.i8.i32($i239);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i240, 64);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i8($i241);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i8($i243);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} iowrite8($i244, $p245);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_128 := ioread32($p246);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} iowrite8(48, $p248);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_129 := ioread32($p249);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} iowrite8(112, $p251);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_130 := ioread32($p252);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i254 := $ashr.i32($i7, 11);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 1);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i257 := (if $i256 == 1 then 48 else 32);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i8($i257);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i258);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} iowrite8($i260, $p261);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_131 := ioread32($p262);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i8($i257);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i265 := $sext.i8.i32($i264);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i266 := $or.i32($i265, 64);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i8($i266);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i32.i8($i268);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} iowrite8($i269, $p270);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_132 := ioread32($p271);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i273 := $ashr.i32($i7, 10);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i274 := $and.i32($i273, 1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i276 := (if $i275 == 1 then 48 else 32);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} iowrite8($i279, $p280);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_133 := ioread32($p281);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i8($i276);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i284 := $sext.i8.i32($i283);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i285 := $or.i32($i284, 64);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i8($i285);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i8($i287);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} iowrite8($i288, $p289);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_134 := ioread32($p290);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i292 := $ashr.i32($i7, 9);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i293 := $and.i32($i292, 1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i295 := (if $i294 == 1 then 48 else 32);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i8($i295);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i296);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i8($i297);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} iowrite8($i298, $p299);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_135 := ioread32($p300);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i8($i295);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i303 := $sext.i8.i32($i302);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i304 := $or.i32($i303, 64);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i305 := $trunc.i32.i8($i304);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i8($i306);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} iowrite8($i307, $p308);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_136 := ioread32($p309);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i311 := $ashr.i32($i7, 8);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i312 := $and.i32($i311, 1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i313 := $ne.i32($i312, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i314 := (if $i313 == 1 then 48 else 32);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i8($i314);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i8($i316);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} iowrite8($i317, $p318);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_137 := ioread32($p319);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i8($i314);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i322 := $sext.i8.i32($i321);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i323 := $or.i32($i322, 64);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i8($i323);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i8($i325);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} iowrite8($i326, $p327);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_138 := ioread32($p328);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i330 := $ashr.i32($i7, 7);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i330, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i332 := $ne.i32($i331, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i333 := (if $i332 == 1 then 48 else 32);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i8($i333);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i8($i335);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} iowrite8($i336, $p337);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_139 := ioread32($p338);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i333);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i341 := $sext.i8.i32($i340);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i342 := $or.i32($i341, 64);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i342);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i344 := $zext.i8.i32($i343);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i32.i8($i344);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} iowrite8($i345, $p346);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_140 := ioread32($p347);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i349 := $ashr.i32($i7, 6);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i350 := $and.i32($i349, 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i352 := (if $i351 == 1 then 48 else 32);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i353 := $trunc.i32.i8($i352);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i8($i354);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} iowrite8($i355, $p356);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_141 := ioread32($p357);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i32.i8($i352);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i360 := $sext.i8.i32($i359);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i361 := $or.i32($i360, 64);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i8($i361);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i363 := $zext.i8.i32($i362);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i364 := $trunc.i32.i8($i363);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} iowrite8($i364, $p365);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_142 := ioread32($p366);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i368 := $ashr.i32($i7, 5);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i369 := $and.i32($i368, 1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i371 := (if $i370 == 1 then 48 else 32);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i372 := $trunc.i32.i8($i371);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i372);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i374 := $trunc.i32.i8($i373);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} iowrite8($i374, $p375);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_143 := ioread32($p376);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i378 := $trunc.i32.i8($i371);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i379 := $sext.i8.i32($i378);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i380 := $or.i32($i379, 64);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i381 := $trunc.i32.i8($i380);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i32.i8($i382);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} iowrite8($i383, $p384);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_144 := ioread32($p385);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i387 := $ashr.i32($i7, 4);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i388 := $and.i32($i387, 1);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i389 := $ne.i32($i388, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i390 := (if $i389 == 1 then 48 else 32);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i32.i8($i390);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i32($i391);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i393 := $trunc.i32.i8($i392);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} iowrite8($i393, $p394);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_145 := ioread32($p395);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i397 := $trunc.i32.i8($i390);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i398 := $sext.i8.i32($i397);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i399 := $or.i32($i398, 64);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i32.i8($i399);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i400);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i402 := $trunc.i32.i8($i401);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} iowrite8($i402, $p403);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_146 := ioread32($p404);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i406 := $ashr.i32($i7, 3);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i407 := $and.i32($i406, 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i408 := $ne.i32($i407, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i409 := (if $i408 == 1 then 48 else 32);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i32.i8($i409);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i412 := $trunc.i32.i8($i411);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} iowrite8($i412, $p413);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_147 := ioread32($p414);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i8($i409);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i417 := $sext.i8.i32($i416);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i418 := $or.i32($i417, 64);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i32.i8($i418);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i421 := $trunc.i32.i8($i420);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} iowrite8($i421, $p422);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_148 := ioread32($p423);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i425 := $ashr.i32($i7, 2);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i426 := $and.i32($i425, 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i427 := $ne.i32($i426, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i428 := (if $i427 == 1 then 48 else 32);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i32.i8($i428);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i32.i8($i430);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} iowrite8($i431, $p432);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_149 := ioread32($p433);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i32.i8($i428);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i436 := $sext.i8.i32($i435);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i437 := $or.i32($i436, 64);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i438 := $trunc.i32.i8($i437);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i32($i438);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i8($i439);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} iowrite8($i440, $p441);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_150 := ioread32($p442);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} iowrite8(48, $p444);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_151 := ioread32($p445);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} iowrite8(112, $p447);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_152 := ioread32($p448);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} iowrite8(32, $p450);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_153 := ioread32($p451);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} iowrite8(96, $p453);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_154 := ioread32($p454);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_89 := ioread32($p31);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i33 := $ashr.i32($i3, 15);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i36 := (if $i35 == 1 then 48 else 32);
    call {:si_unique_call 450} {:cexpr "dataval___0"} boogie_si_record_i32($i36);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} iowrite32($i36, $p37);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_90 := ioread32($p38);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, 64);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} iowrite32($i40, $p41);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_91 := ioread32($p42);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i32($i3, 14);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i62 := (if $i61 == 1 then 48 else 32);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} iowrite32($i62, $p63);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_92 := ioread32($p64);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i62, 64);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} iowrite32($i66, $p67);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_93 := ioread32($p68);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i70 := $ashr.i32($i3, 13);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i73 := (if $i72 == 1 then 48 else 32);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} iowrite32($i73, $p74);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_99 := ioread32($p75);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i73, 64);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} iowrite32($i77, $p78);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_100 := ioread32($p79);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i81 := $ashr.i32($i3, 12);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i84 := (if $i83 == 1 then 48 else 32);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} iowrite32($i84, $p85);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_101 := ioread32($p86);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i84, 64);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} iowrite32($i88, $p89);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_102 := ioread32($p90);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i92 := $ashr.i32($i3, 11);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 1);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i95 := (if $i94 == 1 then 48 else 32);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} iowrite32($i95, $p96);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_103 := ioread32($p97);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i95, 64);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} iowrite32($i99, $p100);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_104 := ioread32($p101);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i103 := $ashr.i32($i3, 10);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 1);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i106 := (if $i105 == 1 then 48 else 32);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} iowrite32($i106, $p107);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_105 := ioread32($p108);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i106, 64);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} iowrite32($i110, $p111);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_106 := ioread32($p112);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i114 := $ashr.i32($i3, 9);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i117 := (if $i116 == 1 then 48 else 32);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} iowrite32($i117, $p118);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_107 := ioread32($p119);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i117, 64);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} iowrite32($i121, $p122);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_108 := ioread32($p123);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i125 := $ashr.i32($i3, 8);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i128 := (if $i127 == 1 then 48 else 32);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} iowrite32($i128, $p129);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_109 := ioread32($p130);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i128, 64);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} iowrite32($i132, $p133);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_110 := ioread32($p134);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i136 := $ashr.i32($i3, 7);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 1);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i139 := (if $i138 == 1 then 48 else 32);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} iowrite32($i139, $p140);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_111 := ioread32($p141);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i139, 64);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} iowrite32($i143, $p144);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_112 := ioread32($p145);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i147 := $ashr.i32($i3, 6);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i150 := (if $i149 == 1 then 48 else 32);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} iowrite32($i150, $p151);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_113 := ioread32($p152);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i150, 64);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} iowrite32($i154, $p155);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_114 := ioread32($p156);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i158 := $ashr.i32($i3, 5);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i161 := (if $i160 == 1 then 48 else 32);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} iowrite32($i161, $p162);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_115 := ioread32($p163);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i161, 64);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} iowrite32($i165, $p166);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_116 := ioread32($p167);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i169 := $ashr.i32($i3, 4);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 1);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i172 := (if $i171 == 1 then 48 else 32);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} iowrite32($i172, $p173);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_117 := ioread32($p174);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i176 := $or.i32($i172, 64);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} iowrite32($i176, $p177);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_118 := ioread32($p178);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i180 := $ashr.i32($i3, 3);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i183 := (if $i182 == 1 then 48 else 32);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} iowrite32($i183, $p184);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_119 := ioread32($p185);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i183, 64);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} iowrite32($i187, $p188);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_120 := ioread32($p189);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i191 := $ashr.i32($i3, 2);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i192 := $and.i32($i191, 1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i194 := (if $i193 == 1 then 48 else 32);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} iowrite32($i194, $p195);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_121 := ioread32($p196);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i198 := $or.i32($i194, 64);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} iowrite32($i198, $p199);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_122 := ioread32($p200);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i202 := $ashr.i32($i3, 1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i205 := (if $i204 == 1 then 48 else 32);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} iowrite32($i205, $p206);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_123 := ioread32($p207);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i209 := $or.i32($i205, 64);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} iowrite32($i209, $p210);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_124 := ioread32($p211);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i213 := $and.i32($i3, 1);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i215 := (if $i214 == 1 then 48 else 32);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} iowrite32($i215, $p216);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_125 := ioread32($p217);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($i215, 64);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} iowrite32($i219, $p220);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_126 := ioread32($p221);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_94 := ioread32($p44);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} iowrite8(0, $p46);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_95 := ioread32($p47);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} iowrite8(64, $p49);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_96 := ioread32($p50);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} iowrite8(0, $p53);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_97 := ioread32($p54);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} iowrite8(64, $p56);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_98 := ioread32($p57);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} iowrite32(0, $p52);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    return;
}



const mdio_reset: ref;

axiom mdio_reset == $sub.ref(0, 140300);

procedure mdio_reset($p0: ref);
  free requires assertsPassed;



implementation mdio_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $p193: ref;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} iowrite32(48, $p3);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_155 := ioread32($p4);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} iowrite32(112, $p6);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_156 := ioread32($p7);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} iowrite32(48, $p9);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_157 := ioread32($p10);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} iowrite32(112, $p12);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_158 := ioread32($p13);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} iowrite32(48, $p15);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_159 := ioread32($p16);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} iowrite32(112, $p18);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_160 := ioread32($p19);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} iowrite32(48, $p21);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_161 := ioread32($p22);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} iowrite32(112, $p24);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_162 := ioread32($p25);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} iowrite32(48, $p27);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_163 := ioread32($p28);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} iowrite32(112, $p30);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_164 := ioread32($p31);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} iowrite32(48, $p33);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_165 := ioread32($p34);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} iowrite32(112, $p36);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_166 := ioread32($p37);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} iowrite32(48, $p39);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_167 := ioread32($p40);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} iowrite32(112, $p42);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_168 := ioread32($p43);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} iowrite32(48, $p45);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_169 := ioread32($p46);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} iowrite32(112, $p48);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_170 := ioread32($p49);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} iowrite32(48, $p51);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_171 := ioread32($p52);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} iowrite32(112, $p54);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_172 := ioread32($p55);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} iowrite32(48, $p57);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_173 := ioread32($p58);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} iowrite32(112, $p60);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_174 := ioread32($p61);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} iowrite32(48, $p63);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_175 := ioread32($p64);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} iowrite32(112, $p66);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_176 := ioread32($p67);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} iowrite32(48, $p69);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_177 := ioread32($p70);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} iowrite32(112, $p72);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_178 := ioread32($p73);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} iowrite32(48, $p75);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_179 := ioread32($p76);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} iowrite32(112, $p78);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_180 := ioread32($p79);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} iowrite32(48, $p81);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_181 := ioread32($p82);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} iowrite32(112, $p84);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_182 := ioread32($p85);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} iowrite32(48, $p87);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_183 := ioread32($p88);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} iowrite32(112, $p90);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_184 := ioread32($p91);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} iowrite32(48, $p93);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_185 := ioread32($p94);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} iowrite32(112, $p96);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_186 := ioread32($p97);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} iowrite32(48, $p99);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_187 := ioread32($p100);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} iowrite32(112, $p102);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_188 := ioread32($p103);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} iowrite32(48, $p105);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_189 := ioread32($p106);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} iowrite32(112, $p108);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_190 := ioread32($p109);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} iowrite32(48, $p111);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_191 := ioread32($p112);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} iowrite32(112, $p114);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_192 := ioread32($p115);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} iowrite32(48, $p117);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_193 := ioread32($p118);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} iowrite32(112, $p120);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_194 := ioread32($p121);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} iowrite32(48, $p123);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_195 := ioread32($p124);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} iowrite32(112, $p126);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_196 := ioread32($p127);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} iowrite32(48, $p129);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_197 := ioread32($p130);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} iowrite32(112, $p132);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_198 := ioread32($p133);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} iowrite32(48, $p135);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_199 := ioread32($p136);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} iowrite32(112, $p138);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_200 := ioread32($p139);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} iowrite32(48, $p141);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_201 := ioread32($p142);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} iowrite32(112, $p144);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_202 := ioread32($p145);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} iowrite32(48, $p147);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_203 := ioread32($p148);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} iowrite32(112, $p150);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_204 := ioread32($p151);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} iowrite32(48, $p153);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_205 := ioread32($p154);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} iowrite32(112, $p156);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_206 := ioread32($p157);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} iowrite32(48, $p159);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_207 := ioread32($p160);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} iowrite32(112, $p162);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_208 := ioread32($p163);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} iowrite32(48, $p165);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_209 := ioread32($p166);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} iowrite32(112, $p168);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_210 := ioread32($p169);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} iowrite32(48, $p171);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_211 := ioread32($p172);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} iowrite32(112, $p174);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_212 := ioread32($p175);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} iowrite32(48, $p177);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_213 := ioread32($p178);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} iowrite32(112, $p180);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_214 := ioread32($p181);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} iowrite32(48, $p183);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_215 := ioread32($p184);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} iowrite32(112, $p186);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_216 := ioread32($p187);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} iowrite32(48, $p189);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_217 := ioread32($p190);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} iowrite32(112, $p192);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_218 := ioread32($p193);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const mdio_idle: ref;

axiom mdio_idle == $sub.ref(0, 141332);

procedure mdio_idle($p0: ref);
  free requires assertsPassed;



implementation mdio_idle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} iowrite32(48, $p3);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_219 := ioread32($p4);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} iowrite32(112, $p6);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    return;
}



const iowrite8: ref;

axiom iowrite8 == $sub.ref(0, 142364);

procedure iowrite8($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation iowrite8($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} {:cexpr "iowrite8:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 143396);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 144428);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} clear_bit(0, $p1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 145460);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 716} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    return;
}



const sis900_mcast_bitnr: ref;

axiom sis900_mcast_bitnr == $sub.ref(0, 146492);

procedure sis900_mcast_bitnr($p0: ref, $i1: i8) returns ($r: i16);
  free requires assertsPassed;



implementation sis900_mcast_bitnr($p0: ref, $i1: i8) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i16;
  var $i11: i32;
  var $i12: i16;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} {:cexpr "sis900_mcast_bitnr:arg:revision"} boogie_si_record_i8($i1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i2 := crc32_le($sub.i32(0, 1), $p0, 6);
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i3 := __bitrev32($i2);
    call {:si_unique_call 721} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 143);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 3);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i3, 25);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i3, 24);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 147524);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 723} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 725} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __bitrev32: ref;

axiom __bitrev32 == $sub.ref(0, 148556);

procedure __bitrev32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitrev32($i0: i32) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "__bitrev32:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i16($i0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i4 := __bitrev16($i3);
    call {:si_unique_call 728} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i0, 16);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i9 := __bitrev16($i8);
    call {:si_unique_call 730} {:cexpr "tmp___0"} boogie_si_record_i16($i9);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i4);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i9);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i11, $i12);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const __bitrev16: ref;

axiom __bitrev16 == $sub.ref(0, 149588);

procedure __bitrev16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __bitrev16($i0: i16) returns ($r: i16)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "__bitrev16:arg:x"} boogie_si_record_i16($i0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i16.i8($i0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i4 := __bitrev8($i3);
    call {:si_unique_call 733} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i10 := __bitrev8($i9);
    call {:si_unique_call 735} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i4);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 8);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i13);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i10);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i15);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $i16);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const __bitrev8: ref;

axiom __bitrev8 == $sub.ref(0, 150620);

procedure __bitrev8($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __bitrev8($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} {:cexpr "__bitrev8:arg:byte"} boogie_si_record_i8($i0);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(byte_rev_table, $mul.ref(0, 256)), $mul.ref($i2, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 151652);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := ldv___netdev_alloc_skb_31($p0, $i1, 32);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 152684);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 740} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const pci_dma_mapping_error: ref;

axiom pci_dma_mapping_error == $sub.ref(0, 153716);

procedure pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} {:cexpr "pci_dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i3 := dma_mapping_error($p2, $i1);
    call {:si_unique_call 745} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 154748);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 747} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 155780);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    return;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 156812);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := get_dma_ops($p0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 751} $i9 := devirtbounce.1($p8, $p0, $i1);
    call {:si_unique_call 752} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 157844);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 158876);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 159908);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 757} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p5 := get_dma_ops($p0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 763} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i14 := __phys_addr($i13);
    call {:si_unique_call 766} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 767} $i21 := devirtbounce.3($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 768} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i23 := __phys_addr($i22);
    call {:si_unique_call 770} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 764} devirtbounce.2(0, .str.6, 19, 12);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 160940);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 161972);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 163004);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 774} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 164036);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 778} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 779} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 780} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 781} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    return;
}



const ldv___netdev_alloc_skb_31: ref;

axiom ldv___netdev_alloc_skb_31 == $sub.ref(0, 165068);

procedure ldv___netdev_alloc_skb_31($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_31($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} {:cexpr "ldv___netdev_alloc_skb_31:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 783} {:cexpr "ldv___netdev_alloc_skb_31:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ldv_check_alloc_flags($i2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p3 := ldv_undef_ptr();
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 166100);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 167132);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 1} true;
    call {:si_unique_call 788} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 789} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 168164);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 790} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 169196);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 170228);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 171260);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} netif_tx_stop_queue($p1);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 172292);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 173324);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 174356);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} set_bit(0, $p1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 175388);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 798} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_42: ref;

axiom ldv_unregister_netdev_42 == $sub.ref(0, 176420);

procedure ldv_unregister_netdev_42($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_unregister_netdev_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} unregister_netdev($p0);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 177452);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} free_($p0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    return;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 178484);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 803} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 179516);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_43: ref;

axiom ldv_free_netdev_43 == $sub.ref(0, 180548);

procedure ldv_free_netdev_43($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_free_netdev_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} free_netdev($p0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 806} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 181580);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 182612);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 183644);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 808} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 184676);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 809} $free($p0);
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 185708);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 186740);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $p2 := dev_name($p1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 187772);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 811} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 188804);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 189836);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 190868);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 817} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 818} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p3 := external_alloc();
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 191900);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 820} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 821} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 192932);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 823} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p3 := external_alloc();
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 193964);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 194996);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 196028);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} dev_set_drvdata($p2, $p1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 197060);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const sis630e_get_mac_addr: ref;

axiom sis630e_get_mac_addr == $sub.ref(0, 198092);

procedure sis630e_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sis630e_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i19: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i12: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p3 := pci_get_device(4153, 8, $0.ref);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_221 := pci_read_config_byte($p7, 72, $p2);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p2);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 64);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_222 := pci_write_config_byte($p7, 72, $i17);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    call $i20, $i21, $i22, $i23, $i24, $p25, $p26, $i27, $p28, $i29, $i30, $i19 := sis630e_get_mac_addr_loop_$bb8($p1, $i20, $i21, $i22, $i23, $i24, $p25, $p26, $i27, $p28, $i29, $i30, $i19);
    goto $bb8_last;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 9);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} outb($i23, 112);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i24 := inb(113);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i19);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i24);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i19, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i29, 5);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.9, $p2);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 191);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_223 := pci_write_config_byte($p7, 72, $i34);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} pci_dev_put($p7);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i29;
    goto $bb10_dummy;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p10 := pci_name($p0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_220 := printk.ref.ref(.str.21, $p10);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p6 := pci_get_device(4153, 24, $p3);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;
}



const sis635_get_mac_addr: ref;

axiom sis635_get_mac_addr == $sub.ref(0, 199124);

procedure sis635_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis635_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i11: i32;
  var $i24: i32;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p2 := netdev_priv($p1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i7 := ioread32($p6);
    call {:si_unique_call 842} {:cexpr "rfcrSave"} boogie_si_record_i32($i7);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 1024);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} iowrite32($i8, $p5);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} iowrite32(0, $p5);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, 2147483647);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} iowrite32($i9, $p10);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb1;

  $bb1:
    call $i12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i11 := sis635_get_mac_addr_loop_$bb1($p1, $p5, $i12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $i11);
    goto $bb1_last;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 16);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} iowrite32($i12, $p13);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p5, $mul.ref(76, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i15 := ioread16($p14);
    call {:si_unique_call 848} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i11);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 2));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i16);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i11, 1);
    call {:si_unique_call 849} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 2);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i7, $sub.i32(0, 2147483648));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p5, $mul.ref(72, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} iowrite32($i24, $p25);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb3:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3937;
}



const sis96x_get_mac_addr: ref;

axiom sis96x_get_mac_addr == $sub.ref(0, 200156);

procedure sis96x_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis96x_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i17: i32;
  var $i18: i1;
  var $i7: i32;
  var $i16: i32;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p2 := netdev_priv($p1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} iowrite32(1024, $p6);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb1;

  $bb1:
    call $p8, $i9, $i10, $i11, $i17, $i18, $i7 := sis96x_get_mac_addr_loop_$bb1($p5, $p8, $i9, $i10, $i11, $i17, $i18, $i7);
    goto $bb1_last;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i9 := ioread32($p8);
    call {:si_unique_call 854} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 256);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __const_udelay(4295);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i7, 1);
    call {:si_unique_call 859} {:cexpr "wait"} boogie_si_record_i32($i17);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 1999);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} iowrite32(512, $p19);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb11_dummy;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i15 := read_eeprom($p5, 8);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i15);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i20 := read_eeprom($p5, 9);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p14, $mul.ref(1, 2));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i20);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i22 := read_eeprom($p5, 10);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p14, $mul.ref(2, 2));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;
}



const sis900_get_mac_addr: ref;

axiom sis900_get_mac_addr == $sub.ref(0, 201188);

procedure sis900_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_get_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i14: i32;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p2 := netdev_priv($p1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i6 := read_eeprom($p5, 0);
    call {:si_unique_call 863} {:cexpr "signature"} boogie_si_record_i16($i6);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 65535);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i6);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i15 := read_eeprom($p5, 8);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i15);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i19 := read_eeprom($p5, 9);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(1, 2));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i19);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i24 := read_eeprom($p5, 10);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(2, 2));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i24);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p11 := pci_name($p0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i6);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_224 := printk.ref.ref.i32(.str.22, $p11, $i12);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 202220);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(604, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} eth_random_addr($p3);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 203252);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 871} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 873} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const sis900_mii_probe: ref;

axiom sis900_mii_probe == $sub.ref(0, 204284);

procedure sis900_mii_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation sis900_mii_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i10: i32;
  var $i11: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p30: ref;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $i65: i64;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $i77: i64;
  var $p79: ref;
  var $p80: ref;
  var $i82: i32;
  var $i83: i64;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $p90: ref;
  var $i21: i32;
  var $i91: i32;
  var $i92: i1;
  var $i9: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i16;
  var $i116: i16;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i16;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i16;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i135: i16;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i36: i32;
  var $i170: i32;
  var $i12: i16;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i16;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i16;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i16;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i16;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i16;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i16;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i16;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i16;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i16;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i16;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i16;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i16;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i16;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i16;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i16;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i16;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i16;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i16;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i16;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i16;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i16;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i16;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p1 := netdev_priv($p0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p5 := pci_name($p4);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1250);
    call {:si_unique_call 876} {:cexpr "timeout"} boogie_si_record_i64($i7);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb1;

  $bb1:
    call $i10, $i11, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $p22, $p23, $i24, $i25, $i37, $i38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p62, $i63, $p64, $i65, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $p79, $p80, $i82, $i83, $p85, $i86, $i87, $i88, $p90, $i21, $i91, $i92, $i9, $i170, $i12, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $p184, $i185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $p193, $i194, $i195, $i196, $i197, $p198, $i199, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $p207, $i208, $i209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $p220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $p229, $i230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $i251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, $i260, $p261, $i262, $i263, $i264, $p265, $i266, $i267, $i268, $i269, $p270, $i271, $i272, $i273, $p274, $i275, $i276, $i277, $i278, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227 := sis900_mii_probe_loop_$bb1($p0, $p2, $p5, $i10, $i11, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $p22, $p23, $i24, $i25, $i37, $i38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $p62, $i63, $p64, $i65, $p67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $p79, $p80, $i82, $i83, $p85, $i86, $i87, $i88, $p90, $i21, $i91, $i92, $i9, $i170, $i12, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $p184, $i185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $p193, $i194, $i195, $i196, $i197, $p198, $i199, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $p207, $i208, $i209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $p220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $p229, $i230, $i231, $i232, $i233, $p234, $i235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $i251, $p252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, $i260, $p261, $i262, $i263, $i264, $p265, $i266, $i267, $i268, $i269, $p270, $i271, $i272, $i273, $p274, $i275, $i276, $i277, $i278, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227);
    goto $bb1_last;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i10 := mdio_read($p0, $i9, 1);
    call {:si_unique_call 878} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i170 := mdio_read($p0, $i9, 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i170);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i12);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 65535);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i12);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p22 := kmalloc(24, 208);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i37 := mdio_read($p0, $i9, 2);
    call {:si_unique_call 885} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i40 := mdio_read($p0, $i9, 3);
    call {:si_unique_call 887} {:cexpr "tmp___4"} boogie_si_record_i32($i40);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i41);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i9);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i12);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p46);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p22);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p22);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 29);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 22);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i174 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i181 := $load.i16($M.0, $p180);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i182 := $zext.i16.i32($i181);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 323);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.0, $p189);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i190);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 34);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.0, $p198);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32($i199);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 46);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i208 := $load.i16($M.0, $p207);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i208);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $p216);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i226 := $load.i16($M.0, $p225);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i226);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 21);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.0, $p234);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 323);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i244 := $load.i16($M.0, $p243);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i245 := $zext.i16.i32($i244);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 8192);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i253 := $load.i16($M.0, $p252);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i253);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 8192);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i262 := $load.i16($M.0, $p261);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i262);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i271 := $load.i16($M.0, $p270);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i271);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 257);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i82 := 13;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref($i83, 16)), $mul.ref(10, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.12, $p85);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i21 := $i9;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i21, 1);
    call {:si_unique_call 881} {:cexpr "phy_addr"} boogie_si_record_i32($i91);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i91, 31);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $0.ref);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_229 := sis900_default_phy($p0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.0, $p102);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 29);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i116 := 0;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.0, $p119);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 21);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i116);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 4);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 129);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 4);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i169 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} netif_carrier_off($p0);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb79:
    assume $i169 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} netif_carrier_on($p0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume $i154 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} mdio_write($p0, $i156, 4, 1505);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} mdio_write($p0, $i158, 16, 34);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} mdio_write($p0, $i160, 17, 65280);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} mdio_write($p0, $i162, 19, 65472);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb65:
    assume $i134 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i135 := 4;
    goto $bb67;

  $bb67:
    call $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i149, $i150, $i135 := sis900_mii_probe_loop_$bb67($p0, $p2, $i7, $p136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i149, $i150, $i135);
    goto $bb67_last;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} yield_();
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i138 := mdio_read($p0, $i137, 1);
    call {:si_unique_call 897} {:cexpr "tmp___5"} boogie_si_record_i32($i138);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i140 := $sext.i16.i32($i139);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i141 := $xor.i32($i140, $sub.i32(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i142 := $sext.i16.i32($i135);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i141, $i142);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i143);
    call {:si_unique_call 898} {:cexpr "poll_bit"} boogie_si_record_i16($i144);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, jiffies);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i146 := $sub.i64($i145, $i7);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i147 := $sge.i64($i146, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i144);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $i135 := $i144;
    goto $bb72_dummy;

  $bb69:
    assume $i147 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_230 := printk.ref.ref(.str.27, $p5);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 62);
    goto $bb27;

  $bb59:
    assume $i122 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i126 := $load.i16($M.0, $p125);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 65520);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 62528);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb61;

  $bb62:
    assume $i129 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} mdio_write($p0, $i131, 24, 53760);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i105 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 65520);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 32768);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb55;

  $bb56:
    assume $i112 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i115 := sis900_reset_phy($p0, $i114);
    call {:si_unique_call 893} {:cexpr "status"} boogie_si_record_i16($i115);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i116 := $i115;
    goto $bb58;

  $bb50:
    assume $i96 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_228 := printk.ref.ref(.str.26, $p5);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb27;

  $bb47:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i91;
    goto $bb47_dummy;

  $bb44:
    assume $i88 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_227 := printk.ref.ref.i32(.str.25, $p5, $i9);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb159:
    assume $i273 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i275 := $load.i16($M.0, $p274);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i275);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i276, 65520);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 36640);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i59 := 12;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb161;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref($i60, 16)), $mul.ref(12, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.10, $p62);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i63);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i59);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref($i65, 16)), $mul.ref(12, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.10, $p67);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 3);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i59);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref($i77, 16)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.11, $p79);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_226 := printk.ref.ref.ref.i32(.str.24, $p5, $p80, $i9);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i82 := $i59;
    goto $bb40;

  $bb37:
    assume $i70 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i12);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 24576);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i74 := (if $i73 == 1 then 2 else 1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i75);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb152:
    assume $i264 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i266 := $load.i16($M.0, $p265);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i267 := $zext.i16.i32($i266);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i268 := $and.i32($i267, 65520);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 33280);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i59 := 11;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb154;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb35;

  $bb145:
    assume $i255 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i257 := $load.i16($M.0, $p256);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i257);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 65520);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 23600);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i59 := 10;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb147;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb35;

  $bb138:
    assume $i246 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i248 := $load.i16($M.0, $p247);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i249 := $zext.i16.i32($i248);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 65520);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 23584);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i59 := 9;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb140;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb35;

  $bb131:
    assume $i237 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i239 := $load.i16($M.0, $p238);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i239);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i241 := $and.i32($i240, 65520);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 48240);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i59 := 8;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb133;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb35;

  $bb124:
    assume $i228 == 1;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i230 := $load.i16($M.0, $p229);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i231 := $zext.i16.i32($i230);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i231, 65520);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 62528);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i59 := 7;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb126;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb35;

  $bb117:
    assume $i219 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i221 := $load.i16($M.0, $p220);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i221);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 65520);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 27536);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i59 := 6;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb119;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb35;

  $bb110:
    assume $i210 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.0, $p211);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 65520);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 27504);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i59 := 5;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb112;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb35;

  $bb103:
    assume $i201 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i203 := $load.i16($M.0, $p202);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 65520);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 52320);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i59 := 4;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb105;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb35;

  $bb96:
    assume $i192 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 65520);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 21792);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i59 := 3;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb98;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb35;

  $bb89:
    assume $i183 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i185 := $load.i16($M.0, $p184);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i185);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 65520);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 48240);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i59 := 2;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb91;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb35;

  $bb82:
    assume $i174 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.0, $p175);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 65520);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 63536);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i59 := 1;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb84;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb35;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.0, $p54);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 65520);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 32768);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i59 := 0;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb35;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb27;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p30 := $p27;
    goto $bb22;

  $bb22:
    call $p31, $p32, $p33, $i34, $i35, $p30 := sis900_mii_probe_loop_$bb22($p31, $p32, $p33, $i34, $i35, $p30);
    goto $bb22_last;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p30);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} kfree($p33);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p32);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p30 := $p32;
    goto $bb24_dummy;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 2);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i21 := $i9;
    goto $bb15;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_225 := printk.ref.ref.i32(.str.23, $p5, $i9);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb8;

  $bb72_dummy:
    assume false;
    return;

  $bb67_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4266;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  $bb47_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;
}



const pci_get_device: ref;

axiom pci_get_device == $sub.ref(0, 205316);

procedure pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_device($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "pci_get_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 907} {:cexpr "pci_get_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p3 := external_alloc();
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_dev_put: ref;

axiom pci_dev_put == $sub.ref(0, 206348);

procedure pci_dev_put($p0: ref);
  free requires assertsPassed;



implementation pci_dev_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    return;
}



const ldv_register_netdev_37: ref;

axiom ldv_register_netdev_37 == $sub.ref(0, 207380);

procedure ldv_register_netdev_37($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.13, $M.0, $CurrAddr;



implementation ldv_register_netdev_37($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i1 := register_netdev($p0);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_net_device_ops_5();
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_netdev_38: ref;

axiom ldv_free_netdev_38 == $sub.ref(0, 208412);

procedure ldv_free_netdev_38($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_free_netdev_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} free_netdev($p0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 209444);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 915} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_5: ref;

axiom ldv_net_device_ops_5 == $sub.ref(0, 210476);

procedure ldv_net_device_ops_5();
  free requires assertsPassed;
  modifies $M.13, $M.0, $CurrAddr;



implementation ldv_net_device_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 211508);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p1 := calloc(1, $i0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} __VERIFIER_assume($i4);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 212540);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 921} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 922} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 213572);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 924} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ldv_check_alloc_flags($i1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := ldv_undef_ptr();
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const sis900_default_phy: ref;

axiom sis900_default_phy == $sub.ref(0, 214604);

procedure sis900_default_phy($p0: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_default_phy($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p46: ref;
  var $p47: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $i63: i1;
  var $i65: i64;
  var $i66: i1;
  var $i67: i64;
  var $i68: i1;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p69: ref;
  var $p64: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p90: ref;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i16;
  var $i98: i32;
  var $i99: i32;
  var $i100: i16;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p1 := netdev_priv($p0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p7, $p8, $p9 := $0.ref, $0.ref, $0.ref;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p8);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p8);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p8);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $p74 := $p8;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p69 := $p74;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p64 := $p69;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p64);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i77, $i78);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i91);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i96 := mdio_read($p0, $i95, 0);
    call {:si_unique_call 940} {:cexpr "tmp___4"} boogie_si_record_i32($i96);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    call {:si_unique_call 941} {:cexpr "status"} boogie_si_record_i16($i97);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 64511);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    call {:si_unique_call 942} {:cexpr "status"} boogie_si_record_i16($i100);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i100);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} mdio_write($p0, $i102, 0, $i103);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i106 := mdio_read($p0, $i105, 1);
    call {:si_unique_call 945} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i109 := mdio_read($p0, $i108, 1);
    call {:si_unique_call 947} {:cexpr "tmp___6"} boogie_si_record_i32($i109);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    call {:si_unique_call 948} {:cexpr "status"} boogie_si_record_i16($i110);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $r := $i110;
    return;

  $bb38:
    assume $i79 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p64);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p64, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p86 := pci_name($p85);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_231 := printk.ref.ref.i32(.str.40, $p86, $i88);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i71 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p74 := $p73;
    goto $bb37;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p9);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb31;

  $bb32:
    assume $i68 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p69 := $p9;
    goto $bb34;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p7);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb25;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p64 := $p7;
    goto $bb28;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p10, $p11, $p12, $p13 := $0.ref, $0.ref, $p4, $0.ref;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $p48, $i49, $i50, $i51, $p52, $p46, $p47, $p30, $p31, $p32, $p33, $p53, $p54, $i55, $i56, $p10, $p11, $p12, $p13, $p57, $p58, $p59 := sis900_default_phy_loop_$bb4($p0, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $p48, $i49, $i50, $i51, $p52, $p46, $p47, $p30, $p31, $p32, $p33, $p53, $p54, $i55, $i56, $p10, $p11, $p12, $p13, $p57, $p58, $p59);
    goto $bb4_last;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i16 := mdio_read($p0, $i15, 1);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i19 := mdio_read($p0, $i18, 1);
    call {:si_unique_call 931} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    call {:si_unique_call 932} {:cexpr "status"} boogie_si_record_i16($i20);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i36 := mdio_read($p0, $i35, 0);
    call {:si_unique_call 934} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    call {:si_unique_call 935} {:cexpr "status"} boogie_si_record_i16($i37);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i37);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 5120);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} mdio_write($p0, $i39, 0, $i41);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $p52 := $p10;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46, $p47 := $p13, $p52;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p30, $p31, $p32, $p33 := $p12, $p46, $p11, $p47;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p30, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p57, $p58, $p59 := $p31, $p32, $p33;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p7, $p8, $p9 := $p57, $p58, $p59;
    goto $bb3;

  $bb20:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p10, $p11, $p12, $p13 := $p33, $p32, $p54, $p31;
    goto $bb20_dummy;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p52 := $p12;
    goto $bb19;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p46, $p47 := $p12, $p10;
    goto $bb16;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p11);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb8;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb8;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p30, $p31, $p32, $p33 := $p12, $p13, $p12, $p10;
    goto $bb13;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4506;
}



const sis900_reset_phy: ref;

axiom sis900_reset_phy == $sub.ref(0, 215636);

procedure sis900_reset_phy($p0: ref, $i1: i32) returns ($r: i16);
  free requires assertsPassed;



implementation sis900_reset_phy($p0: ref, $i1: i32) returns ($r: i16)
{
  var $i2: i32;
  var $i4: i32;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} {:cexpr "sis900_reset_phy:arg:phy_addr"} boogie_si_record_i32($i1);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i2 := mdio_read($p0, $i1, 1);
    call {:si_unique_call 951} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i4 := mdio_read($p0, $i1, 1);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i4);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} mdio_write($p0, $i1, 0, 32768);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const yield_: ref;

axiom yield_ == $sub.ref(0, 216668);

procedure yield_();
  free requires assertsPassed;



implementation yield_()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 217700);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    return;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 218732);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 954} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 219764);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 220796);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} get_random_bytes($p0, 6);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 221828);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    return;
}



const read_eeprom: ref;

axiom read_eeprom == $sub.ref(0, 222860);

procedure read_eeprom($p0: ref, $i1: i32) returns ($r: i16);
  free requires assertsPassed;



implementation read_eeprom($p0: ref, $i1: i32) returns ($r: i16)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i16;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i16;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i32;
  var $i166: i16;
  var $p167: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var $i185: i16;
  var $p186: ref;
  var $p188: ref;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i32;
  var $i204: i16;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $i216: i32;
  var $i217: i16;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i16;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i16;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $p245: ref;
  var $p246: ref;
  var $p248: ref;
  var $p249: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i16;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i32;
  var $i261: i16;
  var $p262: ref;
  var $p264: ref;
  var $p265: ref;
  var $p267: ref;
  var $p268: ref;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $i273: i32;
  var $i274: i16;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $i278: i32;
  var $i279: i32;
  var $i280: i16;
  var $p281: ref;
  var $p283: ref;
  var $p284: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $i290: i32;
  var $i291: i32;
  var $i292: i32;
  var $i293: i16;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i32;
  var $i299: i16;
  var $p300: ref;
  var $p302: ref;
  var $p303: ref;
  var $p305: ref;
  var $p306: ref;
  var $p308: ref;
  var $i309: i32;
  var $i310: i32;
  var $i311: i32;
  var $i312: i16;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i32;
  var $i35: i16;
  var $p318: ref;
  var $p320: ref;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $p329: ref;
  var $p330: ref;
  var $i332: i32;
  var $p333: ref;
  var $p334: ref;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $p339: ref;
  var $p340: ref;
  var $i342: i32;
  var $p343: ref;
  var $p344: ref;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $p349: ref;
  var $p350: ref;
  var $i352: i32;
  var $p353: ref;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $p359: ref;
  var $p360: ref;
  var $i362: i32;
  var $p363: ref;
  var $p364: ref;
  var $i366: i32;
  var $i367: i1;
  var $i368: i32;
  var $p369: ref;
  var $p370: ref;
  var $i372: i32;
  var $p373: ref;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $p379: ref;
  var $p380: ref;
  var $i382: i32;
  var $p383: ref;
  var $p384: ref;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $p389: ref;
  var $p390: ref;
  var $i392: i32;
  var $p393: ref;
  var $p394: ref;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} {:cexpr "read_eeprom:arg:location"} boogie_si_record_i32($i1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 384);
    call {:si_unique_call 958} {:cexpr "read_cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} iowrite32(0, $p3);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_232 := ioread32($p4);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} iowrite32(8, $p6);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_233 := ioread32($p7);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} iowrite32(9, $p9);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_234 := ioread32($p10);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} iowrite32(13, $p12);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_235 := ioread32($p13);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} iowrite32(9, $p320);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_236 := ioread32($p321);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} iowrite32(13, $p323);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_237 := ioread32($p324);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i326 := $and.i32(64, $i2);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i328 := (if $i327 == 1 then 9 else 8);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} iowrite32($i328, $p329);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_288 := ioread32($p330);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i332 := $or.i32($i328, 4);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} iowrite32($i332, $p333);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_289 := ioread32($p334);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i336 := $and.i32(32, $i2);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i338 := (if $i337 == 1 then 9 else 8);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} iowrite32($i338, $p339);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} vslice_dummy_var_290 := ioread32($p340);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i342 := $or.i32($i338, 4);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} iowrite32($i342, $p343);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_291 := ioread32($p344);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i346 := $and.i32(16, $i2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i347 := $ne.i32($i346, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i348 := (if $i347 == 1 then 9 else 8);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} iowrite32($i348, $p349);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_292 := ioread32($p350);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i352 := $or.i32($i348, 4);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} iowrite32($i352, $p353);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} vslice_dummy_var_293 := ioread32($p354);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i356 := $and.i32(8, $i2);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i358 := (if $i357 == 1 then 9 else 8);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} iowrite32($i358, $p359);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_294 := ioread32($p360);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i362 := $or.i32($i358, 4);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} iowrite32($i362, $p363);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} vslice_dummy_var_295 := ioread32($p364);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i366 := $and.i32(4, $i2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i367 := $ne.i32($i366, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i368 := (if $i367 == 1 then 9 else 8);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} iowrite32($i368, $p369);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_296 := ioread32($p370);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i372 := $or.i32($i368, 4);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} iowrite32($i372, $p373);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_297 := ioread32($p374);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i376 := $and.i32(2, $i2);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i378 := (if $i377 == 1 then 9 else 8);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} iowrite32($i378, $p379);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_298 := ioread32($p380);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i382 := $or.i32($i378, 4);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} iowrite32($i382, $p383);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_299 := ioread32($p384);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i386 := $and.i32(1, $i2);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i386, 0);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i388 := (if $i387 == 1 then 9 else 8);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} iowrite32($i388, $p389);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_300 := ioread32($p390);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i392 := $or.i32($i388, 4);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} iowrite32($i392, $p393);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_301 := ioread32($p394);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} iowrite32(8, $p15);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_238 := ioread32($p16);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} iowrite32(8, $p18);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vslice_dummy_var_239 := ioread32($p19);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} iowrite32(12, $p21);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_240 := ioread32($p22);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i25 := ioread32($p24);
    call {:si_unique_call 978} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    call {:si_unique_call 979} {:cexpr "retval"} boogie_si_record_i16($i29);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_241 := ioread32($p30);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} iowrite32(8, $p36);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_242 := ioread32($p37);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} iowrite32(12, $p39);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_243 := ioread32($p40);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i43 := ioread32($p42);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i29);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i45 := $shl.i32($i44, 1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i46);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i43, 2);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i47, $i50);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_244 := ioread32($p53);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} iowrite32(8, $p55);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_246 := ioread32($p56);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} iowrite32(12, $p58);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_247 := ioread32($p59);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i62 := ioread32($p61);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i52);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i63, 1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i62, 2);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i66, $i69);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_248 := ioread32($p72);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} iowrite32(8, $p74);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_249 := ioread32($p75);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} iowrite32(12, $p77);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_250 := ioread32($p78);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i81 := ioread32($p80);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i71);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i85 := $sext.i16.i32($i84);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i81, 2);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i85, $i88);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_251 := ioread32($p91);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} iowrite32(8, $p93);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_252 := ioread32($p94);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} iowrite32(12, $p96);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_253 := ioread32($p97);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i100 := ioread32($p99);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i90);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32($i101, 1);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i104 := $sext.i16.i32($i103);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i100, 2);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i32($i106);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i104, $i107);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_254 := ioread32($p110);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} iowrite32(8, $p112);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_255 := ioread32($p113);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} iowrite32(12, $p115);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_256 := ioread32($p116);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i119 := ioread32($p118);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i109);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i121 := $shl.i32($i120, 1);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i123 := $sext.i16.i32($i122);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i119, 2);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i123, $i126);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_257 := ioread32($p129);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} iowrite32(8, $p131);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_258 := ioread32($p132);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} iowrite32(12, $p134);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_259 := ioread32($p135);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i138 := ioread32($p137);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i128);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i140 := $shl.i32($i139, 1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i16($i140);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i142 := $sext.i16.i32($i141);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i138, 2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i145 := $zext.i1.i32($i144);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i142, $i145);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_260 := ioread32($p148);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} iowrite32(8, $p150);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_261 := ioread32($p151);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} iowrite32(12, $p153);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_262 := ioread32($p154);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i157 := ioread32($p156);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i147);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i159 := $shl.i32($i158, 1);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i161 := $sext.i16.i32($i160);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i157, 2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i164 := $zext.i1.i32($i163);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i161, $i164);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} vslice_dummy_var_263 := ioread32($p167);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} iowrite32(8, $p169);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_264 := ioread32($p170);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} iowrite32(12, $p172);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_265 := ioread32($p173);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i176 := ioread32($p175);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i166);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i178 := $shl.i32($i177, 1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i16($i178);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i180 := $sext.i16.i32($i179);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i176, 2);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i183 := $zext.i1.i32($i182);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i184 := $or.i32($i180, $i183);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i184);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} vslice_dummy_var_266 := ioread32($p186);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} iowrite32(8, $p188);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_267 := ioread32($p189);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} iowrite32(12, $p191);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_268 := ioread32($p192);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i195 := ioread32($p194);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i185);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i197 := $shl.i32($i196, 1);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i197);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i199 := $sext.i16.i32($i198);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i195, 2);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i202 := $zext.i1.i32($i201);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i203 := $or.i32($i199, $i202);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i16($i203);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_269 := ioread32($p205);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} iowrite32(8, $p207);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_270 := ioread32($p208);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} iowrite32(12, $p210);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_271 := ioread32($p211);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i214 := ioread32($p213);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i204);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i216 := $shl.i32($i215, 1);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i16($i216);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i218 := $sext.i16.i32($i217);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i214, 2);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i221 := $zext.i1.i32($i220);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i218, $i221);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i16($i222);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_272 := ioread32($p224);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} iowrite32(8, $p226);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} vslice_dummy_var_273 := ioread32($p227);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} iowrite32(12, $p229);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_274 := ioread32($p230);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i233 := ioread32($p232);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i32($i223);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i235 := $shl.i32($i234, 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i16($i235);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i237 := $sext.i16.i32($i236);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i233, 2);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i240 := $zext.i1.i32($i239);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i237, $i240);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_275 := ioread32($p243);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} iowrite32(8, $p245);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} vslice_dummy_var_276 := ioread32($p246);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} iowrite32(12, $p248);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} vslice_dummy_var_277 := ioread32($p249);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i252 := ioread32($p251);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i242);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i254 := $shl.i32($i253, 1);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i16($i254);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i256 := $sext.i16.i32($i255);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i257 := $and.i32($i252, 2);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i259 := $zext.i1.i32($i258);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i260 := $or.i32($i256, $i259);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i261 := $trunc.i32.i16($i260);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_278 := ioread32($p262);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} iowrite32(8, $p264);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_279 := ioread32($p265);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} iowrite32(12, $p267);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_280 := ioread32($p268);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i271 := ioread32($p270);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i261);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i273 := $shl.i32($i272, 1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i274 := $trunc.i32.i16($i273);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i275 := $sext.i16.i32($i274);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i276 := $and.i32($i271, 2);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i278 := $zext.i1.i32($i277);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i279 := $or.i32($i275, $i278);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i32.i16($i279);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_281 := ioread32($p281);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} iowrite32(8, $p283);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_282 := ioread32($p284);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} iowrite32(12, $p286);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_283 := ioread32($p287);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i290 := ioread32($p289);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i280);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i292 := $shl.i32($i291, 1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i16($i292);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i294 := $sext.i16.i32($i293);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i290, 2);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i297 := $zext.i1.i32($i296);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i298 := $or.i32($i294, $i297);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i32.i16($i298);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_284 := ioread32($p300);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} iowrite32(8, $p302);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} vslice_dummy_var_285 := ioread32($p303);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} iowrite32(12, $p305);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vslice_dummy_var_286 := ioread32($p306);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i309 := ioread32($p308);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i310 := $zext.i16.i32($i299);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i311 := $shl.i32($i310, 1);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i32.i16($i311);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i313 := $sext.i16.i32($i312);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i314 := $and.i32($i309, 2);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i316 := $zext.i1.i32($i315);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i313, $i316);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i317);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} vslice_dummy_var_287 := ioread32($p318);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} iowrite32(0, $p32);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_245 := ioread32($p33);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 223892);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    return;
}



const ioread16: ref;

axiom ioread16 == $sub.ref(0, 224924);

procedure ioread16($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread16($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 225956);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 1106} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_byte: ref;

axiom pci_write_config_byte == $sub.ref(0, 226988);

procedure pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "pci_write_config_byte:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 1108} {:cexpr "pci_write_config_byte:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i9 := pci_bus_write_config_byte($p4, $i6, $i1, $i8);
    call {:si_unique_call 1110} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 228020);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 1112} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 1113} devirtbounce.4(0, $i0, $i1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 229052);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 1115} $i1 := devirtbounce.5(0, $i0);
    call {:si_unique_call 1116} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_bus_write_config_byte: ref;

axiom pci_bus_write_config_byte == $sub.ref(0, 230084);

procedure pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} {:cexpr "pci_bus_write_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1118} {:cexpr "pci_bus_write_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1119} {:cexpr "pci_bus_write_config_byte:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 231116);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1123} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1124} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 232148);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1127} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p5 := external_alloc();
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 233180);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 234212);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1129} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1130} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 235244);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p9 := kobject_name($p8);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 236276);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sis900_open: ref;

axiom sis900_open == $sub.ref(0, 237308);

procedure sis900_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.23, $M.24, $M.16, $M.27, $M.15, $M.18, $M.28, $M.17, $M.20, $M.29, $M.19, $M.22, $M.30, $M.21, $CurrAddr, assertsPassed;



implementation sis900_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i64;
  var $i28: i64;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i18: i32;
  var vslice_dummy_var_302: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p1 := netdev_priv($p0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} sis900_reset($p0);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} sis630_set_eq($p0, $i8);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i16 := ldv_request_irq_39($i12, sis900_interrupt, 128, $p14, $p15);
    call {:si_unique_call 1137} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} sis900_init_rxfilter($p0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} sis900_init_tx_ring($p0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} sis900_init_rx_ring($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} set_rx_mode($p0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} netif_start_queue($p0);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} sis900_set_mode($p2, 10, 1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p4, $mul.ref(20, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} iowrite32(67365, $p19);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i20 := ioread32($p4);
    call {:si_unique_call 1146} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 4);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} iowrite32($i21, $p4);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p4, $mul.ref(24, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} iowrite32(1, $p22);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} sis900_check_mode($p0, $p24);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_302 := reg_timer_2($p25);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, jiffies);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, 250);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i28);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1)), $mul.ref(32, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i31);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1)), $mul.ref(24, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, sis900_timer);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} add_timer($p36);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb3;
}



const sis900_close: ref;

axiom sis900_close == $sub.ref(0, 238340);

procedure sis900_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.15, $M.17, $M.19, $M.21;



implementation sis900_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i64;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i64;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i64;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $p218: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i64;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $p234: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i64;
  var $p246: ref;
  var $i247: i32;
  var $i248: i64;
  var $p250: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p259: ref;
  var $i260: i32;
  var $i261: i64;
  var $p262: ref;
  var $i263: i32;
  var $i264: i64;
  var $p266: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i64;
  var $p278: ref;
  var $i279: i32;
  var $i280: i64;
  var $p282: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $i292: i32;
  var $i293: i64;
  var $p295: ref;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $p304: ref;
  var $i305: i32;
  var $i306: i64;
  var $p308: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $p315: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i64;
  var $p321: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $i326: i1;
  var $p327: ref;
  var $p328: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i64;
  var $p334: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $p343: ref;
  var $i344: i32;
  var $i345: i64;
  var $p347: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $i352: i1;
  var $p353: ref;
  var $p354: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i64;
  var $p360: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $i365: i1;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i64;
  var $p373: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i64;
  var $i378: i1;
  var $p379: ref;
  var $p380: ref;
  var $p382: ref;
  var $i383: i32;
  var $i384: i64;
  var $p386: ref;
  var $p388: ref;
  var $p389: ref;
  var $i390: i64;
  var $i391: i1;
  var $p392: ref;
  var $p393: ref;
  var $p395: ref;
  var $i396: i32;
  var $i397: i64;
  var $p399: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i64;
  var $i404: i1;
  var $p405: ref;
  var $p406: ref;
  var $p408: ref;
  var $i409: i32;
  var $i410: i64;
  var $p412: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i64;
  var $i417: i1;
  var $p418: ref;
  var $p419: ref;
  var $p421: ref;
  var $i422: i32;
  var $i423: i64;
  var $p425: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $i430: i1;
  var $p431: ref;
  var $p432: ref;
  var $p434: ref;
  var $i435: i32;
  var $i436: i64;
  var $p438: ref;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $i448: i32;
  var $i449: i64;
  var $p451: ref;
  var $p453: ref;
  var $p454: ref;
  var $i455: i64;
  var $i456: i1;
  var $p457: ref;
  var $p458: ref;
  var $p460: ref;
  var $i461: i32;
  var $i462: i64;
  var $p464: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i64;
  var $i469: i1;
  var $p470: ref;
  var $p471: ref;
  var $p473: ref;
  var $i474: i32;
  var $i475: i64;
  var $p477: ref;
  var vslice_dummy_var_303: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p1 := netdev_priv($p0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} netif_stop_queue($p0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(20, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} iowrite32(0, $p7);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} iowrite32(0, $p8);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i9 := ioread32($p6);
    call {:si_unique_call 1157} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 10);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} iowrite32($i10, $p6);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(160, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} vslice_dummy_var_303 := ldv_del_timer_40($p11);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_free_irq_41($i14, $p15);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(0, 8));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(1, 8));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.0, $p284);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p285);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(2, 8));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i299, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(3, 8));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.0, $p310);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(4, 8));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i325 := $p2i.ref.i64($p324);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i326 := $ne.i64($i325, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(5, 8));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p337);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(6, 8));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i351 := $p2i.ref.i64($p350);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i352 := $ne.i64($i351, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(7, 8));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i364 := $p2i.ref.i64($p363);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i365 := $ne.i64($i364, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(8, 8));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i377 := $p2i.ref.i64($p376);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i378 := $ne.i64($i377, 0);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(9, 8));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p389);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i391 := $ne.i64($i390, 0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i391} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(10, 8));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p402);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i404 := $ne.i64($i403, 0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(11, 8));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p415 := $load.ref($M.0, $p414);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i416 := $p2i.ref.i64($p415);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i417 := $ne.i64($i416, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(12, 8));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.0, $p427);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i430 := $ne.i64($i429, 0);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(13, 8));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.0, $p440);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i442 := $p2i.ref.i64($p441);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i443 := $ne.i64($i442, 0);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(14, 8));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.0, $p453);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i455 := $p2i.ref.i64($p454);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i456 := $ne.i64($i455, 0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(15, 8));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i468 := $p2i.ref.i64($p467);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i469 := $ne.i64($i468, 0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(0, 8));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(1, 8));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(2, 8));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(3, 8));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(4, 8));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(5, 8));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(6, 8));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(7, 8));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(8, 8));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(9, 8));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(10, 8));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i190, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(11, 8));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(12, 8));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p221);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i223 := $ne.i64($i222, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(13, 8));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i238, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(14, 8));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p253);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(15, 8));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p269);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i271 := $ne.i64($i270, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb71:
    assume $i271 == 1;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p273, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.0, $p275);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i277 := $zext.i32.i64($i276);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p269, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.0, $p278);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i280 := $zext.i32.i64($i279);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} pci_unmap_single($p4, $i277, $i280, 1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} consume_skb($p269);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(15, 8));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p282, $0.ref);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb67:
    assume $i255 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p257, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i261 := $zext.i32.i64($i260);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p253, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i264 := $zext.i32.i64($i263);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} pci_unmap_single($p4, $i261, $i264, 1);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} consume_skb($p253);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(14, 8));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p266, $0.ref);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i239 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p241, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i245 := $zext.i32.i64($i244);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p237, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $p246);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i248 := $zext.i32.i64($i247);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} pci_unmap_single($p4, $i245, $i248, 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} consume_skb($p237);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(13, 8));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p250, $0.ref);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i223 == 1;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p225, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i229 := $zext.i32.i64($i228);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p221, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i232 := $zext.i32.i64($i231);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} pci_unmap_single($p4, $i229, $i232, 1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} consume_skb($p221);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(12, 8));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p234, $0.ref);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume $i207 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p209, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i213 := $zext.i32.i64($i212);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p205, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i216 := $zext.i32.i64($i215);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} pci_unmap_single($p4, $i213, $i216, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} consume_skb($p205);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(11, 8));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p218, $0.ref);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i191 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p193, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i197 := $zext.i32.i64($i196);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p189, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i199);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} pci_unmap_single($p4, $i197, $i200, 1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} consume_skb($p189);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(10, 8));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, $0.ref);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i175 == 1;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p177, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i181 := $zext.i32.i64($i180);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p173, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i184 := $zext.i32.i64($i183);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} pci_unmap_single($p4, $i181, $i184, 1);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} consume_skb($p173);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(9, 8));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, $0.ref);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i159 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p161, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i165 := $zext.i32.i64($i164);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p157, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i168 := $zext.i32.i64($i167);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} pci_unmap_single($p4, $i165, $i168, 1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} consume_skb($p157);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(8, 8));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, $0.ref);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i143 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p145, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p141, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i152 := $zext.i32.i64($i151);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} pci_unmap_single($p4, $i149, $i152, 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} consume_skb($p141);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(7, 8));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p154, $0.ref);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i127 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p129, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p125, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} pci_unmap_single($p4, $i133, $i136, 1);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} consume_skb($p125);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(6, 8));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $0.ref);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i111 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p113, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i117 := $zext.i32.i64($i116);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p109, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i120 := $zext.i32.i64($i119);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} pci_unmap_single($p4, $i117, $i120, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} consume_skb($p109);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(5, 8));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p122, $0.ref);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p97, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i101 := $zext.i32.i64($i100);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p93, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i103);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} pci_unmap_single($p4, $i101, $i104, 1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} consume_skb($p93);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(4, 8));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $0.ref);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p81, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p77, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} pci_unmap_single($p4, $i85, $i88, 1);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} consume_skb($p77);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(3, 8));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p61, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} pci_unmap_single($p4, $i69, $i72, 1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} consume_skb($p61);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(2, 8));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $0.ref);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p49, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p45, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} pci_unmap_single($p4, $i53, $i56, 1);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} consume_skb($p45);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(1, 8));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p30, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} pci_unmap_single($p4, $i37, $i40, 1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} consume_skb($p30);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(0, 8));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb130:
    assume $i469 == 1;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.0, $p470);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p471, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i474 := $load.i32($M.0, $p473);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i475 := $zext.i32.i64($i474);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} pci_unmap_single($p4, $i475, 1540, 2);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} consume_skb($p467);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(15, 8));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p477, $0.ref);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb126:
    assume $i456 == 1;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p458, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.0, $p460);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i462 := $zext.i32.i64($i461);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} pci_unmap_single($p4, $i462, 1540, 2);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} consume_skb($p454);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(14, 8));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p464, $0.ref);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb122:
    assume $i443 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.0, $p444);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p445, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p447);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i449 := $zext.i32.i64($i448);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} pci_unmap_single($p4, $i449, 1540, 2);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} consume_skb($p441);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(13, 8));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p451, $0.ref);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb118:
    assume $i430 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p432, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i435 := $load.i32($M.0, $p434);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i436 := $zext.i32.i64($i435);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} pci_unmap_single($p4, $i436, 1540, 2);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} consume_skb($p428);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(12, 8));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p438, $0.ref);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb114:
    assume $i417 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p419, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.0, $p421);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i423 := $zext.i32.i64($i422);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} pci_unmap_single($p4, $i423, 1540, 2);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} consume_skb($p415);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(11, 8));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p425, $0.ref);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb110:
    assume $i404 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p406, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.0, $p408);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i410 := $zext.i32.i64($i409);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} pci_unmap_single($p4, $i410, 1540, 2);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} consume_skb($p402);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(10, 8));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p412, $0.ref);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb106:
    assume $i391 == 1;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p393, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i396 := $load.i32($M.0, $p395);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i397 := $zext.i32.i64($i396);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} pci_unmap_single($p4, $i397, 1540, 2);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} consume_skb($p389);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(9, 8));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p399, $0.ref);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb102:
    assume $i378 == 1;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.0, $p379);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p380, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.0, $p382);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i384 := $zext.i32.i64($i383);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} pci_unmap_single($p4, $i384, 1540, 2);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} consume_skb($p376);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(8, 8));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p386, $0.ref);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb98:
    assume $i365 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p367, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i371 := $zext.i32.i64($i370);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} pci_unmap_single($p4, $i371, 1540, 2);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} consume_skb($p363);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(7, 8));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p373, $0.ref);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb94:
    assume $i352 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.0, $p353);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p354, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i358 := $zext.i32.i64($i357);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} pci_unmap_single($p4, $i358, 1540, 2);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} consume_skb($p350);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(6, 8));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p360, $0.ref);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume $i339 == 1;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.0, $p340);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p341, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p343);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i345 := $zext.i32.i64($i344);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} pci_unmap_single($p4, $i345, 1540, 2);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} consume_skb($p337);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(5, 8));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p347, $0.ref);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb86:
    assume $i326 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p328, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i332 := $zext.i32.i64($i331);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} pci_unmap_single($p4, $i332, 1540, 2);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} consume_skb($p324);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(4, 8));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p334, $0.ref);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb82:
    assume $i313 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p315, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.0, $p317);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i319 := $zext.i32.i64($i318);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} pci_unmap_single($p4, $i319, 1540, 2);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} consume_skb($p311);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(3, 8));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p321, $0.ref);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume $i300 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p302, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i306 := $zext.i32.i64($i305);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} pci_unmap_single($p4, $i306, 1540, 2);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} consume_skb($p298);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(2, 8));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p308, $0.ref);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume $i287 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p289, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p291);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i293 := $zext.i32.i64($i292);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} pci_unmap_single($p4, $i293, 1540, 2);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} consume_skb($p285);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(1, 8));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p295, $0.ref);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} pci_unmap_single($p4, $i25, 1540, 2);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} consume_skb($p18);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(0, 8));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sis900_start_xmit: ref;

axiom sis900_start_xmit == $sub.ref(0, 239372);

procedure sis900_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7;



implementation sis900_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i72: i32;
  var $i73: i32;
  var $i77: i32;
  var $i78: i32;
  var $i70: i32;
  var $i71: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var vslice_dummy_var_304: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p2 := netdev_priv($p1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} ldv_spin_lock();
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    call {:si_unique_call 1227} {:cexpr "entry"} boogie_si_record_i32($i8);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref($i9, 8));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i19 := pci_map_single($p13, $p15, $i18, 1);
    call {:si_unique_call 1229} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i8);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 12)), $mul.ref(8, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i20);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i8);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 12)), $mul.ref(8, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i35 := pci_dma_mapping_error($p27, $i34);
    call {:si_unique_call 1231} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1233} {:cexpr "tmp___2"} boogie_si_record_i64($i39);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, $sub.i32(0, 2147483648));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i8);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 12)), $mul.ref(4, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i53);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i59 := ioread32($p5);
    call {:si_unique_call 1237} {:cexpr "tmp___3"} boogie_si_record_i32($i59);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 1);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} iowrite32($i60, $p5);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 1239} {:cexpr "index_cur_tx"} boogie_si_record_i32($i66);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    call {:si_unique_call 1240} {:cexpr "index_dirty_tx"} boogie_si_record_i32($i68);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i66, $i68);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i68, 0;
    assume {:branchcond $i69} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i66, $i70);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i79 == 1);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i81 := $ule.i32($i71, 15);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, 1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} netif_stop_queue($p1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} spin_unlock_irqrestore($p83, $u0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 256);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i87 == 1;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_304 := printk.ref.ref.ref.i32.i32(.str.51, $p89, $p91, $i93, $i8);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i81 == 1;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} netif_start_queue($p1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i79 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 1);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} netif_stop_queue($p1);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i69 == 1;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i72, $i73 := 0, $i68;
    goto $bb8;

  $bb8:
    call $i74, $i75, $i76, $i72, $i73, $i77, $i78 := sis900_start_xmit_loop_$bb8($i66, $i74, $i75, $i76, $i72, $i73, $i77, $i78);
    goto $bb8_last;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i72, 1);
    call {:si_unique_call 1241} {:cexpr "count_dirty_tx"} boogie_si_record_i32($i74);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i73, 1);
    call {:si_unique_call 1242} {:cexpr "index_dirty_tx"} boogie_si_record_i32($i75);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i66, $i75);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i75, $i74;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i70, $i71 := $i77, $i78;
    goto $bb7;

  $bb10:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i72, $i73 := $i74, $i75;
    goto $bb10_dummy;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} dev_kfree_skb_any($p0);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i8);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref($i41, 8));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, 1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} spin_unlock_irqrestore($p50, $u0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5958;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 240404);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1248} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 241436);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1250} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1251} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mii_ioctl: ref;

axiom mii_ioctl == $sub.ref(0, 242468);

procedure mii_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation mii_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} {:cexpr "mii_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p3 := netdev_priv($p0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p5 := if_mii($p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 35144);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 35145);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 35145);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 95);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 31);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 31);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} mdio_write($p0, $i31, $i35, $i38);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 31);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 31);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i24 := mdio_read($p0, $i19, $i23);
    call {:si_unique_call 1256} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 35143);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sis900_set_config: ref;

axiom sis900_set_config == $sub.ref(0, 243500);

procedure sis900_set_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_set_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p2 := netdev_priv($p0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 255);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(558, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i12, $i15);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 22);
    goto $bb28;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 95);
    goto $bb28;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(558, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} netif_carrier_off($p0);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i55 := mdio_read($p0, $i54, 0);
    call {:si_unique_call 1261} {:cexpr "tmp___2"} boogie_si_record_i32($i55);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    call {:si_unique_call 1262} {:cexpr "status"} boogie_si_record_i16($i56);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i56);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 8192);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} mdio_write($p0, $i58, 0, $i60);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i19, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i24 == 1);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(558, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} netif_carrier_off($p0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i44 := mdio_read($p0, $i43, 0);
    call {:si_unique_call 1266} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    call {:si_unique_call 1267} {:cexpr "status"} boogie_si_record_i16($i45);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i45);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, $sub.i32(0, 12289));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} mdio_write($p0, $i47, 0, $i49);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb21:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(558, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} netif_carrier_off($p0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i33 := mdio_read($p0, $i32, 0);
    call {:si_unique_call 1271} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    call {:si_unique_call 1272} {:cexpr "status"} boogie_si_record_i16($i34);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i34);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 4608);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} mdio_write($p0, $i36, 0, $i38);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto $bb27;
}



const eth_change_mtu: ref;

axiom eth_change_mtu == $sub.ref(0, 244532);

procedure eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1274} {:cexpr "eth_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1275} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1276} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sis900_tx_timeout: ref;

axiom sis900_tx_timeout == $sub.ref(0, 245564);

procedure sis900_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7;



implementation sis900_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i64;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i64;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i64;
  var $p197: ref;
  var $i198: i32;
  var $i199: i64;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p209: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i64;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i64;
  var $p229: ref;
  var $i230: i32;
  var $i231: i64;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p241: ref;
  var $p243: ref;
  var $i244: i64;
  var $i245: i64;
  var $p247: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p258: ref;
  var $i259: i32;
  var $i260: i64;
  var $p261: ref;
  var $i262: i32;
  var $i263: i64;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p273: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $p279: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i1;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p290: ref;
  var $i291: i32;
  var $i292: i64;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $i308: i64;
  var $i309: i64;
  var $p311: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p322: ref;
  var $i323: i32;
  var $i324: i64;
  var $p325: ref;
  var $i326: i32;
  var $i327: i64;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p337: ref;
  var $p339: ref;
  var $i340: i64;
  var $i341: i64;
  var $p343: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i64;
  var $i348: i1;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p354: ref;
  var $i355: i32;
  var $i356: i64;
  var $p357: ref;
  var $i358: i32;
  var $i359: i64;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $p371: ref;
  var $i372: i64;
  var $i373: i64;
  var $p375: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i64;
  var $i380: i1;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p386: ref;
  var $i387: i32;
  var $i388: i64;
  var $p389: ref;
  var $i390: i32;
  var $i391: i64;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p401: ref;
  var $p403: ref;
  var $i404: i64;
  var $i405: i64;
  var $p407: ref;
  var $p409: ref;
  var $p410: ref;
  var $i411: i64;
  var $i412: i1;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p418: ref;
  var $i419: i32;
  var $i420: i64;
  var $p421: ref;
  var $i422: i32;
  var $i423: i64;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $i436: i64;
  var $i437: i64;
  var $p439: ref;
  var $p441: ref;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p450: ref;
  var $i451: i32;
  var $i452: i64;
  var $p453: ref;
  var $i454: i32;
  var $i455: i64;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $p465: ref;
  var $p467: ref;
  var $i468: i64;
  var $i469: i64;
  var $p471: ref;
  var $p473: ref;
  var $p474: ref;
  var $i475: i64;
  var $i476: i1;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p482: ref;
  var $i483: i32;
  var $i484: i64;
  var $p485: ref;
  var $i486: i32;
  var $i487: i64;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $i500: i64;
  var $i501: i64;
  var $p503: ref;
  var $p505: ref;
  var $p506: ref;
  var $i507: i64;
  var $i508: i1;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p514: ref;
  var $i515: i32;
  var $i516: i64;
  var $p517: ref;
  var $i518: i32;
  var $i519: i64;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p529: ref;
  var $p531: ref;
  var $i532: i64;
  var $i533: i64;
  var $p535: ref;
  var vslice_dummy_var_305: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p1 := netdev_priv($p0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 128);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(20, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} iowrite32(0, $p15);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ldv_spin_lock();
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(0, 8));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(1, 8));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(2, 8));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(3, 8));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(4, 8));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(5, 8));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(6, 8));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(7, 8));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(8, 8));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p282);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i284 := $ne.i64($i283, 0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(9, 8));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.0, $p313);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i316 := $ne.i64($i315, 0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(10, 8));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p346);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i348 := $ne.i64($i347, 0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(11, 8));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p378 := $load.ref($M.0, $p377);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i379 := $p2i.ref.i64($p378);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i380 := $ne.i64($i379, 0);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(12, 8));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i412 := $ne.i64($i411, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(13, 8));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.0, $p441);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i444 := $ne.i64($i443, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(14, 8));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p474 := $load.ref($M.0, $p473);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i475 := $p2i.ref.i64($p474);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i476 := $ne.i64($i475, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(15, 8));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i507 := $p2i.ref.i64($p506);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i508 := $ne.i64($i507, 0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} netif_wake_queue($p0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} spin_unlock_irqrestore($p48, $u0);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, jiffies);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1136, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i49);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p4, $mul.ref(32, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} iowrite32($i53, $p54);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p4, $mul.ref(20, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} iowrite32(67365, $p55);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    return;

  $bb67:
    assume $i508 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.0, $p511);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p512, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i515 := $load.i32($M.0, $p514);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i516 := $zext.i32.i64($i515);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p506, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i518 := $load.i32($M.0, $p517);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i519 := $zext.i32.i64($i518);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} pci_unmap_single($p510, $i516, $i519, 1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} dev_kfree_skb_irq($p506);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(15, 8));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p521, $0.ref);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p523, $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p525, 0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p527, $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p529, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i532 := $load.i64($M.0, $p531);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i533 := $add.i64($i532, 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p535, $i533);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i476 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.0, $p479);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p480, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i483 := $load.i32($M.0, $p482);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i484 := $zext.i32.i64($i483);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p474, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i486 := $load.i32($M.0, $p485);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i487 := $zext.i32.i64($i486);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} pci_unmap_single($p478, $i484, $i487, 1);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} dev_kfree_skb_irq($p474);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(14, 8));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p489, $0.ref);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p491, $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p493, 0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p495 := $load.ref($M.0, $p494);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p495, $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p497, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i500 := $load.i64($M.0, $p499);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i501 := $add.i64($i500, 1);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p503, $i501);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i444 == 1;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p448 := $load.ref($M.0, $p447);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p448, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.0, $p450);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i452 := $zext.i32.i64($i451);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p442, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.0, $p453);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i455 := $zext.i32.i64($i454);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} pci_unmap_single($p446, $i452, $i455, 1);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} dev_kfree_skb_irq($p442);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(13, 8));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p457, $0.ref);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.0, $p458);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p459, $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p461, 0);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.0, $p462);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p463, $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p465, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i468 := $load.i64($M.0, $p467);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i469 := $add.i64($i468, 1);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p471, $i469);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume $i412 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p416, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i420 := $zext.i32.i64($i419);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p410, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.0, $p421);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i423 := $zext.i32.i64($i422);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} pci_unmap_single($p414, $i420, $i423, 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} dev_kfree_skb_irq($p410);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(12, 8));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p425, $0.ref);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p427, $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p429, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.0, $p430);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p431, $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p433, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i436 := $load.i64($M.0, $p435);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i437 := $add.i64($i436, 1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p439, $i437);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i380 == 1;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.0, $p381);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.0, $p383);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p384, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i387 := $load.i32($M.0, $p386);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i388 := $zext.i32.i64($i387);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p378, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i390 := $load.i32($M.0, $p389);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i391 := $zext.i32.i64($i390);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} pci_unmap_single($p382, $i388, $i391, 1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} dev_kfree_skb_irq($p378);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(11, 8));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p393, $0.ref);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p395, $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p397, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p399 := $load.ref($M.0, $p398);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p399, $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p401, 0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i404 := $load.i64($M.0, $p403);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i405 := $add.i64($i404, 1);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p407, $i405);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i348 == 1;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p352, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.0, $p354);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i356 := $zext.i32.i64($i355);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p346, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i358 := $load.i32($M.0, $p357);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i359 := $zext.i32.i64($i358);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} pci_unmap_single($p350, $i356, $i359, 1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} dev_kfree_skb_irq($p346);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(10, 8));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p361, $0.ref);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p363, $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p365, 0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p367, $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p369, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i372 := $load.i64($M.0, $p371);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i373 := $add.i64($i372, 1);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p375, $i373);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i316 == 1;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p318 := $load.ref($M.0, $p317);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p320, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $p322);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i324 := $zext.i32.i64($i323);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p314, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.0, $p325);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i327 := $zext.i32.i64($i326);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} pci_unmap_single($p318, $i324, $i327, 1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} dev_kfree_skb_irq($p314);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(9, 8));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p329, $0.ref);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p331 := $load.ref($M.0, $p330);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p331, $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p333, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p335, $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p337, 0);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i340 := $load.i64($M.0, $p339);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i341 := $add.i64($i340, 1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p343, $i341);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i284 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.0, $p285);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p288, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i292 := $zext.i32.i64($i291);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p282, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i294);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} pci_unmap_single($p286, $i292, $i295, 1);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} dev_kfree_skb_irq($p282);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(8, 8));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p297, $0.ref);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p299, $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p301, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.0, $p302);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p303, $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p305, 0);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i308 := $load.i64($M.0, $p307);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i309 := $add.i64($i308, 1);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p311, $i309);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i252 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p256, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.0, $p258);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i260 := $zext.i32.i64($i259);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p250, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i263 := $zext.i32.i64($i262);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} pci_unmap_single($p254, $i260, $i263, 1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} dev_kfree_skb_irq($p250);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(7, 8));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, $0.ref);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p267, $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p269, 0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p271, $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p273, 0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i277 := $add.i64($i276, 1);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p279, $i277);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i220 == 1;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p224, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i228 := $zext.i32.i64($i227);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p218, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i231 := $zext.i32.i64($i230);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} pci_unmap_single($p222, $i228, $i231, 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} dev_kfree_skb_irq($p218);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(6, 8));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p233, $0.ref);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p235, $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p239, $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i244 := $load.i64($M.0, $p243);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i245 := $add.i64($i244, 1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p247, $i245);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i188 == 1;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p192, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i196 := $zext.i32.i64($i195);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p186, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i199 := $zext.i32.i64($i198);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} pci_unmap_single($p190, $i196, $i199, 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} dev_kfree_skb_irq($p186);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(5, 8));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p201, $0.ref);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p203, $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, 0);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p207, $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, 0);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i212 := $load.i64($M.0, $p211);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i213 := $add.i64($i212, 1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i213);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i156 == 1;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p160, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i164 := $zext.i32.i64($i163);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p154, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i166);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} pci_unmap_single($p158, $i164, $i167, 1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} dev_kfree_skb_irq($p154);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(4, 8));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p169, $0.ref);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p171, $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, 0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p175, $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p177, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.0, $p179);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i181 := $add.i64($i180, 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p183, $i181);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i124 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p128, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i132 := $zext.i32.i64($i131);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p122, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i135 := $zext.i32.i64($i134);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} pci_unmap_single($p126, $i132, $i135, 1);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} dev_kfree_skb_irq($p122);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(3, 8));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p137, $0.ref);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p139, $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p143, $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, 0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i149 := $add.i64($i148, 1);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p151, $i149);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i92 == 1;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p90, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} pci_unmap_single($p94, $i100, $i103, 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} dev_kfree_skb_irq($p90);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(2, 8));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $0.ref);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p107, $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p111, $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.0, $p115);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i117 := $add.i64($i116, 1);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p119, $i117);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p64, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i67);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p58, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} pci_unmap_single($p62, $i68, $i71, 1);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} dev_kfree_skb_irq($p58);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(1, 8));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p75, $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 0);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p79, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i85);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p20, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} pci_unmap_single($p24, $i29, $i32, 1);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} dev_kfree_skb_irq($p20);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(0, 8));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 1);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i44);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p4, $mul.ref(16, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i10 := ioread32($p9);
    call {:si_unique_call 1279} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i11 := ioread32($p4);
    call {:si_unique_call 1281} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_305 := printk.ref.ref.i32.i32(.str.52, $p13, $i11, $i10);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sis900_poll: ref;

axiom sis900_poll == $sub.ref(0, 246596);

procedure sis900_poll($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, assertsPassed;



implementation sis900_poll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var vslice_dummy_var_306: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p1 := netdev_priv($p0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1322} {:cexpr "irq"} boogie_si_record_i32($i6);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} disable_irq($i6);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_306 := sis900_interrupt($i6, $p7);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} enable_irq($i6);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const disable_irq: ref;

axiom disable_irq == $sub.ref(0, 247628);

procedure disable_irq($i0: i32);
  free requires assertsPassed;



implementation disable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} {:cexpr "disable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    return;
}



const sis900_interrupt: ref;

axiom sis900_interrupt == $sub.ref(0, 248660);

procedure sis900_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, assertsPassed;



implementation sis900_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i16: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i17: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} {:cexpr "sis900_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p3 := netdev_priv($p2);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i5 := $M.14;
    call {:si_unique_call 1329} {:cexpr "boguscnt"} boogie_si_record_i32($i5);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} spin_lock($p8);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref(16, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i10 := ioread32($p9);
    call {:si_unique_call 1332} {:cexpr "status"} boogie_si_record_i32($i10);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 34597);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i10, $i5;
    goto $bb4;

  $bb4:
    call $i16, $i14, $i15, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i33, $i34, $i35, $i43, $i44, $i45, vslice_dummy_var_307 := sis900_interrupt_loop_$bb4($p2, $p9, $i16, $i14, $i15, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i33, $i34, $i35, $i43, $i44, $i45, vslice_dummy_var_307);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, 37);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i14, 1792);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i14, 32768);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i15, 1);
    call {:si_unique_call 1336} {:cexpr "boguscnt"} boogie_si_record_i32($i33);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i35 := $i14;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i43 := ioread32($p9);
    call {:si_unique_call 1339} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 34597);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i16 := 1;
    assume true;
    goto $bb5, $bb26;

  $bb26:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i14, $i15 := $i43, $i33;
    goto $bb26_dummy;

  $bb5:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 512);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} spin_unlock($p55);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i17, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p7, $mul.ref(16, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i51 := ioread32($p50);
    call {:si_unique_call 1341} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_310 := printk.ref.ref.i32(.str.2, $p53, $i51);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb20:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 512);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_309 := printk.ref.ref.i32(.str.1, $p41, $i35);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 512);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb6;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_308 := printk.ref.ref.i32(.str, $p31, $i25);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} sis900_finish_xmit($p2);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_307 := sis900_rx($p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb26_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 249692);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 250724);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} ldv_spin_lock();
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} ldv_spin_lock_5($p0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    return;
}



const sis900_rx: ref;

axiom sis900_rx == $sub.ref(0, 251756);

procedure sis900_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation sis900_rx($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i64;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p115: ref;
  var $i117: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i135: i64;
  var $p137: ref;
  var $p138: ref;
  var $i140: i16;
  var $p141: ref;
  var $i143: i32;
  var $i144: i1;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p150: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $p157: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $p116: ref;
  var $i168: i64;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i64;
  var $i200: i64;
  var $i201: i1;
  var $i202: i32;
  var $p203: ref;
  var $i204: i64;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p221: ref;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i64;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $i236: i64;
  var $i237: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i64;
  var $p243: ref;
  var $i244: i64;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $i257: i32;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $i267: i64;
  var $p269: ref;
  var $i270: i32;
  var $i271: i64;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i275: i64;
  var $i276: i64;
  var $i277: i1;
  var $i278: i32;
  var $p279: ref;
  var $i280: i64;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: ref;
  var vslice_dummy_var_315: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p1 := netdev_priv($p0);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 15);
    call {:si_unique_call 1348} {:cexpr "entry"} boogie_si_record_i32($i7);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i7);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 12)), $mul.ref(4, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1349} {:cexpr "rx_status"} boogie_si_record_i32($i13);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2048);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i24, $i26);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 16);
    call {:si_unique_call 1351} {:cexpr "rx_work_limit"} boogie_si_record_i32($i28);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i13, 0);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i222, $i224);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i290 := ioread32($p4);
    call {:si_unique_call 1376} {:cexpr "tmp___6"} boogie_si_record_i32($i290);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i291 := $or.i32($i290, 4);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} iowrite32($i291, $p4);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb56:
    assume $i225 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    call $p226, $i227, $i228, $i229, $p231, $p232, $i233, $i234, $p235, $i236, $i237, $i244, $p246, $p247, $p248, $i249, $p251, $p252, $p253, $p254, $p255, $i256, $i257, $p258, $p259, $i260, $p262, $p263, $p264, $p265, $p266, $i267, $p269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p283, $i284, $i285, $p286, $i287, $i288, $i289 := sis900_rx_loop_$bb59($p0, $p2, $p221, $p223, $p226, $i227, $i228, $i229, $p231, $p232, $i233, $i234, $p235, $i236, $i237, $i244, $p246, $p247, $p248, $i249, $p251, $p252, $p253, $p254, $p255, $i256, $i257, $p258, $p259, $i260, $p262, $p263, $p264, $p265, $p266, $i267, $p269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p283, $i284, $i285, $p286, $i287, $i288, $i289);
    goto $bb59_last;

  $bb60:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, 15);
    call {:si_unique_call 1373} {:cexpr "entry"} boogie_si_record_i32($i228);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i229 := $zext.i32.i64($i228);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i229, 8));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i285 := $add.i32($i284, 1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p286, $i285);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p221);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.0, $p223);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i287, $i288);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i289 == 1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb71_dummy;

  $bb61:
    assume $i234 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p235 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p235);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i237 := $eq.i64($i236, 0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i244 := $zext.i32.i64($i228);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i244, 8));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p246, $p235);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i249 := $zext.i32.i64($i228);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p248, $mul.ref($i249, 12)), $mul.ref(4, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 1540);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p235, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i256 := pci_map_single($p253, $p255, 1540, 2);
    call {:si_unique_call 1379} {:cexpr "tmp___3"} boogie_si_record_i64($i256);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i64.i32($i256);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i260 := $zext.i32.i64($i228);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p259, $mul.ref($i260, 12)), $mul.ref(8, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, $i257);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i267 := $zext.i32.i64($i228);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p266, $mul.ref($i267, 12)), $mul.ref(8, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i271 := $zext.i32.i64($i270);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i272 := pci_dma_mapping_error($p264, $i271);
    call {:si_unique_call 1381} {:cexpr "tmp___4"} boogie_si_record_i32($i272);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i274 := $zext.i1.i32($i273);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i274);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i276 := ldv__builtin_expect($i275, 0);
    call {:si_unique_call 1383} {:cexpr "tmp___5"} boogie_si_record_i64($i276);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, 0);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i278, $p279 := $i228, $p235;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i277 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} dev_kfree_skb_irq($p279);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i280 := $zext.i32.i64($i278);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i280, 8));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p282, $0.ref);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume $i237 == 1;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i240 := $load.i64($M.0, $p239);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i241 := $add.i64($i240, 1);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p243, $i241);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i30, $i31, $i32 := $i28, $i13, $i7;
    goto $bb7;

  $bb7:
    call $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $i62, $p64, $i65, $i66, $p68, $i69, $i70, $p72, $i73, $i74, $p76, $i77, $i78, $p80, $i81, $i82, $p84, $i85, $i86, $p88, $p89, $p90, $i91, $p93, $p94, $p95, $p96, $p97, $i98, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $p108, $p109, $p111, $i112, $i113, $p115, $i117, $p119, $p120, $i121, $i122, $p123, $i135, $p137, $p138, $i140, $p141, $i143, $i144, $p146, $i147, $i148, $p150, $p152, $i153, $i154, $i155, $p157, $p159, $i160, $i161, $p163, $p164, $i165, $i166, $p167, $p116, $i168, $p170, $p171, $p172, $i173, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $p182, $p183, $i184, $p186, $p187, $p188, $p189, $p190, $i191, $p193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $p203, $p207, $i208, $i209, $p210, $p211, $i212, $i213, $p214, $p215, $i216, $p218, $i219, $i220, $i30, $i31, $i32, vslice_dummy_var_312, vslice_dummy_var_314, vslice_dummy_var_315 := sis900_rx_loop_$bb7($p0, $p2, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $i62, $p64, $i65, $i66, $p68, $i69, $i70, $p72, $i73, $i74, $p76, $i77, $i78, $p80, $i81, $i82, $p84, $i85, $i86, $p88, $p89, $p90, $i91, $p93, $p94, $p95, $p96, $p97, $i98, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $p108, $p109, $p111, $i112, $i113, $p115, $i117, $p119, $p120, $i121, $i122, $p123, $i135, $p137, $p138, $i140, $p141, $i143, $i144, $p146, $i147, $i148, $p150, $p152, $i153, $i154, $i155, $p157, $p159, $i160, $i161, $p163, $p164, $i165, $i166, $p167, $p116, $i168, $p170, $p171, $p172, $i173, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $p182, $p183, $i184, $p186, $p187, $p188, $p189, $p190, $i191, $p193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $p203, $p207, $i208, $i209, $p210, $p211, $i212, $i213, $p214, $p215, $i216, $p218, $i219, $i220, $i30, $i31, $i32, vslice_dummy_var_312, vslice_dummy_var_314, vslice_dummy_var_315);
    goto $bb7_last;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i30, 1);
    call {:si_unique_call 1352} {:cexpr "rx_work_limit"} boogie_si_record_i32($i33);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i31, 4095);
    call {:si_unique_call 1353} {:cexpr "data_size"} boogie_si_record_i32($i35);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 4);
    call {:si_unique_call 1354} {:cexpr "rx_size"} boogie_si_record_i32($i36);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i31, 4194304);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $i31;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 108789760);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i32);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p97, $mul.ref($i98, 12)), $mul.ref(8, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} pci_unmap_single($p95, $i102, 1540, 2);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $p103 := netdev_alloc_skb($p0, 1540);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i117 := $zext.i32.i64($i32);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i117, 8));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p123 := $p103;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i135 := $zext.i32.i64($i32);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i135, 8));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_314 := skb_put($p138, $i36);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i140 := eth_type_trans($p138, $p0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p138, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $i140);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_315 := netif_rx($p138);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i41, 25165824);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 16777216);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i36);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i155 := $add.i64($i153, $i154);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, $i155);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.0, $p159);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i160, 1);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p163, $i161);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i165, 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p116 := $p103;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i168 := $zext.i32.i64($i32);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i168, 8));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, $p116);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i173 := $zext.i32.i64($i32);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p172, $mul.ref($i173, 12)), $mul.ref(4, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 1540);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p116, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i180 := pci_map_single($p177, $p179, 1540, 2);
    call {:si_unique_call 1362} {:cexpr "tmp___0"} boogie_si_record_i64($i180);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i64.i32($i180);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i184 := $zext.i32.i64($i32);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p183, $mul.ref($i184, 12)), $mul.ref(8, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $i181);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i191 := $zext.i32.i64($i32);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p190, $mul.ref($i191, 12)), $mul.ref(8, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i194);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i196 := pci_dma_mapping_error($p188, $i195);
    call {:si_unique_call 1364} {:cexpr "tmp___1"} boogie_si_record_i32($i196);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i198 := $zext.i1.i32($i197);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i199 := $sext.i32.i64($i198);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i200 := ldv__builtin_expect($i199, 0);
    call {:si_unique_call 1366} {:cexpr "tmp___2"} boogie_si_record_i64($i200);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i201 := $ne.i64($i200, 0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i202, $p203 := $i32, $p116;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i208, 1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, $i209);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i213 := $and.i32($i212, 15);
    call {:si_unique_call 1359} {:cexpr "entry"} boogie_si_record_i32($i213);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i216 := $zext.i32.i64($i213);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p215, $mul.ref($i216, 12)), $mul.ref(4, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    call {:si_unique_call 1360} {:cexpr "rx_status"} boogie_si_record_i32($i219);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i219, 0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i220 == 1);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb53:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $i30, $i31, $i32 := $i33, $i219, $i213;
    goto $bb53_dummy;

  $bb50:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} dev_kfree_skb_irq($p203);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i204 := $zext.i32.i64($i202);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i204, 8));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p206, $0.ref);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb47:
    assume $i144 == 1;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i148 := $add.i64($i147, 1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p150, $i148);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 64);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} consume_skb($p123);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb43:
    assume $i127 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_313 := printk.ref.ref.i32.i32(.str.5, $p129, $i131, $i133);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i105 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i32);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref($i106, 8));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, $p111);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i112, 1);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p115, $i113);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p116 := $p109;
    goto $bb39;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 64);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 1);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i54);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i41, 33554432);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i41, 6291456);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i41, 1310720);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i41, 524288);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i32);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p90, $mul.ref($i91, 12)), $mul.ref(4, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 1540);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i82 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 1);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i86);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i78);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i66 == 1;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i70 := $add.i64($i69, 1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i70);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 1);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i62);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_312 := printk.ref.ref.i32.i32(.str.4, $p49, $i41, $i35);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i39 := $ule.i32($i35, 1522);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i31, $sub.i32(0, 4194305));
    call {:si_unique_call 1355} {:cexpr "rx_status"} boogie_si_record_i32($i40);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb18;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_311 := printk.ref.i32.i32.i32(.str.3, $i19, $i21, $i13);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb71_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb53_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6895;
}



const sis900_finish_xmit: ref;

axiom sis900_finish_xmit == $sub.ref(0, 252788);

procedure sis900_finish_xmit($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_finish_xmit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p64: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p73: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p87: ref;
  var $i88: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $i128: i8;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var vslice_dummy_var_316: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p1 := netdev_priv($p0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, $i6);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i126 == 1;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i127 := netif_queue_stopped($p0);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i8($i127);
    call {:si_unique_call 1392} {:cexpr "tmp___0"} boogie_si_record_i8($i128);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i129 == 1;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(304, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i131, $i133);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i135 := $ule.i32($i134, 11);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i135 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, 0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} netif_wake_queue($p0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p11, $p12, $i13, $p15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $p24, $p25, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $i62, $p64, $p66, $i67, $i68, $i69, $i70, $i71, $p73, $p75, $i76, $i77, $i78, $i79, $p81, $p83, $i84, $i85, $p87, $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $p98, $i99, $i100, $p101, $i102, $i103, $i104, $p106, $p107, $p108, $i109, $p111, $p112, $p113, $i114, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $i123, vslice_dummy_var_316 := sis900_finish_xmit_loop_$bb4($p0, $p2, $p3, $p5, $p8, $i9, $i10, $p11, $p12, $i13, $p15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i23, $p24, $p25, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $i62, $p64, $p66, $i67, $i68, $i69, $i70, $i71, $p73, $p75, $i76, $i77, $i78, $i79, $p81, $p83, $i84, $i85, $p87, $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $p98, $i99, $i100, $p101, $i102, $i103, $i104, $p106, $p107, $p108, $i109, $p111, $p112, $p113, $i114, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $i123, vslice_dummy_var_316);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    call {:si_unique_call 1386} {:cexpr "entry"} boogie_si_record_i32($i10);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i10);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 12)), $mul.ref(4, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 1387} {:cexpr "tx_status"} boogie_si_record_i32($i16);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i16, 102760448);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i16, 983040);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i69 := $lshr.i32($i68, 16);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i67, $i70);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, $i71);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i16);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 4095);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i76, $i78);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i79);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 1);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i85);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i10);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref($i88, 8));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i10);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p95, $mul.ref($i96, 12)), $mul.ref(8, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p91, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} pci_unmap_single($p93, $i100, $i103, 1);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} dev_kfree_skb_irq($p91);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i104 := $zext.i32.i64($i10);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref($i104, 8));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $0.ref);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i10);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p108, $mul.ref($i109, 12)), $mul.ref(8, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 0);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i114 := $zext.i32.i64($i10);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p113, $mul.ref($i114, 12)), $mul.ref(4, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 0);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, $i119);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p3);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p5);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i121, $i122);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i123 == 1);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb28_dummy;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 128);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i30);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i16, 33554432);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i16, 67108864);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i16, 16777216);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i16, 2097152);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(160, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.0, $p60);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, 1);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(160, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i62);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 1);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i54);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_316 := printk.ref.ref.i32(.str.7, $p25, $i16);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb28_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 253820);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_spin_unlock();
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} ldv_spin_unlock_9($p0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 254852);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1396} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 255884);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} _raw_spin_unlock($p2);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 256916);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    return;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 257948);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1399} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1400} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 258980);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    return;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 260012);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1405} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 261044);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} netif_tx_wake_queue($p1);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 262076);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 263108);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 1409} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 264140);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 265172);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1412} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1413} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p5 := get_dma_ops($p0);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1416} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1418} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1420} devirtbounce.6($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1419} devirtbounce.2(0, .str.6, 36, 12);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 266204);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1423} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1424} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1425} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 267236);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p2 := external_alloc();
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 268268);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation eth_type_trans($p0: ref, $p1: ref) returns ($r: i16)
{
  var $i2: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1428} $i2 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1429} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i2);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 269300);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 270332);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 271364);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} _raw_spin_lock($p2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 272396);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 273428);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} ldv_spin_unlock();
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 274460);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 275492);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    return;
}



const if_mii: ref;

axiom if_mii == $sub.ref(0, 276524);

procedure if_mii($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation if_mii($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 277556);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 278588);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_40: ref;

axiom ldv_del_timer_40 == $sub.ref(0, 279620);

procedure ldv_del_timer_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_del_timer_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i1 := del_timer($p0);
    call {:si_unique_call 1443} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} disable_suitable_timer_2($p0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free_irq_41: ref;

axiom ldv_free_irq_41 == $sub.ref(0, 280652);

procedure ldv_free_irq_41($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation ldv_free_irq_41($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} {:cexpr "ldv_free_irq_41:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} free_irq($i0, $p1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 281684);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 282716);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.19, $M.21;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i2 := $M.15;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.17;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.19;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.21;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i16 := $M.22;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1453} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i12 := $M.20;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 1452} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 1451} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 1450} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 283748);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1454} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_2: ref;

axiom disable_suitable_timer_2 == $sub.ref(0, 284780);

procedure disable_suitable_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation disable_suitable_timer_2($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p2 := $M.23;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1456} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sis900_reset: ref;

axiom sis900_reset == $sub.ref(0, 285812);

procedure sis900_reset($p0: ref);
  free requires assertsPassed;



implementation sis900_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i10: i32;
  var $i11: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $p1 := netdev_priv($p0);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(24, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} iowrite32(0, $p5);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref(20, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} iowrite32(0, $p6);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} iowrite32(0, $p7);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i8 := ioread32($p4);
    call {:si_unique_call 1462} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 304);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} iowrite32($i9, $p4);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, 50331648;
    goto $bb1;

  $bb1:
    call $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i10, $i11 := sis900_reset_loop_$bb1($p4, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i10, $i11);
    goto $bb1_last;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p4, $mul.ref(16, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i13 := ioread32($p12);
    call {:si_unique_call 1465} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i14 := $xor.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $i11);
    call {:si_unique_call 1466} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i10, 1);
    call {:si_unique_call 1467} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i15, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i16, 999);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i19 := $and.i1($i17, $i18);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 143);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 3);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} iowrite32(8, $p29);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} iowrite32(1032, $p28);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb7;

  $bb3:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11 := $i16, $i15;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7570;
}



const sis630_set_eq: ref;

axiom sis630_set_eq == $sub.ref(0, 286844);

procedure sis630_set_eq($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation sis630_set_eq($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i16;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i37: i32;
  var $i36: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i44: i32;
  var $i43: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i54: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i69: i32;
  var $i70: i32;
  var $i68: i32;
  var $i71: i16;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i83: i32;
  var $i84: i32;
  var $i82: i32;
  var $i85: i16;
  var $i86: i16;
  var $i72: i16;
  var $i73: i16;
  var $i74: i16;
  var $i55: i16;
  var $i56: i16;
  var $i58: i16;
  var $i88: i16;
  var $i89: i16;
  var $i90: i16;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $i103: i16;
  var $i110: i16;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i16;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i16;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i16;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $i161: i16;
  var $i162: i16;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i168: i32;
  var $i167: i32;
  var $i169: i16;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i175: i32;
  var $i174: i32;
  var $i176: i16;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i16;
  var $i183: i16;
  var $i184: i16;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i190: i32;
  var $i189: i32;
  var $i191: i16;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i197: i32;
  var $i196: i32;
  var $i198: i16;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i16;
  var $i205: i16;
  var $i206: i16;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i212: i32;
  var $i211: i32;
  var $i213: i16;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i219: i32;
  var $i218: i32;
  var $i220: i16;
  var $p221: ref;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i16;
  var $i227: i16;
  var $i228: i16;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i234: i32;
  var $i233: i32;
  var $i235: i16;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i241: i32;
  var $i240: i32;
  var $i242: i16;
  var $p243: ref;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $i249: i16;
  var $i250: i16;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i256: i32;
  var $i255: i32;
  var $i257: i16;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i263: i32;
  var $i262: i32;
  var $i264: i16;
  var $p265: ref;
  var $i266: i32;
  var $i267: i32;
  var $i268: i32;
  var $i269: i32;
  var $i270: i16;
  var $i271: i16;
  var $i272: i16;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i278: i32;
  var $i277: i32;
  var $i279: i16;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i285: i32;
  var $i284: i32;
  var $i286: i16;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i291: i32;
  var $i292: i16;
  var $i293: i16;
  var $i294: i16;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $i298: i32;
  var $i300: i32;
  var $i299: i32;
  var $i301: i16;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i307: i32;
  var $i306: i32;
  var $i308: i16;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i16;
  var $i315: i16;
  var $i316: i16;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i322: i32;
  var $i321: i32;
  var $i323: i16;
  var $i324: i32;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i329: i32;
  var $i328: i32;
  var $i330: i16;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i32;
  var $i335: i32;
  var $i87: i16;
  var $i336: i16;
  var $i337: i16;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i343: i32;
  var $i342: i32;
  var $i53: i16;
  var $i344: i32;
  var $i345: i32;
  var $i346: i1;
  var $i347: i32;
  var $i349: i32;
  var $i348: i32;
  var $i57: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} {:cexpr "sis630_set_eq:arg:revision"} boogie_si_record_i8($i1);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p2 := netdev_priv($p0);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 129);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i12 := netif_carrier_ok($p0);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1473} {:cexpr "tmp___4"} boogie_si_record_i8($i13);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i133 := mdio_read($p0, $i132, 20);
    call {:si_unique_call 1479} {:cexpr "tmp___3"} boogie_si_record_i32($i133);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    call {:si_unique_call 1480} {:cexpr "reg14h"} boogie_si_record_i16($i134);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 128);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i134);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, 8192);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 49151);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} mdio_write($p0, $i151, 20, $i154);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb66:
    assume $i136 == 1;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(604, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 16);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb71;

  $bb71:
    assume !($i140 == 1);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(604, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 17);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb68;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i134);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i148 := $or.i32($i147, 8704);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 49151);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} mdio_write($p0, $i146, 20, $i149);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb70;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i17 := mdio_read($p0, $i16, 20);
    call {:si_unique_call 1475} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 1476} {:cexpr "reg14h"} boogie_si_record_i16($i18);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i18);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 8704);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 49151);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} mdio_write($p0, $i20, 20, $i23);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i26 := mdio_read($p0, $i25, 20);
    call {:si_unique_call 1482} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 248);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 3);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    call {:si_unique_call 1483} {:cexpr "eq_value"} boogie_si_record_i16($i29);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31 := 0, 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i29);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i30);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i32, $i33);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i30);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i36);
    call {:si_unique_call 1484} {:cexpr "max_value"} boogie_si_record_i16($i38);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i29);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i31);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, $i40);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i31);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i43);
    call {:si_unique_call 1485} {:cexpr "min_value"} boogie_si_record_i16($i45);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i157 := mdio_read($p0, $i156, 20);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 248);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i159 := $ashr.i32($i158, 3);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb75, $bb76;

  $bb76:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i161, $i162 := $i38, $i45;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i160);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i161);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i165 := $sgt.i32($i163, $i164);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i165 == 1);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i161);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i167 := $i166;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i167);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i170 := $zext.i16.i32($i160);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i162);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i170, $i171);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i172 == 1);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i162);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i174 := $i173;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i16($i174);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i179 := mdio_read($p0, $i178, 20);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 248);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i181 := $ashr.i32($i180, 3);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i16($i181);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb85, $bb86;

  $bb86:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i183, $i184 := $i169, $i176;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i182);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i183);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i187 := $sgt.i32($i185, $i186);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i187 == 1);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i183);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i189 := $i188;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i189);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i182);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i184);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i192, $i193);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i194 == 1);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i184);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i196 := $i195;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i196);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $i201 := mdio_read($p0, $i200, 20);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i201, 248);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i203 := $ashr.i32($i202, 3);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i16($i203);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb95, $bb96;

  $bb96:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i205, $i206 := $i191, $i198;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i204);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i205);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i209 := $sgt.i32($i207, $i208);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i209 == 1);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i210 := $zext.i16.i32($i205);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i211 := $i210;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i211);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i204);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i215 := $zext.i16.i32($i206);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i216 := $slt.i32($i214, $i215);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i216 == 1);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i206);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i218 := $i217;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i16($i218);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i223 := mdio_read($p0, $i222, 20);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 248);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i225 := $ashr.i32($i224, 3);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i32.i16($i225);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb105, $bb106;

  $bb106:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i227, $i228 := $i213, $i220;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i32($i226);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i230 := $zext.i16.i32($i227);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i231 := $sgt.i32($i229, $i230);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i231 == 1);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i227);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i233 := $i232;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i16($i233);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i226);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i228);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i236, $i237);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i238 == 1);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i228);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i240 := $i239;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i240);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $i245 := mdio_read($p0, $i244, 20);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i246 := $and.i32($i245, 248);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i247 := $ashr.i32($i246, 3);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i16($i247);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb115, $bb116;

  $bb116:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i249, $i250 := $i235, $i242;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i248);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i249);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i253 := $sgt.i32($i251, $i252);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i253 == 1);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i249);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i255 := $i254;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i255);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i258 := $zext.i16.i32($i248);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i259 := $zext.i16.i32($i250);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i258, $i259);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i260 == 1);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i261 := $zext.i16.i32($i250);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i262 := $i261;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i16($i262);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i267 := mdio_read($p0, $i266, 20);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i268 := $and.i32($i267, 248);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i269 := $ashr.i32($i268, 3);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i270 := $trunc.i32.i16($i269);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb125, $bb126;

  $bb126:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i271, $i272 := $i257, $i264;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i270);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i274 := $zext.i16.i32($i271);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i275 := $sgt.i32($i273, $i274);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i275 == 1);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i271);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i277 := $i276;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i16($i277);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i270);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i281 := $zext.i16.i32($i272);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i280, $i281);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i282 == 1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i283 := $zext.i16.i32($i272);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i284 := $i283;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i16($i284);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.0, $p287);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i289 := mdio_read($p0, $i288, 20);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i290 := $and.i32($i289, 248);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i291 := $ashr.i32($i290, 3);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i16($i291);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb135, $bb136;

  $bb136:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i293, $i294 := $i279, $i286;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i295 := $zext.i16.i32($i292);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i296 := $zext.i16.i32($i293);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i297 := $sgt.i32($i295, $i296);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i297 == 1);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i298 := $zext.i16.i32($i293);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i299 := $i298;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i16($i299);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i292);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i303 := $zext.i16.i32($i294);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i302, $i303);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i304 == 1);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i305 := $zext.i16.i32($i294);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i306 := $i305;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i306);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i311 := mdio_read($p0, $i310, 20);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i312 := $and.i32($i311, 248);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i313 := $ashr.i32($i312, 3);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i314 := $trunc.i32.i16($i313);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb145, $bb146;

  $bb146:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i315, $i316 := $i301, $i308;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i317 := $zext.i16.i32($i314);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i318 := $zext.i16.i32($i315);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i319 := $sgt.i32($i317, $i318);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i319 == 1);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i320 := $zext.i16.i32($i315);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i321 := $i320;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i16($i321);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i324 := $zext.i16.i32($i314);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i325 := $zext.i16.i32($i316);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i324, $i325);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i326 == 1);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i327 := $zext.i16.i32($i316);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i328 := $i327;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i330 := $trunc.i32.i16($i328);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i333 := mdio_read($p0, $i332, 20);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i333, 248);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i335 := $ashr.i32($i334, 3);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i16($i335);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb155, $bb156;

  $bb156:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    $i336, $i337 := $i323, $i330;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i338 := $zext.i16.i32($i87);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i339 := $zext.i16.i32($i336);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i340 := $sgt.i32($i338, $i339);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i340 == 1);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i341 := $zext.i16.i32($i336);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i342 := $i341;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i342);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i344 := $zext.i16.i32($i87);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i345 := $zext.i16.i32($i337);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i346 := $slt.i32($i344, $i345);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i346 == 1);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i347 := $zext.i16.i32($i337);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i348 := $i347;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i348);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i1);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 129);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i47 == 1);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i1);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 131);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i49 == 1);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i1);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 132);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i88, $i89, $i90 := $i53, $i57, $i87;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i1);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 128);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i110 := $i90;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i113 := mdio_read($p0, $i112, 20);
    call {:si_unique_call 1491} {:cexpr "tmp___2"} boogie_si_record_i32($i113);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    call {:si_unique_call 1492} {:cexpr "reg14h"} boogie_si_record_i16($i114);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i115 := $sext.i16.i32($i114);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, $sub.i32(0, 249));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i110);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i118 := $shl.i32($i117, 3);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i16($i118);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i120 := $sext.i16.i32($i119);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 255);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i116, $i121);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i16($i122);
    call {:si_unique_call 1493} {:cexpr "reg14h"} boogie_si_record_i16($i123);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i124, 40447);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i125, 24576);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    call {:si_unique_call 1494} {:cexpr "reg14h"} boogie_si_record_i16($i127);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i127);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} mdio_write($p0, $i129, 20, $i130);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb53:
    assume $i92 == 1;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(604, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 16);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i96 == 1);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(604, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 17);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb55;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i88);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i102 == 1);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i88);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i89);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i104, $i105);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i106, 1);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i108 := $sdiv.i32($i107, 2);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    call {:si_unique_call 1489} {:cexpr "eq_value"} boogie_si_record_i16($i109);
    assume {:verifier.code 0} true;
    $i103 := $i109;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i110 := $i103;
    goto $bb64;

  $bb61:
    assume $i102 == 1;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i103 := 3;
    goto $bb63;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb57;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i53);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i54 := $ule.i32($i52, 4);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i54 == 1);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i53);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i60 := $ugt.i32($i59, 4);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i53);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i76 := $ugt.i32($i75, 14);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i87;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i72, $i73, $i74 := $i53, $i57, $i86;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55, $i56, $i58 := $i72, $i73, $i74;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i88, $i89, $i90 := $i55, $i56, $i58;
    goto $bb52;

  $bb46:
    assume $i76 == 1;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i53);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i57);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i77, $i78);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i79 == 1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i53);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 5);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i82 := $i84;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i82);
    call {:si_unique_call 1488} {:cexpr "eq_value"} boogie_si_record_i16($i85);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb51;

  $bb48:
    assume $i79 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i53);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 6);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb50;

  $bb37:
    assume $i60 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i53);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i62 := $ule.i32($i61, 14);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb39;

  $bb40:
    assume $i62 == 1;
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i53);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i57);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i63, $i64);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i65 == 1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i53);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 1);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i68 := $i70;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i68);
    call {:si_unique_call 1487} {:cexpr "eq_value"} boogie_si_record_i16($i71);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i72, $i73, $i74 := $i53, $i57, $i71;
    goto $bb45;

  $bb42:
    assume $i65 == 1;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i53);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 2);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb44;

  $bb34:
    assume $i54 == 1;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i55, $i56, $i58 := $i53, $i57, $i53;
    goto $bb36;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb28;

  $bb161:
    assume $i346 == 1;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i349 := $zext.i16.i32($i87);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i348 := $i349;
    goto $bb163;

  $bb158:
    assume $i340 == 1;
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i343 := $zext.i16.i32($i87);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i342 := $i343;
    goto $bb160;

  $bb155:
    assume 0 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i336, $i337 := $i87, $i87;
    goto $bb157;

  $bb151:
    assume $i326 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i329 := $zext.i16.i32($i314);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i328 := $i329;
    goto $bb153;

  $bb148:
    assume $i319 == 1;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i322 := $zext.i16.i32($i314);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i321 := $i322;
    goto $bb150;

  $bb145:
    assume 0 == 1;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i315, $i316 := $i314, $i314;
    goto $bb147;

  $bb141:
    assume $i304 == 1;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i307 := $zext.i16.i32($i292);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i306 := $i307;
    goto $bb143;

  $bb138:
    assume $i297 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i300 := $zext.i16.i32($i292);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i299 := $i300;
    goto $bb140;

  $bb135:
    assume 0 == 1;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i293, $i294 := $i292, $i292;
    goto $bb137;

  $bb131:
    assume $i282 == 1;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i285 := $zext.i16.i32($i270);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i284 := $i285;
    goto $bb133;

  $bb128:
    assume $i275 == 1;
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i278 := $zext.i16.i32($i270);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i277 := $i278;
    goto $bb130;

  $bb125:
    assume 0 == 1;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i271, $i272 := $i270, $i270;
    goto $bb127;

  $bb121:
    assume $i260 == 1;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i248);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i262 := $i263;
    goto $bb123;

  $bb118:
    assume $i253 == 1;
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i256 := $zext.i16.i32($i248);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i255 := $i256;
    goto $bb120;

  $bb115:
    assume 0 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i249, $i250 := $i248, $i248;
    goto $bb117;

  $bb111:
    assume $i238 == 1;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i226);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i240 := $i241;
    goto $bb113;

  $bb108:
    assume $i231 == 1;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i32($i226);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i233 := $i234;
    goto $bb110;

  $bb105:
    assume 0 == 1;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i227, $i228 := $i226, $i226;
    goto $bb107;

  $bb101:
    assume $i216 == 1;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i219 := $zext.i16.i32($i204);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i218 := $i219;
    goto $bb103;

  $bb98:
    assume $i209 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i204);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i211 := $i212;
    goto $bb100;

  $bb95:
    assume 0 == 1;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i205, $i206 := $i204, $i204;
    goto $bb97;

  $bb91:
    assume $i194 == 1;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i182);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i196 := $i197;
    goto $bb93;

  $bb88:
    assume $i187 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i182);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i189 := $i190;
    goto $bb90;

  $bb85:
    assume 0 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i183, $i184 := $i182, $i182;
    goto $bb87;

  $bb81:
    assume $i172 == 1;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i160);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i174 := $i175;
    goto $bb83;

  $bb78:
    assume $i165 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i160);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i167 := $i168;
    goto $bb80;

  $bb75:
    assume 0 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i161, $i162 := $i160, $i160;
    goto $bb77;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i29);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb24;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i29);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb21;

  $bb16:
    assume 1 == 1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i29, $i29;
    goto $bb18;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 131);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 128);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 132);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const ldv_request_irq_39: ref;

axiom ldv_request_irq_39 == $sub.ref(0, 287876);

procedure ldv_request_irq_39($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.27, $M.15, $M.18, $M.28, $M.17, $M.20, $M.29, $M.19, $M.22, $M.30, $M.21;



implementation ldv_request_irq_39($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} {:cexpr "ldv_request_irq_39:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1507} {:cexpr "ldv_request_irq_39:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1509} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i6 := reg_check_1($p1);
    call {:si_unique_call 1511} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const reg_timer_2: ref;

axiom reg_timer_2 == $sub.ref(0, 288908);

procedure reg_timer_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24;



implementation reg_timer_2($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1513} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(1);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sis900_timer: ref;

axiom sis900_timer == $sub.ref(0, 289940);

procedure sis900_timer($i0: i64);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.0, $CurrAddr;



implementation sis900_timer($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var vslice_dummy_var_317: i64;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1516} {:cexpr "sis900_timer:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i0);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p4 := netdev_priv($p3);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p1, 0);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 0);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i10 := mdio_read($p3, $i9, 1);
    call {:si_unique_call 1519} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i13 := mdio_read($p3, $i12, 1);
    call {:si_unique_call 1521} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 1522} {:cexpr "status"} boogie_si_record_i16($i14);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i15 := netif_carrier_ok($p3);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1524} {:cexpr "tmp___3"} boogie_si_record_i8($i16);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i14);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64(1250);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, jiffies);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i71, $i72);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i73);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(160, 1));
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} add_timer($p76);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} netif_carrier_off($p3);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 4);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 29);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} sis630_set_eq($p3, $i70);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i20 := sis900_default_phy($p3);
    call {:si_unique_call 1526} {:cexpr "status"} boogie_si_record_i16($i20);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 4);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i20);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 1527} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i27);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1529} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_317 := ldv__builtin_expect($i35, 0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} sis900_read_mode($p3, $p1, $p2);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.26, $p2);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.25, $p1);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.26, $p2);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} sis900_set_mode($p5, $i39, $i40);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} sis630_set_eq($p3, $i44);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} netif_carrier_on($p3);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} warn_slowpath_null(.str.45, 1326);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 65520);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 32768);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb24;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_319 := sis900_reset_phy($p3, $i65);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_318 := printk.ref.ref(.str.44, $p53);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 290972);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 292004);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 1542} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 293036);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    return;
}



const sis900_read_mode: ref;

axiom sis900_read_mode == $sub.ref(0, 294068);

procedure sis900_read_mode($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.0;



implementation sis900_read_mode($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i11: i32;
  var vslice_dummy_var_320: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p3 := netdev_priv($p0);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1545} {:cexpr "phy_addr"} boogie_si_record_i32($i8);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i9 := mdio_read($p0, $i8, 1);
    call {:si_unique_call 1547} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i11 := mdio_read($p0, $i8, 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i11, 4);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 0);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i13 := mdio_read($p0, $i8, 4);
    call {:si_unique_call 1550} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 1551} {:cexpr "autoadv"} boogie_si_record_i16($i14);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i15 := mdio_read($p0, $i8, 5);
    call {:si_unique_call 1553} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 1554} {:cexpr "autorec"} boogie_si_record_i16($i16);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i14);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i16);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i17, $i18);
    call {:si_unique_call 1555} {:cexpr "status"} boogie_si_record_i32($i19);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p1, 10);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 384);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i19, 320);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 4);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i43 == 1;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.25, $p1);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 100);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p48 := (if $i47 == 1 then .str.47 else .str.48);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.26, $p2);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p51 := (if $i50 == 1 then .str.49 else .str.50);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_320 := printk.ref.ref.ref.ref(.str.46, $p45, $p48, $p51);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 65520);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 33280);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $i34 := mdio_read($p0, $i8, 0);
    call {:si_unique_call 1557} {:cexpr "tmp___3"} boogie_si_record_i32($i34);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 256);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i37 := mdio_read($p0, $i8, 25);
    call {:si_unique_call 1559} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p1, 100);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 2);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p2, 2);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p1, 100);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 295100);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1562} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1564} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 296132);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(sis900_interrupt));
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 297164);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.16, $M.27, $M.15, $M.18, $M.28, $M.17, $M.20, $M.29, $M.19, $M.22, $M.30, $M.21;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i2 := $M.15;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.17;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.19;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.21;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.22 := $i0;
    call {:si_unique_call 1572} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $M.30 := $p1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $M.20 := $i0;
    call {:si_unique_call 1570} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $M.29 := $p1;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $M.18 := $i0;
    call {:si_unique_call 1568} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.28 := $p1;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.16 := $i0;
    call {:si_unique_call 1566} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $M.27 := $p1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 1567} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 298196);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1575} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const sis900_get_settings: ref;

axiom sis900_get_settings == $sub.ref(0, 299228);

procedure sis900_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation sis900_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_321: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p2 := netdev_priv($p0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} spin_lock_irq($p4);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(104, 1));
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_321 := mii_ethtool_gset($p5, $p1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} spin_unlock_irq($p7);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sis900_set_settings: ref;

axiom sis900_set_settings == $sub.ref(0, 300260);

procedure sis900_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation sis900_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p2 := netdev_priv($p0);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} spin_lock_irq($p4);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(104, 1));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i6 := mii_ethtool_sset($p5, $p1);
    call {:si_unique_call 1585} {:cexpr "rt"} boogie_si_record_i32($i6);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} spin_unlock_irq($p7);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const sis900_get_drvinfo: ref;

axiom sis900_get_drvinfo == $sub.ref(0, 301292);

procedure sis900_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sis900_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_322: i64;
  var vslice_dummy_var_323: i64;
  var vslice_dummy_var_324: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $p2 := netdev_priv($p0);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_322 := strlcpy($p5, .str.8, 32);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_323 := strlcpy($p8, .str.9, 32);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p12 := pci_name($p11);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_324 := strlcpy($p14, $p12, 32);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    return;
}



const sis900_get_wol: ref;

axiom sis900_get_wol == $sub.ref(0, 302324);

procedure sis900_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p2 := netdev_priv($p0);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(176, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i7 := ioread32($p6);
    call {:si_unique_call 1594} {:cexpr "pmctrl_bits"} boogie_si_record_i32($i7);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1024);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i7, 2);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 33);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 1);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 32);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sis900_set_wol: ref;

axiom sis900_set_wol == $sub.ref(0, 303356);

procedure sis900_set_wol($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $CurrAddr;



implementation sis900_set_wol($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i27: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p3 := netdev_priv($p0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(152, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p2, 0);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 94);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 32);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i37;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p6, $mul.ref(176, 1));
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} iowrite32($i43, $p44);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_328 := pci_read_config_dword($p46, 68, $p2);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.31, $p2);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 256);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p2, $i49);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.31, $p2);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_329 := pci_write_config_dword($p51, 68, $i52);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 16384);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_330 := printk.ref.ref(.str.11, $p59);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i37, 2);
    call {:si_unique_call 1602} {:cexpr "pmctrl_bits"} boogie_si_record_i32($i42);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb16;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i36 := $or.i32(0, 1024);
    call {:si_unique_call 1601} {:cexpr "pmctrl_bits"} boogie_si_record_i32($i36);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_325 := pci_read_config_dword($p11, 68, $p2);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.31, $p2);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 257));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p2, $i14);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.31, $p2);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} vslice_dummy_var_326 := pci_write_config_dword($p16, 68, $i17);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p6, $mul.ref(176, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} iowrite32(0, $p19);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16384);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_327 := printk.ref.ref(.str.10, $p25);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sis900_get_msglevel: ref;

axiom sis900_get_msglevel == $sub.ref(0, 304388);

procedure sis900_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sis900_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p1 := netdev_priv($p0);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sis900_set_msglevel: ref;

axiom sis900_set_msglevel == $sub.ref(0, 305420);

procedure sis900_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sis900_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} {:cexpr "sis900_set_msglevel:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p2 := netdev_priv($p0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    return;
}



const sis900_nway_reset: ref;

axiom sis900_nway_reset == $sub.ref(0, 306452);

procedure sis900_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sis900_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p1 := netdev_priv($p0);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(104, 1));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i4 := mii_nway_restart($p3);
    call {:si_unique_call 1612} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sis900_get_link: ref;

axiom sis900_get_link == $sub.ref(0, 307484);

procedure sis900_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sis900_get_link($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $p1 := netdev_priv($p0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 608)), $mul.ref(104, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i4 := mii_link_ok($p3);
    call {:si_unique_call 1615} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mii_link_ok: ref;

axiom mii_link_ok == $sub.ref(0, 308516);

procedure mii_link_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_link_ok($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1616} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mii_nway_restart: ref;

axiom mii_nway_restart == $sub.ref(0, 309548);

procedure mii_nway_restart($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_nway_restart($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1618} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1619} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 310580);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 1622} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_dword: ref;

axiom pci_write_config_dword == $sub.ref(0, 311612);

procedure pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} {:cexpr "pci_write_config_dword:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 1624} {:cexpr "pci_write_config_dword:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i7 := pci_bus_write_config_dword($p4, $i6, $i1, $i2);
    call {:si_unique_call 1626} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_write_config_dword: ref;

axiom pci_bus_write_config_dword == $sub.ref(0, 312644);

procedure pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_dword($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} {:cexpr "pci_bus_write_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1628} {:cexpr "pci_bus_write_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1629} {:cexpr "pci_bus_write_config_dword:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1631} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 313676);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1632} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1633} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1634} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 314708);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1637} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1638} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 315740);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_spin_lock();
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    return;
}



const mii_ethtool_sset: ref;

axiom mii_ethtool_sset == $sub.ref(0, 316772);

procedure mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 317804);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} ldv_spin_unlock();
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 318836);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} _raw_spin_unlock_irq($p2);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 319868);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 320900);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} _raw_spin_lock_irq($p2);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 321932);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    return;
}



const mii_ethtool_gset: ref;

axiom mii_ethtool_gset == $sub.ref(0, 322964);

procedure mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mii_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 323996);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1650} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.32;
    call {:si_unique_call 1651} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.32 := cmdloc_dummy_var_1;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 325028);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 326060);

procedure choose_timer_2($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation choose_timer_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 1653} devirtbounce.7($p4, $i6);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 1655} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(2);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 327092);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1657} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1658} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1659} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1660} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1663} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $i8 := sis900_interrupt($i1, $p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 1666} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 328124);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_pci_driver_3: ref;

axiom ldv_pci_driver_3 == $sub.ref(0, 329156);

procedure ldv_pci_driver_3();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_pci_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_4: ref;

axiom ldv_initialize_ethtool_ops_4 == $sub.ref(0, 330188);

procedure ldv_initialize_ethtool_ops_4();
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p2 := ldv_init_zalloc(44);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $M.36 := $p2;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p4 := ldv_init_zalloc(20);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.37 := $p4;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 331220);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.7, assertsPassed;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1675} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_stop();
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i18 := $M.21;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p20 := $M.30;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.15 := $i21;
    call {:si_unique_call 1679} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i14 := $M.19;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i15 := $M.20;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p16 := $M.29;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.15 := $i17;
    call {:si_unique_call 1677} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i10 := $M.17;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i11 := $M.18;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p12 := $M.28;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.15 := $i13;
    call {:si_unique_call 1681} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i6 := $M.15;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i7 := $M.16;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p8 := $M.27;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $M.15 := $i9;
    call {:si_unique_call 1683} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 332252);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.8, $M.31, $M.0, $M.15, $M.44, $M.35, $M.36, $M.37, $M.45, $M.4, $M.47, $M.48, $M.49, $M.50, $M.24, $M.5, $M.51, $M.52, $M.21, $M.19, $M.17, $M.13, $M.23, $M.16, $M.18, $M.20, $M.22, $M.27, $M.28, $M.29, $M.30, $M.34, $M.46, $M.7, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.6, $M.11, $M.60, $M.12, $M.10, $M.3, $M.1, $M.61, $M.62, $M.14, $CurrAddr, $M.25, $M.26, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i1;
  var $i184: i32;
  var $i185: i1;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i281: i32;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i32;
  var $i316: i32;
  var $i317: i1;
  var $i319: i32;
  var $i320: i32;
  var vslice_dummy_var_331: ref;
  var vslice_dummy_var_332: ref;
  var vslice_dummy_var_333: ref;
  var vslice_dummy_var_334: ref;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;
  var vslice_dummy_var_354: i32;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;
  var vslice_dummy_var_357: i32;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;

  $bb0:
    call {:si_unique_call 1685} $initialize();
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} $p4 := ldv_init_zalloc(196);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $p6 := ldv_init_zalloc(32);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $p8 := ldv_init_zalloc(40);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $p11 := ldv_init_zalloc(24);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $p13 := ldv_init_zalloc(232);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_initialize();
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_331 := ldv_memset($p15, 0, 4);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} vslice_dummy_var_332 := ldv_memset($p17, 0, 4);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_333 := ldv_memset($p19, 0, 4);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_334 := ldv_memset($p21, 0, 4);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1704} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1706} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $i49, $i50, $p51, $i52, $i53, $p54, $p55, $i57, $i58, $p59, $i60, $i61, $i62, $p63, $p64, $i66, $i67, $p68, $i70, $i71, $p72, $p73, $i74, $i75, $p76, $i78, $i79, $p80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i178, $i179, $i181, $i182, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i224, $i225, $p226, $i228, $i229, $p230, $i232, $i233, $p234, $i236, $i237, $p238, $i240, $i241, $p242, $i244, $i245, $p246, $i247, $i249, $i250, $p251, $i252, $i254, $i255, $p256, $i257, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i278, $i279, $p280, $i281, $i282, $i283, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $i307, $p308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i319, $i320, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342, vslice_dummy_var_343, vslice_dummy_var_344, vslice_dummy_var_345, vslice_dummy_var_346, vslice_dummy_var_347, vslice_dummy_var_348, vslice_dummy_var_349, vslice_dummy_var_350, vslice_dummy_var_351, vslice_dummy_var_352, vslice_dummy_var_353, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358, vslice_dummy_var_359, vslice_dummy_var_360, vslice_dummy_var_361 := main_loop_$bb1($p0, $p1, $p2, $p3, $p5, $p7, $p9, $p10, $p12, $p14, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $i49, $i50, $p51, $i52, $i53, $p54, $p55, $i57, $i58, $p59, $i60, $i61, $i62, $p63, $p64, $i66, $i67, $p68, $i70, $i71, $p72, $p73, $i74, $i75, $p76, $i78, $i79, $p80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $p132, $i133, $i134, $p135, $i136, $i137, $p138, $i139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i178, $i179, $i181, $i182, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i224, $i225, $p226, $i228, $i229, $p230, $i232, $i233, $p234, $i236, $i237, $p238, $i240, $i241, $p242, $i244, $i245, $p246, $i247, $i249, $i250, $p251, $i252, $i254, $i255, $p256, $i257, $i259, $i260, $p261, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i271, $i273, $i274, $p275, $i276, $i278, $i279, $p280, $i281, $i282, $i283, $i284, $i285, $p286, $i288, $i289, $p290, $i292, $i293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $i307, $p308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i319, $i320, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342, vslice_dummy_var_343, vslice_dummy_var_344, vslice_dummy_var_345, vslice_dummy_var_346, vslice_dummy_var_347, vslice_dummy_var_348, vslice_dummy_var_349, vslice_dummy_var_350, vslice_dummy_var_351, vslice_dummy_var_352, vslice_dummy_var_353, vslice_dummy_var_354, vslice_dummy_var_355, vslice_dummy_var_356, vslice_dummy_var_357, vslice_dummy_var_358, vslice_dummy_var_359, vslice_dummy_var_360, vslice_dummy_var_361);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} ldv_stop();
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i190 := $M.8;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb209:
    assume $i191 == 1;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1794} $i192 := __VERIFIER_nondet_int();
    call {:si_unique_call 1795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i192);
    call {:si_unique_call 1796} {:cexpr "tmp___9"} boogie_si_record_i32($i192);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i192, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i192, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i192, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i192, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i192, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_stop();
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb220:
    assume $i197 == 1;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i316 := $M.8;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 2);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb329:
    assume $i317 == 1;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_361 := ldv_ndo_uninit_5();
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i319 := $M.40;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i320 := $sub.i32($i319, 1);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.40 := $i320;
    call {:si_unique_call 1856} {:cexpr "ref_cnt"} boogie_si_record_i32($i320);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb218:
    assume $i196 == 1;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i309 := $M.8;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 1);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb323:
    assume $i310 == 1;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i311 := ldv_ndo_init_5();
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.52 := $i311;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i311);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i312 := $M.52;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 0);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb325:
    assume $i313 == 1;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i314 := $M.40;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i315 := $add.i32($i314, 1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $M.40 := $i315;
    call {:si_unique_call 1853} {:cexpr "ref_cnt"} boogie_si_record_i32($i315);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb216:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i192, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i198 == 1);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i300 := $M.8;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i303 := $M.8;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 3);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $i306 := $M.8;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 2);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb320:
    assume $i307 == 1;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p308 := $M.13;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} sis900_tx_timeout($p308);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb317:
    assume $i304 == 1;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p305 := $M.13;
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} sis900_tx_timeout($p305);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb314:
    assume $i301 == 1;
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p302 := $M.13;
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} sis900_tx_timeout($p302);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb223:
    assume $i198 == 1;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i288 := $M.8;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i292 := $M.8;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 3);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i296 := $M.8;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 2);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb311:
    assume $i297 == 1;
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p298 := $M.13;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_360 := eth_mac_addr($p298, $p10);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb308:
    assume $i293 == 1;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p294 := $M.13;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} vslice_dummy_var_359 := eth_mac_addr($p294, $p10);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb305:
    assume $i289 == 1;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p290 := $M.13;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} vslice_dummy_var_358 := eth_mac_addr($p290, $p10);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb214:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i192, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i192, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i200 == 1);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i284 := $M.8;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 3);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb302:
    assume $i285 == 1;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p286 := $M.13;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} vslice_dummy_var_357 := sis900_start_xmit($p14, $p286);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb227:
    assume $i200 == 1;
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i278 := $M.8;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 2);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb296:
    assume $i279 == 1;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p280 := $M.13;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i281 := sis900_open($p280);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $M.51 := $i281;
    call {:si_unique_call 1834} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i281);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i282 := $M.51;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 0);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb298:
    assume $i283 == 1;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb300;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb225:
    assume $i199 == 1;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i268 := $M.8;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 3);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i273 := $M.8;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 2);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb293:
    assume $i274 == 1;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p275 := $M.13;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.32, $p3);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} vslice_dummy_var_356 := eth_change_mtu($p275, $i276);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb290:
    assume $i269 == 1;
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p270 := $M.13;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.32, $p3);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} vslice_dummy_var_355 := eth_change_mtu($p270, $i271);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb212:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i192, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i192, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i203 == 1);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i259 := $M.8;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 1);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i262 := $M.8;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 3);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i265 := $M.8;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb287:
    assume $i266 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p267 := $M.13;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} sis900_poll($p267);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    goto $bb289;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb284:
    assume $i263 == 1;
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p264 := $M.13;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} sis900_poll($p264);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb286;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb281:
    assume $i260 == 1;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p261 := $M.13;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} sis900_poll($p261);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb283;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb233:
    assume $i203 == 1;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i244 := $M.8;
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 1);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i249 := $M.8;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 3);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i254 := $M.8;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb278:
    assume $i255 == 1;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p256 := $M.13;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.32, $p2);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_354 := mii_ioctl($p256, $p9, $i257);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i250 == 1;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p251 := $M.13;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.32, $p2);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_353 := mii_ioctl($p251, $p9, $i252);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb272:
    assume $i245 == 1;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p246 := $M.13;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.32, $p2);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} vslice_dummy_var_352 := mii_ioctl($p246, $p9, $i247);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb231:
    assume $i202 == 1;
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i232 := $M.8;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 1);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i236 := $M.8;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 3);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i240 := $M.8;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 2);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb269:
    assume $i241 == 1;
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p242 := $M.13;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} vslice_dummy_var_351 := sis900_set_config($p242, $p12);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb266:
    assume $i237 == 1;
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p238 := $M.13;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_350 := sis900_set_config($p238, $p12);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb263:
    assume $i233 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p234 := $M.13;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_349 := sis900_set_config($p234, $p12);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb229:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i192, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i192, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i205 == 1);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i220 := $M.8;
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i224 := $M.8;
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 3);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i228 := $M.8;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 2);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb260:
    assume $i229 == 1;
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p230 := $M.13;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_348 := eth_validate_addr($p230);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i225 == 1;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p226 := $M.13;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_347 := eth_validate_addr($p226);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i221 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p222 := $M.13;
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_346 := eth_validate_addr($p222);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb237:
    assume $i205 == 1;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i211 := $M.8;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i214 := $M.8;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 3);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i217 := $M.8;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 2);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb251:
    assume $i218 == 1;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p219 := $M.13;
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} set_rx_mode($p219);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb248:
    assume $i215 == 1;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p216 := $M.13;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} set_rx_mode($p216);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume $i212 == 1;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p213 := $M.13;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} set_rx_mode($p213);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb235:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i192, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb222;

  $bb239:
    assume $i206 == 1;
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i207 := $M.8;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 3);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb241:
    assume $i208 == 1;
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p209 := $M.13;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} vslice_dummy_var_345 := sis900_close($p209);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i187 := $M.43;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb206:
    assume $i188 == 1;
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p189 := $M.23;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} choose_timer_2($p189);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i101 := $M.42;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb107:
    assume $i102 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} $i103 := __VERIFIER_nondet_int();
    call {:si_unique_call 1749} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i103);
    call {:si_unique_call 1750} {:cexpr "tmp___8"} boogie_si_record_i32($i103);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i103, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i103, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i103, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} ldv_stop();
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb116:
    assume $i107 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i175 := $M.42;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 4);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i178 := $M.42;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 3);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i181 := $M.42;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 2);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i184 := $M.42;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 5);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb200:
    assume $i185 == 1;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_344 := ldv_shutdown_3();
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i182 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_343 := ldv_shutdown_3();
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb194:
    assume $i179 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_342 := ldv_shutdown_3();
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i176 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_341 := ldv_shutdown_3();
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb114:
    assume $i106 == 1;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i165 := $M.42;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 4);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i170 := $M.42;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 3);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb185:
    assume $i171 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i172 := ldv_resume_early_3();
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.50 := $i172;
    call {:si_unique_call 1782} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i172);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i173 := $M.50;
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb187:
    assume $i174 == 1;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb179:
    assume $i166 == 1;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $i167 := ldv_resume_early_3();
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.50 := $i167;
    call {:si_unique_call 1779} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i167);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i168 := $M.50;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i169 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb112:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i103, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i108 == 1);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i160 := $M.42;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb173:
    assume $i161 == 1;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i162 := ldv_suspend_late_3();
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $M.49 := $i162;
    call {:si_unique_call 1776} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i162);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i163 := $M.49;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 0);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb175:
    assume $i164 == 1;
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb119:
    assume $i108 == 1;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i142 := $M.42;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 4);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i148 := $M.42;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i154 := $M.42;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 5);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb167:
    assume $i155 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p156 := $M.34;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i157 := sis900_resume($p156);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.48 := $i157;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i157);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i158 := $M.48;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb169:
    assume $i159 == 1;
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    goto $bb171;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i149 == 1;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p150 := $M.34;
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i151 := sis900_resume($p150);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.48 := $i151;
    call {:si_unique_call 1770} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i151);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i152 := $M.48;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 0);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb163:
    assume $i153 == 1;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    goto $bb165;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb155:
    assume $i143 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p144 := $M.34;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i145 := sis900_resume($p144);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.48 := $i145;
    call {:si_unique_call 1767} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i145);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i146 := $M.48;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb157:
    assume $i147 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb110:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i103, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i110 == 1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i130 := $M.42;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 4);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i133 := $M.42;
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 3);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i136 := $M.42;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 2);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i139 := $M.42;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 5);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb152:
    assume $i140 == 1;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p141 := $M.34;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} sis900_remove($p141);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb149:
    assume $i137 == 1;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p138 := $M.34;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} sis900_remove($p138);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i134 == 1;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p135 := $M.34;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} sis900_remove($p135);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb143:
    assume $i131 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p132 := $M.34;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} sis900_remove($p132);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb123:
    assume $i110 == 1;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i120 := $M.42;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb134:
    assume $i121 == 1;
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i122 := $M.46;
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb136;

  $bb137:
    assume $i123 == 1;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p124 := $M.34;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.32, $p125);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $i127 := sis900_suspend($p124, $i126);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $M.47 := $i127;
    call {:si_unique_call 1756} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i127);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i128 := $M.47;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb139:
    assume $i129 == 1;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb121:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i103, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb118;

  $bb125:
    assume $i111 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i112 := $M.42;
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb127:
    assume $i113 == 1;
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p114 := $M.34;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i115 := sis900_probe($p114, $p7);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.45 := $i115;
    call {:si_unique_call 1752} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i115);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i116 := $M.45;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i117 == 1;
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i118 := $M.40;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.40 := $i119;
    call {:si_unique_call 1754} {:cexpr "ref_cnt"} boogie_si_record_i32($i119);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb131;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i84 := $M.41;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb77:
    assume $i85 == 1;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} $i86 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i86);
    call {:si_unique_call 1737} {:cexpr "tmp___7"} boogie_si_record_i32($i86);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_stop();
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb82:
    assume $i88 == 1;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i94 := $M.41;
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb95:
    assume $i95 == 1;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $i96 := sis900_init_module();
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.44 := $i96;
    call {:si_unique_call 1742} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i96);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i97 := $M.44;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i99 := $M.44;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i100 == 1;
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_check_final_state();
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb97:
    assume $i98 == 1;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb80:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i86, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb84;

  $bb85:
    assume $i89 == 1;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i90 := $M.41;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 3);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i91 == 1;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i92 := $M.40;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb89;

  $bb90:
    assume $i93 == 1;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} sis900_cleanup_module();
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i82 := $M.39;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb74:
    assume $i83 == 1;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} choose_interrupt_1();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i31 := $M.38;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1714} {:cexpr "tmp___6"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i33, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_stop();
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i78 := $M.38;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb67:
    assume $i79 == 1;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p80 := $M.35;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} vslice_dummy_var_340 := sis900_get_link($p80);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i74 := $M.38;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb64:
    assume $i75 == 1;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p76 := $M.35;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} vslice_dummy_var_339 := sis900_get_msglevel($p76);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i70 := $M.38;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb61:
    assume $i71 == 1;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p72 := $M.35;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p73 := $M.37;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} sis900_get_wol($p72, $p73);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb23:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i33, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i39 == 1);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i66 := $M.38;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb58:
    assume $i67 == 1;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p68 := $M.35;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} vslice_dummy_var_338 := sis900_nway_reset($p68);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i61 := $M.38;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb55:
    assume $i62 == 1;
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p63 := $M.35;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p64 := $M.36;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} vslice_dummy_var_337 := sis900_set_settings($p63, $p64);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb21:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i41 == 1);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i57 := $M.38;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume $i58 == 1;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p59 := $M.35;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.32, $p0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} sis900_set_msglevel($p59, $i60);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb36:
    assume $i41 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i52 := $M.38;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49:
    assume $i53 == 1;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p54 := $M.35;
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p55 := $M.37;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_336 := sis900_set_wol($p54, $p55);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb34:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i42 == 1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i49 := $M.38;
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i50 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p51 := $M.35;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} sis900_get_drvinfo($p51, $p5);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb38:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb31;

  $bb40:
    assume $i43 == 1;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i44 := $M.38;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i45 == 1;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p46 := $M.35;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p47 := $M.36;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} vslice_dummy_var_335 := sis900_get_settings($p46, $p47);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb73_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1709} $i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
    call {:si_unique_call 1711} {:cexpr "tmp___5"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 333284);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    return;
}



const sis900_cleanup_module: ref;

axiom sis900_cleanup_module == $sub.ref(0, 334316);

procedure sis900_cleanup_module();
  free requires assertsPassed;
  modifies $M.42;



implementation sis900_cleanup_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_pci_unregister_driver_45(sis900_pci_driver);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    return;
}



const sis900_init_module: ref;

axiom sis900_init_module == $sub.ref(0, 335348);

procedure sis900_init_module() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.34, $M.0, $CurrAddr;



implementation sis900_init_module() returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_362: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} vslice_dummy_var_362 := printk.ref(version);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i1 := ldv___pci_register_driver_44(sis900_pci_driver, __this_module, .str.8);
    call {:si_unique_call 1862} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_suspend_late_3: ref;

axiom ldv_suspend_late_3 == $sub.ref(0, 336380);

procedure ldv_suspend_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1863} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1864} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_3: ref;

axiom ldv_resume_early_3 == $sub.ref(0, 337412);

procedure ldv_resume_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1865} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1866} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_3: ref;

axiom ldv_shutdown_3 == $sub.ref(0, 338444);

procedure ldv_shutdown_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1867} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1868} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_5: ref;

axiom ldv_ndo_init_5 == $sub.ref(0, 339476);

procedure ldv_ndo_init_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1869} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_5: ref;

axiom ldv_ndo_uninit_5 == $sub.ref(0, 340508);

procedure ldv_ndo_uninit_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1871} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1872} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 341540);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_44: ref;

axiom ldv___pci_register_driver_44 == $sub.ref(0, 342572);

procedure ldv___pci_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.34, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1874} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1875} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_pci_driver_3();
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 343604);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1877} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_45: ref;

axiom ldv_pci_unregister_driver_45 == $sub.ref(0, 344636);

procedure ldv_pci_unregister_driver_45($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_pci_unregister_driver_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} pci_unregister_driver($p0);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 345668);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 346700);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1881} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 1} true;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 347732);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 348764);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 349796);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 350828);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 351860);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 352892);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 353924);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 354956);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 355988);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 357020);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 358052);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1882} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1883} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1884} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1885} __VERIFIER_assume($i6);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 359084);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 360116);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 361148);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1886} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1887} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1888} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1889} __VERIFIER_assume($i4);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 362180);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 363212);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 364244);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 365276);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1890} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1891} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1892} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1893} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1894} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1895} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1896} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1897} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1898} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1899} __VERIFIER_assume($i7);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1900} __VERIFIER_assume($i11);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 366308);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 367340);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 368372);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 369404);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 370436);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 371468);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1902} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1903} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1904} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1905} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1906} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1907} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1908} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1909} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1910} __VERIFIER_assume($i7);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} __VERIFIER_assume($i11);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 372500);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 373532);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 374564);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 375596);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 376628);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 377660);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 378692);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 379724);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 380756);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1912} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1913} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1914} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 381788);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1915} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1916} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1917} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 382820);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1918} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1919} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1920} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 383852);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1921} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1922} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 384884);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 385916);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1923} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1924} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 386948);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 387980);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 389012);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1925} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1926} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p6 := malloc($i5);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 1930} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 390044);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 391076);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.21, $M.15, $M.19, $M.17, $M.24, $M.13, $M.23, $M.16, $M.18, $M.20, $M.22, $M.27, $M.28, $M.29, $M.30, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.8, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.7, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.6, $M.11, $M.60, $M.12, $M.10, $M.3, $M.0, $M.1, $M.61, $M.62, $M.14;



implementation __SMACK_static_init()
{

  $bb0:
    $M.21 := 0;
    call {:si_unique_call 1931} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1932} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 1933} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1934} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.17 := 0;
    call {:si_unique_call 1935} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1936} {:cexpr "ldv_timer_state_2"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.23 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1937} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1938} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 1939} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1940} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1941} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1943} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1944} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1945} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1946} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1948} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1949} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1950} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1951} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1952} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1953} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1954} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1955} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1956} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1957} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.53 := $store.i32($M.53, __mod_pci__sis900_pci_tbl_device_table, 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.53 := $store.i32($M.53, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.54 := $store.i32($M.54, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.55 := $store.i32($M.55, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.56 := $store.i32($M.56, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref(__mod_pci__sis900_pci_tbl_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.6 := 128;
    call {:si_unique_call 1958} {:cexpr "multicast_filter_limit"} boogie_si_record_i32(128);
    $M.11 := $store.ref($M.11, mii_chip_table, .str.28);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(0, 16)), $mul.ref(8, 1)), 29);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(0, 16)), $mul.ref(10, 1)), $sub.i16(0, 32768));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(0, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.29);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(8, 1)), 22);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(10, 1)), $sub.i16(0, 2000));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(1, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.30);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(8, 1)), 323);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(10, 1)), $sub.i16(0, 17296));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(2, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(0, 1)), .str.31);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(8, 1)), 34);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(10, 1)), 21792);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(3, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(0, 1)), .str.32);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(8, 1)), 46);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(10, 1)), $sub.i16(0, 13216));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(4, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(0, 1)), .str.33);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(8, 1)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(10, 1)), 27504);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(5, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(0, 1)), .str.34);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(8, 1)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(10, 1)), 27536);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(6, 16)), $mul.ref(12, 1)), 1);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(0, 1)), .str.35);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(8, 1)), 21);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(10, 1)), $sub.i16(0, 3008));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(7, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(0, 1)), .str.35);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(8, 1)), 323);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(10, 1)), $sub.i16(0, 17296));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(8, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(0, 1)), .str.36);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(8, 1)), 8192);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(10, 1)), 23584);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(9, 16)), $mul.ref(12, 1)), 3);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(0, 1)), .str.37);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(8, 1)), 8192);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(10, 1)), 23600);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(10, 16)), $mul.ref(12, 1)), 3);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(0, 1)), .str.38);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(8, 1)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(10, 1)), $sub.i16(0, 32256));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(11, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(0, 1)), .str.39);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(8, 1)), 257);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(10, 1)), $sub.i16(0, 28896));
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(12, 16)), $mul.ref(12, 1)), 2);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(0, 1)), $0.ref);
    $M.60 := $store.i16($M.60, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(8, 1)), 0);
    $M.12 := $store.i16($M.12, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(10, 1)), 0);
    $M.10 := $store.i8($M.10, $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(13, 16)), $mul.ref(12, 1)), 0);
    $M.3 := $sub.i32(0, 1);
    call {:si_unique_call 1959} {:cexpr "sis900_debug"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.ref($M.0, sis900_ethtool_ops, sis900_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(8, 1)), sis900_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(16, 1)), sis900_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(40, 1)), sis900_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(48, 1)), sis900_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(56, 1)), sis900_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(64, 1)), sis900_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(72, 1)), sis900_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(80, 1)), sis900_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_ethtool_ops, $mul.ref(0, 392)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, sis900_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), sis900_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), sis900_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), sis900_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), mii_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), sis900_set_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), eth_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), sis900_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), sis900_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sis900_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.1 := $store.ref($M.1, card_names, .str.19);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(card_names, $mul.ref(0, 16)), $mul.ref(1, 8)), .str.20);
    $M.61 := $store.i8($M.61, version, 14);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(1, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(2, 1)), 105);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(3, 1)), 115);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(4, 1)), 57);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(5, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(6, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(7, 1)), 46);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(8, 1)), 99);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(9, 1)), 58);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(10, 1)), 32);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(11, 1)), 118);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(12, 1)), 49);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(13, 1)), 46);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(14, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(15, 1)), 56);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(16, 1)), 46);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(17, 1)), 49);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(18, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(19, 1)), 32);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(20, 1)), 65);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(21, 1)), 112);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(22, 1)), 114);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(23, 1)), 46);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(24, 1)), 32);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(25, 1)), 50);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(26, 1)), 32);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(27, 1)), 50);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(28, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(29, 1)), 48);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(30, 1)), 54);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(31, 1)), 10);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(32, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref(version, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i32($M.0, sis900_pci_tbl, 4153);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 2304);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4153);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 28694);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(sis900_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.62 := $store.ref($M.62, sis900_pci_driver, $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.8);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), sis900_pci_tbl);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), sis900_probe);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), sis900_remove);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), sis900_suspend);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), sis900_resume);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.62 := $store.i64($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref($add.ref(sis900_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.14 := 40;
    call {:si_unique_call 1960} {:cexpr "max_interrupt_work"} boogie_si_record_i32(40);
    $M.0 := $store.i8($M.0, .str.8, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(3, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(4, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(9, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(10, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(12, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(17, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(19, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.20, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(10, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(11, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(13, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(18, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(20, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.20, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(1, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 5)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 5)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.9, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(1, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(2, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(3, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(5, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(7, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(12, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(14, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(16, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(17, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(18, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(19, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.9, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(4, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(8, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(17, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(18, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(19, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(21, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(22, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(23, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(7, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(11, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(18, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(24, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(25, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(29, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(31, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(4, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(11, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(19, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(20, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(21, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(23, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(24, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(25, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(9, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(10, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(11, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(12, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(13, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(14, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(15, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(17, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(18, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(19, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(2, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(5, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(9, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(10, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(11, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(13, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(14, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(15, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(5, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(6, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(7, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(11, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(12, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(13, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(14, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(15, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(17, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(18, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(20, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(21, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(22, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(5, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(6, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(7, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(9, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(11, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(15, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(16, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(17, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(19, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(20, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(21, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(4, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(5, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(8, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(9, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(10, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(7, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(11, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(3, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(7, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(11, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(8, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(9, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(11, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(12, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(13, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(14, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(16, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(17, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(2, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(10, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(11, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    call {:si_unique_call 1961} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 392108);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 393140);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 394172);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 395204);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 396236);

procedure devirtbounce.4(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 397268);

procedure devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 398300);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 399332);

procedure devirtbounce.7(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.25, $M.26, $M.0, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(sis900_timer, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1962} sis900_timer(arg);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.21, $M.15, $M.19, $M.17, $M.24, $M.13, $M.23, $M.16, $M.18, $M.20, $M.22, $M.27, $M.28, $M.29, $M.30, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.8, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.7, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.6, $M.11, $M.60, $M.12, $M.10, $M.3, $M.0, $M.1, $M.61, $M.62, $M.14, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1963} __SMACK_static_init();
    call {:si_unique_call 1964} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.32, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.8, $M.31, $M.0, $M.15, $M.44, $M.35, $M.36, $M.37, $M.45, $M.4, $M.47, $M.48, $M.49, $M.50, $M.24, $M.5, $M.51, $M.52, $M.21, $M.19, $M.17, $M.13, $M.23, $M.16, $M.18, $M.20, $M.22, $M.27, $M.28, $M.29, $M.30, $M.34, $M.46, $M.7, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.6, $M.11, $M.60, $M.12, $M.10, $M.3, $M.1, $M.61, $M.62, $M.14, $CurrAddr, $M.25, $M.26;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation sis900_remove_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb6_dummy;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, in_$p5);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} kfree(out_$p14);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, out_$p12);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p4, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_271;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p4, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_270;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17 := sis900_remove_loop_$bb4(in_$p4, in_$p5, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17);
    return;

  exit:
    return;
}



procedure sis900_remove_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1);
  modifies $M.0;



implementation {:SIextraRecBound 8} set_rx_mode_loop_$bb38(in_$p1: ref, in_$p5: ref, in_$i16: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$i89: i16, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i83: i32) returns (out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$i89: i16, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i83: i32)
{

  entry:
    out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i83 := in_$i84, in_$i85, in_$p86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i83;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  $bb40:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := out_$i92;
    goto $bb40_dummy;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, in_$i16);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i83, 1);
    call {:si_unique_call 207} {:cexpr "i"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} iowrite32(out_$i90, out_$p91);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(in_$p5, $mul.ref(76, 1));
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i16.i32(out_$i89);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i16($M.5, out_$p88);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i87, 2));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i83);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} iowrite32(out_$i85, out_$p86);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p5, $mul.ref(72, 1));
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i85 := $shl.i32(out_$i84, 16);
    goto corral_source_split_1925;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, 4);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i83 := set_rx_mode_loop_$bb38(in_$p1, in_$p5, in_$i16, out_$i84, out_$i85, out_$p86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i83);
    return;

  exit:
    return;
}



procedure set_rx_mode_loop_$bb38(in_$p1: ref, in_$p5: ref, in_$i16: i32, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$i87: i64, in_$p88: ref, in_$i89: i16, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i83: i32) returns (out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$i87: i64, out_$p88: ref, out_$i89: i16, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i83: i32);



implementation set_rx_mode_loop_$bb33(in_$p1: ref, in_$p3: ref, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i8, in_$i60: i16, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i16, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p53: ref) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i8, out_$i60: i16, out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i16, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p53: ref)
{

  entry:
    out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p53 := in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p53;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  $bb35:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p53 := out_$p78;
    goto $bb35_dummy;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, in_$i51);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p78);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p77);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p53, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, out_$p75, out_$i72);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i74, 2));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i73 := $lshr.i32(out_$i61, 4);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i71 := $or.i32(out_$i66, out_$i70);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i16.i32(out_$i69);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i32.i16(out_$i68);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i68 := $shl.i32(1, out_$i67);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i61, 15);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i16.i32(out_$i65);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i16($M.5, out_$p64);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i63, 2));
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i62 := $lshr.i32(out_$i61, 4);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    call {:si_unique_call 204} {:cexpr "bit_nr"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_$i60 := sis900_mcast_bitnr(out_$p55, out_$i59);
    call {:si_unique_call 203} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i60);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i8(out_$i58);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p3, $mul.ref(0, 608)), $mul.ref(605, 1));
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_1891;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p53 := set_rx_mode_loop_$bb33(in_$p1, in_$p3, in_$i51, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p53);
    return;

  exit:
    return;
}



procedure set_rx_mode_loop_$bb33(in_$p1: ref, in_$p3: ref, in_$i51: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i8, in_$i60: i16, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i16, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p53: ref) returns (out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i8, out_$i60: i16, out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i16, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p53: ref);
  modifies $M.5;



implementation {:SIextraRecBound 8} set_rx_mode_loop_$bb24(in_$p1: ref, in_$i16: i32, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i36: i32)
{

  entry:
    out_$i37, out_$p38, out_$i39, out_$i40, out_$i36 := in_$i37, in_$p38, in_$i39, in_$i40, in_$i36;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  $bb26:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i39;
    goto $bb26_dummy;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, in_$i16);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i36, 1);
    call {:si_unique_call 201} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, out_$p38, $sub.i16(0, 1));
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i37, 2));
    goto corral_source_split_1881;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i37, out_$p38, out_$i39, out_$i40, out_$i36 := set_rx_mode_loop_$bb24(in_$p1, in_$i16, out_$i37, out_$p38, out_$i39, out_$i40, out_$i36);
    return;

  exit:
    return;
}



procedure set_rx_mode_loop_$bb24(in_$p1: ref, in_$i16: i32, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i36: i32);
  modifies $M.5;



implementation {:SIextraRecBound 8} set_rx_mode_loop_$bb13(in_$p1: ref, in_$i16: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i21: i32) returns (out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i21: i32)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$i25, out_$i21 := in_$i22, in_$p23, in_$i24, in_$i25, in_$i21;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  $bb15:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i24;
    goto $bb15_dummy;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, in_$i16);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i21, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, out_$p23, $sub.i16(0, 1));
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(out_$i22, 2));
    goto corral_source_split_1855;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$i25, out_$i21 := set_rx_mode_loop_$bb13(in_$p1, in_$i16, out_$i22, out_$p23, out_$i24, out_$i25, out_$i21);
    return;

  exit:
    return;
}



procedure set_rx_mode_loop_$bb13(in_$p1: ref, in_$i16: i32, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i21: i32) returns (out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i21: i32);
  modifies $M.5;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation {:SIextraRecBound 6} sis630e_get_mac_addr_loop_$bb8(in_$p1: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i8, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i8, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i19 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i29;
    goto $bb10_dummy;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i30 := $sle.i32(out_$i29, 5);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i19, 1);
    call {:si_unique_call 837} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p28, out_$i24);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p26, $mul.ref(out_$i27, 1));
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$i24 := inb(113);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} outb(out_$i23, 112);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i8(out_$i22);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, 9);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_3903;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i8(out_$i19);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i19 := sis630e_get_mac_addr_loop_$bb8(in_$p1, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i19);
    return;

  exit:
    return;
}



procedure sis630e_get_mac_addr_loop_$bb8(in_$p1: ref, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i8, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i19: i32) returns (out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i8, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i19: i32);
  modifies $M.0;



implementation {:SIextraRecBound 3} sis635_get_mac_addr_loop_$bb1(in_$p1: ref, in_$p5: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i16, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i32) returns (out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i16, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i11 := in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3937;

  $bb3:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    goto $bb3_dummy;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i23 := $ule.i32(out_$i22, 2);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i11, 1);
    call {:si_unique_call 849} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p21, out_$i16);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 2));
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i11);
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i16(out_$i15);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_$i15 := ioread16(out_$p14);
    call {:si_unique_call 848} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p5, $mul.ref(76, 1));
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} iowrite32(out_$i12, out_$p13);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p5, $mul.ref(72, 1));
    goto corral_source_split_3940;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i12 := $shl.i32(out_$i11, 16);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i11 := sis635_get_mac_addr_loop_$bb1(in_$p1, in_$p5, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i11);
    return;

  exit:
    return;
}



procedure sis635_get_mac_addr_loop_$bb1(in_$p1: ref, in_$p5: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i16, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i32) returns (out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i16, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i32);
  modifies $M.0;



implementation sis96x_get_mac_addr_loop_$bb1(in_$p5: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i17, in_$i18, in_$i7;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;

  $bb11:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i17;
    goto $bb11_dummy;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i18 := $sle.i32(out_$i17, 1999);
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i7, 1);
    call {:si_unique_call 859} {:cexpr "wait"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3990;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __const_udelay(4295);
    goto corral_source_split_3989;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i32(out_$i9, 256);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_$i9 := ioread32(out_$p8);
    call {:si_unique_call 854} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_3969;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(in_$p5, $mul.ref(8, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i7 := sis96x_get_mac_addr_loop_$bb1(in_$p5, out_$p8, out_$i9, out_$i10, out_$i11, out_$i17, out_$i18, out_$i7);
    return;

  exit:
    return;
}



procedure sis96x_get_mac_addr_loop_$bb1(in_$p5: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i17: i32, in_$i18: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i17: i32, out_$i18: i1, out_$i7: i32);



implementation sis900_mii_probe_loop_$bb67(in_$p0: ref, in_$p2: ref, in_$i7: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i16, in_$i145: i64, in_$i146: i64, in_$i147: i1, in_$i149: i32, in_$i150: i1, in_$i135: i16) returns (out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i16, out_$i145: i64, out_$i146: i64, out_$i147: i1, out_$i149: i32, out_$i150: i1, out_$i135: i16)
{

  entry:
    out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i135 := in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i149, in_$i150, in_$i135;
    goto $bb67, exit;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_4266;

  $bb72:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := out_$i144;
    goto $bb72_dummy;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i32(out_$i149, 0);
    goto corral_source_split_4286;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i16.i32(out_$i144);
    goto corral_source_split_4285;

  $bb70:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i147 := $sge.i64(out_$i146, 0);
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i64(out_$i145, in_$i7);
    goto corral_source_split_4279;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i64($M.0, jiffies);
    goto corral_source_split_4278;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    out_$i144 := $trunc.i32.i16(out_$i143);
    call {:si_unique_call 898} {:cexpr "poll_bit"} boogie_si_record_i16(out_$i144);
    goto corral_source_split_4277;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i143 := $and.i32(out_$i141, out_$i142);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i16.i32(out_$i135);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i141 := $xor.i32(out_$i140, $sub.i32(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i16.i32(out_$i139);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i32.i16(out_$i138);
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_$i138 := mdio_read(in_$p0, out_$i137, 1);
    call {:si_unique_call 897} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(96, 1));
    goto corral_source_split_4269;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} yield_();
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb72_dummy:
    call {:si_unique_call 1} out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i135 := sis900_mii_probe_loop_$bb67(in_$p0, in_$p2, in_$i7, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i149, out_$i150, out_$i135);
    return;

  exit:
    return;
}



procedure sis900_mii_probe_loop_$bb67(in_$p0: ref, in_$p2: ref, in_$i7: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i16, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i16, in_$i145: i64, in_$i146: i64, in_$i147: i1, in_$i149: i32, in_$i150: i1, in_$i135: i16) returns (out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i16, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i16, out_$i145: i64, out_$i146: i64, out_$i147: i1, out_$i149: i32, out_$i150: i1, out_$i135: i16);



implementation sis900_mii_probe_loop_$bb22(in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p30: ref) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p30: ref)
{

  entry:
    out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p30 := in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p30;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  $bb24:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p30 := out_$p32;
    goto $bb24_dummy;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} kfree(out_$p33);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_4120;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p30 := sis900_mii_probe_loop_$bb22(out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p30);
    return;

  exit:
    return;
}



procedure sis900_mii_probe_loop_$bb22(in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p30: ref) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p30: ref);



implementation sis900_mii_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i10: i32, in_$i11: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i37: i32, in_$i38: i16, in_$p39: ref, in_$i40: i32, in_$i41: i16, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$i65: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i8, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$p80: ref, in_$i82: i32, in_$i83: i64, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p90: ref, in_$i21: i32, in_$i91: i32, in_$i92: i1, in_$i9: i32, in_$i170: i32, in_$i12: i16, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i16, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i16, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i16, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i16, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i16, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i16, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i16, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i16, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i16, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i16, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i16, in_$i231: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i16, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i16, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i16, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i16, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i16, in_$i258: i32, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i16, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i16, in_$i267: i32, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i16, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i16, in_$i276: i32, in_$i277: i32, in_$i278: i1, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32) returns (out_$i10: i32, out_$i11: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i37: i32, out_$i38: i16, out_$p39: ref, out_$i40: i32, out_$i41: i16, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$i65: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i8, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$p80: ref, out_$i82: i32, out_$i83: i64, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p90: ref, out_$i21: i32, out_$i91: i32, out_$i92: i1, out_$i9: i32, out_$i170: i32, out_$i12: i16, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i16, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i16, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i16, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i16, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i16, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i16, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i16, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i16, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i16, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i16, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i16, out_$i231: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i16, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i16, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i16, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i16, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i16, out_$i258: i32, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i16, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i16, out_$i267: i32, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i16, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i16, out_$i276: i32, out_$i277: i32, out_$i278: i1, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32)
{

  entry:
    out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p79, out_$p80, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p90, out_$i21, out_$i91, out_$i92, out_$i9, out_$i170, out_$i12, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227 := in_$i10, in_$i11, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p22, in_$p23, in_$i24, in_$i25, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p62, in_$i63, in_$p64, in_$i65, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$p79, in_$p80, in_$i82, in_$i83, in_$p85, in_$i86, in_$i87, in_$i88, in_$p90, in_$i21, in_$i91, in_$i92, in_$i9, in_$i170, in_$i12, in_$p171, in_$i172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$i183, in_$p184, in_$i185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i196, in_$i197, in_$p198, in_$i199, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i231, in_$i232, in_$i233, in_$p234, in_$i235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$p247, in_$i248, in_$i249, in_$i250, in_$i251, in_$p252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$i268, in_$i269, in_$p270, in_$i271, in_$i272, in_$i273, in_$p274, in_$i275, in_$i276, in_$i277, in_$i278, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  $bb47:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i91;
    goto $bb47_dummy;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i92 := $sle.i32(out_$i91, 31);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i21, 1);
    call {:si_unique_call 881} {:cexpr "phy_addr"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4101;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i9;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i9;
    goto $bb15;

  $bb13:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_vslice_dummy_var_225 := printk.ref.ref.i32(.str.23, in_$p5, out_$i9);
    goto corral_source_split_4098;

  $bb12:
    assume out_$i19 == 1;
    goto corral_source_split_4097;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i32(out_$i17, 2);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_4089;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_4088;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb8;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i11, 65535);
    goto corral_source_split_4086;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i16.i32(out_$i12);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i170);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i170 := mdio_read(in_$p0, out_$i9, 1);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_$i10 := mdio_read(in_$p0, out_$i9, 1);
    call {:si_unique_call 878} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_4081;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i12);
    goto corral_source_split_4094;

  $bb9:
    assume !(out_$i13 == 1);
    goto corral_source_split_4093;

  $bb45:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p90, 0);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} out_vslice_dummy_var_227 := printk.ref.ref.i32(.str.25, in_$p5, out_$i9);
    goto corral_source_split_4202;

  $bb44:
    assume out_$i88 == 1;
    goto corral_source_split_4201;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 0);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.12, out_$p85);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(out_$i83, 16)), $mul.ref(10, 1));
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    goto corral_source_split_4190;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i82 := 13;
    goto $bb40;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i59;
    goto $bb40;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_vslice_dummy_var_226 := printk.ref.ref.ref.i32(.str.24, in_$p5, out_$p80, out_$i9);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.11, out_$p79);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(out_$i77, 16)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i59);
    goto corral_source_split_4184;

  $bb38:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p76, out_$i75);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i32.i8(out_$i74);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i74 := (if out_$i73 == 1 then 2 else 1);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i72 := $and.i32(out_$i71, 24576);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i12);
    goto corral_source_split_4176;

  $bb37:
    assume out_$i70 == 1;
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 3);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.10, out_$p67);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(out_$i65, 16)), $mul.ref(12, 1));
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i59);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p64, out_$i63);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.10, out_$p62);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(mii_chip_table, $mul.ref(0, 224)), $mul.ref(out_$i60, 16)), $mul.ref(12, 1));
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i59);
    goto corral_source_split_4164;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  $bb162:
    assume {:verifier.code 0} true;
    assume out_$i278 == 1;
    goto $bb35;

  $bb155:
    assume {:verifier.code 0} true;
    assume out_$i269 == 1;
    goto $bb35;

  $bb148:
    assume {:verifier.code 0} true;
    assume out_$i260 == 1;
    goto $bb35;

  $bb141:
    assume {:verifier.code 0} true;
    assume out_$i251 == 1;
    goto $bb35;

  $bb134:
    assume {:verifier.code 0} true;
    assume out_$i242 == 1;
    goto $bb35;

  $bb127:
    assume {:verifier.code 0} true;
    assume out_$i233 == 1;
    goto $bb35;

  $bb120:
    assume {:verifier.code 0} true;
    assume out_$i224 == 1;
    goto $bb35;

  $bb113:
    assume {:verifier.code 0} true;
    assume out_$i215 == 1;
    goto $bb35;

  $bb106:
    assume {:verifier.code 0} true;
    assume out_$i206 == 1;
    goto $bb35;

  $bb99:
    assume {:verifier.code 0} true;
    assume out_$i197 == 1;
    goto $bb35;

  $bb92:
    assume {:verifier.code 0} true;
    assume out_$i188 == 1;
    goto $bb35;

  $bb85:
    assume {:verifier.code 0} true;
    assume out_$i179 == 1;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb35;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    assume true;
    goto $bb34, $bb36;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 32768);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i56, 65520);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i16($M.0, out_$p54);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4157;

  $bb31:
    assume out_$i53 == 1;
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 29);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_4152;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4151;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, out_$p22);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(88, 1));
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, out_$p22);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, out_$p46);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(80, 1));
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p44, out_$i12);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i9);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p42, out_$i41);
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_$i40 := mdio_read(in_$p0, out_$i9, 3);
    call {:si_unique_call 887} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p39, out_$i38);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_4131;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$i37 := mdio_read(in_$p0, out_$i9, 2);
    call {:si_unique_call 885} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4130;

  $bb18:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4105;

  SeqInstr_69:
    goto corral_source_split_4104;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_$p22 := kmalloc(24, 208);
    goto SeqInstr_68;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i59 := 1;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 63536);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$i178 := $and.i32(out_$i177, 65520);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(out_$i176);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i16($M.0, out_$p175);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4321;

  $bb82:
    assume out_$i174 == 1;
    goto corral_source_split_4320;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 22);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i16.i32(out_$i172);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i16($M.0, out_$p171);
    goto corral_source_split_4197;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4196;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb33;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb33;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i59 := 2;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 48240);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i187 := $and.i32(out_$i186, 65520);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$i186 := $zext.i16.i32(out_$i185);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i16($M.0, out_$p184);
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4333;

  $bb89:
    assume out_$i183 == 1;
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 323);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i182 := $zext.i16.i32(out_$i181);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i16($M.0, out_$p180);
    goto corral_source_split_4328;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4327;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i174 == 1);
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i179 == 1);
    goto $bb84;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i59 := 3;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 21792);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i196 := $and.i32(out_$i195, 65520);
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i16.i32(out_$i194);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i16($M.0, out_$p193);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4345;

  $bb96:
    assume out_$i192 == 1;
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 34);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i16.i32(out_$i190);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i16($M.0, out_$p189);
    goto corral_source_split_4340;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4339;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb91;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb91;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i59 := 4;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 52320);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i205 := $and.i32(out_$i204, 65520);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i16.i32(out_$i203);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i16($M.0, out_$p202);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4357;

  $bb103:
    assume out_$i201 == 1;
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 46);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$i200 := $zext.i16.i32(out_$i199);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i16($M.0, out_$p198);
    goto corral_source_split_4352;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4351;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(out_$i192 == 1);
    goto $bb98;

  $bb100:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb98;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i59 := 5;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 27504);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i214 := $and.i32(out_$i213, 65520);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i213 := $zext.i16.i32(out_$i212);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i16($M.0, out_$p211);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4369;

  $bb110:
    assume out_$i210 == 1;
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 0);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i209 := $zext.i16.i32(out_$i208);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i16($M.0, out_$p207);
    goto corral_source_split_4364;

  $bb109:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4363;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb104:
    assume {:verifier.code 0} true;
    assume !(out_$i201 == 1);
    goto $bb105;

  $bb107:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb105;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i59 := 6;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 27536);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$i223 := $and.i32(out_$i222, 65520);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i222 := $zext.i16.i32(out_$i221);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i16($M.0, out_$p220);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4381;

  $bb117:
    assume out_$i219 == 1;
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_4378;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$i218 := $zext.i16.i32(out_$i217);
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i16($M.0, out_$p216);
    goto corral_source_split_4376;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4375;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i210 == 1);
    goto $bb112;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb112;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i59 := 7;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 62528);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i232 := $and.i32(out_$i231, 65520);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i231 := $zext.i16.i32(out_$i230);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i16($M.0, out_$p229);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4393;

  $bb124:
    assume out_$i228 == 1;
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 21);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i16.i32(out_$i226);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i16($M.0, out_$p225);
    goto corral_source_split_4388;

  $bb123:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4387;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i219 == 1);
    goto $bb119;

  $bb121:
    assume {:verifier.code 0} true;
    assume !(out_$i224 == 1);
    goto $bb119;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i59 := 8;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 48240);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i241 := $and.i32(out_$i240, 65520);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i16.i32(out_$i239);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i16($M.0, out_$p238);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4405;

  $bb131:
    assume out_$i237 == 1;
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 323);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i236 := $zext.i16.i32(out_$i235);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i16($M.0, out_$p234);
    goto corral_source_split_4400;

  $bb130:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4399;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i228 == 1);
    goto $bb126;

  $bb128:
    assume {:verifier.code 0} true;
    assume !(out_$i233 == 1);
    goto $bb126;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i59 := 9;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 23584);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i250 := $and.i32(out_$i249, 65520);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i249 := $zext.i16.i32(out_$i248);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i16($M.0, out_$p247);
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4417;

  $bb138:
    assume out_$i246 == 1;
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 8192);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i245 := $zext.i16.i32(out_$i244);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i16($M.0, out_$p243);
    goto corral_source_split_4412;

  $bb137:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4411;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb132:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb133;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb133;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$i59 := 10;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 23600);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i259 := $and.i32(out_$i258, 65520);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$i258 := $zext.i16.i32(out_$i257);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i16($M.0, out_$p256);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4429;

  $bb145:
    assume out_$i255 == 1;
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 8192);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i254 := $zext.i16.i32(out_$i253);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i16($M.0, out_$p252);
    goto corral_source_split_4424;

  $bb144:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4423;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb139:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb140;

  $bb142:
    assume {:verifier.code 0} true;
    assume !(out_$i251 == 1);
    goto $bb140;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$i59 := 11;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 33280);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i268 := $and.i32(out_$i267, 65520);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i267 := $zext.i16.i32(out_$i266);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$i266 := $load.i16($M.0, out_$p265);
    goto corral_source_split_4442;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4441;

  $bb152:
    assume out_$i264 == 1;
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 0);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i263 := $zext.i16.i32(out_$i262);
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i16($M.0, out_$p261);
    goto corral_source_split_4436;

  $bb151:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4435;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb146:
    assume {:verifier.code 0} true;
    assume !(out_$i255 == 1);
    goto $bb147;

  $bb149:
    assume {:verifier.code 0} true;
    assume !(out_$i260 == 1);
    goto $bb147;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i59 := 12;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 36640);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$i277 := $and.i32(out_$i276, 65520);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i276 := $zext.i16.i32(out_$i275);
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i275 := $load.i16($M.0, out_$p274);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_4453;

  $bb159:
    assume out_$i273 == 1;
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 257);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i272 := $zext.i16.i32(out_$i271);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i16($M.0, out_$p270);
    goto corral_source_split_4448;

  $bb158:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(out_$p23, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_4447;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i264 == 1);
    goto $bb154;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb154;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb160:
    assume {:verifier.code 0} true;
    assume !(out_$i273 == 1);
    goto $bb161;

  $bb163:
    assume {:verifier.code 0} true;
    assume !(out_$i278 == 1);
    goto $bb161;

  $bb47_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p79, out_$p80, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p90, out_$i21, out_$i91, out_$i92, out_$i9, out_$i170, out_$i12, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227 := sis900_mii_probe_loop_$bb1(in_$p0, in_$p2, in_$p5, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$i24, out_$i25, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$p64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p79, out_$p80, out_$i82, out_$i83, out_$p85, out_$i86, out_$i87, out_$i88, out_$p90, out_$i21, out_$i91, out_$i92, out_$i9, out_$i170, out_$i12, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i233, out_$p234, out_$i235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227);
    return;

  exit:
    return;
}



procedure sis900_mii_probe_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i10: i32, in_$i11: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i37: i32, in_$i38: i16, in_$p39: ref, in_$i40: i32, in_$i41: i16, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i16, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i8, in_$p64: ref, in_$i65: i64, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i8, in_$p76: ref, in_$i77: i64, in_$p79: ref, in_$p80: ref, in_$i82: i32, in_$i83: i64, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$p90: ref, in_$i21: i32, in_$i91: i32, in_$i92: i1, in_$i9: i32, in_$i170: i32, in_$i12: i16, in_$p171: ref, in_$i172: i16, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i16, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i16, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i16, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i16, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i16, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i16, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i16, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i16, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i16, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i16, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i16, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i16, in_$i231: i32, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i16, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i16, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i16, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i16, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i16, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i16, in_$i258: i32, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i16, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i16, in_$i267: i32, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i16, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i16, in_$i276: i32, in_$i277: i32, in_$i278: i1, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32) returns (out_$i10: i32, out_$i11: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i37: i32, out_$i38: i16, out_$p39: ref, out_$i40: i32, out_$i41: i16, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i16, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i8, out_$p64: ref, out_$i65: i64, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i8, out_$p76: ref, out_$i77: i64, out_$p79: ref, out_$p80: ref, out_$i82: i32, out_$i83: i64, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$p90: ref, out_$i21: i32, out_$i91: i32, out_$i92: i1, out_$i9: i32, out_$i170: i32, out_$i12: i16, out_$p171: ref, out_$i172: i16, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i16, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i16, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i16, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i16, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i16, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i16, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i16, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i16, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i16, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i16, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i16, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i16, out_$i231: i32, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i16, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i16, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i16, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i16, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i16, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i16, out_$i258: i32, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i16, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i16, out_$i267: i32, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i16, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i16, out_$i276: i32, out_$i277: i32, out_$i278: i1, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32);
  modifies $M.0, assertsPassed;



implementation sis900_default_phy_loop_$bb4(in_$p0: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p46: ref, in_$p47: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref) returns (out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p46: ref, out_$p47: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p46, out_$p47, out_$p30, out_$p31, out_$p32, out_$p33, out_$p53, out_$p54, out_$i55, out_$i56, out_$p10, out_$p11, out_$p12, out_$p13, out_$p57, out_$p58, out_$p59 := in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p46, in_$p47, in_$p30, in_$p31, in_$p32, in_$p33, in_$p53, in_$p54, in_$i55, in_$i56, in_$p10, in_$p11, in_$p12, in_$p13, in_$p57, in_$p58, in_$p59;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4506;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$p11, out_$p12, out_$p13 := out_$p33, out_$p32, out_$p54, out_$p31;
    goto $bb20_dummy;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$p57, out_$p58, out_$p59 := out_$p31, out_$p32, out_$p33;
    assume true;
    goto $bb20;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_4547;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p30, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4546;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4545;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p30, out_$p31, out_$p32, out_$p33 := out_$p12, out_$p46, out_$p11, out_$p47;
    goto $bb13;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$p30, out_$p31, out_$p32, out_$p33 := out_$p12, out_$p13, out_$p12, out_$p10;
    goto $bb13;

  $bb11:
    assume out_$i29 == 1;
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.0, out_$p26);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4538;

  $bb9:
    assume out_$i25 == 1;
    goto corral_source_split_4537;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_4520;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 4);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    call {:si_unique_call 932} {:cexpr "status"} boogie_si_record_i16(out_$i20);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_$i19 := mdio_read(in_$p0, out_$i18, 1);
    call {:si_unique_call 931} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i16 := mdio_read(in_$p0, out_$i15, 1);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_4509;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46, out_$p47 := out_$p13, out_$p52;
    goto $bb16;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$p46, out_$p47 := out_$p12, out_$p10;
    goto $bb16;

  $bb14:
    assume out_$i45 == 1;
    goto corral_source_split_4551;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} mdio_write(in_$p0, out_$i39, 0, out_$i41);
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    out_$i41 := $or.i32(out_$i40, 5120);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i37);
    goto corral_source_split_4529;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    call {:si_unique_call 935} {:cexpr "status"} boogie_si_record_i16(out_$i37);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} out_$i36 := mdio_read(in_$p0, out_$i35, 0);
    call {:si_unique_call 934} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_4524;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4523;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb8;

  $bb18:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$p52 := out_$p10;
    goto $bb19;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p12;
    goto $bb19;

  $bb17:
    assume out_$i51 == 1;
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 2);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p12, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4554;

  $bb15:
    assume !(out_$i45 == 1);
    goto corral_source_split_4553;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p46, out_$p47, out_$p30, out_$p31, out_$p32, out_$p33, out_$p53, out_$p54, out_$i55, out_$i56, out_$p10, out_$p11, out_$p12, out_$p13, out_$p57, out_$p58, out_$p59 := sis900_default_phy_loop_$bb4(in_$p0, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p46, out_$p47, out_$p30, out_$p31, out_$p32, out_$p33, out_$p53, out_$p54, out_$i55, out_$i56, out_$p10, out_$p11, out_$p12, out_$p13, out_$p57, out_$p58, out_$p59);
    return;

  exit:
    return;
}



procedure sis900_default_phy_loop_$bb4(in_$p0: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i16, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p46: ref, in_$p47: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref) returns (out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i16, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p46: ref, out_$p47: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref);



implementation sis900_start_xmit_loop_$bb8(in_$i66: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i72: i32, in_$i73: i32, in_$i77: i32, in_$i78: i32) returns (out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i72: i32, out_$i73: i32, out_$i77: i32, out_$i78: i32)
{

  entry:
    out_$i74, out_$i75, out_$i76, out_$i72, out_$i73, out_$i77, out_$i78 := in_$i74, in_$i75, in_$i76, in_$i72, in_$i73, in_$i77, in_$i78;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5958;

  $bb10:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i74, out_$i75;
    goto $bb10_dummy;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78 := out_$i75, out_$i74;
    assume true;
    goto $bb10;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(in_$i66, out_$i75);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i73, 1);
    call {:si_unique_call 1242} {:cexpr "index_dirty_tx"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_5961;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i72, 1);
    call {:si_unique_call 1241} {:cexpr "count_dirty_tx"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i74, out_$i75, out_$i76, out_$i72, out_$i73, out_$i77, out_$i78 := sis900_start_xmit_loop_$bb8(in_$i66, out_$i74, out_$i75, out_$i76, out_$i72, out_$i73, out_$i77, out_$i78);
    return;

  exit:
    return;
}



procedure sis900_start_xmit_loop_$bb8(in_$i66: i32, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i72: i32, in_$i73: i32, in_$i77: i32, in_$i78: i32) returns (out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i72: i32, out_$i73: i32, out_$i77: i32, out_$i78: i32);



implementation sis900_interrupt_loop_$bb4(in_$p2: ref, in_$p9: ref, in_$i16: i32, in_$i14: i32, in_$i15: i32, in_$i18: i32, in_$i19: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_vslice_dummy_var_307: i32) returns (out_$i16: i32, out_$i14: i32, out_$i15: i32, out_$i18: i32, out_$i19: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_vslice_dummy_var_307: i32)
{

  entry:
    out_$i16, out_$i14, out_$i15, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i43, out_$i44, out_$i45, out_vslice_dummy_var_307 := in_$i16, in_$i14, in_$i15, in_$i18, in_$i19, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i33, in_$i34, in_$i35, in_$i43, in_$i44, in_$i45, in_vslice_dummy_var_307;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb26:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i43, out_$i33;
    goto $bb26_dummy;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i16 := 1;
    assume true;
    goto $bb26;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i32(out_$i43, 34597);
    goto corral_source_split_6838;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} out_$i43 := ioread32(in_$p9);
    call {:si_unique_call 1339} {:cexpr "status"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_6837;

  $bb21:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i14;
    assume true;
    goto $bb21;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_6824;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i15, 1);
    call {:si_unique_call 1336} {:cexpr "boguscnt"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_6823;

  $bb15:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    assume true;
    goto $bb15;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_6810;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i14, 32768);
    goto corral_source_split_6809;

  $bb12:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} sis900_finish_xmit(in_$p2);
    goto corral_source_split_6807;

  $bb11:
    assume out_$i22 == 1;
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_6804;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i14, 1792);
    goto corral_source_split_6803;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_81:
    goto corral_source_split_6801;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} out_vslice_dummy_var_307 := sis900_rx(in_$p2);
    goto SeqInstr_80;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_6798;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i32(out_$i14, 37);
    goto corral_source_split_6797;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i16, out_$i14, out_$i15, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i43, out_$i44, out_$i45, out_vslice_dummy_var_307 := sis900_interrupt_loop_$bb4(in_$p2, in_$p9, out_$i16, out_$i14, out_$i15, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i43, out_$i44, out_$i45, out_vslice_dummy_var_307);
    return;

  exit:
    return;
}



procedure sis900_interrupt_loop_$bb4(in_$p2: ref, in_$p9: ref, in_$i16: i32, in_$i14: i32, in_$i15: i32, in_$i18: i32, in_$i19: i1, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_vslice_dummy_var_307: i32) returns (out_$i16: i32, out_$i14: i32, out_$i15: i32, out_$i18: i32, out_$i19: i1, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_vslice_dummy_var_307: i32);
  modifies $M.0, assertsPassed;



implementation sis900_rx_loop_$bb59(in_$p0: ref, in_$p2: ref, in_$p221: ref, in_$p223: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i64, in_$p231: ref, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p235: ref, in_$i236: i64, in_$i237: i1, in_$i244: i64, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$p251: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$p269: ref, in_$i270: i32, in_$i271: i64, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i64, in_$i276: i64, in_$i277: i1, in_$i278: i32, in_$p279: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i1) returns (out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i64, out_$p231: ref, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p235: ref, out_$i236: i64, out_$i237: i1, out_$i244: i64, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$p251: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$p269: ref, out_$i270: i32, out_$i271: i64, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i64, out_$i276: i64, out_$i277: i1, out_$i278: i32, out_$p279: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i1)
{

  entry:
    out_$p226, out_$i227, out_$i228, out_$i229, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i244, out_$p246, out_$p247, out_$p248, out_$i249, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$p262, out_$p263, out_$p264, out_$p265, out_$p266, out_$i267, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289 := in_$p226, in_$i227, in_$i228, in_$i229, in_$p231, in_$p232, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$i244, in_$p246, in_$p247, in_$p248, in_$i249, in_$p251, in_$p252, in_$p253, in_$p254, in_$p255, in_$i256, in_$i257, in_$p258, in_$p259, in_$i260, in_$p262, in_$p263, in_$p264, in_$p265, in_$p266, in_$i267, in_$p269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$p279, in_$p283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb71:
    assume {:verifier.code 0} true;
    assume out_$i289 == 1;
    goto $bb71_dummy;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    out_$i289 := $ne.i32(out_$i287, out_$i288);
    goto corral_source_split_7208;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i32($M.0, in_$p223);
    goto corral_source_split_7207;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.0, in_$p221);
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p286, out_$i285);
    goto corral_source_split_7205;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7204;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    out_$i285 := $add.i32(out_$i284, 1);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, out_$p283);
    goto corral_source_split_7202;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7201;

  $bb62:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i278, out_$p279 := out_$i228, out_$p235;
    assume true;
    goto $bb68;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    out_$i277 := $ne.i64(out_$i276, 0);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} out_$i276 := ldv__builtin_expect(out_$i275, 0);
    call {:si_unique_call 1383} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i276);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i274);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$i274 := $zext.i1.i32(out_$i273);
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$i273 := $ne.i32(out_$i272, 0);
    goto corral_source_split_7189;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} out_$i272 := pci_dma_mapping_error(out_$p264, out_$i271);
    call {:si_unique_call 1381} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i272);
    goto corral_source_split_7188;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    out_$i271 := $zext.i32.i64(out_$i270);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i270 := $load.i32($M.0, out_$p269);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref(out_$p266, $mul.ref(out_$i267, 12)), $mul.ref(8, 1));
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i267 := $zext.i32.i64(out_$i228);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$p266 := $load.ref($M.0, out_$p265);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$p264 := $load.ref($M.0, out_$p263);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p262, out_$i257);
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(out_$p259, $mul.ref(out_$i260, 12)), $mul.ref(8, 1));
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i32.i64(out_$i228);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.0, out_$p258);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    out_$i257 := $trunc.i64.i32(out_$i256);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} out_$i256 := pci_map_single(out_$p253, out_$p255, 1540, 2);
    call {:si_unique_call 1379} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i256);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$p255 := $load.ref($M.0, out_$p254);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(out_$p235, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$p253 := $load.ref($M.0, out_$p252);
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p251, 1540);
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p248, $mul.ref(out_$i249, 12)), $mul.ref(4, 1));
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$i249 := $zext.i32.i64(out_$i228);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$p248 := $load.ref($M.0, out_$p247);
    goto corral_source_split_7162;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p246, out_$p235);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i244, 8));
    goto corral_source_split_7159;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i244 := $zext.i32.i64(out_$i228);
    goto corral_source_split_7158;

  $bb64:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i64(out_$i236, 0);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i236 := $p2i.ref.i64(out_$p235);
    goto corral_source_split_7144;

  SeqInstr_87:
    goto corral_source_split_7143;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} out_$p235 := netdev_alloc_skb(in_$p0, 1540);
    goto SeqInstr_86;

  $bb61:
    assume out_$i234 == 1;
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i64(out_$i233, 0);
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i233 := $p2i.ref.i64(out_$p232);
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$p232 := $load.ref($M.0, out_$p231);
    goto corral_source_split_7138;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i229, 8));
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i32.i64(out_$i228);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$i228 := $and.i32(out_$i227, 15);
    call {:si_unique_call 1373} {:cexpr "entry"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, out_$p226);
    goto corral_source_split_7134;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7133;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p226, out_$i227, out_$i228, out_$i229, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i244, out_$p246, out_$p247, out_$p248, out_$i249, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$p262, out_$p263, out_$p264, out_$p265, out_$p266, out_$i267, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289 := sis900_rx_loop_$bb59(in_$p0, in_$p2, in_$p221, in_$p223, out_$p226, out_$i227, out_$i228, out_$i229, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i244, out_$p246, out_$p247, out_$p248, out_$i249, out_$p251, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$i257, out_$p258, out_$p259, out_$i260, out_$p262, out_$p263, out_$p264, out_$p265, out_$p266, out_$i267, out_$p269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289);
    return;

  exit:
    return;
}



procedure sis900_rx_loop_$bb59(in_$p0: ref, in_$p2: ref, in_$p221: ref, in_$p223: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i64, in_$p231: ref, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p235: ref, in_$i236: i64, in_$i237: i1, in_$i244: i64, in_$p246: ref, in_$p247: ref, in_$p248: ref, in_$i249: i64, in_$p251: ref, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$i260: i64, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$p269: ref, in_$i270: i32, in_$i271: i64, in_$i272: i32, in_$i273: i1, in_$i274: i32, in_$i275: i64, in_$i276: i64, in_$i277: i1, in_$i278: i32, in_$p279: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i1) returns (out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i64, out_$p231: ref, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p235: ref, out_$i236: i64, out_$i237: i1, out_$i244: i64, out_$p246: ref, out_$p247: ref, out_$p248: ref, out_$i249: i64, out_$p251: ref, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$i260: i64, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$p269: ref, out_$i270: i32, out_$i271: i64, out_$i272: i32, out_$i273: i1, out_$i274: i32, out_$i275: i64, out_$i276: i64, out_$i277: i1, out_$i278: i32, out_$p279: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i1);
  modifies $M.0, assertsPassed;



implementation sis900_rx_loop_$bb7(in_$p0: ref, in_$p2: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$i106: i64, in_$p108: ref, in_$p109: ref, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$i117: i64, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i135: i64, in_$p137: ref, in_$p138: ref, in_$i140: i16, in_$p141: ref, in_$i143: i32, in_$i144: i1, in_$p146: ref, in_$i147: i64, in_$i148: i64, in_$p150: ref, in_$p152: ref, in_$i153: i64, in_$i154: i64, in_$i155: i64, in_$p157: ref, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p167: ref, in_$p116: ref, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$i181: i32, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$p193: ref, in_$i194: i32, in_$i195: i64, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i64, in_$i200: i64, in_$i201: i1, in_$i202: i32, in_$p203: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$i216: i64, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_314: ref, in_vslice_dummy_var_315: i32) returns (out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$i106: i64, out_$p108: ref, out_$p109: ref, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$i117: i64, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i135: i64, out_$p137: ref, out_$p138: ref, out_$i140: i16, out_$p141: ref, out_$i143: i32, out_$i144: i1, out_$p146: ref, out_$i147: i64, out_$i148: i64, out_$p150: ref, out_$p152: ref, out_$i153: i64, out_$i154: i64, out_$i155: i64, out_$p157: ref, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$p167: ref, out_$p116: ref, out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$i181: i32, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$p193: ref, out_$i194: i32, out_$i195: i64, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i64, out_$i200: i64, out_$i201: i1, out_$i202: i32, out_$p203: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$i216: i64, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_314: ref, out_vslice_dummy_var_315: i32)
{

  entry:
    out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p111, out_$i112, out_$i113, out_$p115, out_$i117, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i135, out_$p137, out_$p138, out_$i140, out_$p141, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p159, out_$i160, out_$i161, out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p116, out_$i168, out_$p170, out_$p171, out_$p172, out_$i173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$p218, out_$i219, out_$i220, out_$i30, out_$i31, out_$i32, out_vslice_dummy_var_312, out_vslice_dummy_var_314, out_vslice_dummy_var_315 := in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p52, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$p60, in_$i61, in_$i62, in_$p64, in_$i65, in_$i66, in_$p68, in_$i69, in_$i70, in_$p72, in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$p80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$p88, in_$p89, in_$p90, in_$i91, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p108, in_$p109, in_$p111, in_$i112, in_$i113, in_$p115, in_$i117, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i135, in_$p137, in_$p138, in_$i140, in_$p141, in_$i143, in_$i144, in_$p146, in_$i147, in_$i148, in_$p150, in_$p152, in_$i153, in_$i154, in_$i155, in_$p157, in_$p159, in_$i160, in_$i161, in_$p163, in_$p164, in_$i165, in_$i166, in_$p167, in_$p116, in_$i168, in_$p170, in_$p171, in_$p172, in_$i173, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$p186, in_$p187, in_$p188, in_$p189, in_$p190, in_$i191, in_$p193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$p203, in_$p207, in_$i208, in_$i209, in_$p210, in_$p211, in_$i212, in_$i213, in_$p214, in_$p215, in_$i216, in_$p218, in_$i219, in_$i220, in_$i30, in_$i31, in_$i32, in_vslice_dummy_var_312, in_vslice_dummy_var_314, in_vslice_dummy_var_315;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6895;

  $bb53:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$i30, out_$i31, out_$i32 := out_$i33, out_$i219, out_$i213;
    goto $bb53_dummy;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i220 := $slt.i32(out_$i219, 0);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i32($M.0, out_$p218);
    call {:si_unique_call 1360} {:cexpr "rx_status"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p215, $mul.ref(out_$i216, 12)), $mul.ref(4, 1));
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i32.i64(out_$i213);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$p215 := $load.ref($M.0, out_$p214);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i213 := $and.i32(out_$i212, 15);
    call {:si_unique_call 1359} {:cexpr "entry"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.0, out_$p211);
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7006;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p210, out_$i209);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$i209 := $add.i32(out_$i208, 1);
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.0, out_$p207);
    goto corral_source_split_7002;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_7001;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p93, 1540);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p90, $mul.ref(out_$i91, 12)), $mul.ref(4, 1));
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i32.i64(out_$i32);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_6995;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_6994;

  $bb34:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p88, out_$i86);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 1);
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6988;

  $bb33:
    assume out_$i82 == 1;
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i81, 0);
    goto corral_source_split_6985;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i81 := $and.i32(out_$i41, 524288);
    goto corral_source_split_6984;

  $bb31:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p80, out_$i78);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 1);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_6979;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6978;

  $bb30:
    assume out_$i74 == 1;
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_6975;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i41, 1310720);
    goto corral_source_split_6974;

  $bb28:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p72, out_$i70);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i64(out_$i69, 1);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i64($M.0, out_$p68);
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6968;

  $bb27:
    assume out_$i66 == 1;
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6965;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i41, 6291456);
    goto corral_source_split_6964;

  $bb25:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p64, out_$i62);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 1);
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.0, out_$p60);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6958;

  $bb24:
    assume out_$i58 == 1;
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i41, 33554432);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i54);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 1);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_6950;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6949;

  $bb22:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} out_vslice_dummy_var_312 := printk.ref.ref.i32.i32(.str.4, out_$p49, out_$i41, out_$i35);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  $bb21:
    assume out_$i47 == 1;
    goto corral_source_split_6944;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i45, 64);
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_6924;

  $bb19:
    assume out_$i43 == 1;
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 108789760);
    goto corral_source_split_6920;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6919;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i31;
    goto $bb18;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb18;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i31, $sub.i32(0, 4194305));
    call {:si_unique_call 1355} {:cexpr "rx_status"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_6917;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i32(out_$i35, 1522);
    goto corral_source_split_6914;

  $bb13:
    assume out_$i38 == 1;
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i31, 4194304);
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i35, 4);
    call {:si_unique_call 1354} {:cexpr "rx_size"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_6909;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i31, 4095);
    call {:si_unique_call 1353} {:cexpr "data_size"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6908;

  $bb10:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_6898;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i30, 1);
    call {:si_unique_call 1352} {:cexpr "rx_work_limit"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb15;

  $bb51:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$i202, out_$p203 := out_$i32, out_$p116;
    assume true;
    goto $bb51;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    out_$i201 := $ne.i64(out_$i200, 0);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} out_$i200 := ldv__builtin_expect(out_$i199, 0);
    call {:si_unique_call 1366} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i200);
    goto corral_source_split_7062;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i199 := $sext.i32.i64(out_$i198);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i1.i32(out_$i197);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} out_$i196 := pci_dma_mapping_error(out_$p188, out_$i195);
    call {:si_unique_call 1364} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i32.i64(out_$i194);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i32($M.0, out_$p193);
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p190, $mul.ref(out_$i191, 12)), $mul.ref(8, 1));
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, out_$p189);
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$p188 := $load.ref($M.0, out_$p187);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p186, out_$i181);
    goto corral_source_split_7048;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(out_$p183, $mul.ref(out_$i184, 12)), $mul.ref(8, 1));
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$i184 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$p183 := $load.ref($M.0, out_$p182);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i181 := $trunc.i64.i32(out_$i180);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} out_$i180 := pci_map_single(out_$p177, out_$p179, 1540, 2);
    call {:si_unique_call 1362} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i180);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p179 := $load.ref($M.0, out_$p178);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p116, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.0, out_$p176);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p175, 1540);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p172, $mul.ref(out_$i173, 12)), $mul.ref(4, 1));
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, out_$p171);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p170, out_$p116);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i168, 8));
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7028;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7027;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$p116 := out_$p103;
    goto $bb39;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$p116 := out_$p109;
    goto $bb39;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p115, out_$i113);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i64(out_$i112, 1);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i64($M.0, out_$p111);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i106, 8));
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7018;

  $bb37:
    assume out_$i105 == 1;
    goto corral_source_split_7017;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i64(out_$i104, 0);
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i104 := $p2i.ref.i64(out_$p103);
    goto corral_source_split_6941;

  SeqInstr_84:
    goto corral_source_split_6940;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} out_$p103 := netdev_alloc_skb(in_$p0, 1540);
    goto SeqInstr_83;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} pci_unmap_single(out_$p95, out_$i102, 1540, 2);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i32.i64(out_$i101);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p97, $mul.ref(out_$i98, 12)), $mul.ref(8, 1));
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i32.i64(out_$i32);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_6930;

  $bb20:
    assume !(out_$i43 == 1);
    goto corral_source_split_6929;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p167, out_$i166);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i165, 1);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_7118;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p163, out_$i161);
    goto corral_source_split_7116;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i161 := $add.i64(out_$i160, 1);
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i64($M.0, out_$p159);
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_7112;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p157, out_$i155);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_7110;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$i155 := $add.i64(out_$i153, out_$i154);
    goto corral_source_split_7109;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i32.i64(out_$i36);
    goto corral_source_split_7108;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i64($M.0, out_$p152);
    goto corral_source_split_7107;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_7106;

  $bb48:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p150, out_$i148);
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$i148 := $add.i64(out_$i147, 1);
    goto corral_source_split_7102;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i64($M.0, out_$p146);
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(64, 1));
    goto corral_source_split_7100;

  $bb47:
    assume out_$i144 == 1;
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 16777216);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$i143 := $and.i32(out_$i41, 25165824);
    goto corral_source_split_7096;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} out_vslice_dummy_var_315 := netif_rx(out_$p138);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p141, out_$i140);
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p138, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_$i140 := eth_type_trans(out_$p138, in_$p0);
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} out_vslice_dummy_var_314 := skb_put(out_$p138, out_$i36);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i135, 8));
    goto corral_source_split_7089;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7088;

  $bb42:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$p123 := out_$p103;
    assume true;
    goto $bb42;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i64(out_$i121, 0);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(440, 1)), $mul.ref(out_$i117, 8));
    goto corral_source_split_7066;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i32.i64(out_$i32);
    goto corral_source_split_7065;

  $bb38:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p111, out_$i112, out_$i113, out_$p115, out_$i117, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i135, out_$p137, out_$p138, out_$i140, out_$p141, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p159, out_$i160, out_$i161, out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p116, out_$i168, out_$p170, out_$p171, out_$p172, out_$i173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$p218, out_$i219, out_$i220, out_$i30, out_$i31, out_$i32, out_vslice_dummy_var_312, out_vslice_dummy_var_314, out_vslice_dummy_var_315 := sis900_rx_loop_$bb7(in_$p0, in_$p2, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p111, out_$i112, out_$i113, out_$p115, out_$i117, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i135, out_$p137, out_$p138, out_$i140, out_$p141, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$p150, out_$p152, out_$i153, out_$i154, out_$i155, out_$p157, out_$p159, out_$i160, out_$i161, out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p116, out_$i168, out_$p170, out_$p171, out_$p172, out_$i173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$i191, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$p218, out_$i219, out_$i220, out_$i30, out_$i31, out_$i32, out_vslice_dummy_var_312, out_vslice_dummy_var_314, out_vslice_dummy_var_315);
    return;

  exit:
    return;
}



procedure sis900_rx_loop_$bb7(in_$p0: ref, in_$p2: ref, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$i73: i32, in_$i74: i1, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$i106: i64, in_$p108: ref, in_$p109: ref, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$i117: i64, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i135: i64, in_$p137: ref, in_$p138: ref, in_$i140: i16, in_$p141: ref, in_$i143: i32, in_$i144: i1, in_$p146: ref, in_$i147: i64, in_$i148: i64, in_$p150: ref, in_$p152: ref, in_$i153: i64, in_$i154: i64, in_$i155: i64, in_$p157: ref, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p167: ref, in_$p116: ref, in_$i168: i64, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i64, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$i181: i32, in_$p182: ref, in_$p183: ref, in_$i184: i64, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$p193: ref, in_$i194: i32, in_$i195: i64, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i64, in_$i200: i64, in_$i201: i1, in_$i202: i32, in_$p203: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$i216: i64, in_$p218: ref, in_$i219: i32, in_$i220: i1, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_314: ref, in_vslice_dummy_var_315: i32) returns (out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$i73: i32, out_$i74: i1, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$i106: i64, out_$p108: ref, out_$p109: ref, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$i117: i64, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i135: i64, out_$p137: ref, out_$p138: ref, out_$i140: i16, out_$p141: ref, out_$i143: i32, out_$i144: i1, out_$p146: ref, out_$i147: i64, out_$i148: i64, out_$p150: ref, out_$p152: ref, out_$i153: i64, out_$i154: i64, out_$i155: i64, out_$p157: ref, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$p167: ref, out_$p116: ref, out_$i168: i64, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i64, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$i181: i32, out_$p182: ref, out_$p183: ref, out_$i184: i64, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$p193: ref, out_$i194: i32, out_$i195: i64, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i64, out_$i200: i64, out_$i201: i1, out_$i202: i32, out_$p203: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$i216: i64, out_$p218: ref, out_$i219: i32, out_$i220: i1, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_314: ref, out_vslice_dummy_var_315: i32);
  modifies $M.0, assertsPassed;



implementation sis900_finish_xmit_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p64: ref, in_$p66: ref, in_$i67: i64, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p73: ref, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$i78: i64, in_$i79: i64, in_$p81: ref, in_$p83: ref, in_$i84: i64, in_$i85: i64, in_$p87: ref, in_$i88: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_vslice_dummy_var_316: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p64: ref, out_$p66: ref, out_$i67: i64, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p73: ref, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$i78: i64, out_$i79: i64, out_$p81: ref, out_$p83: ref, out_$i84: i64, out_$i85: i64, out_$p87: ref, out_$i88: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_vslice_dummy_var_316: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p73, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$p87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_vslice_dummy_var_316 := in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$p52, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$p60, in_$i61, in_$i62, in_$p64, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p73, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p81, in_$p83, in_$i84, in_$i85, in_$p87, in_$i88, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$p98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$p106, in_$p107, in_$p108, in_$i109, in_$p111, in_$p112, in_$p113, in_$i114, in_$p116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$i123, in_vslice_dummy_var_316;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i123 == 1;
    goto $bb28_dummy;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i121, out_$i122);
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7358;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, in_$p3);
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p120, out_$i119);
    goto corral_source_split_7356;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i118, 1);
    goto corral_source_split_7354;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p117);
    goto corral_source_split_7353;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p116, 0);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p113, $mul.ref(out_$i114, 12)), $mul.ref(4, 1));
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, 0);
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p108, $mul.ref(out_$i109, 12)), $mul.ref(8, 1));
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_7341;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, $0.ref);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(out_$i104, 8));
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} dev_kfree_skb_irq(out_$p91);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} pci_unmap_single(out_$p93, out_$i100, out_$i103, 1);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i32.i64(out_$i102);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, out_$p101);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p91, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i32.i64(out_$i99);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.0, out_$p98);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p95, $mul.ref(out_$i96, 12)), $mul.ref(8, 1));
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(312, 1)), $mul.ref(out_$i88, 8));
    goto corral_source_split_7321;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7320;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p87, out_$i85);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p64, out_$i62);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(160, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i61, 1);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.0, out_$p60);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(160, 1));
    goto corral_source_split_7314;

  $bb24:
    assume out_$i58 == 1;
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_7311;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i16, 2097152);
    goto corral_source_split_7310;

  $bb22:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, out_$i54);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 1);
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(136, 1));
    goto corral_source_split_7304;

  $bb21:
    assume out_$i50 == 1;
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_7301;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i16, 16777216);
    goto corral_source_split_7300;

  $bb19:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p48, out_$i46);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i45, 1);
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(128, 1));
    goto corral_source_split_7294;

  $bb18:
    assume out_$i42 == 1;
    goto corral_source_split_7293;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7291;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i16, 67108864);
    goto corral_source_split_7290;

  $bb16:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p40, out_$i38);
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, 1);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_7285;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_7284;

  $bb15:
    assume out_$i34 == 1;
    goto corral_source_split_7283;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i16, 33554432);
    goto corral_source_split_7280;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p32, out_$i30);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 1);
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_7276;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_7275;

  $bb13:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} out_vslice_dummy_var_316 := printk.ref.ref.i32(.str.7, out_$p25, out_$i16);
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_7271;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_7270;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_7247;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 128);
    goto corral_source_split_7246;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_7244;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_7243;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_7241;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i32(out_$i16, 102760448);
    goto corral_source_split_7240;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 0);
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    call {:si_unique_call 1387} {:cexpr "tx_status"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 12)), $mul.ref(4, 1));
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i10);
    goto corral_source_split_7228;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_7227;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(568, 1));
    goto corral_source_split_7226;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i32(out_$i9, 15);
    call {:si_unique_call 1386} {:cexpr "entry"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_7224;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 608)), $mul.ref(308, 1));
    goto corral_source_split_7223;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i64(out_$i84, 1);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i64($M.0, out_$p83);
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_7265;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p81, out_$i79);
    goto corral_source_split_7264;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i64(out_$i76, out_$i78);
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i64(out_$i77, 4095);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i32.i64(out_$i16);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i64($M.0, out_$p75);
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p73, out_$i71);
    goto corral_source_split_7257;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_7256;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i67, out_$i70);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i69);
    goto corral_source_split_7254;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i69 := $lshr.i32(out_$i68, 16);
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i16, 983040);
    goto corral_source_split_7252;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(72, 1));
    goto corral_source_split_7250;

  $bb11:
    assume !(out_$i19 == 1);
    goto corral_source_split_7249;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p73, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$p87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_vslice_dummy_var_316 := sis900_finish_xmit_loop_$bb4(in_$p0, in_$p2, in_$p3, in_$p5, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$i62, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p73, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$p83, out_$i84, out_$i85, out_$p87, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p106, out_$p107, out_$p108, out_$i109, out_$p111, out_$p112, out_$p113, out_$i114, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$i123, out_vslice_dummy_var_316);
    return;

  exit:
    return;
}



procedure sis900_finish_xmit_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p60: ref, in_$i61: i64, in_$i62: i64, in_$p64: ref, in_$p66: ref, in_$i67: i64, in_$i68: i32, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p73: ref, in_$p75: ref, in_$i76: i64, in_$i77: i64, in_$i78: i64, in_$i79: i64, in_$p81: ref, in_$p83: ref, in_$i84: i64, in_$i85: i64, in_$p87: ref, in_$i88: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_vslice_dummy_var_316: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p60: ref, out_$i61: i64, out_$i62: i64, out_$p64: ref, out_$p66: ref, out_$i67: i64, out_$i68: i32, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p73: ref, out_$p75: ref, out_$i76: i64, out_$i77: i64, out_$i78: i64, out_$i79: i64, out_$p81: ref, out_$p83: ref, out_$i84: i64, out_$i85: i64, out_$p87: ref, out_$i88: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_vslice_dummy_var_316: i32);
  modifies $M.0;



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation sis900_reset_loop_$bb1(in_$p4: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i10: i32, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i10: i32, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i10, out_$i11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i10, in_$i11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7570;

  $bb3:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i16, out_$i15;
    goto $bb3_dummy;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i1(out_$i17, out_$i18);
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i18 := $sle.i32(out_$i16, 999);
    goto corral_source_split_7578;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i15, 0);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1467} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i32(out_$i14, out_$i11);
    call {:si_unique_call 1466} {:cexpr "status"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i14 := $xor.i32(out_$i13, $sub.i32(0, 1));
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} out_$i13 := ioread32(out_$p12);
    call {:si_unique_call 1465} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7573;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(in_$p4, $mul.ref(16, 1));
    goto corral_source_split_7572;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i10, out_$i11 := sis900_reset_loop_$bb1(in_$p4, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i10, out_$i11);
    return;

  exit:
    return;
}



procedure sis900_reset_loop_$bb1(in_$p4: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i10: i32, in_$i11: i32) returns (out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i10: i32, out_$i11: i32);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i184: i32, in_$i185: i1, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i1, in_$i319: i32, in_$i320: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32, in_vslice_dummy_var_343: i32, in_vslice_dummy_var_344: i32, in_vslice_dummy_var_345: i32, in_vslice_dummy_var_346: i32, in_vslice_dummy_var_347: i32, in_vslice_dummy_var_348: i32, in_vslice_dummy_var_349: i32, in_vslice_dummy_var_350: i32, in_vslice_dummy_var_351: i32, in_vslice_dummy_var_352: i32, in_vslice_dummy_var_353: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32, in_vslice_dummy_var_359: i32, in_vslice_dummy_var_360: i32, in_vslice_dummy_var_361: i32) returns (out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i184: i32, out_$i185: i1, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i1, out_$i319: i32, out_$i320: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32, out_vslice_dummy_var_343: i32, out_vslice_dummy_var_344: i32, out_vslice_dummy_var_345: i32, out_vslice_dummy_var_346: i32, out_vslice_dummy_var_347: i32, out_vslice_dummy_var_348: i32, out_vslice_dummy_var_349: i32, out_vslice_dummy_var_350: i32, out_vslice_dummy_var_351: i32, out_vslice_dummy_var_352: i32, out_vslice_dummy_var_353: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32, out_vslice_dummy_var_359: i32, out_vslice_dummy_var_360: i32, out_vslice_dummy_var_361: i32)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i232, out_$i233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i319, out_$i320, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343, out_vslice_dummy_var_344, out_vslice_dummy_var_345, out_vslice_dummy_var_346, out_vslice_dummy_var_347, out_vslice_dummy_var_348, out_vslice_dummy_var_349, out_vslice_dummy_var_350, out_vslice_dummy_var_351, out_vslice_dummy_var_352, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361 := in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i66, in_$i67, in_$p68, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i78, in_$i79, in_$p80, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i178, in_$i179, in_$i181, in_$i182, in_$i184, in_$i185, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p209, in_$i211, in_$i212, in_$p213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$p222, in_$i224, in_$i225, in_$p226, in_$i228, in_$i229, in_$p230, in_$i232, in_$i233, in_$p234, in_$i236, in_$i237, in_$p238, in_$i240, in_$i241, in_$p242, in_$i244, in_$i245, in_$p246, in_$i247, in_$i249, in_$i250, in_$p251, in_$i252, in_$i254, in_$i255, in_$p256, in_$i257, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$p270, in_$i271, in_$i273, in_$i274, in_$p275, in_$i276, in_$i278, in_$i279, in_$p280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i288, in_$i289, in_$p290, in_$i292, in_$i293, in_$p294, in_$i296, in_$i297, in_$p298, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i306, in_$i307, in_$p308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i319, in_$i320, in_vslice_dummy_var_335, in_vslice_dummy_var_336, in_vslice_dummy_var_337, in_vslice_dummy_var_338, in_vslice_dummy_var_339, in_vslice_dummy_var_340, in_vslice_dummy_var_341, in_vslice_dummy_var_342, in_vslice_dummy_var_343, in_vslice_dummy_var_344, in_vslice_dummy_var_345, in_vslice_dummy_var_346, in_vslice_dummy_var_347, in_vslice_dummy_var_348, in_vslice_dummy_var_349, in_vslice_dummy_var_350, in_vslice_dummy_var_351, in_vslice_dummy_var_352, in_vslice_dummy_var_353, in_vslice_dummy_var_354, in_vslice_dummy_var_355, in_vslice_dummy_var_356, in_vslice_dummy_var_357, in_vslice_dummy_var_358, in_vslice_dummy_var_359, in_vslice_dummy_var_360, in_vslice_dummy_var_361;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1709} out_$i23 := __VERIFIER_nondet_int();
    call {:si_unique_call 1710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i23);
    call {:si_unique_call 1711} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i23);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb19:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} out_vslice_dummy_var_335 := sis900_get_settings(out_$p46, out_$p47);
    goto corral_source_split_8803;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    out_$p47 := $M.36;
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    out_$p46 := $M.35;
    goto corral_source_split_8801;

  $bb42:
    assume out_$i45 == 1;
    goto corral_source_split_8800;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$i44 := $M.38;
    goto corral_source_split_8797;

  $bb40:
    assume out_$i43 == 1;
    goto corral_source_split_8796;

  $bb38:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb21:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_8762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 1714} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i32 == 1;
    goto corral_source_split_8762;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_8760;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    out_$i31 := $M.38;
    goto corral_source_split_8759;

  $bb16:
    assume out_$i30 == 1;
    goto corral_source_split_8758;

  $bb12:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i23, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i23, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} sis900_get_drvinfo(out_$p51, in_$p5);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$p51 := $M.35;
    goto corral_source_split_8807;

  $bb46:
    assume out_$i50 == 1;
    goto corral_source_split_8806;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    out_$i49 := $M.38;
    goto corral_source_split_8793;

  $bb39:
    assume !(out_$i42 == 1);
    goto corral_source_split_8792;

  $bb50:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8815;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_vslice_dummy_var_336 := sis900_set_wol(out_$p54, out_$p55);
    goto corral_source_split_8814;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    out_$p55 := $M.37;
    goto corral_source_split_8813;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    out_$p54 := $M.35;
    goto corral_source_split_8812;

  $bb49:
    assume out_$i53 == 1;
    goto corral_source_split_8811;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_8786;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    out_$i52 := $M.38;
    goto corral_source_split_8785;

  $bb36:
    assume out_$i41 == 1;
    goto corral_source_split_8784;

  $bb35:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb53:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8821;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} sis900_set_msglevel(out_$p59, out_$i60);
    goto corral_source_split_8820;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.32, in_$p0);
    goto corral_source_split_8819;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    out_$p59 := $M.35;
    goto corral_source_split_8818;

  $bb52:
    assume out_$i58 == 1;
    goto corral_source_split_8817;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$i57 := $M.38;
    goto corral_source_split_8789;

  $bb37:
    assume !(out_$i41 == 1);
    goto corral_source_split_8788;

  $bb56:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8827;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} out_vslice_dummy_var_337 := sis900_set_settings(out_$p63, out_$p64);
    goto corral_source_split_8826;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    out_$p64 := $M.36;
    goto corral_source_split_8825;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    out_$p63 := $M.35;
    goto corral_source_split_8824;

  $bb55:
    assume out_$i62 == 1;
    goto corral_source_split_8823;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_8778;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    out_$i61 := $M.38;
    goto corral_source_split_8777;

  $bb32:
    assume out_$i39 == 1;
    goto corral_source_split_8776;

  $bb23:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i33, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb59:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8832;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} out_vslice_dummy_var_338 := sis900_nway_reset(out_$p68);
    goto corral_source_split_8831;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    out_$p68 := $M.35;
    goto corral_source_split_8830;

  $bb58:
    assume out_$i67 == 1;
    goto corral_source_split_8829;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 1);
    goto corral_source_split_8782;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    out_$i66 := $M.38;
    goto corral_source_split_8781;

  $bb33:
    assume !(out_$i39 == 1);
    goto corral_source_split_8780;

  $bb62:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} sis900_get_wol(out_$p72, out_$p73);
    goto corral_source_split_8837;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    out_$p73 := $M.37;
    goto corral_source_split_8836;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    out_$p72 := $M.35;
    goto corral_source_split_8835;

  $bb61:
    assume out_$i71 == 1;
    goto corral_source_split_8834;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_8766;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    out_$i70 := $M.38;
    goto corral_source_split_8765;

  $bb25:
    assume out_$i36 == 1;
    goto corral_source_split_8764;

  $bb24:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i33, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb65:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8843;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} out_vslice_dummy_var_339 := sis900_get_msglevel(out_$p76);
    goto corral_source_split_8842;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    out_$p76 := $M.35;
    goto corral_source_split_8841;

  $bb64:
    assume out_$i75 == 1;
    goto corral_source_split_8840;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_8770;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    out_$i74 := $M.38;
    goto corral_source_split_8769;

  $bb27:
    assume out_$i37 == 1;
    goto corral_source_split_8768;

  $bb26:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb68:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8848;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} out_vslice_dummy_var_340 := sis900_get_link(out_$p80);
    goto corral_source_split_8847;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    out_$p80 := $M.35;
    goto corral_source_split_8846;

  $bb67:
    assume out_$i79 == 1;
    goto corral_source_split_8845;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_8774;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    out_$i78 := $M.38;
    goto corral_source_split_8773;

  $bb29:
    assume out_$i38 == 1;
    goto corral_source_split_8772;

  $bb28:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_stop();
    goto corral_source_split_8850;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb31;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb31;

  $bb75:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_105:
    goto corral_source_split_8853;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} choose_interrupt_1();
    goto SeqInstr_104;

  $bb74:
    assume out_$i83 == 1;
    goto corral_source_split_8852;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_8752;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    out_$i82 := $M.39;
    goto corral_source_split_8751;

  $bb14:
    assume out_$i29 == 1;
    goto corral_source_split_8750;

  $bb13:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i23, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb78:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb89;

  $bb91:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb89;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_8867;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i92 := $M.40;
    goto corral_source_split_8866;

  $bb87:
    assume out_$i91 == 1;
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 3);
    goto corral_source_split_8863;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    out_$i90 := $M.41;
    goto corral_source_split_8862;

  $bb85:
    assume out_$i89 == 1;
    goto corral_source_split_8861;

  $bb80:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i86, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_8855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} out_$i86 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i86);
    call {:si_unique_call 1737} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i86);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume out_$i85 == 1;
    goto corral_source_split_8855;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    out_$i84 := $M.41;
    goto corral_source_split_8755;

  $bb15:
    assume !(out_$i29 == 1);
    goto corral_source_split_8754;

  $bb96:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb101:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, 0);
    goto corral_source_split_8887;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i99 := $M.44;
    goto corral_source_split_8886;

  $bb98:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8882;

  $bb97:
    assume out_$i98 == 1;
    goto corral_source_split_8881;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_8879;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    out_$i97 := $M.44;
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.44 := out_$i96;
    call {:si_unique_call 1742} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_$i96 := sis900_init_module();
    goto corral_source_split_8876;

  $bb95:
    assume out_$i95 == 1;
    goto corral_source_split_8875;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_8859;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    out_$i94 := $M.41;
    goto corral_source_split_8858;

  $bb82:
    assume out_$i88 == 1;
    goto corral_source_split_8857;

  $bb81:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_stop();
    goto corral_source_split_8892;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb84;

  $bb108:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.40 := out_$i119;
    call {:si_unique_call 1754} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i118, 1);
    goto corral_source_split_8934;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$i118 := $M.40;
    goto corral_source_split_8933;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8932;

  $bb129:
    assume out_$i117 == 1;
    goto corral_source_split_8931;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 0);
    goto corral_source_split_8929;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$i116 := $M.45;
    goto corral_source_split_8928;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.45 := out_$i115;
    call {:si_unique_call 1752} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_8927;

  SeqInstr_108:
    goto corral_source_split_8926;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} out_$i115 := sis900_probe(out_$p114, in_$p7);
    goto SeqInstr_107;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$p114 := $M.34;
    goto corral_source_split_8925;

  $bb127:
    assume out_$i113 == 1;
    goto corral_source_split_8924;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_8922;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    out_$i112 := $M.42;
    goto corral_source_split_8921;

  $bb125:
    assume out_$i111 == 1;
    goto corral_source_split_8920;

  $bb121:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i103, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb110:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i103, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_8894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} out_$i103 := __VERIFIER_nondet_int();
    call {:si_unique_call 1749} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i103);
    call {:si_unique_call 1750} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i103);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume out_$i102 == 1;
    goto corral_source_split_8894;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    out_$i101 := $M.42;
    goto corral_source_split_8739;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_8738;

  $bb4:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i23, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb140:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8951;

  $bb139:
    assume out_$i129 == 1;
    goto corral_source_split_8950;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 0);
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    out_$i128 := $M.47;
    goto corral_source_split_8947;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $M.47 := out_$i127;
    call {:si_unique_call 1756} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_8946;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} out_$i127 := sis900_suspend(out_$p124, out_$i126);
    goto corral_source_split_8945;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.32, out_$p125);
    goto corral_source_split_8944;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8943;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    out_$p124 := $M.34;
    goto corral_source_split_8942;

  $bb137:
    assume out_$i123 == 1;
    goto corral_source_split_8941;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 0);
    goto corral_source_split_8939;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    out_$i122 := $M.46;
    goto corral_source_split_8938;

  $bb134:
    assume out_$i121 == 1;
    goto corral_source_split_8937;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 2);
    goto corral_source_split_8914;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    out_$i120 := $M.42;
    goto corral_source_split_8913;

  $bb123:
    assume out_$i110 == 1;
    goto corral_source_split_8912;

  $bb122:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i103, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb136;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb136;

  $bb153:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8980;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} sis900_remove(out_$p141);
    goto corral_source_split_8979;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    out_$p141 := $M.34;
    goto corral_source_split_8978;

  $bb152:
    assume out_$i140 == 1;
    goto corral_source_split_8977;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 5);
    goto corral_source_split_8975;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i139 := $M.42;
    goto corral_source_split_8974;

  $bb150:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8972;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} sis900_remove(out_$p138);
    goto corral_source_split_8971;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    out_$p138 := $M.34;
    goto corral_source_split_8970;

  $bb149:
    assume out_$i137 == 1;
    goto corral_source_split_8969;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 2);
    goto corral_source_split_8967;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i136 := $M.42;
    goto corral_source_split_8966;

  $bb147:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} sis900_remove(out_$p135);
    goto corral_source_split_8963;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$p135 := $M.34;
    goto corral_source_split_8962;

  $bb146:
    assume out_$i134 == 1;
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 3);
    goto corral_source_split_8959;

  $bb145:
    assume {:verifier.code 0} true;
    out_$i133 := $M.42;
    goto corral_source_split_8958;

  $bb144:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} sis900_remove(out_$p132);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$p132 := $M.34;
    goto corral_source_split_8954;

  $bb143:
    assume out_$i131 == 1;
    goto corral_source_split_8953;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 4);
    goto corral_source_split_8918;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$i130 := $M.42;
    goto corral_source_split_8917;

  $bb124:
    assume !(out_$i110 == 1);
    goto corral_source_split_8916;

  $bb168:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9016;

  $bb169:
    assume out_$i159 == 1;
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_9013;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    out_$i158 := $M.48;
    goto corral_source_split_9012;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.48 := out_$i157;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_9011;

  SeqInstr_117:
    goto corral_source_split_9010;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_$i157 := sis900_resume(out_$p156);
    goto SeqInstr_116;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$p156 := $M.34;
    goto corral_source_split_9009;

  $bb167:
    assume out_$i155 == 1;
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 5);
    goto corral_source_split_9006;

  $bb166:
    assume {:verifier.code 0} true;
    out_$i154 := $M.42;
    goto corral_source_split_9005;

  $bb162:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb164:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9003;

  $bb163:
    assume out_$i153 == 1;
    goto corral_source_split_9002;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 0);
    goto corral_source_split_9000;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    out_$i152 := $M.48;
    goto corral_source_split_8999;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.48 := out_$i151;
    call {:si_unique_call 1770} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_8998;

  SeqInstr_114:
    goto corral_source_split_8997;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} out_$i151 := sis900_resume(out_$p150);
    goto SeqInstr_113;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    out_$p150 := $M.34;
    goto corral_source_split_8996;

  $bb161:
    assume out_$i149 == 1;
    goto corral_source_split_8995;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_8993;

  $bb160:
    assume {:verifier.code 0} true;
    out_$i148 := $M.42;
    goto corral_source_split_8992;

  $bb156:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8990;

  $bb157:
    assume out_$i147 == 1;
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 0);
    goto corral_source_split_8987;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$i146 := $M.48;
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.48 := out_$i145;
    call {:si_unique_call 1767} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_8985;

  SeqInstr_111:
    goto corral_source_split_8984;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_$i145 := sis900_resume(out_$p144);
    goto SeqInstr_110;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$p144 := $M.34;
    goto corral_source_split_8983;

  $bb155:
    assume out_$i143 == 1;
    goto corral_source_split_8982;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 4);
    goto corral_source_split_8906;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    out_$i142 := $M.42;
    goto corral_source_split_8905;

  $bb119:
    assume out_$i108 == 1;
    goto corral_source_split_8904;

  $bb112:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i103, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb111:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i103, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb174:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb176:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9025;

  $bb175:
    assume out_$i164 == 1;
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 0);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$i163 := $M.49;
    goto corral_source_split_9021;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $M.49 := out_$i162;
    call {:si_unique_call 1776} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_9020;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} out_$i162 := ldv_suspend_late_3();
    goto corral_source_split_9019;

  $bb173:
    assume out_$i161 == 1;
    goto corral_source_split_9018;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$i160 := $M.42;
    goto corral_source_split_8909;

  $bb120:
    assume !(out_$i108 == 1);
    goto corral_source_split_8908;

  $bb186:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb188:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9046;

  $bb187:
    assume out_$i174 == 1;
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    out_$i173 := $M.50;
    goto corral_source_split_9042;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.50 := out_$i172;
    call {:si_unique_call 1782} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} out_$i172 := ldv_resume_early_3();
    goto corral_source_split_9040;

  $bb185:
    assume out_$i171 == 1;
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 3);
    goto corral_source_split_9037;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i170 := $M.42;
    goto corral_source_split_9036;

  $bb180:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb182:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9034;

  $bb181:
    assume out_$i169 == 1;
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    out_$i168 := $M.50;
    goto corral_source_split_9030;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.50 := out_$i167;
    call {:si_unique_call 1779} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_9029;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_$i167 := ldv_resume_early_3();
    goto corral_source_split_9028;

  $bb179:
    assume out_$i166 == 1;
    goto corral_source_split_9027;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 4);
    goto corral_source_split_8898;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    out_$i165 := $M.42;
    goto corral_source_split_8897;

  $bb114:
    assume out_$i106 == 1;
    goto corral_source_split_8896;

  $bb113:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i103, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb201:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.42 := 5;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_344 := ldv_shutdown_3();
    goto corral_source_split_9070;

  $bb200:
    assume out_$i185 == 1;
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 5);
    goto corral_source_split_9067;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i184 := $M.42;
    goto corral_source_split_9066;

  $bb198:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_vslice_dummy_var_343 := ldv_shutdown_3();
    goto corral_source_split_9063;

  $bb197:
    assume out_$i182 == 1;
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 2);
    goto corral_source_split_9060;

  $bb196:
    assume {:verifier.code 0} true;
    out_$i181 := $M.42;
    goto corral_source_split_9059;

  $bb195:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9057;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_vslice_dummy_var_342 := ldv_shutdown_3();
    goto corral_source_split_9056;

  $bb194:
    assume out_$i179 == 1;
    goto corral_source_split_9055;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 3);
    goto corral_source_split_9053;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i178 := $M.42;
    goto corral_source_split_9052;

  $bb192:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9050;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_341 := ldv_shutdown_3();
    goto corral_source_split_9049;

  $bb191:
    assume out_$i176 == 1;
    goto corral_source_split_9048;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 4);
    goto corral_source_split_8902;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    out_$i175 := $M.42;
    goto corral_source_split_8901;

  $bb116:
    assume out_$i107 == 1;
    goto corral_source_split_8900;

  $bb115:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i103, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} ldv_stop();
    goto corral_source_split_9073;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb117:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb118;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb118;

  $bb207:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} choose_timer_2(out_$p189);
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    out_$p189 := $M.23;
    goto corral_source_split_9076;

  $bb206:
    assume out_$i188 == 1;
    goto corral_source_split_9075;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i187, 0);
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    out_$i187 := $M.43;
    goto corral_source_split_8743;

  $bb7:
    assume out_$i26 == 1;
    goto corral_source_split_8742;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb210:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9136;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} out_vslice_dummy_var_345 := sis900_close(out_$p209);
    goto corral_source_split_9135;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    out_$p209 := $M.13;
    goto corral_source_split_9134;

  $bb241:
    assume out_$i208 == 1;
    goto corral_source_split_9133;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 3);
    goto corral_source_split_9131;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    out_$i207 := $M.8;
    goto corral_source_split_9130;

  $bb239:
    assume out_$i206 == 1;
    goto corral_source_split_9129;

  $bb235:
    assume out_$i204 == 1;
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i192, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb229:
    assume out_$i201 == 1;
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i192, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb212:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i192, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i192, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_9079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1794} out_$i192 := __VERIFIER_nondet_int();
    call {:si_unique_call 1795} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i192);
    call {:si_unique_call 1796} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i192);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume out_$i191 == 1;
    goto corral_source_split_9079;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, 0);
    goto corral_source_split_8748;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    out_$i190 := $M.8;
    goto corral_source_split_8747;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_8746;

  $bb8:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i23, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb252:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} set_rx_mode(out_$p219);
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$p219 := $M.13;
    goto corral_source_split_9155;

  $bb251:
    assume out_$i218 == 1;
    goto corral_source_split_9154;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 2);
    goto corral_source_split_9152;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i217 := $M.8;
    goto corral_source_split_9151;

  $bb249:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} set_rx_mode(out_$p216);
    goto corral_source_split_9148;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    out_$p216 := $M.13;
    goto corral_source_split_9147;

  $bb248:
    assume out_$i215 == 1;
    goto corral_source_split_9146;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 3);
    goto corral_source_split_9144;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i214 := $M.8;
    goto corral_source_split_9143;

  $bb246:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9141;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} set_rx_mode(out_$p213);
    goto corral_source_split_9140;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    out_$p213 := $M.13;
    goto corral_source_split_9139;

  $bb245:
    assume out_$i212 == 1;
    goto corral_source_split_9138;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 1);
    goto corral_source_split_9123;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    out_$i211 := $M.8;
    goto corral_source_split_9122;

  $bb237:
    assume out_$i205 == 1;
    goto corral_source_split_9121;

  $bb236:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := $slt.i32(out_$i192, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb261:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9178;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_vslice_dummy_var_348 := eth_validate_addr(out_$p230);
    goto corral_source_split_9177;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    out_$p230 := $M.13;
    goto corral_source_split_9176;

  $bb260:
    assume out_$i229 == 1;
    goto corral_source_split_9175;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 2);
    goto corral_source_split_9173;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i228 := $M.8;
    goto corral_source_split_9172;

  $bb258:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9170;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_347 := eth_validate_addr(out_$p226);
    goto corral_source_split_9169;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    out_$p226 := $M.13;
    goto corral_source_split_9168;

  $bb257:
    assume out_$i225 == 1;
    goto corral_source_split_9167;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 3);
    goto corral_source_split_9165;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i224 := $M.8;
    goto corral_source_split_9164;

  $bb255:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9162;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} out_vslice_dummy_var_346 := eth_validate_addr(out_$p222);
    goto corral_source_split_9161;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    out_$p222 := $M.13;
    goto corral_source_split_9160;

  $bb254:
    assume out_$i221 == 1;
    goto corral_source_split_9159;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_9127;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    out_$i220 := $M.8;
    goto corral_source_split_9126;

  $bb238:
    assume !(out_$i205 == 1);
    goto corral_source_split_9125;

  $bb270:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} out_vslice_dummy_var_351 := sis900_set_config(out_$p242, in_$p12);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$p242 := $M.13;
    goto corral_source_split_9197;

  $bb269:
    assume out_$i241 == 1;
    goto corral_source_split_9196;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 2);
    goto corral_source_split_9194;

  $bb268:
    assume {:verifier.code 0} true;
    out_$i240 := $M.8;
    goto corral_source_split_9193;

  $bb267:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9191;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_vslice_dummy_var_350 := sis900_set_config(out_$p238, in_$p12);
    goto corral_source_split_9190;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    out_$p238 := $M.13;
    goto corral_source_split_9189;

  $bb266:
    assume out_$i237 == 1;
    goto corral_source_split_9188;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 3);
    goto corral_source_split_9186;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i236 := $M.8;
    goto corral_source_split_9185;

  $bb264:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9183;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_vslice_dummy_var_349 := sis900_set_config(out_$p234, in_$p12);
    goto corral_source_split_9182;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$p234 := $M.13;
    goto corral_source_split_9181;

  $bb263:
    assume out_$i233 == 1;
    goto corral_source_split_9180;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 1);
    goto corral_source_split_9111;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    out_$i232 := $M.8;
    goto corral_source_split_9110;

  $bb231:
    assume out_$i202 == 1;
    goto corral_source_split_9109;

  $bb230:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb279:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} out_vslice_dummy_var_354 := mii_ioctl(out_$p256, in_$p9, out_$i257);
    goto corral_source_split_9222;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i32($M.32, in_$p2);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$p256 := $M.13;
    goto corral_source_split_9220;

  $bb278:
    assume out_$i255 == 1;
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_9217;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i254 := $M.8;
    goto corral_source_split_9216;

  $bb276:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9214;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_353 := mii_ioctl(out_$p251, in_$p9, out_$i252);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.32, in_$p2);
    goto corral_source_split_9212;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$p251 := $M.13;
    goto corral_source_split_9211;

  $bb275:
    assume out_$i250 == 1;
    goto corral_source_split_9210;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 3);
    goto corral_source_split_9208;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i249 := $M.8;
    goto corral_source_split_9207;

  $bb273:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_vslice_dummy_var_352 := mii_ioctl(out_$p246, in_$p9, out_$i247);
    goto corral_source_split_9204;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i247 := $load.i32($M.32, in_$p2);
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    out_$p246 := $M.13;
    goto corral_source_split_9202;

  $bb272:
    assume out_$i245 == 1;
    goto corral_source_split_9201;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 1);
    goto corral_source_split_9115;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    out_$i244 := $M.8;
    goto corral_source_split_9114;

  $bb233:
    assume out_$i203 == 1;
    goto corral_source_split_9113;

  $bb232:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i192, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb288:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9244;

  SeqInstr_126:
    goto corral_source_split_9243;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} sis900_poll(out_$p267);
    goto SeqInstr_125;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$p267 := $M.13;
    goto corral_source_split_9242;

  $bb287:
    assume out_$i266 == 1;
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_9239;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i265 := $M.8;
    goto corral_source_split_9238;

  $bb285:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9236;

  SeqInstr_123:
    goto corral_source_split_9235;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} sis900_poll(out_$p264);
    goto SeqInstr_122;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    out_$p264 := $M.13;
    goto corral_source_split_9234;

  $bb284:
    assume out_$i263 == 1;
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 3);
    goto corral_source_split_9231;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i262 := $M.8;
    goto corral_source_split_9230;

  $bb282:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9228;

  SeqInstr_120:
    goto corral_source_split_9227;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} sis900_poll(out_$p261);
    goto SeqInstr_119;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    out_$p261 := $M.13;
    goto corral_source_split_9226;

  $bb281:
    assume out_$i260 == 1;
    goto corral_source_split_9225;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 1);
    goto corral_source_split_9119;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    out_$i259 := $M.8;
    goto corral_source_split_9118;

  $bb234:
    assume !(out_$i203 == 1);
    goto corral_source_split_9117;

  $bb294:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9259;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} out_vslice_dummy_var_356 := eth_change_mtu(out_$p275, out_$i276);
    goto corral_source_split_9258;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    out_$i276 := $load.i32($M.32, in_$p3);
    goto corral_source_split_9257;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    out_$p275 := $M.13;
    goto corral_source_split_9256;

  $bb293:
    assume out_$i274 == 1;
    goto corral_source_split_9255;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 2);
    goto corral_source_split_9253;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i273 := $M.8;
    goto corral_source_split_9252;

  $bb291:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} out_vslice_dummy_var_355 := eth_change_mtu(out_$p270, out_$i271);
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i32($M.32, in_$p3);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$p270 := $M.13;
    goto corral_source_split_9247;

  $bb290:
    assume out_$i269 == 1;
    goto corral_source_split_9246;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 3);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$i268 := $M.8;
    goto corral_source_split_9098;

  $bb225:
    assume out_$i199 == 1;
    goto corral_source_split_9097;

  $bb214:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i192, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb213:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i192, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb297:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb299:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9269;

  $bb298:
    assume out_$i283 == 1;
    goto corral_source_split_9268;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i282, 0);
    goto corral_source_split_9266;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$i282 := $M.51;
    goto corral_source_split_9265;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $M.51 := out_$i281;
    call {:si_unique_call 1834} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i281);
    goto corral_source_split_9264;

  SeqInstr_129:
    goto corral_source_split_9263;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_$i281 := sis900_open(out_$p280);
    goto SeqInstr_128;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$p280 := $M.13;
    goto corral_source_split_9262;

  $bb296:
    assume out_$i279 == 1;
    goto corral_source_split_9261;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 2);
    goto corral_source_split_9103;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    out_$i278 := $M.8;
    goto corral_source_split_9102;

  $bb227:
    assume out_$i200 == 1;
    goto corral_source_split_9101;

  $bb226:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i192, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb303:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9274;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} out_vslice_dummy_var_357 := sis900_start_xmit(in_$p14, out_$p286);
    goto corral_source_split_9273;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    out_$p286 := $M.13;
    goto corral_source_split_9272;

  $bb302:
    assume out_$i285 == 1;
    goto corral_source_split_9271;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 3);
    goto corral_source_split_9107;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    out_$i284 := $M.8;
    goto corral_source_split_9106;

  $bb228:
    assume !(out_$i200 == 1);
    goto corral_source_split_9105;

  $bb312:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9295;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} out_vslice_dummy_var_360 := eth_mac_addr(out_$p298, in_$p10);
    goto corral_source_split_9294;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    out_$p298 := $M.13;
    goto corral_source_split_9293;

  $bb311:
    assume out_$i297 == 1;
    goto corral_source_split_9292;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 2);
    goto corral_source_split_9290;

  $bb310:
    assume {:verifier.code 0} true;
    out_$i296 := $M.8;
    goto corral_source_split_9289;

  $bb309:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9287;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} out_vslice_dummy_var_359 := eth_mac_addr(out_$p294, in_$p10);
    goto corral_source_split_9286;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    out_$p294 := $M.13;
    goto corral_source_split_9285;

  $bb308:
    assume out_$i293 == 1;
    goto corral_source_split_9284;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 3);
    goto corral_source_split_9282;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i292 := $M.8;
    goto corral_source_split_9281;

  $bb306:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9279;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} out_vslice_dummy_var_358 := eth_mac_addr(out_$p290, in_$p10);
    goto corral_source_split_9278;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    out_$p290 := $M.13;
    goto corral_source_split_9277;

  $bb305:
    assume out_$i289 == 1;
    goto corral_source_split_9276;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_9091;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i288 := $M.8;
    goto corral_source_split_9090;

  $bb223:
    assume out_$i198 == 1;
    goto corral_source_split_9089;

  $bb216:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i192, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb215:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i192, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb321:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9316;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} sis900_tx_timeout(out_$p308);
    goto corral_source_split_9315;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    out_$p308 := $M.13;
    goto corral_source_split_9314;

  $bb320:
    assume out_$i307 == 1;
    goto corral_source_split_9313;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 2);
    goto corral_source_split_9311;

  $bb319:
    assume {:verifier.code 0} true;
    out_$i306 := $M.8;
    goto corral_source_split_9310;

  $bb318:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $M.8 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9308;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} sis900_tx_timeout(out_$p305);
    goto corral_source_split_9307;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    out_$p305 := $M.13;
    goto corral_source_split_9306;

  $bb317:
    assume out_$i304 == 1;
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 3);
    goto corral_source_split_9303;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i303 := $M.8;
    goto corral_source_split_9302;

  $bb315:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9300;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} sis900_tx_timeout(out_$p302);
    goto corral_source_split_9299;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    out_$p302 := $M.13;
    goto corral_source_split_9298;

  $bb314:
    assume out_$i301 == 1;
    goto corral_source_split_9297;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 1);
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    out_$i300 := $M.8;
    goto corral_source_split_9094;

  $bb224:
    assume !(out_$i198 == 1);
    goto corral_source_split_9093;

  $bb324:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb326:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $M.40 := out_$i315;
    call {:si_unique_call 1853} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i315);
    goto corral_source_split_9328;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    out_$i315 := $add.i32(out_$i314, 1);
    goto corral_source_split_9327;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    out_$i314 := $M.40;
    goto corral_source_split_9326;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9325;

  $bb325:
    assume out_$i313 == 1;
    goto corral_source_split_9324;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 0);
    goto corral_source_split_9322;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    out_$i312 := $M.52;
    goto corral_source_split_9321;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.52 := out_$i311;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i311);
    goto corral_source_split_9320;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_$i311 := ldv_ndo_init_5();
    goto corral_source_split_9319;

  $bb323:
    assume out_$i310 == 1;
    goto corral_source_split_9318;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 1);
    goto corral_source_split_9083;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    out_$i309 := $M.8;
    goto corral_source_split_9082;

  $bb218:
    assume out_$i196 == 1;
    goto corral_source_split_9081;

  $bb217:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i192, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb330:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.40 := out_$i320;
    call {:si_unique_call 1856} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i320);
    goto corral_source_split_9335;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    out_$i320 := $sub.i32(out_$i319, 1);
    goto corral_source_split_9334;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    out_$i319 := $M.40;
    goto corral_source_split_9333;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9332;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_361 := ldv_ndo_uninit_5();
    goto corral_source_split_9331;

  $bb329:
    assume out_$i317 == 1;
    goto corral_source_split_9330;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 2);
    goto corral_source_split_9087;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    out_$i316 := $M.8;
    goto corral_source_split_9086;

  $bb220:
    assume out_$i197 == 1;
    goto corral_source_split_9085;

  $bb219:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i192, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_stop();
    goto corral_source_split_9337;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb221:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb222;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb222;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} ldv_stop();
    goto corral_source_split_9339;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  $bb73_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i232, out_$i233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i319, out_$i320, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343, out_vslice_dummy_var_344, out_vslice_dummy_var_345, out_vslice_dummy_var_346, out_vslice_dummy_var_347, out_vslice_dummy_var_348, out_vslice_dummy_var_349, out_vslice_dummy_var_350, out_vslice_dummy_var_351, out_vslice_dummy_var_352, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, in_$p7, in_$p9, in_$p10, in_$p12, in_$p14, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i66, out_$i67, out_$p68, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i224, out_$i225, out_$p226, out_$i228, out_$i229, out_$p230, out_$i232, out_$i233, out_$p234, out_$i236, out_$i237, out_$p238, out_$i240, out_$i241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i254, out_$i255, out_$p256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i273, out_$i274, out_$p275, out_$i276, out_$i278, out_$i279, out_$p280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i319, out_$i320, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343, out_vslice_dummy_var_344, out_vslice_dummy_var_345, out_vslice_dummy_var_346, out_vslice_dummy_var_347, out_vslice_dummy_var_348, out_vslice_dummy_var_349, out_vslice_dummy_var_350, out_vslice_dummy_var_351, out_vslice_dummy_var_352, out_vslice_dummy_var_353, out_vslice_dummy_var_354, out_vslice_dummy_var_355, out_vslice_dummy_var_356, out_vslice_dummy_var_357, out_vslice_dummy_var_358, out_vslice_dummy_var_359, out_vslice_dummy_var_360, out_vslice_dummy_var_361);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i184: i32, in_$i185: i1, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i240: i32, in_$i241: i1, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i281: i32, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i1, in_$i319: i32, in_$i320: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32, in_vslice_dummy_var_343: i32, in_vslice_dummy_var_344: i32, in_vslice_dummy_var_345: i32, in_vslice_dummy_var_346: i32, in_vslice_dummy_var_347: i32, in_vslice_dummy_var_348: i32, in_vslice_dummy_var_349: i32, in_vslice_dummy_var_350: i32, in_vslice_dummy_var_351: i32, in_vslice_dummy_var_352: i32, in_vslice_dummy_var_353: i32, in_vslice_dummy_var_354: i32, in_vslice_dummy_var_355: i32, in_vslice_dummy_var_356: i32, in_vslice_dummy_var_357: i32, in_vslice_dummy_var_358: i32, in_vslice_dummy_var_359: i32, in_vslice_dummy_var_360: i32, in_vslice_dummy_var_361: i32) returns (out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i184: i32, out_$i185: i1, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i240: i32, out_$i241: i1, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i281: i32, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i1, out_$i319: i32, out_$i320: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32, out_vslice_dummy_var_343: i32, out_vslice_dummy_var_344: i32, out_vslice_dummy_var_345: i32, out_vslice_dummy_var_346: i32, out_vslice_dummy_var_347: i32, out_vslice_dummy_var_348: i32, out_vslice_dummy_var_349: i32, out_vslice_dummy_var_350: i32, out_vslice_dummy_var_351: i32, out_vslice_dummy_var_352: i32, out_vslice_dummy_var_353: i32, out_vslice_dummy_var_354: i32, out_vslice_dummy_var_355: i32, out_vslice_dummy_var_356: i32, out_vslice_dummy_var_357: i32, out_vslice_dummy_var_358: i32, out_vslice_dummy_var_359: i32, out_vslice_dummy_var_360: i32, out_vslice_dummy_var_361: i32);
  modifies $M.38, $M.7, $M.31, $CurrAddr, $M.0, $M.15, assertsPassed, $M.35, $M.36, $M.37, $M.41, $M.44, $M.42, $M.34, $M.40, $M.45, $M.8, $M.13, $M.47, $M.4, $M.48, $M.5, $M.49, $M.50, $M.24, $M.25, $M.26, $M.17, $M.19, $M.21, $M.51, $M.23, $M.16, $M.27, $M.18, $M.28, $M.20, $M.29, $M.22, $M.30, $M.52;


