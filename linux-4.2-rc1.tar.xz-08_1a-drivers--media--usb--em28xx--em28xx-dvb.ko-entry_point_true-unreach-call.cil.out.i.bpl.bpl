var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.7: [ref]i8;

var $M.11: [ref]i8;

var $M.17: [ref]i8;

var $M.18: i32;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.22: [ref]i32;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i32;

var $M.26: [ref]i8;

var $M.27: i32;

var $M.28: ref;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.45: [ref]i16;

var $M.46: [ref]i16;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i16;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i16;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i16;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i16;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i16;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i16;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i16;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i16;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i16;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i16;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i16;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.94: [ref]i16;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i16;

var $M.99: [ref]i8;

var $M.100: [ref]i8;

var $M.101: [ref]i8;

var $M.102: [ref]i16;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]ref;

var $M.107: [ref]i32;

var $M.108: [ref]i32;

var $M.109: [ref]i32;

var $M.110: [ref]i32;

var $M.111: [ref]i8;

var $M.112: [ref]i32;

var $M.113: [ref]i8;

var $M.114: [ref]i16;

var $M.115: [ref]i16;

var $M.116: [ref]i16;

var $M.117: [ref]i16;

var $M.118: [ref]i16;

var $M.119: [ref]i8;

var $M.120: [ref]i32;

var $M.121: [ref]i32;

var $M.122: [ref]i32;

var $M.123: [ref]i32;

var $M.124: [ref]i32;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i16;

var $M.133: [ref]i8;

var $M.134: [ref]i32;

var $M.135: [ref]ref;

var $M.136: [ref]i32;

var $M.173: [ref]i8;

var $M.174: [ref]i32;

var $M.175: [ref]i32;

var $M.176: [ref]i32;

var $M.177: [ref]i32;

var $M.178: [ref]i8;

var $M.179: [ref]i8;

var $M.180: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 369360);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const dvb_ops_group0: ref;

axiom dvb_ops_group0 == $sub.ref(0, 2060);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 5144);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 6172);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 7200);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 8228);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 9256);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 10284);

const dvb_ops: ref;

axiom dvb_ops == $sub.ref(0, 11372);

const debug: ref;

axiom debug == $sub.ref(0, 12400);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 13440);

const drx_j_std_map: ref;

axiom drx_j_std_map == $sub.ref(0, 14554);

const pinnacle_80e_dvb_config: ref;

axiom pinnacle_80e_dvb_config == $sub.ref(0, 15610);

const em2874_lgdt3305_nogate_dev: ref;

axiom em2874_lgdt3305_nogate_dev == $sub.ref(0, 16670);

const kworld_ub435q_v3_config: ref;

axiom kworld_ub435q_v3_config == $sub.ref(0, 17726);

const kworld_ub435q_v2_config: ref;

axiom kworld_ub435q_v2_config == $sub.ref(0, 18782);

const em2874_lgdt3305_dev: ref;

axiom em2874_lgdt3305_dev == $sub.ref(0, 19842);

const terratec_htc_stick_drxk: ref;

axiom terratec_htc_stick_drxk == $sub.ref(0, 20898);

const pctv_520e_drxk: ref;

axiom pctv_520e_drxk == $sub.ref(0, 21954);

const maxmedia_ub425_tc_drxk: ref;

axiom maxmedia_ub425_tc_drxk == $sub.ref(0, 23010);

const mb86a20s_tda18271_config: ref;

axiom mb86a20s_tda18271_config == $sub.ref(0, 24124);

const c3tech_duo_tda18271_config: ref;

axiom c3tech_duo_tda18271_config == $sub.ref(0, 25180);

const c3tech_duo_mb86a20s_config: ref;

axiom c3tech_duo_mb86a20s_config == $sub.ref(0, 26212);

const terratec_h5_drxk: ref;

axiom terratec_h5_drxk == $sub.ref(0, 27268);

const hauppauge_930c_drxk: ref;

axiom hauppauge_930c_drxk == $sub.ref(0, 28324);

const em28xx_cxd2820r_tda18271_config: ref;

axiom em28xx_cxd2820r_tda18271_config == $sub.ref(0, 29380);

const em28xx_cxd2820r_config: ref;

axiom em28xx_cxd2820r_config == $sub.ref(0, 30409);

const kworld_a340_std_map: ref;

axiom kworld_a340_std_map == $sub.ref(0, 31523);

const kworld_a340_config: ref;

axiom kworld_a340_config == $sub.ref(0, 32579);

const em2870_lgdt3304_dev: ref;

axiom em2870_lgdt3304_dev == $sub.ref(0, 33639);

const em28xx_tda10023_config: ref;

axiom em28xx_tda10023_config == $sub.ref(0, 34679);

const em28xx_drxd: ref;

axiom em28xx_drxd == $sub.ref(0, 35735);

const em28xx_s5h1409_with_xc3028: ref;

axiom em28xx_s5h1409_with_xc3028 == $sub.ref(0, 36771);

const em28xx_qt1010_config: ref;

axiom em28xx_qt1010_config == $sub.ref(0, 37796);

const em28xx_zl10353_no_i2c_gate_dev: ref;

axiom em28xx_zl10353_no_i2c_gate_dev == $sub.ref(0, 38844);

const terratec_xs_mt352_cfg: ref;

axiom terratec_xs_mt352_cfg == $sub.ref(0, 39892);

const em28xx_zl10353_xc3028_no_i2c_gate: ref;

axiom em28xx_zl10353_xc3028_no_i2c_gate == $sub.ref(0, 40940);

const em28xx_zl10353_with_xc3028: ref;

axiom em28xx_zl10353_with_xc3028 == $sub.ref(0, 41988);

const em2880_lgdt3303_dev: ref;

axiom em2880_lgdt3303_dev == $sub.ref(0, 43052);

const sharp_isdbt: ref;

axiom sharp_isdbt == $sub.ref(0, 44077);

const {:count 34} .str.74: ref;

axiom .str.74 == $sub.ref(0, 45135);

const {:count 28} .str.77: ref;

axiom .str.77 == $sub.ref(0, 46187);

const {:count 21} .str.78: ref;

axiom .str.78 == $sub.ref(0, 47232);

const {:count 23} .str.79: ref;

axiom .str.79 == $sub.ref(0, 48279);

const {:count 35} .str.80: ref;

axiom .str.80 == $sub.ref(0, 49338);

const {:count 21} .str.110: ref;

axiom .str.110 == $sub.ref(0, 50383);

const {:count 29} .str.107: ref;

axiom .str.107 == $sub.ref(0, 51436);

const {:count 20} .str.108: ref;

axiom .str.108 == $sub.ref(0, 52480);

const {:count 20} .str.109: ref;

axiom .str.109 == $sub.ref(0, 53524);

const {:count 31} .str.103: ref;

axiom .str.103 == $sub.ref(0, 54579);

const {:count 21} .str.104: ref;

axiom .str.104 == $sub.ref(0, 55624);

const {:count 21} .str.105: ref;

axiom .str.105 == $sub.ref(0, 56669);

const {:count 28} .str.106: ref;

axiom .str.106 == $sub.ref(0, 57721);

const {:count 21} .str.102: ref;

axiom .str.102 == $sub.ref(0, 58766);

const .str: ref;

axiom .str == $sub.ref(0, 59818);

const {:count 43} .str.1: ref;

axiom .str.1 == $sub.ref(0, 60885);

const {:count 71} .str.2: ref;

axiom .str.2 == $sub.ref(0, 61980);

const {:count 12} .str.3: ref;

axiom .str.3 == $sub.ref(0, 63016);

const {:count 19} .str.4: ref;

axiom .str.4 == $sub.ref(0, 64059);

const {:count 43} .str.5: ref;

axiom .str.5 == $sub.ref(0, 65126);

const {:count 16} .str.6: ref;

axiom .str.6 == $sub.ref(0, 66166);

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 67213);

const {:count 47} .str.8: ref;

axiom .str.8 == $sub.ref(0, 68284);

const {:count 15} .str.9: ref;

axiom .str.9 == $sub.ref(0, 69323);

const {:count 22} .str.10: ref;

axiom .str.10 == $sub.ref(0, 70369);

const {:count 46} .str.11: ref;

axiom .str.11 == $sub.ref(0, 71439);

const {:count 13} .str.12: ref;

axiom .str.12 == $sub.ref(0, 72476);

const {:count 20} .str.13: ref;

axiom .str.13 == $sub.ref(0, 73520);

const {:count 44} .str.14: ref;

axiom .str.14 == $sub.ref(0, 74588);

const {:count 14} .str.15: ref;

axiom .str.15 == $sub.ref(0, 75626);

const {:count 21} .str.16: ref;

axiom .str.16 == $sub.ref(0, 76671);

const {:count 45} .str.17: ref;

axiom .str.17 == $sub.ref(0, 77740);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 78779);

const {:count 22} .str.19: ref;

axiom .str.19 == $sub.ref(0, 79825);

const {:count 46} .str.20: ref;

axiom .str.20 == $sub.ref(0, 80895);

const {:count 20} .str.21: ref;

axiom .str.21 == $sub.ref(0, 81939);

const {:count 27} .str.22: ref;

axiom .str.22 == $sub.ref(0, 82990);

const {:count 51} .str.23: ref;

axiom .str.23 == $sub.ref(0, 84065);

const {:count 12} .str.24: ref;

axiom .str.24 == $sub.ref(0, 85101);

const {:count 19} .str.25: ref;

axiom .str.25 == $sub.ref(0, 86144);

const {:count 43} .str.26: ref;

axiom .str.26 == $sub.ref(0, 87211);

const {:count 16} .str.27: ref;

axiom .str.27 == $sub.ref(0, 88251);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 89298);

const {:count 47} .str.29: ref;

axiom .str.29 == $sub.ref(0, 90369);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 91409);

const {:count 23} .str.31: ref;

axiom .str.31 == $sub.ref(0, 92456);

const {:count 47} .str.32: ref;

axiom .str.32 == $sub.ref(0, 93527);

const {:count 16} .str.33: ref;

axiom .str.33 == $sub.ref(0, 94567);

const {:count 23} .str.34: ref;

axiom .str.34 == $sub.ref(0, 95614);

const {:count 47} .str.35: ref;

axiom .str.35 == $sub.ref(0, 96685);

const {:count 16} .str.36: ref;

axiom .str.36 == $sub.ref(0, 97725);

const {:count 23} .str.37: ref;

axiom .str.37 == $sub.ref(0, 98772);

const {:count 47} .str.38: ref;

axiom .str.38 == $sub.ref(0, 99843);

const {:count 29} .str.39: ref;

axiom .str.39 == $sub.ref(0, 100896);

const {:count 12} .str.40: ref;

axiom .str.40 == $sub.ref(0, 101932);

const {:count 19} .str.41: ref;

axiom .str.41 == $sub.ref(0, 102975);

const {:count 43} .str.42: ref;

axiom .str.42 == $sub.ref(0, 104042);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 105080);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 106125);

const {:count 45} .str.45: ref;

axiom .str.45 == $sub.ref(0, 107194);

const {:count 20} .str.46: ref;

axiom .str.46 == $sub.ref(0, 108238);

const {:count 27} .str.47: ref;

axiom .str.47 == $sub.ref(0, 109289);

const {:count 51} .str.48: ref;

axiom .str.48 == $sub.ref(0, 110364);

const {:count 16} .str.49: ref;

axiom .str.49 == $sub.ref(0, 111404);

const {:count 23} .str.50: ref;

axiom .str.50 == $sub.ref(0, 112451);

const {:count 47} .str.51: ref;

axiom .str.51 == $sub.ref(0, 113522);

const {:count 17} .str.52: ref;

axiom .str.52 == $sub.ref(0, 114563);

const {:count 9} .str.53: ref;

axiom .str.53 == $sub.ref(0, 115596);

const {:count 6} .str.54: ref;

axiom .str.54 == $sub.ref(0, 116626);

const {:count 9} .str.55: ref;

axiom .str.55 == $sub.ref(0, 117659);

const {:count 16} .str.56: ref;

axiom .str.56 == $sub.ref(0, 118699);

const {:count 23} .str.57: ref;

axiom .str.57 == $sub.ref(0, 119746);

const {:count 47} .str.58: ref;

axiom .str.58 == $sub.ref(0, 120817);

const {:count 10} .str.59: ref;

axiom .str.59 == $sub.ref(0, 121851);

const {:count 7} .str.60: ref;

axiom .str.60 == $sub.ref(0, 122882);

const {:count 7} .str.61: ref;

axiom .str.61 == $sub.ref(0, 123913);

const {:count 7} .str.62: ref;

axiom .str.62 == $sub.ref(0, 124944);

const {:count 7} .str.63: ref;

axiom .str.63 == $sub.ref(0, 125975);

const {:count 7} .str.64: ref;

axiom .str.64 == $sub.ref(0, 127006);

const {:count 65} .str.65: ref;

axiom .str.65 == $sub.ref(0, 128095);

const {:count 41} .str.66: ref;

axiom .str.66 == $sub.ref(0, 129160);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 45} .str.67: ref;

axiom .str.67 == $sub.ref(0, 130229);

const {:count 11} .str.81: ref;

axiom .str.81 == $sub.ref(0, 131264);

const {:count 47} .str.82: ref;

axiom .str.82 == $sub.ref(0, 132335);

const {:count 48} .str.83: ref;

axiom .str.83 == $sub.ref(0, 133407);

const {:count 52} .str.84: ref;

axiom .str.84 == $sub.ref(0, 134483);

const {:count 39} .str.85: ref;

axiom .str.85 == $sub.ref(0, 135546);

const {:count 42} .str.86: ref;

axiom .str.86 == $sub.ref(0, 136612);

const {:count 55} .str.87: ref;

axiom .str.87 == $sub.ref(0, 137691);

const {:count 54} .str.88: ref;

axiom .str.88 == $sub.ref(0, 138769);

const {:count 43} .str.89: ref;

axiom .str.89 == $sub.ref(0, 139836);

const {:count 67} .str.90: ref;

axiom .str.90 == $sub.ref(0, 140927);

const {:count 8} .str.91: ref;

axiom .str.91 == $sub.ref(0, 141959);

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 143007);

const {:count 25} .str.93: ref;

axiom .str.93 == $sub.ref(0, 144056);

const {:count 23} .str.94: ref;

axiom .str.94 == $sub.ref(0, 145103);

const {:count 32} .str.95: ref;

axiom .str.95 == $sub.ref(0, 146159);

const {:count 20} .str.96: ref;

axiom .str.96 == $sub.ref(0, 147203);

const {:count 29} .str.97: ref;

axiom .str.97 == $sub.ref(0, 148256);

const {:count 32} .str.98: ref;

axiom .str.98 == $sub.ref(0, 149312);

const {:count 24} .str.99: ref;

axiom .str.99 == $sub.ref(0, 150360);

const {:count 32} .str.100: ref;

axiom .str.100 == $sub.ref(0, 151416);

const {:count 43} .str.101: ref;

axiom .str.101 == $sub.ref(0, 152483);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 153519);

const {:count 16} .str.76: ref;

axiom .str.76 == $sub.ref(0, 154559);

const {:count 57} .str.68: ref;

axiom .str.68 == $sub.ref(0, 155640);

const {:count 14} .str.69: ref;

axiom .str.69 == $sub.ref(0, 156678);

const {:count 21} .str.70: ref;

axiom .str.70 == $sub.ref(0, 157723);

const {:count 45} .str.71: ref;

axiom .str.71 == $sub.ref(0, 158792);

const {:count 31} .str.72: ref;

axiom .str.72 == $sub.ref(0, 159847);

const {:count 28} .str.73: ref;

axiom .str.73 == $sub.ref(0, 160899);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 161931);

const {:count 3} .str.1.230: ref;

axiom .str.1.230 == $sub.ref(0, 162958);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 163996);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 165024);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 166056);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 167088);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 168120);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 169152);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const em28xx_mt352_terratec_xs_init: ref;

axiom em28xx_mt352_terratec_xs_init == $sub.ref(0, 170184);

procedure em28xx_mt352_terratec_xs_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation em28xx_mt352_terratec_xs_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p4 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p5 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p6 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p8 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p10 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $sub.i8(0, 119));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 56);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 44);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 80);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, $sub.i8(0, 128));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $sub.i8(0, 114));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 64);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 103);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 40);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $sub.i8(0, 96));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 86);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, 49);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $sub.i8(0, 72));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 124);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 77);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 117);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 50);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 84);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 100);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 81);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 64);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, $sub.i8(0, 128));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 80);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 93);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, 1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_37 := mt352_write($p0, $p38, 3);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} __const_udelay(859000);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_38 := mt352_write($p0, $p40, 2);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_39 := mt352_write($p0, $p42, 2);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p4);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_40 := mt352_write($p0, $p44, 3);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p5);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_41 := mt352_write($p0, $p46, 3);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p6);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_42 := mt352_write($p0, $p48, 3);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p7);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_43 := mt352_write($p0, $p50, 2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p8);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_44 := mt352_write($p0, $p52, 3);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p9);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_45 := mt352_write($p0, $p54, 4);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p10);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_46 := mt352_write($p0, $p56, 2);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const mt352_write: ref;

axiom mt352_write == $sub.ref(0, 171216);

procedure mt352_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mt352_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} {:cexpr "mt352_write:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(208, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(208, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 32} $i11 := devirtbounce($p10, $p0, $p1, $i2);
    call {:si_unique_call 33} {:cexpr "r"} boogie_si_record_i32($i11);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 172248);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_dvb_init: ref;

axiom em28xx_dvb_init == $sub.ref(0, 173280);

procedure em28xx_dvb_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.7, $M.26, $M.22, $M.23, $M.24, $M.25, $M.19, $M.20, $M.18, $CurrAddr, assertsPassed;



implementation em28xx_dvb_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i54: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $p133: ref;
  var $i134: i1;
  var $p137: ref;
  var $p135: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i64;
  var $i165: i1;
  var $i166: i32;
  var $i167: i64;
  var $p168: ref;
  var $i169: i1;
  var $p172: ref;
  var $p170: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i64;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $p186: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $i197: i32;
  var $i198: i64;
  var $p199: ref;
  var $i200: i1;
  var $p203: ref;
  var $p201: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $i228: i32;
  var $i229: i64;
  var $p230: ref;
  var $i231: i1;
  var $p234: ref;
  var $p232: ref;
  var $i236: i64;
  var $i237: i1;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $i259: i32;
  var $i260: i64;
  var $p261: ref;
  var $i262: i1;
  var $p265: ref;
  var $p263: ref;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i1;
  var $p279: ref;
  var $p283: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $i293: i32;
  var $i294: i64;
  var $p295: ref;
  var $i296: i1;
  var $p299: ref;
  var $p297: ref;
  var $i301: i64;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i32;
  var $i307: i64;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i64;
  var $i312: i1;
  var $p313: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $i323: i1;
  var $i324: i32;
  var $i325: i64;
  var $p326: ref;
  var $i327: i1;
  var $p330: ref;
  var $p328: ref;
  var $i332: i64;
  var $i333: i1;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i64;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $p348: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i64;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $i357: i1;
  var $i358: i32;
  var $i359: i64;
  var $p360: ref;
  var $i361: i1;
  var $p364: ref;
  var $p362: ref;
  var $i366: i64;
  var $i367: i1;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i375: i64;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i64;
  var $i380: i1;
  var $p382: ref;
  var $p383: ref;
  var $i384: i64;
  var $i385: i1;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $i389: i1;
  var $p392: ref;
  var $p390: ref;
  var $i394: i64;
  var $i395: i1;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i64;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i64;
  var $i405: i1;
  var $p406: ref;
  var $p410: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $p414: ref;
  var $i415: i64;
  var $i416: i1;
  var $i417: i32;
  var $i418: i64;
  var $p419: ref;
  var $i420: i1;
  var $p423: ref;
  var $p421: ref;
  var $i425: i64;
  var $i426: i1;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $i430: i32;
  var $i431: i64;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $i436: i1;
  var $p437: ref;
  var $p441: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i64;
  var $i446: i1;
  var $p447: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $i451: i32;
  var $i452: i64;
  var $p453: ref;
  var $i454: i1;
  var $p457: ref;
  var $p455: ref;
  var $i459: i64;
  var $i460: i1;
  var $p462: ref;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $i467: i32;
  var $i468: i64;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i64;
  var $i473: i1;
  var $p474: ref;
  var $i476: i64;
  var $i477: i1;
  var $p478: ref;
  var $p479: ref;
  var $i480: i64;
  var $i481: i1;
  var $i482: i32;
  var $i483: i64;
  var $p484: ref;
  var $i485: i1;
  var $p488: ref;
  var $p486: ref;
  var $i490: i64;
  var $i491: i1;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $i504: i1;
  var $p505: ref;
  var $p509: ref;
  var $i510: i32;
  var $i511: i1;
  var $p512: ref;
  var $p513: ref;
  var $i514: i64;
  var $i515: i1;
  var $i516: i32;
  var $i517: i64;
  var $p518: ref;
  var $i519: i1;
  var $p522: ref;
  var $p520: ref;
  var $i524: i64;
  var $i525: i1;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $i529: i32;
  var $i530: i64;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $i534: i64;
  var $i535: i1;
  var $p536: ref;
  var $p540: ref;
  var $p542: ref;
  var $p543: ref;
  var $i544: i64;
  var $i545: i1;
  var $p546: ref;
  var $p547: ref;
  var $i548: i64;
  var $i549: i1;
  var $i550: i32;
  var $i551: i64;
  var $p552: ref;
  var $i553: i1;
  var $p556: ref;
  var $p554: ref;
  var $i558: i64;
  var $i559: i1;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $i566: i32;
  var $i567: i64;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $i571: i64;
  var $i572: i1;
  var $p573: ref;
  var $i575: i64;
  var $i576: i1;
  var $p577: ref;
  var $p578: ref;
  var $i579: i64;
  var $i580: i1;
  var $i581: i32;
  var $i582: i64;
  var $p583: ref;
  var $i584: i1;
  var $p587: ref;
  var $p585: ref;
  var $i589: i64;
  var $i590: i1;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i32;
  var $i595: i64;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $i599: i64;
  var $i600: i1;
  var $p601: ref;
  var $p605: ref;
  var $p607: ref;
  var $p608: ref;
  var $i609: i64;
  var $i610: i1;
  var $p611: ref;
  var $p612: ref;
  var $i613: i64;
  var $i614: i1;
  var $i615: i32;
  var $i616: i64;
  var $p617: ref;
  var $i618: i1;
  var $p621: ref;
  var $p619: ref;
  var $i623: i64;
  var $i624: i1;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $i631: i32;
  var $i632: i64;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $i636: i64;
  var $i637: i1;
  var $p638: ref;
  var $i640: i64;
  var $i641: i1;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i64;
  var $i649: i1;
  var $i650: i32;
  var $i651: i64;
  var $p652: ref;
  var $i653: i1;
  var $p656: ref;
  var $p654: ref;
  var $i658: i64;
  var $i659: i1;
  var $p660: ref;
  var $p661: ref;
  var $p662: ref;
  var $i663: i32;
  var $i664: i64;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $i669: i64;
  var $i670: i1;
  var $p671: ref;
  var $p675: ref;
  var $p677: ref;
  var $p678: ref;
  var $i679: i64;
  var $i680: i1;
  var $p681: ref;
  var $p682: ref;
  var $i683: i64;
  var $i684: i1;
  var $i685: i32;
  var $i686: i64;
  var $p687: ref;
  var $i688: i1;
  var $p691: ref;
  var $p689: ref;
  var $i693: i64;
  var $i694: i1;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $i701: i32;
  var $i702: i64;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $i706: i64;
  var $i707: i1;
  var $p708: ref;
  var $i710: i64;
  var $i711: i1;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i32;
  var $i717: i32;
  var $i718: i1;
  var $p719: ref;
  var $p720: ref;
  var $p722: ref;
  var $i723: i32;
  var $p725: ref;
  var $p726: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $i731: i64;
  var $i732: i1;
  var $i733: i32;
  var $i734: i64;
  var $p735: ref;
  var $i736: i1;
  var $p739: ref;
  var $p737: ref;
  var $i741: i64;
  var $i742: i1;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $i746: i32;
  var $i747: i64;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $i751: i64;
  var $i752: i1;
  var $p753: ref;
  var $p757: ref;
  var $p759: ref;
  var $p760: ref;
  var $i761: i64;
  var $i762: i1;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $p770: ref;
  var $p771: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $p777: ref;
  var $p778: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $p785: ref;
  var $p786: ref;
  var $p788: ref;
  var $p789: ref;
  var $i790: i64;
  var $i791: i1;
  var $p793: ref;
  var $p794: ref;
  var $p796: ref;
  var $p797: ref;
  var $p799: ref;
  var $p800: ref;
  var $p802: ref;
  var $p803: ref;
  var $i804: i64;
  var $i805: i1;
  var $i806: i32;
  var $i807: i64;
  var $p808: ref;
  var $i809: i1;
  var $p812: ref;
  var $p810: ref;
  var $i814: i64;
  var $i815: i1;
  var $p817: ref;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $i822: i32;
  var $i823: i64;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $i827: i64;
  var $i828: i1;
  var $p829: ref;
  var $i831: i64;
  var $i832: i1;
  var $p834: ref;
  var $p835: ref;
  var $p837: ref;
  var $p838: ref;
  var $i839: i64;
  var $i840: i1;
  var $p842: ref;
  var $p843: ref;
  var $p845: ref;
  var $p846: ref;
  var $p848: ref;
  var $p849: ref;
  var $p851: ref;
  var $p852: ref;
  var $i853: i64;
  var $i854: i1;
  var $i855: i32;
  var $i856: i64;
  var $p857: ref;
  var $i858: i1;
  var $p861: ref;
  var $p859: ref;
  var $i863: i64;
  var $i864: i1;
  var $p865: ref;
  var $p866: ref;
  var $p867: ref;
  var $i868: i32;
  var $i869: i64;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $i874: i1;
  var $p875: ref;
  var $p879: ref;
  var $p881: ref;
  var $p882: ref;
  var $i883: i64;
  var $i884: i1;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p892: ref;
  var $p893: ref;
  var $p895: ref;
  var $p896: ref;
  var $p897: ref;
  var $p899: ref;
  var $p900: ref;
  var $p902: ref;
  var $p904: ref;
  var $p905: ref;
  var $p907: ref;
  var $p908: ref;
  var $i909: i64;
  var $i910: i1;
  var $p912: ref;
  var $p913: ref;
  var $p915: ref;
  var $p916: ref;
  var $p918: ref;
  var $p919: ref;
  var $p921: ref;
  var $p922: ref;
  var $i923: i64;
  var $i924: i1;
  var $i925: i32;
  var $i926: i64;
  var $p927: ref;
  var $i928: i1;
  var $p931: ref;
  var $p929: ref;
  var $i933: i64;
  var $i934: i1;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $i941: i32;
  var $i942: i64;
  var $p943: ref;
  var $p944: ref;
  var $p945: ref;
  var $i946: i64;
  var $i947: i1;
  var $p948: ref;
  var $i950: i64;
  var $i951: i1;
  var $p953: ref;
  var $p954: ref;
  var $p956: ref;
  var $p957: ref;
  var $i958: i64;
  var $i959: i1;
  var $p961: ref;
  var $p962: ref;
  var $p964: ref;
  var $p965: ref;
  var $p967: ref;
  var $p968: ref;
  var $p970: ref;
  var $p971: ref;
  var $i972: i64;
  var $i973: i1;
  var $i974: i32;
  var $i975: i64;
  var $p976: ref;
  var $i977: i1;
  var $p980: ref;
  var $p978: ref;
  var $i982: i64;
  var $i983: i1;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $i987: i32;
  var $i988: i64;
  var $p989: ref;
  var $p990: ref;
  var $p991: ref;
  var $i992: i64;
  var $i993: i1;
  var $p994: ref;
  var $p998: ref;
  var $p1000: ref;
  var $p1001: ref;
  var $i1002: i64;
  var $i1003: i1;
  var $p1004: ref;
  var $p1005: ref;
  var $i1006: i64;
  var $i1007: i1;
  var $i1008: i32;
  var $i1009: i64;
  var $p1010: ref;
  var $i1011: i1;
  var $p1014: ref;
  var $p1012: ref;
  var $i1016: i64;
  var $i1017: i1;
  var $p1019: ref;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $p1023: ref;
  var $i1024: i32;
  var $i1025: i64;
  var $p1026: ref;
  var $p1027: ref;
  var $p1028: ref;
  var $i1029: i64;
  var $i1030: i1;
  var $p1032: ref;
  var $p1033: ref;
  var $p1034: ref;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $p1040: ref;
  var $p1041: ref;
  var $p1042: ref;
  var $p1043: ref;
  var $p1044: ref;
  var $p1045: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $p1049: ref;
  var $p1051: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $p1055: ref;
  var $i1056: i32;
  var $i1057: i64;
  var $p1058: ref;
  var $p1059: ref;
  var $i1060: i64;
  var $i1061: i1;
  var $p1063: ref;
  var $p1064: ref;
  var $i1065: i64;
  var $i1066: i1;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $p1071: ref;
  var $i1072: i1;
  var $i1073: i8;
  var $i1074: i1;
  var $i1075: i32;
  var $i1076: i1;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1081: ref;
  var $p1082: ref;
  var $p1084: ref;
  var $p1085: ref;
  var $p1086: ref;
  var $p1087: ref;
  var $p1088: ref;
  var $p1089: ref;
  var $p1091: ref;
  var $p1093: ref;
  var $p1095: ref;
  var $p1096: ref;
  var $p1097: ref;
  var $i1098: i32;
  var $i1099: i64;
  var $p1100: ref;
  var $p1101: ref;
  var $i1102: i64;
  var $i1103: i1;
  var $p1105: ref;
  var $p1106: ref;
  var $i1107: i64;
  var $i1108: i1;
  var $p1109: ref;
  var $p1110: ref;
  var $p1112: ref;
  var $p1113: ref;
  var $p1114: ref;
  var $p1115: ref;
  var $p1116: ref;
  var $p1117: ref;
  var $p1119: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $i1123: i1;
  var $i1124: i8;
  var $i1125: i1;
  var $i1126: i32;
  var $i1127: i1;
  var $p1128: ref;
  var $p1129: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $p1133: ref;
  var $p1134: ref;
  var $p1135: ref;
  var $p1136: ref;
  var $p1137: ref;
  var $p1138: ref;
  var $p1139: ref;
  var $i1140: i64;
  var $i1141: i1;
  var $i1142: i32;
  var $i1143: i64;
  var $p1144: ref;
  var $i1145: i1;
  var $p1148: ref;
  var $p1146: ref;
  var $i1150: i64;
  var $i1151: i1;
  var $p1152: ref;
  var $p1153: ref;
  var $p1154: ref;
  var $i1155: i32;
  var $i1156: i64;
  var $p1157: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $i1160: i64;
  var $i1161: i1;
  var $p1162: ref;
  var $p1166: ref;
  var $p1168: ref;
  var $p1169: ref;
  var $i1170: i64;
  var $i1171: i1;
  var $p1173: ref;
  var $p1174: ref;
  var $p1176: ref;
  var $p1177: ref;
  var $p1178: ref;
  var $i1179: i64;
  var $i1180: i1;
  var $i1181: i32;
  var $i1182: i64;
  var $p1183: ref;
  var $i1184: i1;
  var $p1187: ref;
  var $p1185: ref;
  var $i1189: i64;
  var $i1190: i1;
  var $p1192: ref;
  var $p1193: ref;
  var $p1194: ref;
  var $p1195: ref;
  var $p1196: ref;
  var $i1197: i32;
  var $i1198: i64;
  var $p1199: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $i1202: i64;
  var $i1203: i1;
  var $p1204: ref;
  var $i1206: i64;
  var $i1207: i1;
  var $p1209: ref;
  var $p1210: ref;
  var $p1211: ref;
  var $p1212: ref;
  var $i1213: i64;
  var $i1214: i1;
  var $i1215: i32;
  var $i1216: i64;
  var $p1217: ref;
  var $i1218: i1;
  var $p1221: ref;
  var $p1219: ref;
  var $i1223: i64;
  var $i1224: i1;
  var $p1225: ref;
  var $p1226: ref;
  var $p1227: ref;
  var $i1228: i32;
  var $i1229: i64;
  var $p1230: ref;
  var $p1231: ref;
  var $p1232: ref;
  var $i1233: i64;
  var $i1234: i1;
  var $p1235: ref;
  var $p1239: ref;
  var $p1241: ref;
  var $p1242: ref;
  var $i1243: i64;
  var $i1244: i1;
  var $p1245: ref;
  var $p1246: ref;
  var $i1247: i64;
  var $i1248: i1;
  var $i1249: i32;
  var $i1250: i64;
  var $p1251: ref;
  var $i1252: i1;
  var $p1255: ref;
  var $p1253: ref;
  var $i1257: i64;
  var $i1258: i1;
  var $p1260: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $p1263: ref;
  var $p1264: ref;
  var $i1265: i32;
  var $i1266: i64;
  var $p1267: ref;
  var $p1268: ref;
  var $p1269: ref;
  var $i1270: i64;
  var $i1271: i1;
  var $p1272: ref;
  var $i1274: i64;
  var $i1275: i1;
  var $p1277: ref;
  var $p1278: ref;
  var $p1279: ref;
  var $p1280: ref;
  var $i1281: i64;
  var $i1282: i1;
  var $i1283: i32;
  var $i1284: i64;
  var $p1285: ref;
  var $i1286: i1;
  var $p1289: ref;
  var $p1287: ref;
  var $i1291: i64;
  var $i1292: i1;
  var $p1293: ref;
  var $p1294: ref;
  var $p1295: ref;
  var $i1296: i32;
  var $i1297: i64;
  var $p1298: ref;
  var $p1299: ref;
  var $p1300: ref;
  var $i1301: i64;
  var $i1302: i1;
  var $p1303: ref;
  var $p1307: ref;
  var $p1309: ref;
  var $p1310: ref;
  var $i1311: i64;
  var $i1312: i1;
  var $p1313: ref;
  var $p1314: ref;
  var $i1315: i64;
  var $i1316: i1;
  var $i1317: i32;
  var $i1318: i64;
  var $p1319: ref;
  var $i1320: i1;
  var $p1323: ref;
  var $p1321: ref;
  var $i1325: i64;
  var $i1326: i1;
  var $p1328: ref;
  var $p1329: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $i1333: i32;
  var $i1334: i64;
  var $p1335: ref;
  var $p1336: ref;
  var $p1337: ref;
  var $i1338: i64;
  var $i1339: i1;
  var $p1340: ref;
  var $i1342: i64;
  var $i1343: i1;
  var $p1344: ref;
  var $p1345: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $i1348: i32;
  var $i1349: i64;
  var $p1350: ref;
  var $i1351: i1;
  var $p1354: ref;
  var $p1352: ref;
  var $i1356: i64;
  var $i1357: i1;
  var $p1358: ref;
  var $p1359: ref;
  var $p1360: ref;
  var $i1361: i32;
  var $i1362: i64;
  var $p1363: ref;
  var $p1364: ref;
  var $p1365: ref;
  var $i1366: i64;
  var $i1367: i1;
  var $p1368: ref;
  var $p1372: ref;
  var $p1374: ref;
  var $p1375: ref;
  var $i1376: i64;
  var $i1377: i1;
  var $p1378: ref;
  var $p1379: ref;
  var $i1380: i64;
  var $i1381: i1;
  var $i1382: i32;
  var $i1383: i64;
  var $p1384: ref;
  var $i1385: i1;
  var $p1388: ref;
  var $p1386: ref;
  var $i1390: i64;
  var $i1391: i1;
  var $p1393: ref;
  var $p1394: ref;
  var $p1395: ref;
  var $p1396: ref;
  var $p1397: ref;
  var $i1398: i32;
  var $i1399: i64;
  var $p1400: ref;
  var $p1401: ref;
  var $p1402: ref;
  var $i1403: i64;
  var $i1404: i1;
  var $p1405: ref;
  var $i1407: i64;
  var $i1408: i1;
  var $p1409: ref;
  var $p1410: ref;
  var $i1411: i64;
  var $i1412: i1;
  var $i1413: i32;
  var $i1414: i64;
  var $p1415: ref;
  var $i1416: i1;
  var $p1419: ref;
  var $p1417: ref;
  var $i1421: i64;
  var $i1422: i1;
  var $p1423: ref;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i32;
  var $i1427: i64;
  var $p1428: ref;
  var $p1429: ref;
  var $p1430: ref;
  var $i1431: i64;
  var $i1432: i1;
  var $p1433: ref;
  var $p1437: ref;
  var $p1439: ref;
  var $p1440: ref;
  var $i1441: i64;
  var $i1442: i1;
  var $p1443: ref;
  var $p1444: ref;
  var $i1445: i64;
  var $i1446: i1;
  var $i1447: i32;
  var $i1448: i64;
  var $p1449: ref;
  var $i1450: i1;
  var $p1453: ref;
  var $p1451: ref;
  var $i1455: i64;
  var $i1456: i1;
  var $p1458: ref;
  var $p1459: ref;
  var $p1460: ref;
  var $p1461: ref;
  var $p1462: ref;
  var $i1463: i32;
  var $i1464: i64;
  var $p1465: ref;
  var $p1466: ref;
  var $p1467: ref;
  var $i1468: i64;
  var $i1469: i1;
  var $p1470: ref;
  var $i1472: i64;
  var $i1473: i1;
  var $p1474: ref;
  var $p1475: ref;
  var $p1476: ref;
  var $i1477: i32;
  var $i1478: i64;
  var $p1479: ref;
  var $p1481: ref;
  var $p1483: ref;
  var $p1485: ref;
  var $p1487: ref;
  var $p1489: ref;
  var $p1491: ref;
  var $p1493: ref;
  var $p1495: ref;
  var $p1497: ref;
  var $p1499: ref;
  var $p1500: ref;
  var $p1501: ref;
  var $p1502: ref;
  var $p1503: ref;
  var $p1504: ref;
  var $p1505: ref;
  var $p1506: ref;
  var $p1507: ref;
  var $p1508: ref;
  var $i1509: i64;
  var $i1510: i1;
  var $i1511: i32;
  var $i1512: i64;
  var $p1513: ref;
  var $i1514: i1;
  var $p1517: ref;
  var $p1515: ref;
  var $i1519: i64;
  var $i1520: i1;
  var $p1521: ref;
  var $p1522: ref;
  var $p1523: ref;
  var $i1524: i32;
  var $i1525: i64;
  var $p1526: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $i1529: i64;
  var $i1530: i1;
  var $p1531: ref;
  var $p1535: ref;
  var $p1537: ref;
  var $p1538: ref;
  var $i1539: i64;
  var $i1540: i1;
  var $p1542: ref;
  var $p1543: ref;
  var $p1545: ref;
  var $i1546: i64;
  var $i1547: i1;
  var $p1549: ref;
  var $p1550: ref;
  var $i1551: i64;
  var $i1552: i1;
  var $p1554: ref;
  var $p1555: ref;
  var $p1557: ref;
  var $p1558: ref;
  var $p1559: ref;
  var $p1560: ref;
  var $i1561: i1;
  var $i1562: i8;
  var $i1563: i1;
  var $i1564: i32;
  var $i1565: i1;
  var $p1567: ref;
  var $p1568: ref;
  var $p1569: ref;
  var $p1570: ref;
  var $p1571: ref;
  var $i1572: i64;
  var $i1573: i1;
  var $i1574: i32;
  var $i1575: i64;
  var $p1576: ref;
  var $i1577: i1;
  var $p1580: ref;
  var $p1578: ref;
  var $i1582: i64;
  var $i1583: i1;
  var $p1584: ref;
  var $p1585: ref;
  var $p1586: ref;
  var $i1587: i32;
  var $i1588: i64;
  var $p1589: ref;
  var $p1590: ref;
  var $p1591: ref;
  var $i1592: i64;
  var $i1593: i1;
  var $p1594: ref;
  var $p1598: ref;
  var $p1600: ref;
  var $p1601: ref;
  var $i1602: i64;
  var $i1603: i1;
  var $p1604: ref;
  var $p1605: ref;
  var $i1606: i64;
  var $i1607: i1;
  var $i1608: i32;
  var $i1609: i64;
  var $p1610: ref;
  var $i1611: i1;
  var $p1614: ref;
  var $p1612: ref;
  var $i1616: i64;
  var $i1617: i1;
  var $p1619: ref;
  var $p1620: ref;
  var $p1621: ref;
  var $p1622: ref;
  var $p1623: ref;
  var $i1624: i32;
  var $i1625: i64;
  var $p1626: ref;
  var $p1627: ref;
  var $p1628: ref;
  var $i1629: i64;
  var $i1630: i1;
  var $p1631: ref;
  var $p1635: ref;
  var $p1637: ref;
  var $p1638: ref;
  var $i1639: i64;
  var $i1640: i1;
  var $p1641: ref;
  var $p1642: ref;
  var $p1643: ref;
  var $i1644: i8;
  var $i1645: i8;
  var $p1646: ref;
  var $p1647: ref;
  var $i1648: i8;
  var $i1649: i8;
  var $p1650: ref;
  var $i1651: i8;
  var $i1652: i8;
  var $p1653: ref;
  var $p1654: ref;
  var $i1655: i8;
  var $i1656: i8;
  var $p1657: ref;
  var $i1658: i8;
  var $i1659: i8;
  var $p1660: ref;
  var $i1661: i8;
  var $i1662: i8;
  var $p1663: ref;
  var $i1664: i8;
  var $i1665: i8;
  var $p1666: ref;
  var $i1667: i8;
  var $i1668: i8;
  var $p1669: ref;
  var $p1670: ref;
  var $p1671: ref;
  var $i1672: i8;
  var $i1673: i8;
  var $p1674: ref;
  var $p1675: ref;
  var $p1676: ref;
  var $p1677: ref;
  var $i1678: i8;
  var $i1679: i8;
  var $p1680: ref;
  var $i1681: i8;
  var $i1682: i8;
  var $p1683: ref;
  var $p1684: ref;
  var $p1685: ref;
  var $i1686: i8;
  var $i1687: i8;
  var $p1688: ref;
  var $p1689: ref;
  var $p1690: ref;
  var $p1691: ref;
  var $p1692: ref;
  var $i1693: i8;
  var $i1694: i8;
  var $i1695: i8;
  var $p1696: ref;
  var $p1697: ref;
  var $i1698: i8;
  var $i1699: i8;
  var $i1700: i8;
  var $p1701: ref;
  var $p1702: ref;
  var $p1703: ref;
  var $p1704: ref;
  var $p1706: ref;
  var $p1708: ref;
  var $p1710: ref;
  var $p1711: ref;
  var $p1712: ref;
  var $i1713: i32;
  var $i1714: i64;
  var $p1715: ref;
  var $p1716: ref;
  var $i1717: i64;
  var $i1718: i1;
  var $p1720: ref;
  var $p1721: ref;
  var $i1722: i64;
  var $i1723: i1;
  var $p1725: ref;
  var $p1726: ref;
  var $p1727: ref;
  var $p1728: ref;
  var $i1729: i1;
  var $i1730: i8;
  var $i1731: i1;
  var $i1732: i32;
  var $i1733: i1;
  var $p1734: ref;
  var $p1735: ref;
  var $p1736: ref;
  var $p1738: ref;
  var $p1739: ref;
  var $p1740: ref;
  var $p1741: ref;
  var $p1742: ref;
  var $p1744: ref;
  var $p1745: ref;
  var $p1746: ref;
  var $p1747: ref;
  var $p1748: ref;
  var $p1749: ref;
  var $p1751: ref;
  var $p1753: ref;
  var $p1755: ref;
  var $i1756: i64;
  var $i1757: i1;
  var $p1759: ref;
  var $p1760: ref;
  var $i1761: i64;
  var $i1762: i1;
  var $p1763: ref;
  var $p1764: ref;
  var $p1766: ref;
  var $p1767: ref;
  var $p1768: ref;
  var $p1769: ref;
  var $p1770: ref;
  var $p1771: ref;
  var $p1773: ref;
  var $p1774: ref;
  var $p1775: ref;
  var $p1776: ref;
  var $i1777: i1;
  var $i1778: i8;
  var $i1779: i1;
  var $i1780: i32;
  var $i1781: i1;
  var $p1782: ref;
  var $p1783: ref;
  var $p1785: ref;
  var $p1786: ref;
  var $p1787: ref;
  var $p1788: ref;
  var $p1789: ref;
  var $p1790: ref;
  var $p1791: ref;
  var $p1793: ref;
  var $p1794: ref;
  var $p1797: ref;
  var $p1798: ref;
  var $p1800: ref;
  var $p1801: ref;
  var $p1803: ref;
  var $p1805: ref;
  var $p1806: ref;
  var $p1807: ref;
  var $p1808: ref;
  var $p1809: ref;
  var $p1810: ref;
  var $p1812: ref;
  var $p1814: ref;
  var $p1816: ref;
  var $p1817: ref;
  var $p1818: ref;
  var $i1819: i32;
  var $i1820: i64;
  var $p1821: ref;
  var $p1822: ref;
  var $i1823: i64;
  var $i1824: i1;
  var $p1826: ref;
  var $p1827: ref;
  var $i1828: i64;
  var $i1829: i1;
  var $p1830: ref;
  var $p1831: ref;
  var $p1833: ref;
  var $p1834: ref;
  var $p1835: ref;
  var $p1836: ref;
  var $p1837: ref;
  var $p1838: ref;
  var $p1839: ref;
  var $p1840: ref;
  var $p1842: ref;
  var $p1843: ref;
  var $p1844: ref;
  var $p1845: ref;
  var $p1846: ref;
  var $p1847: ref;
  var $p1849: ref;
  var $p1850: ref;
  var $p1851: ref;
  var $p1852: ref;
  var $i1853: i1;
  var $i1854: i8;
  var $i1855: i1;
  var $i1856: i32;
  var $i1857: i1;
  var $p1858: ref;
  var $p1859: ref;
  var $p1861: ref;
  var $p1862: ref;
  var $p1863: ref;
  var $p1864: ref;
  var $p1865: ref;
  var $p1866: ref;
  var $p1867: ref;
  var $p1868: ref;
  var $p1870: ref;
  var $p1871: ref;
  var $p1872: ref;
  var $p1873: ref;
  var $p1874: ref;
  var $p1875: ref;
  var $p1876: ref;
  var $p1877: ref;
  var $p1878: ref;
  var $p1879: ref;
  var $p1881: ref;
  var $p1882: ref;
  var $p1883: ref;
  var $p1884: ref;
  var $p1885: ref;
  var $p1887: ref;
  var $p1889: ref;
  var $p1890: ref;
  var $p1891: ref;
  var $p1893: ref;
  var $p1894: ref;
  var $p1895: ref;
  var $i1896: i32;
  var $i1897: i64;
  var $p1898: ref;
  var $p1899: ref;
  var $i1900: i64;
  var $i1901: i1;
  var $p1903: ref;
  var $p1904: ref;
  var $i1905: i64;
  var $i1906: i1;
  var $p1908: ref;
  var $p1909: ref;
  var $p1910: ref;
  var $p1911: ref;
  var $i1912: i1;
  var $i1913: i8;
  var $i1914: i1;
  var $i1915: i32;
  var $i1916: i1;
  var $p1917: ref;
  var $p1918: ref;
  var $p1920: ref;
  var $p1921: ref;
  var $p1922: ref;
  var $p1923: ref;
  var $p1924: ref;
  var $p1925: ref;
  var $p1926: ref;
  var $p1928: ref;
  var $p1930: ref;
  var $p1931: ref;
  var $p1932: ref;
  var $p1934: ref;
  var $p1935: ref;
  var $i1936: i64;
  var $i1937: i1;
  var $p1939: ref;
  var $p1940: ref;
  var $i1941: i64;
  var $i1942: i1;
  var $p1943: ref;
  var $p1944: ref;
  var $p1946: ref;
  var $p1947: ref;
  var $p1948: ref;
  var $p1949: ref;
  var $p1950: ref;
  var $p1951: ref;
  var $p1953: ref;
  var $p1954: ref;
  var $p1955: ref;
  var $p1956: ref;
  var $i1957: i1;
  var $i1958: i8;
  var $i1959: i1;
  var $i1960: i32;
  var $i1961: i1;
  var $p1962: ref;
  var $p1963: ref;
  var $p1965: ref;
  var $p1966: ref;
  var $p1967: ref;
  var $p1968: ref;
  var $p1969: ref;
  var $p1970: ref;
  var $p1971: ref;
  var $p1973: ref;
  var $p1974: ref;
  var $p1976: ref;
  var $p1977: ref;
  var $p1978: ref;
  var $p1979: ref;
  var $p1981: ref;
  var $p1982: ref;
  var $p1983: ref;
  var $p1984: ref;
  var $p1985: ref;
  var $p1987: ref;
  var $p1989: ref;
  var $p1990: ref;
  var $p1991: ref;
  var $p1993: ref;
  var $p1994: ref;
  var $p1995: ref;
  var $i1996: i32;
  var $i1997: i64;
  var $p1998: ref;
  var $p1999: ref;
  var $i2000: i64;
  var $i2001: i1;
  var $p2003: ref;
  var $p2004: ref;
  var $i2005: i64;
  var $i2006: i1;
  var $p2008: ref;
  var $p2009: ref;
  var $p2010: ref;
  var $p2011: ref;
  var $i2012: i1;
  var $i2013: i8;
  var $i2014: i1;
  var $i2015: i32;
  var $i2016: i1;
  var $p2017: ref;
  var $p2018: ref;
  var $p2020: ref;
  var $p2021: ref;
  var $p2022: ref;
  var $p2023: ref;
  var $p2024: ref;
  var $p2025: ref;
  var $p2026: ref;
  var $p2028: ref;
  var $p2030: ref;
  var $p2032: ref;
  var $p2033: ref;
  var $i2034: i64;
  var $i2035: i1;
  var $p2037: ref;
  var $p2038: ref;
  var $i2039: i64;
  var $i2040: i1;
  var $p2041: ref;
  var $p2042: ref;
  var $p2044: ref;
  var $p2045: ref;
  var $p2046: ref;
  var $p2047: ref;
  var $p2048: ref;
  var $p2049: ref;
  var $p2051: ref;
  var $p2052: ref;
  var $p2053: ref;
  var $p2054: ref;
  var $i2055: i1;
  var $i2056: i8;
  var $i2057: i1;
  var $i2058: i32;
  var $i2059: i1;
  var $p2060: ref;
  var $p2061: ref;
  var $p2063: ref;
  var $p2064: ref;
  var $p2065: ref;
  var $p2066: ref;
  var $p2067: ref;
  var $p2068: ref;
  var $p2069: ref;
  var $p2070: ref;
  var $p2071: ref;
  var $p2074: ref;
  var $p2075: ref;
  var $i2076: i64;
  var $i2077: i1;
  var $p2078: ref;
  var $p2079: ref;
  var $p2082: ref;
  var $p2083: ref;
  var $p2084: ref;
  var $p2086: ref;
  var $p2087: ref;
  var $i2088: i64;
  var $i2089: i1;
  var $p2091: ref;
  var $p2092: ref;
  var $p2093: ref;
  var $p2094: ref;
  var $p2095: ref;
  var $p2096: ref;
  var $i2097: i32;
  var $i2098: i1;
  var $p2099: ref;
  var $p2100: ref;
  var $p2102: ref;
  var $i2103: i32;
  var $p2105: ref;
  var $i161: i32;
  var $p2106: ref;
  var $p2107: ref;
  var $i23: i32;
  var $p2109: ref;
  var $p2111: ref;
  var $p2113: ref;
  var $p2115: ref;
  var $p2117: ref;
  var $p2119: ref;
  var $p2121: ref;
  var $p2123: ref;
  var $p2125: ref;
  var $p2127: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i64;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i64;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i64;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i64;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i64;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i64;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p11 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p12 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p15 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p16 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(364, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(440, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_47 := printk.ref.ref(.str, $p30);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p32 := kzalloc(2360, 208);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p32);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $0.ref);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(8540, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(8572, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i57 := $and.i8($i56, 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(8568, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i61 := em28xx_alloc_urbs($p0, 2, $i58, 5, $i60, 64);
    call {:si_unique_call 58} {:cexpr "result"} boogie_si_record_i32($i61);
    assume {:verifier.code 0} true;
    $i54 := $i61;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i54, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7808, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} mutex_lock_nested($p68, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_50 := em28xx_set_mode($p0, 2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(352, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 75);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i71, 86);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i71, 92);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i71, 94);
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i71, 96);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i71, 97);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i71, 97);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $p2070 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p2071 := $bitcast.ref.ref($p2070);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_149 := printk.ref.ref(.str.65, $p2071);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p2074 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p2075 := $load.ref($M.0, $p2074);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i2076 := $p2i.ref.i64($p2075);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i2077 := $eq.i64($i2076, 0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2077} true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i2077 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    $p2082 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p2083 := $load.ref($M.0, $p2082);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p2084 := $add.ref($add.ref($p2083, $mul.ref(0, 1584)), $mul.ref(1568, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2084, em28xx_tuner_callback);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p2086 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p2087 := $load.ref($M.0, $p2086);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i2088 := $p2i.ref.i64($p2087);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i2089 := $ne.i64($i2088, 0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2089} true;
    goto $bb726, $bb727;

  $bb727:
    assume !($i2089 == 1);
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    $p2094 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(8520, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p2095 := $load.ref($M.0, $p2094);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p2096 := $add.ref($add.ref($p2095, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i2097 := em28xx_register_dvb($p33, __this_module, $p0, $p2096);
    call {:si_unique_call 422} {:cexpr "result"} boogie_si_record_i32($i2097);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i2098 := $slt.i32($i2097, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2098} true;
    goto $bb729, $bb730;

  $bb730:
    assume !($i2098 == 1);
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p2099 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p2100 := $bitcast.ref.ref($p2099);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_151 := printk.ref.ref(.str.67, $p2100);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p2102 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(0, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} kref_get($p2102);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i2103 := $i2097;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_152 := em28xx_set_mode($p0, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p2105 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7808, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} mutex_unlock($p2105);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i23 := $i2103;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb729:
    assume $i2098 == 1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i161 := $i2097;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p2106 := $bitcast.ref.ref($p33);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} kfree($p2106);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p2107 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2107, $0.ref);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i2103 := $i161;
    goto $bb732;

  $bb726:
    assume $i2089 == 1;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p2091 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p2092 := $load.ref($M.0, $p2091);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p2093 := $add.ref($add.ref($p2092, $mul.ref(0, 1584)), $mul.ref(1568, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2093, em28xx_tuner_callback);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb723:
    assume $i2077 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p2078 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p2079 := $bitcast.ref.ref($p2078);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_150 := printk.ref.ref(.str.66, $p2079);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} terratec_htc_stick_init($p0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p1279 := __symbol_get(.str.40);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p1280 := $bitcast.ref.ref($p1279);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i1281 := $p2i.ref.i64($p1280);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i1282 := $ne.i64($i1281, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i1283 := $zext.i1.i32($i1282);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i1284 := $sext.i32.i64($i1283);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p1285 := $i2p.i64.ref($i1284);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i1286 := $ne.ref($p1285, $0.ref);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1286} true;
    goto $bb514, $bb515;

  $bb515:
    assume !($i1286 == 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_122 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p1289 := __symbol_get(.str.40);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1287 := $p1289;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i1291 := $p2i.ref.i64($p1287);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i1292 := $ne.i64($i1291, 0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1292} true;
    goto $bb517, $bb518;

  $bb518:
    assume !($i1292 == 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_123 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p1303 := $0.ref;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1307, $p1303);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p1309 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p1310 := $load.ref($M.0, $p1309);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p1310);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i1312 := $eq.i64($i1311, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1312} true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i1312 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p1313 := __symbol_get(.str.33);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p1314 := $bitcast.ref.ref($p1313);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i1315 := $p2i.ref.i64($p1314);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i1316 := $ne.i64($i1315, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i1317 := $zext.i1.i32($i1316);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i1318 := $sext.i32.i64($i1317);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p1319 := $i2p.i64.ref($i1318);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i1320 := $ne.ref($p1319, $0.ref);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1320} true;
    goto $bb526, $bb527;

  $bb527:
    assume !($i1320 == 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_124 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p1323 := __symbol_get(.str.33);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1321 := $p1323;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i1325 := $p2i.ref.i64($p1321);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i1326 := $ne.i64($i1325, 0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1326} true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i1326 == 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_125 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1340 := $0.ref;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i1342 := $p2i.ref.i64($p1340);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i1343 := $eq.i64($i1342, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1343} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i1343 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb535:
    assume $i1343 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb529:
    assume $i1326 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p1329 := $load.ref($M.0, $p1328);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p1331 := $bitcast.ref.ref($p1330);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p1332 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i1333 := $load.i32($M.0, $p1332);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i1334 := $zext.i32.i64($i1333);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($p1331, $mul.ref($i1334, 1944));
    call {:si_unique_call 309} $p1336 := devirtbounce.11($p1321, $p1329, 96, $p1335, em28xx_cxd2820r_tda18271_config);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p1337 := $bitcast.ref.ref($p1336);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i1338 := $p2i.ref.i64($p1337);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i1339 := $eq.i64($i1338, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1339} true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i1339 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    $p1340 := $p1336;
    goto $bb534;

  $bb531:
    assume $i1339 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} __symbol_put(.str.33);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb526:
    assume $i1320 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p1321 := $p1319;
    goto $bb528;

  $bb523:
    assume $i1312 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb517:
    assume $i1292 == 1;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p1294 := $bitcast.ref.ref($p1293);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i1296 := $load.i32($M.0, $p1295);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i1297 := $zext.i32.i64($i1296);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($p1294, $mul.ref($i1297, 1944));
    call {:si_unique_call 303} $p1299 := devirtbounce.13($p1287, terratec_htc_stick_drxk, $p1298);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p1300 := $bitcast.ref.ref($p1299);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i1301 := $p2i.ref.i64($p1300);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i1302 := $eq.i64($i1301, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1302} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i1302 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $p1303 := $p1299;
    goto $bb522;

  $bb519:
    assume $i1302 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __symbol_put(.str.40);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb514:
    assume $i1286 == 1;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p1287 := $p1285;
    goto $bb516;

  $bb28:
    assume $i77 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p1977 := $bitcast.ref.ref($p16);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 63} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p1977, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p1978 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1978, $p14);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p1979 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p1981 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1981, $p32);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p1982 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1982, 6);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p1983 := $bitcast.ref.ref($p15);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.11;
    call {:si_unique_call 64} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p1983, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_3;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p1984 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p1985 := $bitcast.ref.ref($p1984);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_51 := strlcpy($p1985, .str.62, 20);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p1987 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1987, 100);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p1989 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1989, $p16);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p1990 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p1991 := $bitcast.ref.ref($p1990);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_52 := __request_module.i1.ref(1, $p1991);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p1993 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p1994 := $bitcast.ref.ref($p1993);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p1995 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i1996 := $load.i32($M.0, $p1995);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i1997 := $zext.i32.i64($i1996);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p1998 := $add.ref($p1994, $mul.ref($i1997, 1944));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p1999 := i2c_new_device($p1998, $p15);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i2000 := $p2i.ref.i64($p1999);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i2001 := $eq.i64($i2000, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2001} true;
    goto $bb698, $bb700;

  $bb700:
    assume !($i2001 == 1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p2003 := $add.ref($add.ref($add.ref($p1999, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p2004 := $load.ref($M.0, $p2003);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i2005 := $p2i.ref.i64($p2004);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i2006 := $eq.i64($i2005, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2006} true;
    goto $bb701, $bb702;

  $bb702:
    assume !($i2006 == 1);
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    $p2008 := $add.ref($add.ref($add.ref($p1999, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p2009 := $load.ref($M.0, $p2008);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p2010 := $add.ref($add.ref($p2009, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p2011 := $load.ref($M.0, $p2010);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i2012 := ldv_try_module_get_23($p2011);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i2013 := $zext.i1.i8($i2012);
    call {:si_unique_call 405} {:cexpr "tmp___209"} boogie_si_record_i8($i2013);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i2014 := $trunc.i8.i1($i2013);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2014} true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i2014 == 1);
    assume {:verifier.code 0} true;
    $i2015 := 1;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i2016 := $ne.i32($i2015, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2016} true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i2016 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    $p2017 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2017, $p1999);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p2018 := $bitcast.ref.ref($p17);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 407} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p2018, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p2020 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p2021 := $load.ref($M.0, $p2020);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p2022 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2022, $p2021);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p2023 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2023, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p2024 := $bitcast.ref.ref($p15);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.11;
    call {:si_unique_call 408} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p2024, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_27;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p2025 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p2026 := $bitcast.ref.ref($p2025);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_147 := strlcpy($p2026, .str.64, 20);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p2028 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p2028, 96);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p2030 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p2030, $p17);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_148 := __request_module.i1.ref(1, .str.63);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p2032 := $load.ref($M.0, $p14);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p2033 := i2c_new_device($p2032, $p15);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i2034 := $p2i.ref.i64($p2033);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i2035 := $eq.i64($i2034, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2035} true;
    goto $bb710, $bb712;

  $bb712:
    assume !($i2035 == 1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p2037 := $add.ref($add.ref($add.ref($p2033, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p2038 := $load.ref($M.0, $p2037);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i2039 := $p2i.ref.i64($p2038);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i2040 := $eq.i64($i2039, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2040} true;
    goto $bb713, $bb714;

  $bb714:
    assume !($i2040 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p2051 := $add.ref($add.ref($add.ref($p2033, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p2052 := $load.ref($M.0, $p2051);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p2053 := $add.ref($add.ref($p2052, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p2054 := $load.ref($M.0, $p2053);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i2055 := ldv_try_module_get_25($p2054);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i2056 := $zext.i1.i8($i2055);
    call {:si_unique_call 415} {:cexpr "tmp___211"} boogie_si_record_i8($i2056);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i2057 := $trunc.i8.i1($i2056);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2057} true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i2057 == 1);
    assume {:verifier.code 0} true;
    $i2058 := 1;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i2059 := $ne.i32($i2058, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2059} true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i2059 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    $p2069 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2069, $p2033);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb719:
    assume $i2059 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} i2c_unregister_device($p2033);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p2060 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p2061 := $load.ref($M.0, $p2060);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p2063 := $add.ref($add.ref($add.ref($p2061, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p2064 := $load.ref($M.0, $p2063);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p2065 := $add.ref($add.ref($p2064, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p2066 := $load.ref($M.0, $p2065);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_module_put_26($p2066);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p2067 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p2068 := $load.ref($M.0, $p2067);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} i2c_unregister_device($p2068);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb716:
    assume $i2057 == 1;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i2058 := 0;
    goto $bb718;

  $bb713:
    assume {:verifier.code 0} true;
    assume $i2040 == 1;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    $p2041 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p2042 := $load.ref($M.0, $p2041);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p2044 := $add.ref($add.ref($add.ref($p2042, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p2045 := $load.ref($M.0, $p2044);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p2046 := $add.ref($add.ref($p2045, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p2047 := $load.ref($M.0, $p2046);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_module_put_24($p2047);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p2048 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p2049 := $load.ref($M.0, $p2048);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} i2c_unregister_device($p2049);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb710:
    assume {:verifier.code 0} true;
    assume $i2035 == 1;
    goto $bb711;

  $bb707:
    assume $i2016 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} i2c_unregister_device($p1999);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb704:
    assume $i2014 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i2015 := 0;
    goto $bb706;

  $bb701:
    assume {:verifier.code 0} true;
    assume $i2006 == 1;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb698:
    assume {:verifier.code 0} true;
    assume $i2001 == 1;
    goto $bb699;

  $bb26:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i71, 94);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb32;

  $bb33:
    assume $i79 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p1877 := $bitcast.ref.ref($p12);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 68} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p1877, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p1878 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1878, $p10);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p1879 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p1881 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1881, $p32);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p1882 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1882, 6);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p1883 := $bitcast.ref.ref($p11);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.11;
    call {:si_unique_call 69} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p1883, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_7;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p1884 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p1885 := $bitcast.ref.ref($p1884);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} vslice_dummy_var_53 := strlcpy($p1885, .str.62, 20);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p1887 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1887, 100);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p1889 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1889, $p12);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p1890 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p1891 := $bitcast.ref.ref($p1890);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_54 := __request_module.i1.ref(1, $p1891);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p1893 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p1894 := $bitcast.ref.ref($p1893);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p1895 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i1896 := $load.i32($M.0, $p1895);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i1897 := $zext.i32.i64($i1896);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p1898 := $add.ref($p1894, $mul.ref($i1897, 1944));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p1899 := i2c_new_device($p1898, $p11);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i1900 := $p2i.ref.i64($p1899);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i1901 := $eq.i64($i1900, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1901} true;
    goto $bb674, $bb676;

  $bb676:
    assume !($i1901 == 1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p1903 := $add.ref($add.ref($add.ref($p1899, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p1904 := $load.ref($M.0, $p1903);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i1905 := $p2i.ref.i64($p1904);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i1906 := $eq.i64($i1905, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1906} true;
    goto $bb677, $bb678;

  $bb678:
    assume !($i1906 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p1908 := $add.ref($add.ref($add.ref($p1899, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p1909 := $load.ref($M.0, $p1908);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p1910 := $add.ref($add.ref($p1909, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p1911 := $load.ref($M.0, $p1910);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i1912 := ldv_try_module_get_19($p1911);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i1913 := $zext.i1.i8($i1912);
    call {:si_unique_call 390} {:cexpr "tmp___205"} boogie_si_record_i8($i1913);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i1914 := $trunc.i8.i1($i1913);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1914} true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i1914 == 1);
    assume {:verifier.code 0} true;
    $i1915 := 1;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i1916 := $ne.i32($i1915, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1916} true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i1916 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    $p1917 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1917, $p1899);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p1918 := $bitcast.ref.ref($p13);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 392} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p1918, 0, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p1920 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p1921 := $load.ref($M.0, $p1920);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p1922 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1922, $p1921);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p1923 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1923, 1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p1924 := $bitcast.ref.ref($p11);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.11;
    call {:si_unique_call 393} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p1924, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_23;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p1925 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p1926 := $bitcast.ref.ref($p1925);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_145 := strlcpy($p1926, .str.63, 20);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p1928 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1928, 96);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p1930 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1930, $p13);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p1931 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p1932 := $bitcast.ref.ref($p1931);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_146 := __request_module.i1.ref(1, $p1932);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p1934 := $load.ref($M.0, $p10);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p1935 := i2c_new_device($p1934, $p11);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i1936 := $p2i.ref.i64($p1935);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i1937 := $eq.i64($i1936, 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1937} true;
    goto $bb686, $bb688;

  $bb688:
    assume !($i1937 == 1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p1939 := $add.ref($add.ref($add.ref($p1935, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p1940 := $load.ref($M.0, $p1939);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i1941 := $p2i.ref.i64($p1940);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i1942 := $eq.i64($i1941, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1942} true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i1942 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p1953 := $add.ref($add.ref($add.ref($p1935, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p1954 := $load.ref($M.0, $p1953);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p1955 := $add.ref($add.ref($p1954, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p1956 := $load.ref($M.0, $p1955);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i1957 := ldv_try_module_get_21($p1956);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i1958 := $zext.i1.i8($i1957);
    call {:si_unique_call 400} {:cexpr "tmp___207"} boogie_si_record_i8($i1958);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i1959 := $trunc.i8.i1($i1958);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1959} true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i1959 == 1);
    assume {:verifier.code 0} true;
    $i1960 := 1;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i1961 := $ne.i32($i1960, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1961} true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i1961 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    $p1971 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1971, $p1935);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p1973 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p1974 := $load.ref($M.0, $p1973);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p1976 := $add.ref($add.ref($add.ref($p1974, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(376, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1976, em28xx_pctv_292e_set_lna);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb695:
    assume $i1961 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} i2c_unregister_device($p1935);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p1962 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p1963 := $load.ref($M.0, $p1962);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p1965 := $add.ref($add.ref($add.ref($p1963, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p1966 := $load.ref($M.0, $p1965);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p1967 := $add.ref($add.ref($p1966, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p1968 := $load.ref($M.0, $p1967);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} ldv_module_put_22($p1968);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p1969 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p1970 := $load.ref($M.0, $p1969);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} i2c_unregister_device($p1970);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb692:
    assume $i1959 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i1960 := 0;
    goto $bb694;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i1942 == 1;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    $p1943 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p1944 := $load.ref($M.0, $p1943);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p1946 := $add.ref($add.ref($add.ref($p1944, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p1947 := $load.ref($M.0, $p1946);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p1948 := $add.ref($add.ref($p1947, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p1949 := $load.ref($M.0, $p1948);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} ldv_module_put_20($p1949);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p1950 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p1951 := $load.ref($M.0, $p1950);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} i2c_unregister_device($p1951);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb686:
    assume {:verifier.code 0} true;
    assume $i1937 == 1;
    goto $bb687;

  $bb683:
    assume $i1916 == 1;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} i2c_unregister_device($p1899);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb680:
    assume $i1914 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i1915 := 0;
    goto $bb682;

  $bb677:
    assume {:verifier.code 0} true;
    assume $i1906 == 1;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb674:
    assume {:verifier.code 0} true;
    assume $i1901 == 1;
    goto $bb675;

  $bb24:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i71, 93);
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i80 == 1);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p1474 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p1475 := $bitcast.ref.ref($p1474);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p1476 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i1477 := $load.i32($M.0, $p1476);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i1478 := $zext.i32.i64($i1477);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($p1475, $mul.ref($i1478, 1944));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p1481 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1481, 116);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1483, 100);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1485, 97);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p1487 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1487, 49);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p1489 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1489, 56);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p1491 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1491, 50);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1493, 49);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p1495 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1495, 50);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1497, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p1499 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p1499, 0);
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    $p2109 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2109, 0);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    $p2111 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2111, 0);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p2113 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2113, 0);
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $p2115 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2115, 0);
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    $p2117 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2117, 0);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    $p2119 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2119, 0);
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    $p2121 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2121, 0);
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p2123 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(17, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2123, 0);
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $p2125 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2125, 0);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    $p2127 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(19, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p2127, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    $p1500 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1500, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p1501 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1501, 96);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p1502 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1502, kworld_ub435q_v3_config);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p1503 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1503, $0.ref);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p1504 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1504, $0.ref);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p1505 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1505, $0.ref);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p1506, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p1507 := __symbol_get(.str.30);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p1508 := $bitcast.ref.ref($p1507);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i1509 := $p2i.ref.i64($p1508);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i1510 := $ne.i64($i1509, 0);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i1511 := $zext.i1.i32($i1510);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i1512 := $sext.i32.i64($i1511);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p1513 := $i2p.i64.ref($i1512);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i1514 := $ne.ref($p1513, $0.ref);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1514} true;
    goto $bb590, $bb591;

  $bb591:
    assume !($i1514 == 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_134 := __request_module.i1.ref(1, .str.31);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p1517 := __symbol_get(.str.30);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1515 := $p1517;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i1519 := $p2i.ref.i64($p1515);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i1520 := $ne.i64($i1519, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1520} true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i1520 == 1);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_135 := printk.ref(.str.32);
    assume {:verifier.code 0} true;
    $p1531 := $0.ref;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1535, $p1531);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p1538 := $load.ref($M.0, $p1537);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i1539 := $p2i.ref.i64($p1538);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i1540 := $eq.i64($i1539, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1540} true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i1540 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    $p1542 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p1543 := $load.ref($M.0, $p1542);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(24, 1)), $p1543);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} vslice_dummy_var_136 := __request_module.i1.ref(1, .str.55);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p1545 := i2c_new_device($p1479, $p5);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i1546 := $p2i.ref.i64($p1545);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i1547 := $eq.i64($i1546, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1547} true;
    goto $bb602, $bb604;

  $bb604:
    assume !($i1547 == 1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p1549 := $add.ref($add.ref($add.ref($p1545, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p1550 := $load.ref($M.0, $p1549);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i1551 := $p2i.ref.i64($p1550);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i1552 := $eq.i64($i1551, 0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1552} true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i1552 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p1557 := $add.ref($add.ref($add.ref($p1545, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p1558 := $load.ref($M.0, $p1557);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p1559 := $add.ref($add.ref($p1558, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p1560 := $load.ref($M.0, $p1559);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i1561 := ldv_try_module_get_9($p1560);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i1562 := $zext.i1.i8($i1561);
    call {:si_unique_call 344} {:cexpr "tmp___187"} boogie_si_record_i8($i1562);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i1563 := $trunc.i8.i1($i1562);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1563} true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i1563 == 1);
    assume {:verifier.code 0} true;
    $i1564 := 1;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i1565 := $ne.i32($i1564, 0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1565} true;
    goto $bb611, $bb612;

  $bb612:
    assume !($i1565 == 1);
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    $p1569 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1569, $p1545);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb611:
    assume $i1565 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} i2c_unregister_device($p1545);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p1567 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p1568 := $load.ref($M.0, $p1567);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} dvb_frontend_detach($p1568);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb608:
    assume $i1563 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i1564 := 0;
    goto $bb610;

  $bb605:
    assume {:verifier.code 0} true;
    assume $i1552 == 1;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p1554 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p1555 := $load.ref($M.0, $p1554);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} dvb_frontend_detach($p1555);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb602:
    assume {:verifier.code 0} true;
    assume $i1547 == 1;
    goto $bb603;

  $bb599:
    assume $i1540 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb593:
    assume $i1520 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p1521 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p1522 := $bitcast.ref.ref($p1521);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p1523 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i1524 := $load.i32($M.0, $p1523);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i1525 := $zext.i32.i64($i1524);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($p1522, $mul.ref($i1525, 1944));
    call {:si_unique_call 337} $p1527 := devirtbounce.10($p1515, em2874_lgdt3305_nogate_dev, $p1526);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p1528 := $bitcast.ref.ref($p1527);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i1529 := $p2i.ref.i64($p1528);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i1530 := $eq.i64($i1529, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1530} true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i1530 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    $p1531 := $p1527;
    goto $bb598;

  $bb595:
    assume $i1530 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} __symbol_put(.str.30);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb590:
    assume $i1514 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p1515 := $p1513;
    goto $bb592;

  $bb35:
    assume $i80 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p1641 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1641, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p1642 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1642, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p1643 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i1644 := $load.i8($M.0, $p1643);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i1645 := $and.i8($i1644, $sub.i8(0, 4));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1643, $i1645);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p1646 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1646, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p1647 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i1648 := $load.i8($M.0, $p1647);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i1649 := $and.i8($i1648, $sub.i8(0, 2));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1647, $i1649);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p1650 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i1651 := $load.i8($M.0, $p1650);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i1652 := $and.i8($i1651, $sub.i8(0, 3));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1650, $i1652);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p1653 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(13, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1653, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p1654 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i1655 := $load.i8($M.0, $p1654);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i1656 := $and.i8($i1655, $sub.i8(0, 2));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1654, $i1656);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p1657 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i1658 := $load.i8($M.0, $p1657);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i1659 := $and.i8($i1658, $sub.i8(0, 7));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1657, $i1659);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p1660 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i1661 := $load.i8($M.0, $p1660);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i1662 := $and.i8($i1661, $sub.i8(0, 9));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1660, $i1662);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p1663 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i1664 := $load.i8($M.0, $p1663);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i1665 := $and.i8($i1664, $sub.i8(0, 17));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1663, $i1665);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p1666 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i1667 := $load.i8($M.0, $p1666);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i1668 := $and.i8($i1667, $sub.i8(0, 33));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1666, $i1668);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p1669 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1669, $0.ref);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p1670 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1670, $0.ref);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p1671 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i1672 := $load.i8($M.0, $p1671);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i1673 := $and.i8($i1672, $sub.i8(0, 2));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1671, $i1673);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p1674 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1674, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p1675 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1675, 0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p1676 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1676, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p1677 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(9, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i1678 := $load.i8($M.0, $p1677);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i1679 := $and.i8($i1678, $sub.i8(0, 4));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1677, $i1679);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p1680 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(9, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i1681 := $load.i8($M.0, $p1680);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i1682 := $and.i8($i1681, $sub.i8(0, 125));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1680, $i1682);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p1683 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1683, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p1684 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1684, $0.ref);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p1685 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i1686 := $load.i8($M.0, $p1685);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i1687 := $and.i8($i1686, $sub.i8(0, 2));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1685, $i1687);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p1688 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1688, $0.ref);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p1689 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1689, $0.ref);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p1690 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1690, 27000000);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p1691 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1691, 33);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p1692 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i1693 := $load.i8($M.0, $p1692);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i1694 := $and.i8($i1693, $sub.i8(0, 4));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i1695 := $or.i8($i1694, 2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1692, $i1695);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p1696 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1696, 16000);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p1697 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i1698 := $load.i8($M.0, $p1697);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i1699 := $and.i8($i1698, $sub.i8(0, 2));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i1700 := $or.i8($i1699, 1);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1697, $i1700);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p1701 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(13, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1701, $sub.i8(0, 103));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p1702 := $bitcast.ref.ref($p6);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.11;
    call {:si_unique_call 73} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p1702, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_9;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p1703 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p1704 := $bitcast.ref.ref($p1703);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_55 := strlcpy($p1704, .str.59, 20);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p1706 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1706, 104);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p1708 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1708, $p7);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_56 := __request_module.i1.ref(1, .str.59);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p1710 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p1711 := $bitcast.ref.ref($p1710);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p1712 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i1713 := $load.i32($M.0, $p1712);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i1714 := $zext.i32.i64($i1713);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p1715 := $add.ref($p1711, $mul.ref($i1714, 1944));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p1716 := i2c_new_device($p1715, $p6);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i1717 := $p2i.ref.i64($p1716);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i1718 := $eq.i64($i1717, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1718} true;
    goto $bb638, $bb640;

  $bb640:
    assume !($i1718 == 1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p1720 := $add.ref($add.ref($add.ref($p1716, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p1721 := $load.ref($M.0, $p1720);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i1722 := $p2i.ref.i64($p1721);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i1723 := $eq.i64($i1722, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1723} true;
    goto $bb641, $bb642;

  $bb642:
    assume !($i1723 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p1725 := $add.ref($add.ref($add.ref($p1716, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p1726 := $load.ref($M.0, $p1725);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p1727 := $add.ref($add.ref($p1726, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p1728 := $load.ref($M.0, $p1727);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i1729 := ldv_try_module_get_10($p1728);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i1730 := $zext.i1.i8($i1729);
    call {:si_unique_call 359} {:cexpr "tmp___199"} boogie_si_record_i8($i1730);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i1731 := $trunc.i8.i1($i1730);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1731} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i1731 == 1);
    assume {:verifier.code 0} true;
    $i1732 := 1;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i1733 := $ne.i32($i1732, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1733} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i1733 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    $p1734 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p1735 := $load.ref($M.0, $p1734);
    call {:si_unique_call 361} $p1736 := devirtbounce.18($p1735, $p1716);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p1738 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1738, $p1736);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p1739 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p1740 := $load.ref($M.0, $p1739);
    call {:si_unique_call 362} $p1741 := devirtbounce.20($p1740, $p1716);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p1742 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1742, $p1716);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p1744 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p1745 := $load.ref($M.0, $p1744);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p1746 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1746, $p1745);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p1747 := $bitcast.ref.ref($p6);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.11;
    call {:si_unique_call 363} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p1747, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_17;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p1748 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p1749 := $bitcast.ref.ref($p1748);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_141 := strlcpy($p1749, .str.60, 20);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p1751 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1751, 96);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p1753 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1753, $p8);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_142 := __request_module.i1.ref(1, .str.61);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p1755 := i2c_new_device($p1741, $p6);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i1756 := $p2i.ref.i64($p1755);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i1757 := $eq.i64($i1756, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1757} true;
    goto $bb650, $bb652;

  $bb652:
    assume !($i1757 == 1);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p1759 := $add.ref($add.ref($add.ref($p1755, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p1760 := $load.ref($M.0, $p1759);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i1761 := $p2i.ref.i64($p1760);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i1762 := $eq.i64($i1761, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1762} true;
    goto $bb653, $bb654;

  $bb654:
    assume !($i1762 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $p1773 := $add.ref($add.ref($add.ref($p1755, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p1774 := $load.ref($M.0, $p1773);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p1775 := $add.ref($add.ref($p1774, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p1776 := $load.ref($M.0, $p1775);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i1777 := ldv_try_module_get_12($p1776);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i1778 := $zext.i1.i8($i1777);
    call {:si_unique_call 370} {:cexpr "tmp___201"} boogie_si_record_i8($i1778);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i1779 := $trunc.i8.i1($i1778);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1779} true;
    goto $bb656, $bb657;

  $bb657:
    assume !($i1779 == 1);
    assume {:verifier.code 0} true;
    $i1780 := 1;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i1781 := $ne.i32($i1780, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1781} true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i1781 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    $p1791 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1791, $p1755);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p1793 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p1794 := $load.ref($M.0, $p1793);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p1797 := $add.ref($add.ref($add.ref($add.ref($p1794, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p1798 := $load.ref($M.0, $p1797);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p1800 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p1801 := $load.ref($M.0, $p1800);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p1803 := $add.ref($add.ref($add.ref($p1801, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1803, $p1798);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p1805 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p1806 := $load.ref($M.0, $p1805);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p1807 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1807, $p1806);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p1808 := $bitcast.ref.ref($p6);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.11;
    call {:si_unique_call 374} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p1808, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_19;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p1809 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p1810 := $bitcast.ref.ref($p1809);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_143 := strlcpy($p1810, .str.54, 20);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p1812 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1812, 8);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p1814 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1814, $p9);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_144 := __request_module.i1.ref(1, .str.54);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p1816 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p1817 := $bitcast.ref.ref($p1816);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p1818 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i1819 := $load.i32($M.0, $p1818);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i1820 := $zext.i32.i64($i1819);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p1821 := $add.ref($p1817, $mul.ref($i1820, 1944));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p1822 := i2c_new_device($p1821, $p6);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i1823 := $p2i.ref.i64($p1822);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i1824 := $eq.i64($i1823, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1824} true;
    goto $bb662, $bb664;

  $bb664:
    assume !($i1824 == 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p1826 := $add.ref($add.ref($add.ref($p1822, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p1827 := $load.ref($M.0, $p1826);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i1828 := $p2i.ref.i64($p1827);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i1829 := $eq.i64($i1828, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1829} true;
    goto $bb665, $bb666;

  $bb666:
    assume !($i1829 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p1849 := $add.ref($add.ref($add.ref($p1822, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p1850 := $load.ref($M.0, $p1849);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p1851 := $add.ref($add.ref($p1850, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p1852 := $load.ref($M.0, $p1851);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i1853 := ldv_try_module_get_16($p1852);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i1854 := $zext.i1.i8($i1853);
    call {:si_unique_call 383} {:cexpr "tmp___203"} boogie_si_record_i8($i1854);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i1855 := $trunc.i8.i1($i1854);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1855} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i1855 == 1);
    assume {:verifier.code 0} true;
    $i1856 := 1;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i1857 := $ne.i32($i1856, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1857} true;
    goto $bb671, $bb672;

  $bb672:
    assume !($i1857 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    $p1876 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2352, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1876, $p1822);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb671:
    assume $i1857 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} i2c_unregister_device($p1822);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p1858 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p1859 := $load.ref($M.0, $p1858);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p1861 := $add.ref($add.ref($add.ref($p1859, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p1862 := $load.ref($M.0, $p1861);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p1863 := $add.ref($add.ref($p1862, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p1864 := $load.ref($M.0, $p1863);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} ldv_module_put_17($p1864);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p1865 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p1866 := $load.ref($M.0, $p1865);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} i2c_unregister_device($p1866);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p1867 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p1868 := $load.ref($M.0, $p1867);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p1870 := $add.ref($add.ref($add.ref($p1868, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p1871 := $load.ref($M.0, $p1870);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p1872 := $add.ref($add.ref($p1871, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p1873 := $load.ref($M.0, $p1872);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_module_put_18($p1873);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p1874 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p1875 := $load.ref($M.0, $p1874);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} i2c_unregister_device($p1875);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb668:
    assume $i1855 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i1856 := 0;
    goto $bb670;

  $bb665:
    assume {:verifier.code 0} true;
    assume $i1829 == 1;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $p1830 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p1831 := $load.ref($M.0, $p1830);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p1833 := $add.ref($add.ref($add.ref($p1831, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p1834 := $load.ref($M.0, $p1833);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p1835 := $add.ref($add.ref($p1834, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p1836 := $load.ref($M.0, $p1835);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_module_put_14($p1836);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p1837 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p1838 := $load.ref($M.0, $p1837);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} i2c_unregister_device($p1838);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p1839 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p1840 := $load.ref($M.0, $p1839);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p1842 := $add.ref($add.ref($add.ref($p1840, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p1843 := $load.ref($M.0, $p1842);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p1844 := $add.ref($add.ref($p1843, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p1845 := $load.ref($M.0, $p1844);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} ldv_module_put_15($p1845);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p1846 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p1847 := $load.ref($M.0, $p1846);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} i2c_unregister_device($p1847);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb662:
    assume {:verifier.code 0} true;
    assume $i1824 == 1;
    goto $bb663;

  $bb659:
    assume $i1781 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} i2c_unregister_device($p1755);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p1782 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p1783 := $load.ref($M.0, $p1782);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p1785 := $add.ref($add.ref($add.ref($p1783, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p1786 := $load.ref($M.0, $p1785);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p1787 := $add.ref($add.ref($p1786, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p1788 := $load.ref($M.0, $p1787);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} ldv_module_put_13($p1788);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p1789 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p1790 := $load.ref($M.0, $p1789);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} i2c_unregister_device($p1790);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb656:
    assume $i1779 == 1;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i1780 := 0;
    goto $bb658;

  $bb653:
    assume {:verifier.code 0} true;
    assume $i1762 == 1;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p1763 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p1764 := $load.ref($M.0, $p1763);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p1766 := $add.ref($add.ref($add.ref($p1764, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p1767 := $load.ref($M.0, $p1766);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p1768 := $add.ref($add.ref($p1767, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p1769 := $load.ref($M.0, $p1768);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} ldv_module_put_11($p1769);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p1770 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p1771 := $load.ref($M.0, $p1770);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} i2c_unregister_device($p1771);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb650:
    assume {:verifier.code 0} true;
    assume $i1757 == 1;
    goto $bb651;

  $bb647:
    assume $i1733 == 1;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} i2c_unregister_device($p1716);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb644:
    assume $i1731 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i1732 := 0;
    goto $bb646;

  $bb641:
    assume {:verifier.code 0} true;
    assume $i1723 == 1;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb638:
    assume {:verifier.code 0} true;
    assume $i1718 == 1;
    goto $bb639;

  $bb22:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i71, 88);
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i71, 89);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i71, 90);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i71, 90);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb32;

  $bb43:
    assume $i84 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p1409 := __symbol_get(.str.30);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p1410 := $bitcast.ref.ref($p1409);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i1411 := $p2i.ref.i64($p1410);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i1412 := $ne.i64($i1411, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i1413 := $zext.i1.i32($i1412);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i1414 := $sext.i32.i64($i1413);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p1415 := $i2p.i64.ref($i1414);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i1416 := $ne.ref($p1415, $0.ref);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1416} true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i1416 == 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_130 := __request_module.i1.ref(1, .str.31);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p1419 := __symbol_get(.str.30);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1417 := $p1419;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i1421 := $p2i.ref.i64($p1417);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i1422 := $ne.i64($i1421, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1422} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i1422 == 1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_131 := printk.ref(.str.32);
    assume {:verifier.code 0} true;
    $p1433 := $0.ref;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1437, $p1433);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p1439 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p1440 := $load.ref($M.0, $p1439);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i1441 := $p2i.ref.i64($p1440);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i1442 := $eq.i64($i1441, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1442} true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i1442 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p1443 := __symbol_get(.str.33);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p1444 := $bitcast.ref.ref($p1443);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i1445 := $p2i.ref.i64($p1444);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i1446 := $ne.i64($i1445, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i1447 := $zext.i1.i32($i1446);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i1448 := $sext.i32.i64($i1447);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p1449 := $i2p.i64.ref($i1448);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i1450 := $ne.ref($p1449, $0.ref);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1450} true;
    goto $bb574, $bb575;

  $bb575:
    assume !($i1450 == 1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_132 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p1453 := __symbol_get(.str.33);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1451 := $p1453;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i1455 := $p2i.ref.i64($p1451);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i1456 := $ne.i64($i1455, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1456} true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i1456 == 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_133 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1470 := $0.ref;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i1472 := $p2i.ref.i64($p1470);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i1473 := $eq.i64($i1472, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1473} true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i1473 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb583:
    assume $i1473 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb577:
    assume $i1456 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p1459 := $load.ref($M.0, $p1458);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p1461 := $bitcast.ref.ref($p1460);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p1462 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i1463 := $load.i32($M.0, $p1462);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i1464 := $zext.i32.i64($i1463);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p1465 := $add.ref($p1461, $mul.ref($i1464, 1944));
    call {:si_unique_call 331} $p1466 := devirtbounce.11($p1451, $p1459, 96, $p1465, kworld_ub435q_v2_config);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p1467 := $bitcast.ref.ref($p1466);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i1468 := $p2i.ref.i64($p1467);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i1469 := $eq.i64($i1468, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1469} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i1469 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    $p1470 := $p1466;
    goto $bb582;

  $bb579:
    assume $i1469 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __symbol_put(.str.33);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb574:
    assume $i1450 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p1451 := $p1449;
    goto $bb576;

  $bb571:
    assume $i1442 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb565:
    assume $i1422 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p1423 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p1424 := $bitcast.ref.ref($p1423);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i1426 := $load.i32($M.0, $p1425);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i1427 := $zext.i32.i64($i1426);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p1428 := $add.ref($p1424, $mul.ref($i1427, 1944));
    call {:si_unique_call 325} $p1429 := devirtbounce.10($p1417, em2874_lgdt3305_dev, $p1428);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p1430 := $bitcast.ref.ref($p1429);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i1431 := $p2i.ref.i64($p1430);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i1432 := $eq.i64($i1431, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1432} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i1432 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    $p1433 := $p1429;
    goto $bb570;

  $bb567:
    assume $i1432 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __symbol_put(.str.30);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb562:
    assume $i1416 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p1417 := $p1415;
    goto $bb564;

  $bb41:
    assume $i83 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p1138 := __symbol_get(.str.40);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p1139 := $bitcast.ref.ref($p1138);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i1140 := $p2i.ref.i64($p1139);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i1141 := $ne.i64($i1140, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i1142 := $zext.i1.i32($i1141);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i1143 := $sext.i32.i64($i1142);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p1144 := $i2p.i64.ref($i1143);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i1145 := $ne.ref($p1144, $0.ref);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1145} true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i1145 == 1);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_114 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p1148 := __symbol_get(.str.40);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1146 := $p1148;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i1150 := $p2i.ref.i64($p1146);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i1151 := $ne.i64($i1150, 0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1151} true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i1151 == 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_115 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p1162 := $0.ref;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p1166 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1166, $p1162);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p1168 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p1169 := $load.ref($M.0, $p1168);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i1170 := $p2i.ref.i64($p1169);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i1171 := $ne.i64($i1170, 0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1171} true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i1171 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb475:
    assume $i1171 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p1173 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p1174 := $load.ref($M.0, $p1173);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($add.ref($p1174, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1176, $0.ref);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p1177 := __symbol_get(.str.33);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p1178 := $bitcast.ref.ref($p1177);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i1179 := $p2i.ref.i64($p1178);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i1180 := $ne.i64($i1179, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i1181 := $zext.i1.i32($i1180);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i1182 := $sext.i32.i64($i1181);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p1183 := $i2p.i64.ref($i1182);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i1184 := $ne.ref($p1183, $0.ref);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1184} true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i1184 == 1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_116 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p1187 := __symbol_get(.str.33);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1185 := $p1187;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i1189 := $p2i.ref.i64($p1185);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i1190 := $ne.i64($i1189, 0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1190} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i1190 == 1);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_117 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1204 := $0.ref;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i1206 := $p2i.ref.i64($p1204);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i1207 := $eq.i64($i1206, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1207} true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i1207 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb486:
    assume $i1207 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p1209 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p1210 := $load.ref($M.0, $p1209);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} dvb_frontend_detach($p1210);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb480:
    assume $i1190 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p1193 := $load.ref($M.0, $p1192);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p1195 := $bitcast.ref.ref($p1194);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i1197 := $load.i32($M.0, $p1196);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i1198 := $zext.i32.i64($i1197);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($p1195, $mul.ref($i1198, 1944));
    call {:si_unique_call 285} $p1200 := devirtbounce.11($p1185, $p1193, 96, $p1199, em28xx_cxd2820r_tda18271_config);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p1201 := $bitcast.ref.ref($p1200);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i1202 := $p2i.ref.i64($p1201);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i1203 := $eq.i64($i1202, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1203} true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i1203 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $p1204 := $p1200;
    goto $bb485;

  $bb482:
    assume $i1203 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} __symbol_put(.str.33);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb477:
    assume $i1184 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p1185 := $p1183;
    goto $bb479;

  $bb469:
    assume $i1151 == 1;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p1153 := $bitcast.ref.ref($p1152);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p1154 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i1155 := $load.i32($M.0, $p1154);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i1156 := $zext.i32.i64($i1155);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($p1153, $mul.ref($i1156, 1944));
    call {:si_unique_call 279} $p1158 := devirtbounce.13($p1146, maxmedia_ub425_tc_drxk, $p1157);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p1159 := $bitcast.ref.ref($p1158);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i1160 := $p2i.ref.i64($p1159);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i1161 := $eq.i64($i1160, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1161} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i1161 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $p1162 := $p1158;
    goto $bb474;

  $bb471:
    assume $i1161 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} __symbol_put(.str.40);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb466:
    assume $i1145 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p1146 := $p1144;
    goto $bb468;

  $bb39:
    assume $i82 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p970 := __symbol_get(.str.49);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p971 := $bitcast.ref.ref($p970);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i972 := $p2i.ref.i64($p971);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i973 := $ne.i64($i972, 0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i974 := $zext.i1.i32($i973);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i975 := $sext.i32.i64($i974);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p976 := $i2p.i64.ref($i975);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i977 := $ne.ref($p976, $0.ref);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i977} true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i977 == 1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_108 := __request_module.i1.ref(1, .str.50);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p980 := __symbol_get(.str.49);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p978 := $p980;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i982 := $p2i.ref.i64($p978);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i983 := $ne.i64($i982, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i983} true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i983 == 1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_109 := printk.ref(.str.51);
    assume {:verifier.code 0} true;
    $p994 := $0.ref;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p998, $p994);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p1000 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p1001 := $load.ref($M.0, $p1000);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i1002 := $p2i.ref.i64($p1001);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i1003 := $ne.i64($i1002, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1003} true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i1003 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb430:
    assume $i1003 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p1004 := __symbol_get(.str.33);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p1005 := $bitcast.ref.ref($p1004);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i1006 := $p2i.ref.i64($p1005);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i1007 := $ne.i64($i1006, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i1008 := $zext.i1.i32($i1007);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i1009 := $sext.i32.i64($i1008);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p1010 := $i2p.i64.ref($i1009);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i1011 := $ne.ref($p1010, $0.ref);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1011} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i1011 == 1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_110 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p1014 := __symbol_get(.str.33);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1012 := $p1014;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i1016 := $p2i.ref.i64($p1012);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i1017 := $ne.i64($i1016, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1017} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i1017 == 1);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_111 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb435:
    assume $i1017 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p1020 := $load.ref($M.0, $p1019);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p1021 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p1022 := $bitcast.ref.ref($p1021);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p1023 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i1024 := $load.i32($M.0, $p1023);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i1025 := $zext.i32.i64($i1024);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($p1022, $mul.ref($i1025, 1944));
    call {:si_unique_call 259} $p1027 := devirtbounce.11($p1012, $p1020, 96, $p1026, c3tech_duo_tda18271_config);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p1028 := $bitcast.ref.ref($p1027);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i1029 := $p2i.ref.i64($p1028);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i1030 := $eq.i64($i1029, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1030} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i1030 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb437:
    assume $i1030 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __symbol_put(.str.33);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb432:
    assume $i1011 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p1012 := $p1010;
    goto $bb434;

  $bb424:
    assume $i983 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p985 := $bitcast.ref.ref($p984);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i987 := $load.i32($M.0, $p986);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i988 := $zext.i32.i64($i987);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($p985, $mul.ref($i988, 1944));
    call {:si_unique_call 253} $p990 := devirtbounce.17($p978, c3tech_duo_mb86a20s_config, $p989);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p991 := $bitcast.ref.ref($p990);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i992 := $p2i.ref.i64($p991);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i993 := $eq.i64($i992, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i993} true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i993 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $p994 := $p990;
    goto $bb429;

  $bb426:
    assume $i993 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __symbol_put(.str.49);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb421:
    assume $i977 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p978 := $p976;
    goto $bb423;

  $bb37:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i71, 87);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i85 == 1);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} terratec_htc_usb_xs_init($p0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p1344 := __symbol_get(.str.40);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p1345 := $bitcast.ref.ref($p1344);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1345);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i1347 := $ne.i64($i1346, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i1348 := $zext.i1.i32($i1347);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i1349 := $sext.i32.i64($i1348);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p1350 := $i2p.i64.ref($i1349);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i1351 := $ne.ref($p1350, $0.ref);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1351} true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i1351 == 1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_126 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p1354 := __symbol_get(.str.40);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1352 := $p1354;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i1356 := $p2i.ref.i64($p1352);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i1357 := $ne.i64($i1356, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1357} true;
    goto $bb541, $bb542;

  $bb542:
    assume !($i1357 == 1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_127 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p1368 := $0.ref;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p1372 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1372, $p1368);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p1374 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p1375 := $load.ref($M.0, $p1374);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i1376 := $p2i.ref.i64($p1375);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i1377 := $eq.i64($i1376, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1377} true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i1377 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p1378 := __symbol_get(.str.33);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p1379 := $bitcast.ref.ref($p1378);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i1380 := $p2i.ref.i64($p1379);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i1381 := $ne.i64($i1380, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i1382 := $zext.i1.i32($i1381);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i1383 := $sext.i32.i64($i1382);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p1384 := $i2p.i64.ref($i1383);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i1385 := $ne.ref($p1384, $0.ref);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1385} true;
    goto $bb550, $bb551;

  $bb551:
    assume !($i1385 == 1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_128 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p1388 := __symbol_get(.str.33);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1386 := $p1388;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i1390 := $p2i.ref.i64($p1386);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i1391 := $ne.i64($i1390, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1391} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i1391 == 1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_129 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1405 := $0.ref;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i1407 := $p2i.ref.i64($p1405);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i1408 := $eq.i64($i1407, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1408} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i1408 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb559:
    assume $i1408 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb553:
    assume $i1391 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p1393 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p1394 := $load.ref($M.0, $p1393);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p1395 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p1396 := $bitcast.ref.ref($p1395);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p1397 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i1398 := $load.i32($M.0, $p1397);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i1399 := $zext.i32.i64($i1398);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p1400 := $add.ref($p1396, $mul.ref($i1399, 1944));
    call {:si_unique_call 320} $p1401 := devirtbounce.11($p1386, $p1394, 96, $p1400, em28xx_cxd2820r_tda18271_config);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1402 := $bitcast.ref.ref($p1401);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i1403 := $p2i.ref.i64($p1402);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i1404 := $eq.i64($i1403, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1404} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i1404 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $p1405 := $p1401;
    goto $bb558;

  $bb555:
    assume $i1404 == 1;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __symbol_put(.str.33);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb550:
    assume $i1385 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p1386 := $p1384;
    goto $bb552;

  $bb547:
    assume $i1377 == 1;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb541:
    assume $i1357 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p1358 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p1359 := $bitcast.ref.ref($p1358);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p1360 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i1361 := $load.i32($M.0, $p1360);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i1362 := $zext.i32.i64($i1361);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p1363 := $add.ref($p1359, $mul.ref($i1362, 1944));
    call {:si_unique_call 314} $p1364 := devirtbounce.13($p1352, terratec_htc_stick_drxk, $p1363);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p1365 := $bitcast.ref.ref($p1364);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i1366 := $p2i.ref.i64($p1365);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i1367 := $eq.i64($i1366, 0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1367} true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i1367 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $p1368 := $p1364;
    goto $bb546;

  $bb543:
    assume $i1367 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __symbol_put(.str.40);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb538:
    assume $i1351 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p1352 := $p1350;
    goto $bb540;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} pctv_520e_init($p0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p1211 := __symbol_get(.str.40);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p1212 := $bitcast.ref.ref($p1211);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i1213 := $p2i.ref.i64($p1212);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i1214 := $ne.i64($i1213, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i1215 := $zext.i1.i32($i1214);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i1216 := $sext.i32.i64($i1215);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p1217 := $i2p.i64.ref($i1216);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i1218 := $ne.ref($p1217, $0.ref);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1218} true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i1218 == 1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_118 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p1221 := __symbol_get(.str.40);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1219 := $p1221;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i1223 := $p2i.ref.i64($p1219);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i1224 := $ne.i64($i1223, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1224} true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i1224 == 1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_119 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p1235 := $0.ref;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1239, $p1235);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p1242 := $load.ref($M.0, $p1241);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i1243 := $p2i.ref.i64($p1242);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i1244 := $ne.i64($i1243, 0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1244} true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i1244 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb499:
    assume $i1244 == 1;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p1245 := __symbol_get(.str.33);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p1246 := $bitcast.ref.ref($p1245);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i1247 := $p2i.ref.i64($p1246);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i1248 := $ne.i64($i1247, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i1249 := $zext.i1.i32($i1248);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i1250 := $sext.i32.i64($i1249);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p1251 := $i2p.i64.ref($i1250);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i1252 := $ne.ref($p1251, $0.ref);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1252} true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i1252 == 1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_120 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p1255 := __symbol_get(.str.33);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1253 := $p1255;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i1257 := $p2i.ref.i64($p1253);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i1258 := $ne.i64($i1257, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1258} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i1258 == 1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_121 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1272 := $0.ref;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i1274 := $p2i.ref.i64($p1272);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i1275 := $eq.i64($i1274, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1275} true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i1275 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb510:
    assume $i1275 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p1277 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p1278 := $load.ref($M.0, $p1277);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} dvb_frontend_detach($p1278);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb504:
    assume $i1258 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p1261 := $load.ref($M.0, $p1260);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p1262 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p1263 := $bitcast.ref.ref($p1262);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p1264 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i1265 := $load.i32($M.0, $p1264);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i1266 := $zext.i32.i64($i1265);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($p1263, $mul.ref($i1266, 1944));
    call {:si_unique_call 297} $p1268 := devirtbounce.11($p1253, $p1261, 96, $p1267, em28xx_cxd2820r_tda18271_config);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p1269 := $bitcast.ref.ref($p1268);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i1270 := $p2i.ref.i64($p1269);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i1271 := $eq.i64($i1270, 0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1271} true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i1271 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $p1272 := $p1268;
    goto $bb509;

  $bb506:
    assume $i1271 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} __symbol_put(.str.33);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb501:
    assume $i1252 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p1253 := $p1251;
    goto $bb503;

  $bb493:
    assume $i1224 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p1225 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p1226 := $bitcast.ref.ref($p1225);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i1228 := $load.i32($M.0, $p1227);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i1229 := $zext.i32.i64($i1228);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($p1226, $mul.ref($i1229, 1944));
    call {:si_unique_call 291} $p1231 := devirtbounce.13($p1219, pctv_520e_drxk, $p1230);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p1232 := $bitcast.ref.ref($p1231);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i1233 := $p2i.ref.i64($p1232);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i1234 := $eq.i64($i1233, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1234} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i1234 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p1235 := $p1231;
    goto $bb498;

  $bb495:
    assume $i1234 == 1;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} __symbol_put(.str.40);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb490:
    assume $i1218 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p1219 := $p1217;
    goto $bb492;

  $bb20:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i71, 80);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i71, 82);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i71, 84);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i71, 85);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i89 == 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb55;

  $bb52:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i71, 82);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb57, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb32;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb58;

  $bb50:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i71, 81);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i91 == 1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} hauppauge_hvr930c_init($p0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p729 := __symbol_get(.str.40);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p730 := $bitcast.ref.ref($p729);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i731 := $p2i.ref.i64($p730);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i732 := $ne.i64($i731, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i733 := $zext.i1.i32($i732);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i734 := $sext.i32.i64($i733);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p735 := $i2p.i64.ref($i734);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i736 := $ne.ref($p735, $0.ref);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i736} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i736 == 1);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_96 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p739 := __symbol_get(.str.40);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p737 := $p739;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i741 := $p2i.ref.i64($p737);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i742 := $ne.i64($i741, 0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i742 == 1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_97 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p753 := $0.ref;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p757, $p753);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p760 := $load.ref($M.0, $p759);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i761 := $p2i.ref.i64($p760);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i762 := $eq.i64($i761, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p766 := $load.ref($M.0, $p765);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p766, $mul.ref(0, 1584)), $mul.ref(816, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p767, $p32);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2232, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} sema_init($p768, 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p771 := $load.ref($M.0, $p770);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($add.ref($p771, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p774 := $load.ref($M.0, $p773);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2224, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p775, $p774);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.0, $p777);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($add.ref($p778, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p780, drxk_gate_ctrl);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p781 := $bitcast.ref.ref($p1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.7;
    call {:si_unique_call 228} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p781, 0, 20, $zext.i32.i64(4), 0 == 1);
    $M.7 := cmdloc_dummy_var_13;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p782, 97);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p783, 4000);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p786 := $load.ref($M.0, $p785);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($add.ref($p786, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p789 := $load.ref($M.0, $p788);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i790 := $p2i.ref.i64($p789);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i791 := $ne.i64($i790, 0);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p802 := __symbol_get(.str.43);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p803 := $bitcast.ref.ref($p802);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i804 := $p2i.ref.i64($p803);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i805 := $ne.i64($i804, 0);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i806 := $zext.i1.i32($i805);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i807 := $sext.i32.i64($i806);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p808 := $i2p.i64.ref($i807);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i809 := $ne.ref($p808, $0.ref);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i809 == 1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_99 := __request_module.i1.ref(1, .str.44);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p812 := __symbol_get(.str.43);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p810 := $p812;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i814 := $p2i.ref.i64($p810);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i815 := $ne.i64($i814, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i815} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i815 == 1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_100 := printk.ref(.str.45);
    assume {:verifier.code 0} true;
    $p829 := $0.ref;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i831 := $p2i.ref.i64($p829);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i832 := $eq.i64($i831, 0);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i832} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i832 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p835 := $load.ref($M.0, $p834);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($p835, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.0, $p837);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i839 := $p2i.ref.i64($p838);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i840 := $ne.i64($i839, 0);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb388:
    assume $i840 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p843 := $load.ref($M.0, $p842);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($add.ref($p843, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p846 := $load.ref($M.0, $p845);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p849 := $load.ref($M.0, $p848);
    call {:si_unique_call 236} vslice_dummy_var_101 := devirtbounce.14($p846, $p849, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb385:
    assume $i832 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb379:
    assume $i815 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p818 := $load.ref($M.0, $p817);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p820 := $bitcast.ref.ref($p819);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p821 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i822 := $load.i32($M.0, $p821);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i823 := $zext.i32.i64($i822);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($p820, $mul.ref($i823, 1944));
    call {:si_unique_call 233} $p825 := devirtbounce.15($p810, $p818, $p824, $p1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p826 := $bitcast.ref.ref($p825);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i827 := $p2i.ref.i64($p826);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i828 := $eq.i64($i827, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i828} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p829 := $p825;
    goto $bb384;

  $bb381:
    assume $i828 == 1;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __symbol_put(.str.43);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb376:
    assume $i809 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p810 := $p808;
    goto $bb378;

  $bb373:
    assume $i791 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $p793);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($add.ref($p794, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.0, $p796);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.0, $p799);
    call {:si_unique_call 229} vslice_dummy_var_98 := devirtbounce.14($p797, $p800, 1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb370:
    assume $i762 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb364:
    assume $i742 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p744 := $bitcast.ref.ref($p743);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i746 := $load.i32($M.0, $p745);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i747 := $zext.i32.i64($i746);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($p744, $mul.ref($i747, 1944));
    call {:si_unique_call 224} $p749 := devirtbounce.13($p737, hauppauge_930c_drxk, $p748);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p750 := $bitcast.ref.ref($p749);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i751 := $p2i.ref.i64($p750);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i752 := $eq.i64($i751, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p753 := $p749;
    goto $bb369;

  $bb366:
    assume $i752 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __symbol_put(.str.40);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb361:
    assume $i736 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p737 := $p735;
    goto $bb363;

  $bb60:
    assume $i91 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1032, 0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1033, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p1034 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(6, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1034, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p1035 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(7, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1035, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p1036 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1036, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(9, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1037, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1038, $0.ref);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p1039 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1039, $0.ref);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p1040 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1040, 40444000);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1041, 64);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p1042 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(6, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1042, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1043, 20);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(9, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1044, 20);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p1045 := $bitcast.ref.ref($p2);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.11;
    call {:si_unique_call 86} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p1045, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_11;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p1047 := $bitcast.ref.ref($p1046);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_57 := strlcpy($p1047, .str.52, 20);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p1049 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1049, 85);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1051, $p3);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} vslice_dummy_var_58 := __request_module.i1.ref(1, .str.53);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p1054 := $bitcast.ref.ref($p1053);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i1056 := $load.i32($M.0, $p1055);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i1057 := $zext.i32.i64($i1056);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($p1054, $mul.ref($i1057, 1944));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p1059 := i2c_new_device($p1058, $p2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i1060 := $p2i.ref.i64($p1059);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i1061 := $eq.i64($i1060, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1061} true;
    goto $bb442, $bb444;

  $bb444:
    assume !($i1061 == 1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p1063 := $add.ref($add.ref($add.ref($p1059, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p1064 := $load.ref($M.0, $p1063);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i1065 := $p2i.ref.i64($p1064);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i1066 := $eq.i64($i1065, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1066} true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i1066 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($add.ref($p1059, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p1069 := $load.ref($M.0, $p1068);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1069, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1071 := $load.ref($M.0, $p1070);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i1072 := ldv_try_module_get_5($p1071);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i1073 := $zext.i1.i8($i1072);
    call {:si_unique_call 263} {:cexpr "tmp___127"} boogie_si_record_i8($i1073);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i1074 := $trunc.i8.i1($i1073);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1074} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i1074 == 1);
    assume {:verifier.code 0} true;
    $i1075 := 1;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i1076 := $ne.i32($i1075, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1076} true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i1076 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p1078 := $load.ref($M.0, $p1077);
    call {:si_unique_call 265} $p1079 := devirtbounce.18($p1078, $p1059);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p1081 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1081, $p1079);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p1082 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1082, $p1059);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p1085 := $load.ref($M.0, $p1084);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1086, $p1085);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p1087 := $bitcast.ref.ref($p2);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.11;
    call {:si_unique_call 266} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p1087, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.11 := cmdloc_dummy_var_15;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p1088 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p1089 := $bitcast.ref.ref($p1088);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_112 := strlcpy($p1089, .str.54, 20);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(22, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p1091, 8);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p1093 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1093, $p4);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_113 := __request_module.i1.ref(1, .str.54);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p1095 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p1096 := $bitcast.ref.ref($p1095);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i1098 := $load.i32($M.0, $p1097);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i1099 := $zext.i32.i64($i1098);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p1100 := $add.ref($p1096, $mul.ref($i1099, 1944));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p1101 := i2c_new_device($p1100, $p2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i1102 := $p2i.ref.i64($p1101);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i1103 := $eq.i64($i1102, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1103} true;
    goto $bb454, $bb456;

  $bb456:
    assume !($i1103 == 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($add.ref($p1101, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p1106 := $load.ref($M.0, $p1105);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i1107 := $p2i.ref.i64($p1106);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i1108 := $eq.i64($i1107, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1108} true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i1108 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($add.ref($p1101, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p1120 := $load.ref($M.0, $p1119);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p1120, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.0, $p1121);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i1123 := ldv_try_module_get_7($p1122);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i1124 := $zext.i1.i8($i1123);
    call {:si_unique_call 273} {:cexpr "tmp___129"} boogie_si_record_i8($i1124);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i1125 := $trunc.i8.i1($i1124);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1125} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i1125 == 1);
    assume {:verifier.code 0} true;
    $i1126 := 1;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i1127 := $ne.i32($i1126, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2352, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1137, $p1101);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb463:
    assume $i1127 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} i2c_unregister_device($p1101);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p1129 := $load.ref($M.0, $p1128);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($add.ref($p1129, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p1132 := $load.ref($M.0, $p1131);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p1133 := $add.ref($add.ref($p1132, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p1134 := $load.ref($M.0, $p1133);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_module_put_8($p1134);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p1135 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p1136 := $load.ref($M.0, $p1135);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} i2c_unregister_device($p1136);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb460:
    assume $i1125 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i1126 := 0;
    goto $bb462;

  $bb457:
    assume {:verifier.code 0} true;
    assume $i1108 == 1;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p1110 := $load.ref($M.0, $p1109);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p1112 := $add.ref($add.ref($add.ref($p1110, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p1113 := $load.ref($M.0, $p1112);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p1114 := $add.ref($add.ref($p1113, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p1115 := $load.ref($M.0, $p1114);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_module_put_6($p1115);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p1117 := $load.ref($M.0, $p1116);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} i2c_unregister_device($p1117);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb454:
    assume {:verifier.code 0} true;
    assume $i1103 == 1;
    goto $bb455;

  $bb451:
    assume $i1076 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} i2c_unregister_device($p1059);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb448:
    assume $i1074 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i1075 := 0;
    goto $bb450;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i1066 == 1;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb154;

  $bb442:
    assume {:verifier.code 0} true;
    assume $i1061 == 1;
    goto $bb443;

  $bb48:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i71, 77);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i71, 78);
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i71, 79);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i94 == 1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} terratec_h5_init($p0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p851 := __symbol_get(.str.40);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p852 := $bitcast.ref.ref($p851);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i853 := $p2i.ref.i64($p852);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i854 := $ne.i64($i853, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i855 := $zext.i1.i32($i854);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i856 := $sext.i32.i64($i855);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p857 := $i2p.i64.ref($i856);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i858 := $ne.ref($p857, $0.ref);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i858} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i858 == 1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} vslice_dummy_var_102 := __request_module.i1.ref(1, .str.41);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p861 := __symbol_get(.str.40);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p859 := $p861;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i863 := $p2i.ref.i64($p859);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i864 := $ne.i64($i863, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i864} true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i864 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_103 := printk.ref(.str.42);
    assume {:verifier.code 0} true;
    $p875 := $0.ref;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p879, $p875);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.0, $p881);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i883 := $p2i.ref.i64($p882);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i884 := $eq.i64($i883, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i884} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p888 := $load.ref($M.0, $p887);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p888, $mul.ref(0, 1584)), $mul.ref(816, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p889, $p32);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2232, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} sema_init($p890, 1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p893 := $load.ref($M.0, $p892);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($add.ref($p893, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p896 := $load.ref($M.0, $p895);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2224, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p897, $p896);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p900 := $load.ref($M.0, $p899);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($add.ref($p900, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p902, drxk_gate_ctrl);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p905 := $load.ref($M.0, $p904);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($add.ref($p905, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p908 := $load.ref($M.0, $p907);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i909 := $p2i.ref.i64($p908);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i910 := $ne.i64($i909, 0);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i910} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i910 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p921 := __symbol_get(.str.46);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p922 := $bitcast.ref.ref($p921);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i923 := $p2i.ref.i64($p922);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i924 := $ne.i64($i923, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i925 := $zext.i1.i32($i924);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i926 := $sext.i32.i64($i925);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p927 := $i2p.i64.ref($i926);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i928 := $ne.ref($p927, $0.ref);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i928} true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i928 == 1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_105 := __request_module.i1.ref(1, .str.47);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p931 := __symbol_get(.str.46);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p929 := $p931;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p929);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i934 := $ne.i64($i933, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i934} true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i934 == 1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_106 := printk.ref(.str.48);
    assume {:verifier.code 0} true;
    $p948 := $0.ref;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i950 := $p2i.ref.i64($p948);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i951 := $eq.i64($i950, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i951} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i951 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p954 := $load.ref($M.0, $p953);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($add.ref($p954, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p957 := $load.ref($M.0, $p956);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i958 := $p2i.ref.i64($p957);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i959 := $ne.i64($i958, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb418:
    assume $i959 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p962 := $load.ref($M.0, $p961);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($add.ref($add.ref($p962, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p965 := $load.ref($M.0, $p964);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p968 := $load.ref($M.0, $p967);
    call {:si_unique_call 250} vslice_dummy_var_107 := devirtbounce.14($p965, $p968, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb415:
    assume $i951 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb409:
    assume $i934 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p937 := $load.ref($M.0, $p936);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p939 := $bitcast.ref.ref($p938);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i941 := $load.i32($M.0, $p940);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i942 := $zext.i32.i64($i941);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($p939, $mul.ref($i942, 1944));
    call {:si_unique_call 247} $p944 := devirtbounce.16($p929, $p937, $p943, 96);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p945 := $bitcast.ref.ref($p944);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i946 := $p2i.ref.i64($p945);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i947 := $eq.i64($i946, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p948 := $p944;
    goto $bb414;

  $bb411:
    assume $i947 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __symbol_put(.str.46);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb406:
    assume $i928 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p929 := $p927;
    goto $bb408;

  $bb403:
    assume $i910 == 1;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p913 := $load.ref($M.0, $p912);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($add.ref($p913, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p916 := $load.ref($M.0, $p915);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p919 := $load.ref($M.0, $p918);
    call {:si_unique_call 243} vslice_dummy_var_104 := devirtbounce.14($p916, $p919, 1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb400:
    assume $i884 == 1;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb394:
    assume $i864 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p866 := $bitcast.ref.ref($p865);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i868 := $load.i32($M.0, $p867);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i869 := $zext.i32.i64($i868);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($p866, $mul.ref($i869, 1944));
    call {:si_unique_call 239} $p871 := devirtbounce.13($p859, terratec_h5_drxk, $p870);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p872 := $bitcast.ref.ref($p871);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i873 := $p2i.ref.i64($p872);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i874 := $eq.i64($i873, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p875 := $p871;
    goto $bb399;

  $bb396:
    assume $i874 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __symbol_put(.str.40);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb391:
    assume $i858 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p859 := $p857;
    goto $bb393;

  $bb66:
    assume $i94 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2332, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p645, 1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p646 := __symbol_get(.str.36);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p647 := $bitcast.ref.ref($p646);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i648 := $p2i.ref.i64($p647);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i649 := $ne.i64($i648, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i650 := $zext.i1.i32($i649);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i651 := $sext.i32.i64($i650);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p652 := $i2p.i64.ref($i651);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i653 := $ne.ref($p652, $0.ref);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i653 == 1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_91 := __request_module.i1.ref(1, .str.37);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p656 := __symbol_get(.str.36);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p654 := $p656;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i658 := $p2i.ref.i64($p654);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i659 := $ne.i64($i658, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i659 == 1);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} vslice_dummy_var_92 := printk.ref(.str.38);
    assume {:verifier.code 0} true;
    $p671 := $0.ref;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p675, $p671);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i679 := $p2i.ref.i64($p678);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i680 := $ne.i64($i679, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb343:
    assume $i680 == 1;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p681 := __symbol_get(.str.33);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p682 := $bitcast.ref.ref($p681);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i683 := $p2i.ref.i64($p682);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i684 := $ne.i64($i683, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i685 := $zext.i1.i32($i684);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i686 := $sext.i32.i64($i685);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p687 := $i2p.i64.ref($i686);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i688 := $ne.ref($p687, $0.ref);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i688 == 1);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} vslice_dummy_var_93 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p691 := __symbol_get(.str.33);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p689 := $p691;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i693 := $p2i.ref.i64($p689);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i694 := $ne.i64($i693, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i694} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i694 == 1);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_94 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p708 := $0.ref;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i710 := $p2i.ref.i64($p708);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i711 := $eq.i64($i710, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2332, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i716 := $load.i32($M.0, $p715);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i717 := gpio_request_one($i716, 0, $0.ref);
    call {:si_unique_call 219} {:cexpr "result"} boogie_si_record_i32($i717);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i718 := $ne.i32($i717, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i718 == 1);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2332, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i723 := $load.i32($M.0, $p722);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} gpio_free($i723);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p726 := $load.ref($M.0, $p725);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($add.ref($p726, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(376, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p728, em28xx_pctv_290e_set_lna);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb357:
    assume $i718 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p720 := $bitcast.ref.ref($p719);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_95 := printk.ref.ref.i32(.str.39, $p720, $i717);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb354:
    assume $i711 == 1;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p714 := $load.ref($M.0, $p713);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} dvb_frontend_detach($p714);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb348:
    assume $i694 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p699 := $bitcast.ref.ref($p698);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i701 := $load.i32($M.0, $p700);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i702 := $zext.i32.i64($i701);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($p699, $mul.ref($i702, 1944));
    call {:si_unique_call 214} $p704 := devirtbounce.11($p689, $p697, 96, $p703, em28xx_cxd2820r_tda18271_config);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p705 := $bitcast.ref.ref($p704);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i706 := $p2i.ref.i64($p705);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i707 := $eq.i64($i706, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p708 := $p704;
    goto $bb353;

  $bb350:
    assume $i707 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} __symbol_put(.str.33);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb345:
    assume $i688 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p689 := $p687;
    goto $bb347;

  $bb337:
    assume $i659 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p661 := $bitcast.ref.ref($p660);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i663 := $load.i32($M.0, $p662);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i664 := $zext.i32.i64($i663);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($p661, $mul.ref($i664, 1944));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(2332, 1));
    call {:si_unique_call 208} $p667 := devirtbounce.12($p654, em28xx_cxd2820r_config, $p665, $p666);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p668 := $bitcast.ref.ref($p667);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i669 := $p2i.ref.i64($p668);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i670 := $eq.i64($i669, 0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p671 := $p667;
    goto $bb342;

  $bb339:
    assume $i670 == 1;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __symbol_put(.str.36);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb334:
    assume $i653 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p654 := $p652;
    goto $bb336;

  $bb64:
    assume $i93 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p127 := __symbol_get(.str.3);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i131 := $zext.i1.i32($i130);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p133 := $i2p.i64.ref($i132);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i134 := $ne.ref($p133, $0.ref);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i134 == 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} vslice_dummy_var_59 := __request_module.i1.ref(1, .str.4);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p137 := __symbol_get(.str.3);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p135 := $p137;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p135);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i140 == 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_60 := printk.ref(.str.5);
    assume {:verifier.code 0} true;
    $p151 := $0.ref;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p155, $p151);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb152:
    assume $i160 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb146:
    assume $i140 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i144);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p142, $mul.ref($i145, 1944));
    call {:si_unique_call 109} $p147 := devirtbounce.1($p135, sharp_isdbt, $p146);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i149, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p151 := $p147;
    goto $bb151;

  $bb148:
    assume $i150 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __symbol_put(.str.3);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb143:
    assume $i134 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p135 := $p133;
    goto $bb145;

  $bb62:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i71, 76);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb68, $bb70;

  $bb70:
    assume !($i95 == 1);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p577 := __symbol_get(.str.30);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p578 := $bitcast.ref.ref($p577);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i579 := $p2i.ref.i64($p578);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i580 := $ne.i64($i579, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i581 := $zext.i1.i32($i580);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i582 := $sext.i32.i64($i581);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p583 := $i2p.i64.ref($i582);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i584 := $ne.ref($p583, $0.ref);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i584 == 1);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vslice_dummy_var_87 := __request_module.i1.ref(1, .str.31);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p587 := __symbol_get(.str.30);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p585 := $p587;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i589 := $p2i.ref.i64($p585);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i590 := $ne.i64($i589, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i590 == 1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_88 := printk.ref(.str.32);
    assume {:verifier.code 0} true;
    $p601 := $0.ref;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p605, $p601);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i609 := $p2i.ref.i64($p608);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i610 := $eq.i64($i609, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i610} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p611 := __symbol_get(.str.33);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p612 := $bitcast.ref.ref($p611);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i613 := $p2i.ref.i64($p612);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i614 := $ne.i64($i613, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i615 := $zext.i1.i32($i614);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i616 := $sext.i32.i64($i615);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p617 := $i2p.i64.ref($i616);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i618 := $ne.ref($p617, $0.ref);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i618 == 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} vslice_dummy_var_89 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p621 := __symbol_get(.str.33);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p619 := $p621;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i623 := $p2i.ref.i64($p619);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i624 := $ne.i64($i623, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i624} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i624 == 1);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_90 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p638 := $0.ref;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i640 := $p2i.ref.i64($p638);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i641 := $eq.i64($i640, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb331:
    assume $i641 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p644 := $load.ref($M.0, $p643);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} dvb_frontend_detach($p644);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb325:
    assume $i624 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p627 := $load.ref($M.0, $p626);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p629 := $bitcast.ref.ref($p628);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i631 := $load.i32($M.0, $p630);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i632 := $zext.i32.i64($i631);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($p629, $mul.ref($i632, 1944));
    call {:si_unique_call 202} $p634 := devirtbounce.11($p619, $p627, 96, $p633, kworld_a340_config);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p635 := $bitcast.ref.ref($p634);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i636 := $p2i.ref.i64($p635);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i637 := $eq.i64($i636, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p638 := $p634;
    goto $bb330;

  $bb327:
    assume $i637 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} __symbol_put(.str.33);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb322:
    assume $i618 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p619 := $p617;
    goto $bb324;

  $bb319:
    assume $i610 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb313:
    assume $i590 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p592 := $bitcast.ref.ref($p591);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i594 := $load.i32($M.0, $p593);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i595 := $zext.i32.i64($i594);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($p592, $mul.ref($i595, 1944));
    call {:si_unique_call 196} $p597 := devirtbounce.10($p585, em2870_lgdt3304_dev, $p596);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p598 := $bitcast.ref.ref($p597);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i599 := $p2i.ref.i64($p598);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i600 := $eq.i64($i599, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $p601 := $p597;
    goto $bb318;

  $bb315:
    assume $i600 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} __symbol_put(.str.30);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb310:
    assume $i584 == 1;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p585 := $p583;
    goto $bb312;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p255 := __symbol_get(.str.9);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p256 := $bitcast.ref.ref($p255);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i259 := $zext.i1.i32($i258);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i259);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p261 := $i2p.i64.ref($i260);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i262 := $ne.ref($p261, $0.ref);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i262 == 1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_67 := __request_module.i1.ref(1, .str.10);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p265 := __symbol_get(.str.9);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p263 := $p265;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p263);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i268 == 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_68 := printk.ref(.str.11);
    assume {:verifier.code 0} true;
    $p279 := $0.ref;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p283, $p279);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.0, $p285);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i288 := $eq.i64($i287, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i318 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 146} {:cexpr "tmp___34"} boogie_si_record_i32($i318);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i319 := $slt.i32($i318, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb214:
    assume $i319 == 1;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb202:
    assume $i288 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p289 := __symbol_get(.str.12);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i292 := $ne.i64($i291, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i293 := $zext.i1.i32($i292);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i294 := $sext.i32.i64($i293);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p295 := $i2p.i64.ref($i294);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i296 := $ne.ref($p295, $0.ref);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i296 == 1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_69 := __request_module.i1.ref(1, .str.13);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p299 := __symbol_get(.str.12);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p297 := $p299;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i301 := $p2i.ref.i64($p297);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i302 := $ne.i64($i301, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i302 == 1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_70 := printk.ref(.str.14);
    assume {:verifier.code 0} true;
    $p313 := $0.ref;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p317, $p313);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb207:
    assume $i302 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p303);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.0, $p305);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i307 := $zext.i32.i64($i306);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($p304, $mul.ref($i307, 1944));
    call {:si_unique_call 142} $p309 := devirtbounce.4($p297, terratec_xs_mt352_cfg, $p308);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p310 := $bitcast.ref.ref($p309);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i311 := $p2i.ref.i64($p310);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i312 := $eq.i64($i311, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p313 := $p309;
    goto $bb212;

  $bb209:
    assume $i312 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __symbol_put(.str.12);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb204:
    assume $i296 == 1;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p297 := $p295;
    goto $bb206;

  $bb196:
    assume $i268 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i273 := $zext.i32.i64($i272);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($p270, $mul.ref($i273, 1944));
    call {:si_unique_call 136} $p275 := devirtbounce.3($p263, em28xx_zl10353_xc3028_no_i2c_gate, $p274);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p276 := $bitcast.ref.ref($p275);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i278 := $eq.i64($i277, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p279 := $p275;
    goto $bb201;

  $bb198:
    assume $i278 == 1;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __symbol_put(.str.9);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb193:
    assume $i262 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p263 := $p261;
    goto $bb195;

  $bb18:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i71, 54);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i71, 60);
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i71, 69);
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i71, 70);
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i71, 73);
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i71, 73);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb32;

  $bb81:
    assume $i101 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p512 := __symbol_get(.str.27);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p513 := $bitcast.ref.ref($p512);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i514 := $p2i.ref.i64($p513);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i515 := $ne.i64($i514, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i516 := $zext.i1.i32($i515);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i517 := $sext.i32.i64($i516);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p518 := $i2p.i64.ref($i517);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i519 := $ne.ref($p518, $0.ref);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i519} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i519 == 1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_83 := __request_module.i1.ref(1, .str.28);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p522 := __symbol_get(.str.27);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p520 := $p522;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i524 := $p2i.ref.i64($p520);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i525 := $ne.i64($i524, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i525 == 1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_84 := printk.ref(.str.29);
    assume {:verifier.code 0} true;
    $p536 := $0.ref;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p540, $p536);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p543 := $load.ref($M.0, $p542);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i544 := $p2i.ref.i64($p543);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i545 := $ne.i64($i544, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb295:
    assume $i545 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p546 := __symbol_get(.str.21);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p547 := $bitcast.ref.ref($p546);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i548 := $p2i.ref.i64($p547);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i549 := $ne.i64($i548, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i550 := $zext.i1.i32($i549);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i551 := $sext.i32.i64($i550);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p552 := $i2p.i64.ref($i551);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i553 := $ne.ref($p552, $0.ref);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i553} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i553 == 1);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_85 := __request_module.i1.ref(1, .str.22);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p556 := __symbol_get(.str.21);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p554 := $p556;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i558 := $p2i.ref.i64($p554);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i559 := $ne.i64($i558, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i559 == 1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_86 := printk.ref(.str.23);
    assume {:verifier.code 0} true;
    $p573 := $0.ref;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i575 := $p2i.ref.i64($p573);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i576 := $eq.i64($i575, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb306:
    assume $i576 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb300:
    assume $i559 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p562 := $load.ref($M.0, $p561);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p564 := $bitcast.ref.ref($p563);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p565);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i567 := $zext.i32.i64($i566);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($p564, $mul.ref($i567, 1944));
    call {:si_unique_call 191} $p569 := devirtbounce.7($p554, $p562, $p568, 96, 82);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p570 := $bitcast.ref.ref($p569);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p570);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i572 := $eq.i64($i571, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $p573 := $p569;
    goto $bb305;

  $bb302:
    assume $i572 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} __symbol_put(.str.21);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb297:
    assume $i553 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p554 := $p552;
    goto $bb299;

  $bb289:
    assume $i525 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p527 := $bitcast.ref.ref($p526);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.0, $p528);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i530 := $zext.i32.i64($i529);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($p527, $mul.ref($i530, 1944));
    call {:si_unique_call 185} $p532 := devirtbounce.9($p520, em28xx_tda10023_config, $p531, 72);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p533 := $bitcast.ref.ref($p532);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i534 := $p2i.ref.i64($p533);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i535 := $eq.i64($i534, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i535} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p536 := $p532;
    goto $bb294;

  $bb291:
    assume $i535 == 1;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} __symbol_put(.str.27);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb286:
    assume $i519 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p520 := $p518;
    goto $bb288;

  $bb79:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i71, 70);
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb83, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb32;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p382 := __symbol_get(.str.18);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p383 := $bitcast.ref.ref($p382);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i384 := $p2i.ref.i64($p383);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i385 := $ne.i64($i384, 0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i386 := $zext.i1.i32($i385);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i386);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p388 := $i2p.i64.ref($i387);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i389 := $ne.ref($p388, $0.ref);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i389 == 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_75 := __request_module.i1.ref(1, .str.19);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p392 := __symbol_get(.str.18);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p390 := $p392;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p390);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i395 := $ne.i64($i394, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i395 == 1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} vslice_dummy_var_76 := printk.ref(.str.20);
    assume {:verifier.code 0} true;
    $p406 := $0.ref;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p410, $p406);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i411 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 164} {:cexpr "tmp___50"} boogie_si_record_i32($i411);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i412 := $slt.i32($i411, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb247:
    assume $i412 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb241:
    assume $i395 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.0, $p398);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i400 := $zext.i32.i64($i399);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($p397, $mul.ref($i400, 1944));
    call {:si_unique_call 160} $p402 := devirtbounce.6($p390, em28xx_s5h1409_with_xc3028, $p401);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p403 := $bitcast.ref.ref($p402);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i404 := $p2i.ref.i64($p403);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i405 := $eq.i64($i404, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p406 := $p402;
    goto $bb246;

  $bb243:
    assume $i405 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} __symbol_put(.str.18);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb238:
    assume $i389 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p390 := $p388;
    goto $bb240;

  $bb77:
    assume $i99 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p413 := __symbol_get(.str.6);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p413);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p414);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i417 := $zext.i1.i32($i416);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i418 := $sext.i32.i64($i417);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p419 := $i2p.i64.ref($i418);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i420 := $ne.ref($p419, $0.ref);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i420 == 1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_77 := __request_module.i1.ref(1, .str.7);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p423 := __symbol_get(.str.6);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p421 := $p423;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i425 := $p2i.ref.i64($p421);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i426 := $ne.i64($i425, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i426 == 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_78 := printk.ref(.str.8);
    assume {:verifier.code 0} true;
    $p437 := $0.ref;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p441, $p437);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i445 := $p2i.ref.i64($p444);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i446 := $ne.i64($i445, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb259:
    assume $i446 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p447 := __symbol_get(.str.21);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p448 := $bitcast.ref.ref($p447);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i450 := $ne.i64($i449, 0);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i451 := $zext.i1.i32($i450);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i452 := $sext.i32.i64($i451);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p453 := $i2p.i64.ref($i452);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i454 := $ne.ref($p453, $0.ref);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i454 == 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_79 := __request_module.i1.ref(1, .str.22);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p457 := __symbol_get(.str.21);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p455 := $p457;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p455);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i460 := $ne.i64($i459, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i460 == 1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_80 := printk.ref(.str.23);
    assume {:verifier.code 0} true;
    $p474 := $0.ref;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i476 := $p2i.ref.i64($p474);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i477 := $eq.i64($i476, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb270:
    assume $i477 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb264:
    assume $i460 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.0, $p462);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p465 := $bitcast.ref.ref($p464);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.0, $p466);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i468 := $zext.i32.i64($i467);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($p465, $mul.ref($i468, 1944));
    call {:si_unique_call 173} $p470 := devirtbounce.7($p455, $p463, $p469, 97, 60);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p471 := $bitcast.ref.ref($p470);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i472 := $p2i.ref.i64($p471);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i473 := $eq.i64($i472, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p474 := $p470;
    goto $bb269;

  $bb266:
    assume $i473 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} __symbol_put(.str.21);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb261:
    assume $i454 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p455 := $p453;
    goto $bb263;

  $bb253:
    assume $i426 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p428 := $bitcast.ref.ref($p427);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.0, $p429);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i431 := $zext.i32.i64($i430);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($p428, $mul.ref($i431, 1944));
    call {:si_unique_call 167} $p433 := devirtbounce.2($p421, em2880_lgdt3303_dev, $p432);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p434 := $bitcast.ref.ref($p433);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i435 := $p2i.ref.i64($p434);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i436 := $eq.i64($i435, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i436} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p437 := $p433;
    goto $bb258;

  $bb255:
    assume $i436 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} __symbol_put(.str.6);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb250:
    assume $i420 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p421 := $p419;
    goto $bb252;

  $bb75:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i71, 66);
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i71, 66);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb32;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p224 := __symbol_get(.str.9);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i228 := $zext.i1.i32($i227);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p230 := $i2p.i64.ref($i229);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i231 := $ne.ref($p230, $0.ref);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i231 == 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_65 := __request_module.i1.ref(1, .str.10);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p234 := __symbol_get(.str.9);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p232 := $p234;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i236 := $p2i.ref.i64($p232);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i237 := $ne.i64($i236, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i237 == 1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_66 := printk.ref(.str.11);
    assume {:verifier.code 0} true;
    $p248 := $0.ref;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p252, $p248);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i253 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 133} {:cexpr "tmp___23"} boogie_si_record_i32($i253);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i254 := $slt.i32($i253, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb190:
    assume $i254 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb184:
    assume $i237 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i242 := $zext.i32.i64($i241);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p239, $mul.ref($i242, 1944));
    call {:si_unique_call 129} $p244 := devirtbounce.3($p232, em28xx_zl10353_xc3028_no_i2c_gate, $p243);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p244);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p245);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i247 := $eq.i64($i246, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p248 := $p244;
    goto $bb189;

  $bb186:
    assume $i247 == 1;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} __symbol_put(.str.9);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb181:
    assume $i231 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p232 := $p230;
    goto $bb183;

  $bb86:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i71, 60);
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb32;

  $bb91:
    assume $i105 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p162 := __symbol_get(.str.6);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i32($i165);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p168 := $i2p.i64.ref($i167);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i169 := $ne.ref($p168, $0.ref);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i169 == 1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_61 := __request_module.i1.ref(1, .str.7);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p172 := __symbol_get(.str.6);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p170 := $p172;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p170);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i175 == 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_62 := printk.ref(.str.8);
    assume {:verifier.code 0} true;
    $p186 := $0.ref;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p190, $p186);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i191 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 119} {:cexpr "tmp___11"} boogie_si_record_i32($i191);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i191, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb166:
    assume $i192 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb160:
    assume $i175 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i180 := $zext.i32.i64($i179);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p177, $mul.ref($i180, 1944));
    call {:si_unique_call 115} $p182 := devirtbounce.2($p170, em2880_lgdt3303_dev, $p181);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p186 := $p182;
    goto $bb165;

  $bb162:
    assume $i185 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __symbol_put(.str.6);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb157:
    assume $i169 == 1;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p170 := $p168;
    goto $bb159;

  $bb73:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i71, 56);
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i71, 57);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i71, 59);
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i108 == 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p1570 := __symbol_get(.str.56);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p1571 := $bitcast.ref.ref($p1570);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i1572 := $p2i.ref.i64($p1571);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i1573 := $ne.i64($i1572, 0);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i1574 := $zext.i1.i32($i1573);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i1575 := $sext.i32.i64($i1574);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p1576 := $i2p.i64.ref($i1575);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i1577 := $ne.ref($p1576, $0.ref);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1577} true;
    goto $bb614, $bb615;

  $bb615:
    assume !($i1577 == 1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_137 := __request_module.i1.ref(1, .str.57);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p1580 := __symbol_get(.str.56);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1578 := $p1580;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i1582 := $p2i.ref.i64($p1578);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i1583 := $ne.i64($i1582, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1583} true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i1583 == 1);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_138 := printk.ref(.str.58);
    assume {:verifier.code 0} true;
    $p1594 := $0.ref;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p1598 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1598, $p1594);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p1600 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p1601 := $load.ref($M.0, $p1600);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i1602 := $p2i.ref.i64($p1601);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i1603 := $ne.i64($i1602, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1603} true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i1603 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb623:
    assume $i1603 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p1604 := __symbol_get(.str.33);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p1605 := $bitcast.ref.ref($p1604);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i1606 := $p2i.ref.i64($p1605);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i1607 := $ne.i64($i1606, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i1608 := $zext.i1.i32($i1607);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i1609 := $sext.i32.i64($i1608);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p1610 := $i2p.i64.ref($i1609);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i1611 := $ne.ref($p1610, $0.ref);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1611} true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i1611 == 1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_139 := __request_module.i1.ref(1, .str.34);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p1614 := __symbol_get(.str.33);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p1612 := $p1614;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i1616 := $p2i.ref.i64($p1612);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i1617 := $ne.i64($i1616, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1617} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i1617 == 1);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_140 := printk.ref(.str.35);
    assume {:verifier.code 0} true;
    $p1631 := $0.ref;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p1635 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1635, $p1631);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p1637 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p1638 := $load.ref($M.0, $p1637);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i1639 := $p2i.ref.i64($p1638);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i1640 := $eq.i64($i1639, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1640} true;
    goto $bb634, $bb635;

  $bb635:
    assume !($i1640 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb634:
    assume $i1640 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb628:
    assume $i1617 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p1619 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p1620 := $load.ref($M.0, $p1619);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p1621 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p1622 := $bitcast.ref.ref($p1621);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p1623 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i1624 := $load.i32($M.0, $p1623);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i1625 := $zext.i32.i64($i1624);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p1626 := $add.ref($p1622, $mul.ref($i1625, 1944));
    call {:si_unique_call 355} $p1627 := devirtbounce.11($p1612, $p1620, 96, $p1626, pinnacle_80e_dvb_config);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p1628 := $bitcast.ref.ref($p1627);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i1629 := $p2i.ref.i64($p1628);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i1630 := $eq.i64($i1629, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1630} true;
    goto $bb630, $bb631;

  $bb631:
    assume !($i1630 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    $p1631 := $p1627;
    goto $bb633;

  $bb630:
    assume $i1630 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __symbol_put(.str.33);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb625:
    assume $i1611 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p1612 := $p1610;
    goto $bb627;

  $bb617:
    assume $i1583 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p1584 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p1585 := $bitcast.ref.ref($p1584);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p1586 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i1587 := $load.i32($M.0, $p1586);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i1588 := $zext.i32.i64($i1587);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p1589 := $add.ref($p1585, $mul.ref($i1588, 1944));
    call {:si_unique_call 349} $p1590 := devirtbounce.19($p1578, $p1589);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p1591 := $bitcast.ref.ref($p1590);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i1592 := $p2i.ref.i64($p1591);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i1593 := $eq.i64($i1592, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1593} true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i1593 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    $p1594 := $p1590;
    goto $bb622;

  $bb619:
    assume $i1593 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __symbol_put(.str.56);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb614:
    assume $i1577 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p1578 := $p1576;
    goto $bb616;

  $bb98:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i71, 57);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb32;

  $bb100:
    assume $i109 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p478 := __symbol_get(.str.24);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p479 := $bitcast.ref.ref($p478);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i480 := $p2i.ref.i64($p479);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i481 := $ne.i64($i480, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i482 := $zext.i1.i32($i481);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i482);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p484 := $i2p.i64.ref($i483);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i485 := $ne.ref($p484, $0.ref);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i485 == 1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_81 := __request_module.i1.ref(1, .str.25);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p488 := __symbol_get(.str.24);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p486 := $p488;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i490 := $p2i.ref.i64($p486);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i491 := $ne.i64($i490, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i491 == 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_82 := printk.ref(.str.26);
    assume {:verifier.code 0} true;
    $p505 := $0.ref;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p509, $p505);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i510 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 182} {:cexpr "tmp___66"} boogie_si_record_i32($i510);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i511 := $slt.i32($i510, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb283:
    assume $i511 == 1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb277:
    assume $i491 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p492);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.0, $p494);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i496 := $zext.i32.i64($i495);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($p493, $mul.ref($i496, 1944));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(8520, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p499 := $load.ref($M.0, $p498);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p499, $mul.ref(0, 2040)), $mul.ref(144, 1));
    call {:si_unique_call 178} $p501 := devirtbounce.8($p486, em28xx_drxd, $0.ref, $p497, $p500);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p502 := $bitcast.ref.ref($p501);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i503 := $p2i.ref.i64($p502);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i504 := $eq.i64($i503, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p505 := $p501;
    goto $bb282;

  $bb279:
    assume $i504 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} __symbol_put(.str.24);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb274:
    assume $i485 == 1;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p486 := $p484;
    goto $bb276;

  $bb93:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i71, 55);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb103;

  $bb71:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i71, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i71, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i71, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i71, 53);
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb112:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i71, 51);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb32;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb110:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i71, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb32;

  $bb118:
    assume $i116 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p193 := __symbol_get(.str.9);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i197 := $zext.i1.i32($i196);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i197);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p199 := $i2p.i64.ref($i198);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i200 := $ne.ref($p199, $0.ref);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i200 == 1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_63 := __request_module.i1.ref(1, .str.10);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p203 := __symbol_get(.str.9);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p201 := $p203;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p201);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i206 == 1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_64 := printk.ref(.str.11);
    assume {:verifier.code 0} true;
    $p217 := $0.ref;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p221, $p217);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i222 := em28xx_attach_xc3028(97, $p0);
    call {:si_unique_call 126} {:cexpr "tmp___17"} boogie_si_record_i32($i222);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i223 := $slt.i32($i222, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb178:
    assume $i223 == 1;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 22);
    goto $bb154;

  $bb172:
    assume $i206 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i211 := $zext.i32.i64($i210);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p208, $mul.ref($i211, 1944));
    call {:si_unique_call 122} $p213 := devirtbounce.3($p201, em28xx_zl10353_with_xc3028, $p212);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i215 := $p2i.ref.i64($p214);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i216 := $eq.i64($i215, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p217 := $p213;
    goto $bb177;

  $bb174:
    assume $i216 == 1;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} __symbol_put(.str.9);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb169:
    assume $i200 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p201 := $p199;
    goto $bb171;

  $bb108:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i71, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i71, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb32;

  $bb122:
    assume $i118 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p320 := __symbol_get(.str.9);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p321);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i323 := $ne.i64($i322, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i324 := $zext.i1.i32($i323);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i325 := $sext.i32.i64($i324);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p326 := $i2p.i64.ref($i325);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i327 := $ne.ref($p326, $0.ref);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i327 == 1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} vslice_dummy_var_71 := __request_module.i1.ref(1, .str.10);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p330 := __symbol_get(.str.9);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p328 := $p330;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i332 := $p2i.ref.i64($p328);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i333 := $ne.i64($i332, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i333 == 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_72 := printk.ref(.str.11);
    assume {:verifier.code 0} true;
    $p344 := $0.ref;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p348, $p344);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i353 := $ne.i64($i352, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb226:
    assume $i353 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p354 := __symbol_get(.str.15);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i356 := $p2i.ref.i64($p355);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i357 := $ne.i64($i356, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i358 := $zext.i1.i32($i357);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i359 := $sext.i32.i64($i358);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p360 := $i2p.i64.ref($i359);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i361 := $ne.ref($p360, $0.ref);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i361 == 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_73 := __request_module.i1.ref(1, .str.16);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p364 := __symbol_get(.str.15);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p362 := $p364;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p362);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i367 := $ne.i64($i366, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i367 == 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_74 := printk.ref(.str.17);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb231:
    assume $i367 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p371);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i375 := $zext.i32.i64($i374);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($p372, $mul.ref($i375, 1944));
    call {:si_unique_call 155} $p377 := devirtbounce.5($p362, $p370, $p376, em28xx_qt1010_config);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i379 := $p2i.ref.i64($p378);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i380 := $eq.i64($i379, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb233:
    assume $i380 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __symbol_put(.str.15);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb228:
    assume $i361 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p362 := $p360;
    goto $bb230;

  $bb220:
    assume $i333 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.0, $p336);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i338 := $zext.i32.i64($i337);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($p335, $mul.ref($i338, 1944));
    call {:si_unique_call 149} $p340 := devirtbounce.3($p328, em28xx_zl10353_no_i2c_gate_dev, $p339);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i343 := $eq.i64($i342, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p344 := $p340;
    goto $bb225;

  $bb222:
    assume $i343 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __symbol_put(.str.9);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb217:
    assume $i327 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p328 := $p326;
    goto $bb219;

  $bb120:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i71, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb124, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb32;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb125;

  $bb106:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i71, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i71, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb129, $bb131;

  $bb131:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i71, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb134;

  $bb134:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i71, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb32;

  $bb135:
    assume $i123 == 1;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb133;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb130;

  $bb127:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i71, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i71, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb32;

  $bb139:
    assume $i125 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb137:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i71, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb32;

  $bb141:
    assume $i126 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb14:
    assume $i62 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_49 := printk.ref.ref(.str.2, $p64);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p33);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} kfree($p66);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $0.ref);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i23 := $i54;
    goto $bb3;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(8572, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i51 := $and.i8($i50, 1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i53 := em28xx_alloc_urbs($p0, 2, $i52, 5, 512, 384);
    call {:si_unique_call 56} {:cexpr "result"} boogie_si_record_i32($i53);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb13;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_48 := printk.ref.ref(.str.1, $p37);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;
}



const em28xx_dvb_fini: ref;

axiom em28xx_dvb_fini == $sub.ref(0, 174312);

procedure em28xx_dvb_fini($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, assertsPassed, $CurrAddr;



implementation em28xx_dvb_fini($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(364, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(440, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_153 := printk.ref.ref(.str.106, $p16);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} em28xx_uninit_usb_xfer($p0, 2);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(364, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(2352, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(2344, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(2336, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} em28xx_unregister_dvb($p19);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p19);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} kfree($p78);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $0.ref);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(0, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_154 := kref_put($p80, em28xx_free_device);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} ldv_module_put_29($p77);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} i2c_unregister_device($p70);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} ldv_module_put_28($p68);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} i2c_unregister_device($p61);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 1488)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_module_put_27($p59);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} i2c_unregister_device($p52);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 1584)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} prevent_sleep($p46);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1584)), $mul.ref(1580, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 2);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1584)), $mul.ref(0, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} prevent_sleep($p33);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1584)), $mul.ref(1580, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 2);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const em28xx_dvb_suspend: ref;

axiom em28xx_dvb_suspend == $sub.ref(0, 175344);

procedure em28xx_dvb_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_dvb_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(364, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(440, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_155 := printk.ref.ref(.str.103, $p12);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_157 := dvb_frontend_suspend($p40);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_158 := printk.ref.ref.i32(.str.105, $p43, $i32);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i28 := dvb_frontend_suspend($p27);
    call {:si_unique_call 442} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_156 := printk.ref.ref.i32(.str.104, $p30, $i28);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const em28xx_dvb_resume: ref;

axiom em28xx_dvb_resume == $sub.ref(0, 176376);

procedure em28xx_dvb_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_dvb_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(364, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(440, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_159 := printk.ref.ref(.str.107, $p12);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i40 := dvb_frontend_resume($p39);
    call {:si_unique_call 451} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_161 := printk.ref.ref.i32(.str.109, $p42, $i40);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i28 := dvb_frontend_resume($p27);
    call {:si_unique_call 448} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_160 := printk.ref.ref.i32(.str.108, $p30, $i28);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 177408);

procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 454} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 455} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 456} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 459} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 462} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 464} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



const dvb_frontend_resume: ref;

axiom dvb_frontend_resume == $sub.ref(0, 178440);

procedure dvb_frontend_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_frontend_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_frontend_suspend: ref;

axiom dvb_frontend_suspend == $sub.ref(0, 179472);

procedure dvb_frontend_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_frontend_suspend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const em28xx_uninit_usb_xfer: ref;

axiom em28xx_uninit_usb_xfer == $sub.ref(0, 180504);

procedure em28xx_uninit_usb_xfer($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation em28xx_uninit_usb_xfer($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "em28xx_uninit_usb_xfer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    return;
}



const prevent_sleep: ref;

axiom prevent_sleep == $sub.ref(0, 181536);

procedure prevent_sleep($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation prevent_sleep($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 784)), $mul.ref(336, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 784)), $mul.ref(200, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 784)), $mul.ref(392, 1)), $mul.ref(168, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_27: ref;

axiom ldv_module_put_27 == $sub.ref(0, 182568);

procedure ldv_module_put_27($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_module_put($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const i2c_unregister_device: ref;

axiom i2c_unregister_device == $sub.ref(0, 183600);

procedure i2c_unregister_device($p0: ref);
  free requires assertsPassed;



implementation i2c_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_28: ref;

axiom ldv_module_put_28 == $sub.ref(0, 184632);

procedure ldv_module_put_28($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} ldv_module_put($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_module_put_29: ref;

axiom ldv_module_put_29 == $sub.ref(0, 185664);

procedure ldv_module_put_29($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} ldv_module_put($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const em28xx_unregister_dvb: ref;

axiom em28xx_unregister_dvb == $sub.ref(0, 186696);

procedure em28xx_unregister_dvb($p0: ref);
  free requires assertsPassed;



implementation em28xx_unregister_dvb($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1920, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} dvb_net_release($p1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1896, 1));
    call {:si_unique_call 474} vslice_dummy_var_162 := devirtbounce.21($p5, $p7, $p8);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1872, 1));
    call {:si_unique_call 475} vslice_dummy_var_163 := devirtbounce.21($p13, $p15, $p16);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} dvb_dmxdev_release($p18);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} dvb_dmx_release($p19);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_165 := dvb_unregister_frontend($p31);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} dvb_frontend_detach($p46);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_166 := dvb_unregister_adapter($p47);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(2328, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} dvb_frontend_detach($p43);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_164 := dvb_unregister_frontend($p27);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 187728);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} free_($p0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_free_device: ref;

axiom em28xx_free_device == $sub.ref(0, 188760);

procedure em28xx_free_device($p0: ref);



const kref_put: ref;

axiom kref_put == $sub.ref(0, 189792);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i2 := kref_sub($p0, 1, $p1);
    call {:si_unique_call 485} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 190824);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_167: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 487} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 489} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_167 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 493} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 494} devirtbounce.22($p2, $p0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} warn_slowpath_null(.str.102, 71);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 191856);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 496} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 192888);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 193920);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 499} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 500} devirtbounce.23(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.17, $p2);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 194952);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 501} $free($p0);
    return;
}



const dvb_net_release: ref;

axiom dvb_net_release == $sub.ref(0, 195984);

procedure dvb_net_release($p0: ref);
  free requires assertsPassed;



implementation dvb_net_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    return;
}



const dvb_dmxdev_release: ref;

axiom dvb_dmxdev_release == $sub.ref(0, 197016);

procedure dvb_dmxdev_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmxdev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    return;
}



const dvb_dmx_release: ref;

axiom dvb_dmx_release == $sub.ref(0, 198048);

procedure dvb_dmx_release($p0: ref);
  free requires assertsPassed;



implementation dvb_dmx_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    return;
}



const dvb_unregister_frontend: ref;

axiom dvb_unregister_frontend == $sub.ref(0, 199080);

procedure dvb_unregister_frontend($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_frontend($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 502} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 503} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_frontend_detach: ref;

axiom dvb_frontend_detach == $sub.ref(0, 200112);

procedure dvb_frontend_detach($p0: ref);
  free requires assertsPassed;



implementation dvb_frontend_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    return;
}



const dvb_unregister_adapter: ref;

axiom dvb_unregister_adapter == $sub.ref(0, 201144);

procedure dvb_unregister_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_unregister_adapter($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 504} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 202176);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.18;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.18 := $i6;
    call {:si_unique_call 507} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ldv_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 203208);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 508} __VERIFIER_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 204240);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 510} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const em28xx_alloc_urbs: ref;

axiom em28xx_alloc_urbs == $sub.ref(0, 205272);

procedure em28xx_alloc_urbs($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_alloc_urbs($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 512} {:cexpr "em28xx_alloc_urbs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 513} {:cexpr "em28xx_alloc_urbs:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 514} {:cexpr "em28xx_alloc_urbs:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 515} {:cexpr "em28xx_alloc_urbs:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 516} {:cexpr "em28xx_alloc_urbs:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 517} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 518} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 206304);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_set_mode: ref;

axiom em28xx_set_mode == $sub.ref(0, 207336);

procedure em28xx_set_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_set_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 520} {:cexpr "em28xx_set_mode:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 521} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 522} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __symbol_get: ref;

axiom __symbol_get == $sub.ref(0, 208368);

procedure __symbol_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __symbol_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p1 := external_alloc();
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 209400);

procedure __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 524} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 525} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __symbol_put: ref;

axiom __symbol_put == $sub.ref(0, 210432);

procedure __symbol_put($p0: ref);
  free requires assertsPassed;



implementation __symbol_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_attach_xc3028: ref;

axiom em28xx_attach_xc3028 == $sub.ref(0, 211464);

procedure em28xx_attach_xc3028($i0: i8, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.0, $CurrAddr;



implementation em28xx_attach_xc3028($i0: i8, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i1;
  var $p36: ref;
  var $p34: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i25: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 529} {:cexpr "em28xx_attach_xc3028:arg:addr"} boogie_si_record_i8($i0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.19;
    call {:si_unique_call 530} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p4, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.19 := cmdloc_dummy_var_29;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(640, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p6, $mul.ref($i9, 1944));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p11, $p10);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p12, $i0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.20;
    call {:si_unique_call 531} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p13, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.20 := cmdloc_dummy_var_31;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} em28xx_setup_xc3028($p1, $p3);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p14, $p3);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p26 := __symbol_get(.str.69);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i33 := $ne.ref($p32, $0.ref);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_169 := __request_module.i1.ref(1, .str.70);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p36 := __symbol_get(.str.69);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p34 := $p36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p34);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_170 := printk.ref(.str.71);
    assume {:verifier.code 0} true;
    $p49 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p49);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_172 := printk.ref.ref.ref(.str.73, $p67, $p69);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_171 := printk.ref.ref(.str.72, $p55);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dvb_frontend_detach($p61);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $0.ref);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 537} $p45 := devirtbounce.24($p34, $p44, $p2);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p49 := $p45;
    goto $bb13;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __symbol_put(.str.69);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p34 := $p32;
    goto $bb7;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_168 := printk.ref.ref(.str.68, $p23);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 22);
    goto $bb3;
}



const gpio_request_one: ref;

axiom gpio_request_one == $sub.ref(0, 212496);

procedure gpio_request_one($i0: i32, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_request_one($i0: i32, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} {:cexpr "gpio_request_one:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 544} {:cexpr "gpio_request_one:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 545} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gpio_free: ref;

axiom gpio_free == $sub.ref(0, 213528);

procedure gpio_free($i0: i32);
  free requires assertsPassed;



implementation gpio_free($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "gpio_free:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_pctv_290e_set_lna: ref;

axiom em28xx_pctv_290e_set_lna == $sub.ref(0, 214560);

procedure em28xx_pctv_290e_set_lna($p0: ref) returns ($r: i32);



const hauppauge_hvr930c_init: ref;

axiom hauppauge_hvr930c_init == $sub.ref(0, 215592);

procedure hauppauge_hvr930c_init($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation hauppauge_hvr930c_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p126: ref;
  var $p129: ref;
  var $p132: ref;
  var $p135: ref;
  var $p137: ref;
  var $p140: ref;
  var $p143: ref;
  var $p146: ref;
  var $p148: ref;
  var $p151: ref;
  var $p154: ref;
  var $p157: ref;
  var $p160: ref;
  var $p162: ref;
  var $p165: ref;
  var $p168: ref;
  var $p171: ref;
  var $p173: ref;
  var $p176: ref;
  var $p179: ref;
  var $p182: ref;
  var $p185: ref;
  var $p187: ref;
  var $p190: ref;
  var $p193: ref;
  var $p196: ref;
  var $p199: ref;
  var $p201: ref;
  var $p204: ref;
  var $p207: ref;
  var $p210: ref;
  var $p212: ref;
  var $p215: ref;
  var $p218: ref;
  var $p221: ref;
  var $p224: ref;
  var $p226: ref;
  var $p229: ref;
  var $p232: ref;
  var $p235: ref;
  var $p237: ref;
  var $p240: ref;
  var $p243: ref;
  var $p246: ref;
  var $p248: ref;
  var $p251: ref;
  var $p254: ref;
  var $p257: ref;
  var $p260: ref;
  var $p262: ref;
  var $p265: ref;
  var $p268: ref;
  var $p271: ref;
  var $p273: ref;
  var $p276: ref;
  var $p279: ref;
  var $p282: ref;
  var $p285: ref;
  var $p287: ref;
  var $p288: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i64;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $i301: i32;
  var $i302: i64;
  var $p303: ref;
  var $p305: ref;
  var $p306: ref;
  var $p308: ref;
  var $i309: i32;
  var $p311: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i32;
  var $i319: i64;
  var $p320: ref;
  var $p322: ref;
  var $p323: ref;
  var $p325: ref;
  var $i326: i32;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i64;
  var $p333: ref;
  var $p335: ref;
  var $p336: ref;
  var $p338: ref;
  var $i339: i32;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i32;
  var $i345: i64;
  var $p346: ref;
  var $p348: ref;
  var $p349: ref;
  var $p351: ref;
  var $i352: i32;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i64;
  var $p359: ref;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $i365: i32;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i64;
  var $p372: ref;
  var $p374: ref;
  var $p375: ref;
  var $p377: ref;
  var $i378: i32;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $i383: i32;
  var $i384: i64;
  var $p385: ref;
  var $p387: ref;
  var $p388: ref;
  var $p390: ref;
  var $i391: i32;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i32;
  var $i397: i64;
  var $p398: ref;
  var $p400: ref;
  var $p401: ref;
  var $p403: ref;
  var $i404: i32;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i32;
  var $i410: i64;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var $p416: ref;
  var $i417: i32;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i32;
  var $i423: i64;
  var $p424: ref;
  var $p426: ref;
  var $p427: ref;
  var $p429: ref;
  var $i430: i32;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i32;
  var $i436: i64;
  var $p437: ref;
  var $p439: ref;
  var $p440: ref;
  var $p442: ref;
  var $i443: i32;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i32;
  var $i449: i64;
  var $p450: ref;
  var $p452: ref;
  var $p453: ref;
  var $p455: ref;
  var $i456: i32;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $i461: i32;
  var $i462: i64;
  var $p463: ref;
  var $p465: ref;
  var $p466: ref;
  var $p468: ref;
  var $i469: i32;
  var $p473: ref;
  var $p476: ref;
  var $p479: ref;
  var $p482: ref;
  var $p485: ref;
  var $p488: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p2 := $alloc($mul.ref(132, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p3 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p5, 128);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p7, $sub.i8(0, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p9, $sub.i8(0, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, 101);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p13, 128);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p15, $sub.i8(0, 5));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p17, $sub.i8(0, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p19, 50);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p21, 128);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p23, $sub.i8(0, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p25, $sub.i8(0, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p27, 184);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p29, $sub.i32(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p31, $sub.i8(0, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p33, $sub.i8(0, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p35, $sub.i32(0, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p37, 128);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p39, $sub.i8(0, 17));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p41, $sub.i8(0, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p43, 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p45, 128);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p47, $sub.i8(0, 81));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p49, $sub.i8(0, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p51, 101);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p53, 128);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p55, $sub.i8(0, 17));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p57, $sub.i8(0, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p59, 118);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p61, 128);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p63, $sub.i8(0, 17));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p65, $sub.i8(0, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p67, 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p69, 128);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p71, $sub.i8(0, 49));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(4, 12)), $mul.ref(5, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p73, $sub.i8(0, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p75, 11);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(5, 12)), $mul.ref(0, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p77, 128);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p79, $sub.i8(0, 17));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(5, 12)), $mul.ref(5, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p81, $sub.i8(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p83, 64);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(6, 12)), $mul.ref(0, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p85, 128);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p87, $sub.i8(0, 49));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(6, 12)), $mul.ref(5, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p89, $sub.i8(0, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p91, 101);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(7, 12)), $mul.ref(0, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p93, 128);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p95, $sub.i8(0, 17));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(7, 12)), $mul.ref(5, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p97, $sub.i8(0, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p99, 101);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(8, 12)), $mul.ref(0, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p101, 128);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p103, $sub.i8(0, 49));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(8, 12)), $mul.ref(5, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p105, $sub.i8(0, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p107, 11);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(9, 12)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p109, 128);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p111, $sub.i8(0, 17));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(9, 12)), $mul.ref(5, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p113, $sub.i8(0, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p115, 101);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(10, 12)), $mul.ref(0, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p117, $sub.i32(0, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p119, $sub.i8(0, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(10, 12)), $mul.ref(5, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p121, $sub.i8(0, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 132)), $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p123, $sub.i32(0, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p126, 6);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p129, 2);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p132, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p135, 49);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p137, 4);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p140, 1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p143, 2);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p146, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p488, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p148, 2);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p151, 1);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p154, 2);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p157, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p160, $sub.i8(0, 58));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p162, 4);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p165, 1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p168, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p171, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p485, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p173, 2);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p176, 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p179, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p182, $sub.i8(0, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p185, $sub.i8(0, 81));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p187, 4);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p190, 1);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p193, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p196, 3);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p199, $sub.i8(0, 96));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p201, 4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p204, 1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p207, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p210, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p482, 0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p212, 2);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p215, 1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p218, 0);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p221, 115);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p224, $sub.i8(0, 81));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p226, 4);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p229, 4);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p232, 0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p235, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p479, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p237, 2);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p240, 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p243, 4);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p246, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p476, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p248, 2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p251, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p254, 4);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p257, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p260, 10);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p262, 4);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p265, 4);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p268, 20);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p271, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p473, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p273, 2);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p276, 4);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p279, 20);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p282, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p285, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p287, 4);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p1);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_173 := em28xx_gpio_set($p0, $p288);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_174 := em28xx_write_reg($p0, 6, 64);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} msleep(10);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_175 := em28xx_write_reg($p0, 6, 68);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} msleep(10);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i294 := $zext.i32.i64($i293);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1)), $mul.ref($i294, 1488)), $mul.ref(2, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p297, 65);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i302 := $zext.i32.i64($i301);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p299, $mul.ref($i302, 1488));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.26, $p308);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_176 := i2c_master_send($p303, $p306, $i309);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p315);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.0, $p317);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i319 := $zext.i32.i64($i318);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p316, $mul.ref($i319, 1488));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.26, $p325);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_177 := i2c_master_send($p320, $p323, $i326);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i332 := $zext.i32.i64($i331);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($p329, $mul.ref($i332, 1488));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p336 := $bitcast.ref.ref($p335);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i339 := $load.i32($M.26, $p338);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_181 := i2c_master_send($p333, $p336, $i339);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p342 := $bitcast.ref.ref($p341);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.0, $p343);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i345 := $zext.i32.i64($i344);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($p342, $mul.ref($i345, 1488));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p349 := $bitcast.ref.ref($p348);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.26, $p351);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_182 := i2c_master_send($p346, $p349, $i352);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i358 := $zext.i32.i64($i357);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($p355, $mul.ref($i358, 1488));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.26, $p364);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_183 := i2c_master_send($p359, $p362, $i365);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i371 := $zext.i32.i64($i370);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($p368, $mul.ref($i371, 1488));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.26, $p377);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_184 := i2c_master_send($p372, $p375, $i378);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p381 := $bitcast.ref.ref($p380);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i383 := $load.i32($M.0, $p382);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i384 := $zext.i32.i64($i383);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($p381, $mul.ref($i384, 1488));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p388 := $bitcast.ref.ref($p387);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.26, $p390);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_185 := i2c_master_send($p385, $p388, $i391);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p394 := $bitcast.ref.ref($p393);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i396 := $load.i32($M.0, $p395);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i397 := $zext.i32.i64($i396);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($p394, $mul.ref($i397, 1488));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p400);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.26, $p403);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_186 := i2c_master_send($p398, $p401, $i404);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p407 := $bitcast.ref.ref($p406);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.0, $p408);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i410 := $zext.i32.i64($i409);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($p407, $mul.ref($i410, 1488));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p413);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.26, $p416);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_187 := i2c_master_send($p411, $p414, $i417);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p420 := $bitcast.ref.ref($p419);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.0, $p421);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i423 := $zext.i32.i64($i422);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p420, $mul.ref($i423, 1488));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p426);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.26, $p429);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_188 := i2c_master_send($p424, $p427, $i430);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p433 := $bitcast.ref.ref($p432);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i435 := $load.i32($M.0, $p434);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i436 := $zext.i32.i64($i435);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p433, $mul.ref($i436, 1488));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p440 := $bitcast.ref.ref($p439);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i443 := $load.i32($M.26, $p442);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_189 := i2c_master_send($p437, $p440, $i443);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p446 := $bitcast.ref.ref($p445);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.0, $p447);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i449 := $zext.i32.i64($i448);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p446, $mul.ref($i449, 1488));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.26, $p455);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_190 := i2c_master_send($p450, $p453, $i456);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p459 := $bitcast.ref.ref($p458);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.0, $p460);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i462 := $zext.i32.i64($i461);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p459, $mul.ref($i462, 1488));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p466 := $bitcast.ref.ref($p465);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i469 := $load.i32($M.26, $p468);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_191 := i2c_master_send($p463, $p466, $i469);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p2);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_178 := em28xx_gpio_set($p0, $p311);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} msleep(100);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_179 := em28xx_write_reg($p0, 6, 68);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} msleep(30);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_180 := em28xx_write_reg($p0, 6, 69);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} msleep(10);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    return;
}



const sema_init: ref;

axiom sema_init == $sub.ref(0, 216624);

procedure sema_init($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sema_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p20: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 577} {:cexpr "sema_init:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 559067475));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str.75);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 578} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p41, $p42, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} lockdep_init_map($p44, .str.76, $p2, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    return;
}



const drxk_gate_ctrl: ref;

axiom drxk_gate_ctrl == $sub.ref(0, 217656);

procedure drxk_gate_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation drxk_gate_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i13: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "drxk_gate_ctrl:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(816, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(2224, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 584} $i16 := devirtbounce.14($p15, $p0, 0);
    call {:si_unique_call 585} {:cexpr "status"} boogie_si_record_i32($i16);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(2232, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} up($p17);
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i7 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(2232, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} down($p9);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2360)), $mul.ref(2224, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 582} $i12 := devirtbounce.14($p11, $p0, 1);
    call {:si_unique_call 583} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 218688);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const terratec_h5_init: ref;

axiom terratec_h5_init == $sub.ref(0, 219720);

procedure terratec_h5_init($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation terratec_h5_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p78: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p89: ref;
  var $p92: ref;
  var $p95: ref;
  var $p98: ref;
  var $p100: ref;
  var $p103: ref;
  var $p106: ref;
  var $p109: ref;
  var $p112: ref;
  var $p114: ref;
  var $p117: ref;
  var $p120: ref;
  var $p123: ref;
  var $p125: ref;
  var $p128: ref;
  var $p131: ref;
  var $p134: ref;
  var $p137: ref;
  var $p139: ref;
  var $p142: ref;
  var $p145: ref;
  var $p148: ref;
  var $p151: ref;
  var $p153: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p164: ref;
  var $p167: ref;
  var $p170: ref;
  var $p173: ref;
  var $p176: ref;
  var $p178: ref;
  var $p181: ref;
  var $p184: ref;
  var $p187: ref;
  var $p189: ref;
  var $p192: ref;
  var $p195: ref;
  var $p198: ref;
  var $p200: ref;
  var $p203: ref;
  var $p206: ref;
  var $p209: ref;
  var $p212: ref;
  var $p214: ref;
  var $p217: ref;
  var $p220: ref;
  var $p223: ref;
  var $p225: ref;
  var $p228: ref;
  var $p231: ref;
  var $p234: ref;
  var $p237: ref;
  var $p239: ref;
  var $p240: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i64;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i64;
  var $p255: ref;
  var $p257: ref;
  var $p258: ref;
  var $p260: ref;
  var $i261: i32;
  var $p263: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $i269: i64;
  var $p270: ref;
  var $p272: ref;
  var $p273: ref;
  var $p275: ref;
  var $i276: i32;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i32;
  var $i282: i64;
  var $p283: ref;
  var $p285: ref;
  var $p286: ref;
  var $p288: ref;
  var $i289: i32;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $p296: ref;
  var $p298: ref;
  var $p299: ref;
  var $p301: ref;
  var $i302: i32;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $i308: i64;
  var $p309: ref;
  var $p311: ref;
  var $p312: ref;
  var $p314: ref;
  var $i315: i32;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i32;
  var $i321: i64;
  var $p322: ref;
  var $p324: ref;
  var $p325: ref;
  var $p327: ref;
  var $i328: i32;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $i333: i32;
  var $i334: i64;
  var $p335: ref;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $i341: i32;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $i346: i32;
  var $i347: i64;
  var $p348: ref;
  var $p350: ref;
  var $p351: ref;
  var $p353: ref;
  var $i354: i32;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i360: i64;
  var $p361: ref;
  var $p363: ref;
  var $p364: ref;
  var $p366: ref;
  var $i367: i32;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $i372: i32;
  var $i373: i64;
  var $p374: ref;
  var $p376: ref;
  var $p377: ref;
  var $p379: ref;
  var $i380: i32;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $i385: i32;
  var $i386: i64;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $p392: ref;
  var $i393: i32;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i32;
  var $i399: i64;
  var $p400: ref;
  var $p402: ref;
  var $p403: ref;
  var $p405: ref;
  var $i406: i32;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $i411: i32;
  var $i412: i64;
  var $p413: ref;
  var $p415: ref;
  var $p416: ref;
  var $p418: ref;
  var $i419: i32;
  var $p423: ref;
  var $p426: ref;
  var $p429: ref;
  var $p432: ref;
  var $p435: ref;
  var $p438: ref;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p1 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p3 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p5, 8);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p7, $sub.i8(0, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p9, $sub.i8(0, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, 10);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p13, 128);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p15, $sub.i8(0, 10));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p17, $sub.i8(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p19, 100);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p21, 128);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p23, $sub.i8(0, 14));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p25, $sub.i8(0, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p27, 50);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p29, 128);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p31, $sub.i8(0, 10));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p33, $sub.i8(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p35, 100);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p37, $sub.i32(0, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p39, $sub.i8(0, 1));
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(5, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p41, $sub.i8(0, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p43, $sub.i32(0, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p45, 128);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p47, $sub.i8(0, 26));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p49, $sub.i8(0, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p51, 100);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p53, 128);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p55, $sub.i8(0, 90));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p57, $sub.i8(0, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p59, 50);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p61, 128);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p63, $sub.i8(0, 26));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p65, $sub.i8(0, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p67, 100);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p69, $sub.i32(0, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p71, $sub.i8(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p73, $sub.i8(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p75, $sub.i32(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p78, 6);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p81, 2);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p84, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p87, 49);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p89, 4);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p92, 1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p95, 2);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p98, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p438, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p100, 2);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p103, 1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p106, 2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p109, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p112, $sub.i8(0, 58));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p114, 4);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p117, 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p120, 0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p123, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p435, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p125, 2);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p128, 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p131, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p134, $sub.i8(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p137, $sub.i8(0, 81));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p139, 4);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p142, 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p145, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p148, 3);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p151, $sub.i8(0, 96));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p153, 4);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p156, 1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p159, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p162, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p432, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p164, 2);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p167, 1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p170, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p173, 115);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p176, $sub.i8(0, 81));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p178, 4);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p181, 4);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p184, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p187, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p429, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p189, 2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p192, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p195, 4);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p198, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p426, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p200, 2);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p203, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p206, 4);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p209, 0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p212, 10);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p214, 4);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p217, 4);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p220, 20);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p223, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p423, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p225, 2);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p228, 4);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p231, 20);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p234, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p237, 0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p239, 4);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_192 := em28xx_gpio_set($p0, $p240);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_193 := em28xx_write_reg($p0, 6, 64);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} msleep(10);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_194 := em28xx_write_reg($p0, 6, 69);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} msleep(10);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i246 := $zext.i32.i64($i245);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1)), $mul.ref($i246, 1488)), $mul.ref(2, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p249, 65);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.0, $p252);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i254 := $zext.i32.i64($i253);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p251, $mul.ref($i254, 1488));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.26, $p260);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_195 := i2c_master_send($p255, $p258, $i261);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p266 := $bitcast.ref.ref($p265);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i269 := $zext.i32.i64($i268);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p266, $mul.ref($i269, 1488));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p272);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.26, $p275);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_196 := i2c_master_send($p270, $p273, $i276);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p278);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p280);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i282 := $zext.i32.i64($i281);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p279, $mul.ref($i282, 1488));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.26, $p288);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_198 := i2c_master_send($p283, $p286, $i289);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i294);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p292, $mul.ref($i295, 1488));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.26, $p301);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_199 := i2c_master_send($p296, $p299, $i302);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i308 := $zext.i32.i64($i307);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($p305, $mul.ref($i308, 1488));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.26, $p314);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_200 := i2c_master_send($p309, $p312, $i315);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p318 := $bitcast.ref.ref($p317);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.0, $p319);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i321 := $zext.i32.i64($i320);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p318, $mul.ref($i321, 1488));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p325 := $bitcast.ref.ref($p324);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.26, $p327);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_201 := i2c_master_send($p322, $p325, $i328);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.0, $p332);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i334 := $zext.i32.i64($i333);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p331, $mul.ref($i334, 1488));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p338 := $bitcast.ref.ref($p337);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.26, $p340);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_202 := i2c_master_send($p335, $p338, $i341);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.0, $p345);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i347 := $zext.i32.i64($i346);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($p344, $mul.ref($i347, 1488));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p350);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.26, $p353);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_203 := i2c_master_send($p348, $p351, $i354);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.0, $p358);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i360 := $zext.i32.i64($i359);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($p357, $mul.ref($i360, 1488));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p364 := $bitcast.ref.ref($p363);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i367 := $load.i32($M.26, $p366);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_204 := i2c_master_send($p361, $p364, $i367);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p370 := $bitcast.ref.ref($p369);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.0, $p371);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i373 := $zext.i32.i64($i372);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p370, $mul.ref($i373, 1488));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p376);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.26, $p379);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_205 := i2c_master_send($p374, $p377, $i380);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p383 := $bitcast.ref.ref($p382);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p384);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i386 := $zext.i32.i64($i385);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($p383, $mul.ref($i386, 1488));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.26, $p392);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_206 := i2c_master_send($p387, $p390, $i393);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p396 := $bitcast.ref.ref($p395);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i399 := $zext.i32.i64($i398);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($p396, $mul.ref($i399, 1488));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p403 := $bitcast.ref.ref($p402);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i406 := $load.i32($M.26, $p405);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_207 := i2c_master_send($p400, $p403, $i406);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p409 := $bitcast.ref.ref($p408);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i411 := $load.i32($M.0, $p410);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i412 := $zext.i32.i64($i411);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($p409, $mul.ref($i412, 1488));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p416 := $bitcast.ref.ref($p415);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.26, $p418);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_208 := i2c_master_send($p413, $p416, $i419);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_197 := em28xx_gpio_set($p0, $p263);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 220752);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 610} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 611} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2c_new_device: ref;

axiom i2c_new_device == $sub.ref(0, 221784);

procedure i2c_new_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_new_device($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p2 := external_alloc();
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_try_module_get_5: ref;

axiom ldv_try_module_get_5 == $sub.ref(0, 222816);

procedure ldv_try_module_get_5($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_5($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 614} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 223848);

procedure ldv_module_put_6($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} ldv_module_put($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_7: ref;

axiom ldv_try_module_get_7 == $sub.ref(0, 224880);

procedure ldv_try_module_get_7($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_7($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 617} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_8: ref;

axiom ldv_module_put_8 == $sub.ref(0, 225912);

procedure ldv_module_put_8($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_module_put($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const pctv_520e_init: ref;

axiom pctv_520e_init == $sub.ref(0, 226944);

procedure pctv_520e_init($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation pctv_520e_init($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p7: ref;
  var $p10: ref;
  var $p13: ref;
  var $p15: ref;
  var $p18: ref;
  var $p21: ref;
  var $p24: ref;
  var $p26: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p38: ref;
  var $p40: ref;
  var $p43: ref;
  var $p46: ref;
  var $p49: ref;
  var $p51: ref;
  var $p54: ref;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p65: ref;
  var $p68: ref;
  var $p71: ref;
  var $p74: ref;
  var $p77: ref;
  var $p79: ref;
  var $p82: ref;
  var $p85: ref;
  var $p88: ref;
  var $p90: ref;
  var $p93: ref;
  var $p96: ref;
  var $p99: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $i122: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i64;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $i148: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $i161: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i64;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $i187: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $p194: ref;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $i200: i32;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i64;
  var $p207: ref;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $i213: i32;
  var $p217: ref;
  var $p220: ref;
  var $p223: ref;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p4, 6);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p7, 2);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p10, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p13, 49);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p15, 4);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p18, 1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p21, 2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p24, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p223, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p26, 2);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p29, 1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p32, 2);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p35, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p38, $sub.i8(0, 58));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p40, 4);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p43, 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p46, 0);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p49, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p220, 0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p51, 2);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p54, 1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p57, 0);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p60, $sub.i8(0, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p63, $sub.i8(0, 81));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p65, 4);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p68, 1);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p71, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p74, 3);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p77, $sub.i8(0, 96));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p79, 4);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p82, 1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p85, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p88, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p217, 0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p90, 2);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p93, 1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p96, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p99, 115);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p102, $sub.i8(0, 81));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p104, 4);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1)), $mul.ref($i107, 1488)), $mul.ref(2, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, 65);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p112, $mul.ref($i115, 1488));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.26, $p121);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_209 := i2c_master_send($p116, $p119, $i122);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i127);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p125, $mul.ref($i128, 1488));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.26, $p134);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_210 := i2c_master_send($p129, $p132, $i135);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i141 := $zext.i32.i64($i140);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p138, $mul.ref($i141, 1488));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.26, $p147);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_211 := i2c_master_send($p142, $p145, $i148);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i153);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p151, $mul.ref($i154, 1488));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.26, $p160);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_212 := i2c_master_send($p155, $p158, $i161);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i166);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p164, $mul.ref($i167, 1488));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.26, $p173);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_213 := i2c_master_send($p168, $p171, $i174);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i180 := $zext.i32.i64($i179);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p177, $mul.ref($i180, 1488));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.26, $p186);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_214 := i2c_master_send($p181, $p184, $i187);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i193 := $zext.i32.i64($i192);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p190, $mul.ref($i193, 1488));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.26, $p199);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_215 := i2c_master_send($p194, $p197, $i200);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i206 := $zext.i32.i64($i205);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p203, $mul.ref($i206, 1488));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.26, $p212);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_216 := i2c_master_send($p207, $p210, $i213);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;
}



const terratec_htc_stick_init: ref;

axiom terratec_htc_stick_init == $sub.ref(0, 227976);

procedure terratec_htc_stick_init($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation terratec_htc_stick_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p70: ref;
  var $p73: ref;
  var $p76: ref;
  var $p79: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p90: ref;
  var $p92: ref;
  var $p95: ref;
  var $p98: ref;
  var $p101: ref;
  var $p104: ref;
  var $p106: ref;
  var $p109: ref;
  var $p112: ref;
  var $p115: ref;
  var $p117: ref;
  var $p120: ref;
  var $p123: ref;
  var $p126: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $i153: i32;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i64;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $i168: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $p175: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $i181: i32;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $i194: i32;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $i207: i32;
  var $p211: ref;
  var $p214: ref;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p1 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p2 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p5, 8);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p7, $sub.i8(0, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p9, $sub.i8(0, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, 10);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p13, 128);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p15, $sub.i8(0, 10));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p17, $sub.i8(0, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p19, 100);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p21, 128);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p23, $sub.i8(0, 26));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p25, $sub.i8(0, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p27, 50);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p29, 128);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p31, $sub.i8(0, 10));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p33, $sub.i8(0, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p35, 100);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p37, $sub.i32(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p39, $sub.i8(0, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(5, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p41, $sub.i8(0, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p43, $sub.i32(0, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p45, 128);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p47, $sub.i8(0, 74));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p49, $sub.i8(0, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p51, 100);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p53, 128);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p55, $sub.i8(0, 10));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p57, $sub.i8(0, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p59, 50);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p61, $sub.i32(0, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p63, $sub.i8(0, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p65, $sub.i8(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p67, $sub.i32(0, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p70, 6);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p73, 2);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p76, 0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p79, 49);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p81, 4);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p84, 1);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p87, 2);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p90, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p214, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p92, 2);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p95, 1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p98, 2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p101, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p104, $sub.i8(0, 58));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p106, 4);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p109, 1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p112, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p115, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p211, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p117, 2);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p120, 1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p123, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p126, $sub.i8(0, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p129, $sub.i8(0, 81));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p131, 4);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_217 := em28xx_gpio_set($p0, $p132);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_218 := em28xx_write_reg($p0, 6, 64);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} msleep(10);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_219 := em28xx_write_reg($p0, 6, 68);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} msleep(10);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i138 := $zext.i32.i64($i137);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1)), $mul.ref($i138, 1488)), $mul.ref(2, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, 65);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i145);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p143, $mul.ref($i146, 1488));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.26, $p152);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_220 := i2c_master_send($p147, $p150, $i153);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i161 := $zext.i32.i64($i160);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($p158, $mul.ref($i161, 1488));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.26, $p167);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_221 := i2c_master_send($p162, $p165, $i168);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i174 := $zext.i32.i64($i173);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p171, $mul.ref($i174, 1488));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.26, $p180);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_223 := i2c_master_send($p175, $p178, $i181);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i187 := $zext.i32.i64($i186);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($p184, $mul.ref($i187, 1488));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.26, $p193);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_224 := i2c_master_send($p188, $p191, $i194);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i199);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p197, $mul.ref($i200, 1488));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.26, $p206);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_225 := i2c_master_send($p201, $p204, $i207);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p2);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_222 := em28xx_gpio_set($p0, $p155);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    return;
}



const terratec_htc_usb_xs_init: ref;

axiom terratec_htc_usb_xs_init == $sub.ref(0, 229008);

procedure terratec_htc_usb_xs_init($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.0, $CurrAddr;



implementation terratec_htc_usb_xs_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p78: ref;
  var $p81: ref;
  var $p84: ref;
  var $p87: ref;
  var $p89: ref;
  var $p92: ref;
  var $p95: ref;
  var $p98: ref;
  var $p100: ref;
  var $p103: ref;
  var $p106: ref;
  var $p109: ref;
  var $p112: ref;
  var $p114: ref;
  var $p117: ref;
  var $p120: ref;
  var $p123: ref;
  var $p125: ref;
  var $p128: ref;
  var $p131: ref;
  var $p134: ref;
  var $p137: ref;
  var $p139: ref;
  var $p142: ref;
  var $p145: ref;
  var $p148: ref;
  var $p151: ref;
  var $p153: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p164: ref;
  var $p167: ref;
  var $p170: ref;
  var $p173: ref;
  var $p176: ref;
  var $p178: ref;
  var $p181: ref;
  var $p184: ref;
  var $p187: ref;
  var $p189: ref;
  var $p192: ref;
  var $p195: ref;
  var $p198: ref;
  var $p200: ref;
  var $p203: ref;
  var $p206: ref;
  var $p209: ref;
  var $p212: ref;
  var $p214: ref;
  var $p217: ref;
  var $p220: ref;
  var $p223: ref;
  var $p225: ref;
  var $p228: ref;
  var $p231: ref;
  var $p234: ref;
  var $p237: ref;
  var $p239: ref;
  var $p241: ref;
  var $p245: ref;
  var $i246: i32;
  var $i247: i64;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i64;
  var $p256: ref;
  var $p258: ref;
  var $p259: ref;
  var $p261: ref;
  var $i262: i32;
  var $p264: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i64;
  var $p271: ref;
  var $p273: ref;
  var $p274: ref;
  var $p276: ref;
  var $i277: i32;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $i283: i64;
  var $p284: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $i290: i32;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i64;
  var $p297: ref;
  var $p299: ref;
  var $p300: ref;
  var $p302: ref;
  var $i303: i32;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i64;
  var $p310: ref;
  var $p312: ref;
  var $p313: ref;
  var $p315: ref;
  var $i316: i32;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i32;
  var $i322: i64;
  var $p323: ref;
  var $p325: ref;
  var $p326: ref;
  var $p328: ref;
  var $i329: i32;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i32;
  var $i335: i64;
  var $p336: ref;
  var $p338: ref;
  var $p339: ref;
  var $p341: ref;
  var $i342: i32;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i64;
  var $p349: ref;
  var $p351: ref;
  var $p352: ref;
  var $p354: ref;
  var $i355: i32;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i32;
  var $i361: i64;
  var $p362: ref;
  var $p364: ref;
  var $p365: ref;
  var $p367: ref;
  var $i368: i32;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i64;
  var $p375: ref;
  var $p377: ref;
  var $p378: ref;
  var $p380: ref;
  var $i381: i32;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $p390: ref;
  var $p391: ref;
  var $p393: ref;
  var $i394: i32;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i64;
  var $p401: ref;
  var $p403: ref;
  var $p404: ref;
  var $p406: ref;
  var $i407: i32;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i32;
  var $i413: i64;
  var $p414: ref;
  var $p416: ref;
  var $p417: ref;
  var $p419: ref;
  var $i420: i32;
  var $p424: ref;
  var $p427: ref;
  var $p430: ref;
  var $p433: ref;
  var $p436: ref;
  var $p439: ref;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p1 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p3 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p5, 8);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p7, $sub.i8(0, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p9, $sub.i8(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, 10);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p13, 128);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p15, $sub.i8(0, 78));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p17, $sub.i8(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p19, 100);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p21, 128);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p23, $sub.i8(0, 78));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p25, $sub.i8(0, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p27, 50);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p29, 128);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p31, $sub.i8(0, 74));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p33, $sub.i8(0, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p35, 100);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p37, $sub.i32(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p39, $sub.i8(0, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(5, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p41, $sub.i8(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p43, $sub.i32(0, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p45, 128);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p47, $sub.i8(0, 90));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(5, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p49, $sub.i8(0, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p51, 100);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p53, 128);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p55, $sub.i8(0, 90));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p57, $sub.i8(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p59, 50);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p61, 128);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p63, $sub.i8(0, 26));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(5, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p65, $sub.i8(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p67, 100);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p69, $sub.i32(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p71, $sub.i8(0, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(5, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p73, $sub.i8(0, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p75, $sub.i32(0, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p78, 6);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p81, 2);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p84, 0);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p87, 49);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p89, 4);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p92, 1);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p95, 2);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p98, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p439, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p100, 2);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p103, 1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p106, 2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p109, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p112, $sub.i8(0, 58));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p114, 4);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p117, 1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p120, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p123, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p436, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p125, 2);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p128, 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p131, 0);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p134, $sub.i8(0, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p137, $sub.i8(0, 81));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p139, 4);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p142, 1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p145, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p148, 3);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p151, $sub.i8(0, 96));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p153, 4);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p156, 1);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p159, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p162, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p433, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p164, 2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p167, 1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p170, 0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p173, 115);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p176, $sub.i8(0, 81));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p178, 4);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p181, 4);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p184, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p187, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p430, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p189, 2);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p192, 0);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p195, 4);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p198, 0);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p427, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p200, 2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p203, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p206, 4);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p209, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p212, 10);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p214, 4);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p217, 4);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p220, 20);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p223, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p424, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p225, 2);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p228, 4);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p231, 20);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p234, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p237, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p239, 4);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_226 := em28xx_write_reg($p0, 6, 64);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p1);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_227 := em28xx_gpio_set($p0, $p241);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_228 := em28xx_write_reg($p0, 6, 64);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} msleep(10);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_229 := em28xx_write_reg($p0, 6, 68);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} msleep(10);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.0, $p245);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i247 := $zext.i32.i64($i246);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1)), $mul.ref($i247, 1488)), $mul.ref(2, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p250, 65);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p253);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i255 := $zext.i32.i64($i254);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p252, $mul.ref($i255, 1488));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.26, $p261);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_230 := i2c_master_send($p256, $p259, $i262);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p268);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i270 := $zext.i32.i64($i269);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p267, $mul.ref($i270, 1488));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.26, $p276);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_231 := i2c_master_send($p271, $p274, $i277);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p279);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i283 := $zext.i32.i64($i282);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($p280, $mul.ref($i283, 1488));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p287 := $bitcast.ref.ref($p286);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.26, $p289);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_233 := i2c_master_send($p284, $p287, $i290);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p293 := $bitcast.ref.ref($p292);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.0, $p294);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i296 := $zext.i32.i64($i295);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p293, $mul.ref($i296, 1488));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.26, $p302);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_234 := i2c_master_send($p297, $p300, $i303);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.0, $p307);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i309 := $zext.i32.i64($i308);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($p306, $mul.ref($i309, 1488));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.26, $p315);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_235 := i2c_master_send($p310, $p313, $i316);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p318);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.0, $p320);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i322 := $zext.i32.i64($i321);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p319, $mul.ref($i322, 1488));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p326 := $bitcast.ref.ref($p325);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.26, $p328);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_236 := i2c_master_send($p323, $p326, $i329);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p332 := $bitcast.ref.ref($p331);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p333);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i335 := $zext.i32.i64($i334);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p332, $mul.ref($i335, 1488));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p339 := $bitcast.ref.ref($p338);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.26, $p341);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_237 := i2c_master_send($p336, $p339, $i342);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p345 := $bitcast.ref.ref($p344);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i348 := $zext.i32.i64($i347);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($p345, $mul.ref($i348, 1488));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p352 := $bitcast.ref.ref($p351);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i355 := $load.i32($M.26, $p354);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_238 := i2c_master_send($p349, $p352, $i355);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.0, $p359);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i361 := $zext.i32.i64($i360);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p358, $mul.ref($i361, 1488));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p364);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.26, $p367);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_239 := i2c_master_send($p362, $p365, $i368);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p370);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.0, $p372);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i374 := $zext.i32.i64($i373);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($p371, $mul.ref($i374, 1488));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.26, $p380);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_240 := i2c_master_send($p375, $p378, $i381);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p384 := $bitcast.ref.ref($p383);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i386 := $load.i32($M.0, $p385);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i387 := $zext.i32.i64($i386);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p384, $mul.ref($i387, 1488));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.26, $p393);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_241 := i2c_master_send($p388, $p391, $i394);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p397 := $bitcast.ref.ref($p396);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.0, $p398);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i400 := $zext.i32.i64($i399);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($p397, $mul.ref($i400, 1488));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p404 := $bitcast.ref.ref($p403);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.26, $p406);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_242 := i2c_master_send($p401, $p404, $i407);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(4528, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p410 := $bitcast.ref.ref($p409);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.0, $p411);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i413 := $zext.i32.i64($i412);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($p410, $mul.ref($i413, 1488));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p417 := $bitcast.ref.ref($p416);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i420 := $load.i32($M.26, $p419);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_243 := i2c_master_send($p414, $p417, $i420);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p2);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_232 := em28xx_gpio_set($p0, $p264);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get_9: ref;

axiom ldv_try_module_get_9 == $sub.ref(0, 230040);

procedure ldv_try_module_get_9($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_9($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 666} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get_10: ref;

axiom ldv_try_module_get_10 == $sub.ref(0, 231072);

procedure ldv_try_module_get_10($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_10($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 668} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 232104);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} ldv_module_put($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_12: ref;

axiom ldv_try_module_get_12 == $sub.ref(0, 233136);

procedure ldv_try_module_get_12($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_12($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_13: ref;

axiom ldv_module_put_13 == $sub.ref(0, 234168);

procedure ldv_module_put_13($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_module_put($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_module_put_14: ref;

axiom ldv_module_put_14 == $sub.ref(0, 235200);

procedure ldv_module_put_14($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ldv_module_put($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_module_put_15: ref;

axiom ldv_module_put_15 == $sub.ref(0, 236232);

procedure ldv_module_put_15($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} ldv_module_put($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_16: ref;

axiom ldv_try_module_get_16 == $sub.ref(0, 237264);

procedure ldv_try_module_get_16($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_16($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_17: ref;

axiom ldv_module_put_17 == $sub.ref(0, 238296);

procedure ldv_module_put_17($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ldv_module_put($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_module_put_18: ref;

axiom ldv_module_put_18 == $sub.ref(0, 239328);

procedure ldv_module_put_18($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_module_put($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_19: ref;

axiom ldv_try_module_get_19 == $sub.ref(0, 240360);

procedure ldv_try_module_get_19($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_19($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_20: ref;

axiom ldv_module_put_20 == $sub.ref(0, 241392);

procedure ldv_module_put_20($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_module_put($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_21: ref;

axiom ldv_try_module_get_21 == $sub.ref(0, 242424);

procedure ldv_try_module_get_21($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_21($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 683} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_22: ref;

axiom ldv_module_put_22 == $sub.ref(0, 243456);

procedure ldv_module_put_22($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} ldv_module_put($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const em28xx_pctv_292e_set_lna: ref;

axiom em28xx_pctv_292e_set_lna == $sub.ref(0, 244488);

procedure em28xx_pctv_292e_set_lna($p0: ref) returns ($r: i32);



const ldv_try_module_get_23: ref;

axiom ldv_try_module_get_23 == $sub.ref(0, 245520);

procedure ldv_try_module_get_23($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_23($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_24: ref;

axiom ldv_module_put_24 == $sub.ref(0, 246552);

procedure ldv_module_put_24($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_module_put($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_25: ref;

axiom ldv_try_module_get_25 == $sub.ref(0, 247584);

procedure ldv_try_module_get_25($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get_25($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 689} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_26: ref;

axiom ldv_module_put_26 == $sub.ref(0, 248616);

procedure ldv_module_put_26($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_module_put_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv_module_put($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const em28xx_tuner_callback: ref;

axiom em28xx_tuner_callback == $sub.ref(0, 249648);

procedure em28xx_tuner_callback($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const em28xx_register_dvb: ref;

axiom em28xx_register_dvb == $sub.ref(0, 250680);

procedure em28xx_register_dvb($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation em28xx_register_dvb($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p65: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p101: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $i129: i32;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p162: ref;
  var $i114: i32;
  var $p164: ref;
  var $i99: i32;
  var $p165: ref;
  var $i83: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i1;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $p177: ref;
  var $i62: i32;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $i47: i32;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i14: i32;
  var $i147: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(16, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __mutex_init($p5, .str.81, $p4);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i9 := dvb_register_adapter($p6, $p8, $p1, $p3, adapter_nr);
    call {:si_unique_call 694} {:cexpr "result"} boogie_si_record_i32($i9);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(368, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, em28xx_dvb_bus_ctrl);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(7504, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(7540, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p31, $mul.ref($i34, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1)), $mul.ref(56, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i42 := dvb_register_frontend($p38, $p41);
    call {:si_unique_call 697} {:cexpr "result"} boogie_si_record_i32($i42);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 13);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(152, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p0);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(160, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 256);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(164, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 256);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(168, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, em28xx_start_feed);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(176, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, em28xx_stop_feed);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i78 := dvb_dmx_init($p77);
    call {:si_unique_call 705} {:cexpr "result"} boogie_si_record_i32($i78);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1)), $mul.ref(32, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 256);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1)), $mul.ref(24, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p87);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1)), $mul.ref(36, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i94 := dvb_dmxdev_init($p92, $p93);
    call {:si_unique_call 708} {:cexpr "result"} boogie_si_record_i32($i94);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1872, 1)), $mul.ref(16, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1872, 1));
    call {:si_unique_call 711} $i109 := devirtbounce.21($p105, $p107, $p108);
    call {:si_unique_call 712} {:cexpr "result"} boogie_si_record_i32($i109);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1896, 1)), $mul.ref(16, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1896, 1));
    call {:si_unique_call 715} $i124 := devirtbounce.21($p120, $p122, $p123);
    call {:si_unique_call 716} {:cexpr "result"} boogie_si_record_i32($i124);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1872, 1));
    call {:si_unique_call 719} $i137 := devirtbounce.21($p133, $p135, $p136);
    call {:si_unique_call 720} {:cexpr "result"} boogie_si_record_i32($i137);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i137, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1920, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_255 := dvb_net_init($p142, $p143, $p145);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i147 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $r := $i147;
    return;

  $bb35:
    assume $i138 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_253 := printk.ref.ref.i32(.str.89, $p140, $i137);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1896, 1));
    call {:si_unique_call 722} vslice_dummy_var_254 := devirtbounce.21($p151, $p153, $p154);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i129 := $i137;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1872, 1));
    call {:si_unique_call 718} vslice_dummy_var_252 := devirtbounce.21($p159, $p161, $p162);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i114 := $i129;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(1384, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} dvb_dmxdev_release($p164);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i99 := $i114;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} dvb_dmx_release($p165);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i83 := $i99;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_257 := dvb_unregister_frontend($p177);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i62 := $i83;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p181);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i47 := $i62;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} dvb_frontend_detach($p189);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_246 := dvb_unregister_adapter($p190);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i14 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i147 := $i14;
    goto $bb39;

  $bb43:
    assume $i183 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} dvb_frontend_detach($p186);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i170 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_256 := dvb_unregister_frontend($p173);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb31:
    assume $i125 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_251 := printk.ref.ref.i32(.str.88, $p127, $i124);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i129 := $i124;
    goto $bb33;

  $bb27:
    assume $i110 == 1;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_250 := printk.ref.ref.i32(.str.87, $p112, $i109);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i114 := $i109;
    goto $bb29;

  $bb23:
    assume $i95 == 1;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_249 := printk.ref.ref.i32(.str.86, $p97, $i94);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i99 := $i94;
    goto $bb25;

  $bb19:
    assume $i79 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_248 := printk.ref.ref.i32(.str.85, $p81, $i78);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i83 := $i78;
    goto $bb21;

  $bb12:
    assume $i52 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(184, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i57 := dvb_register_frontend($p53, $p56);
    call {:si_unique_call 702} {:cexpr "result"} boogie_si_record_i32($i57);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_247 := printk.ref.ref.i32(.str.84, $p60, $i57);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i62 := $i57;
    goto $bb16;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_245 := printk.ref.ref.i32(.str.83, $p45, $i42);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb10;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2360)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(368, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, em28xx_dvb_bus_ctrl);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_244 := printk.ref.ref.i32(.str.82, $p12, $i9);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i14 := $i9;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 251712);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_258: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 728} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 729} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 731} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_258 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 732} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 734} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 737} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} warn_slowpath_null(.str.102, 47);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 252744);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 253776);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 740} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 741} $i3 := devirtbounce.25(0, $p2, $i0, $p2);
    call {:si_unique_call 742} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 254808);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    return;
}



const dvb_register_adapter: ref;

axiom dvb_register_adapter == $sub.ref(0, 255840);

procedure dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_adapter($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const em28xx_dvb_bus_ctrl: ref;

axiom em28xx_dvb_bus_ctrl == $sub.ref(0, 256872);

procedure em28xx_dvb_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_dvb_bus_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} {:cexpr "em28xx_dvb_bus_ctrl:arg:acquire"} boogie_si_record_i32($i1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i12 := em28xx_set_mode($p8, 0);
    call {:si_unique_call 749} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i10 := em28xx_set_mode($p8, 2);
    call {:si_unique_call 747} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const dvb_register_frontend: ref;

axiom dvb_register_frontend == $sub.ref(0, 257904);

procedure dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_register_frontend($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const em28xx_start_feed: ref;

axiom em28xx_start_feed == $sub.ref(0, 258936);

procedure em28xx_start_feed($p0: ref) returns ($r: i32);



const em28xx_stop_feed: ref;

axiom em28xx_stop_feed == $sub.ref(0, 259968);

procedure em28xx_stop_feed($p0: ref) returns ($r: i32);



const dvb_dmx_init: ref;

axiom dvb_dmx_init == $sub.ref(0, 261000);

procedure dvb_dmx_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmx_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dvb_dmxdev_init: ref;

axiom dvb_dmxdev_init == $sub.ref(0, 262032);

procedure dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_dmxdev_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 754} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 755} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dvb_net_init: ref;

axiom dvb_net_init == $sub.ref(0, 263064);

procedure dvb_net_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_net_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const em28xx_stop_streaming: ref;

axiom em28xx_stop_streaming == $sub.ref(0, 264096);

procedure em28xx_stop_streaming($p0: ref) returns ($r: i32);



const em28xx_stop_urbs: ref;

axiom em28xx_stop_urbs == $sub.ref(0, 265128);

procedure em28xx_stop_urbs($p0: ref);



const em28xx_start_streaming: ref;

axiom em28xx_start_streaming == $sub.ref(0, 266160);

procedure em28xx_start_streaming($p0: ref) returns ($r: i32);



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 267192);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const em28xx_dvb_urb_data_copy: ref;

axiom em28xx_dvb_urb_data_copy == $sub.ref(0, 268224);

procedure em28xx_dvb_urb_data_copy($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_dvb_urb_data_copy($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i20: i32;
  var $i23: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $i46: i32;
  var $i34: i32;
  var $i88: i32;
  var $i89: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(364, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i15, 30);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 3);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 759} {:cexpr "xfer_bulk"} boogie_si_record_i32($i18);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 760} {:cexpr "num_packets"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i20);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb17;

  $bb17:
    call $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i47, $p50, $i51, $i52, $i53, $p56, $i57, $i58, $p61, $i62, $i63, $i64, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $p74, $i75, $p78, $i79, $i80, $p81, $i82, $p85, $i86, $i87, $i46, $i34, $i88, $i89, $i24 := em28xx_dvb_urb_data_copy_loop_$bb17($p0, $p1, $i18, $i20, $i25, $p26, $i27, $i28, $p29, $i30, $p31, $i32, $i33, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i47, $p50, $i51, $i52, $i53, $p56, $i57, $i58, $p61, $i62, $i63, $i64, $p67, $i68, $i69, $p70, $p71, $p72, $p73, $p74, $i75, $p78, $i79, $i80, $p81, $i82, $p85, $i86, $i87, $i46, $i34, $i88, $i89, $i24);
    goto $bb17_last;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i18, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i24);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i47, 16)), $mul.ref(12, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i24);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i64, 16)), $mul.ref(8, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i24);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i75, 16)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p74, $mul.ref($i80, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i24);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i82, 16)), $mul.ref(8, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dvb_dmx_swfilter($p72, $p81, $i87);
    assume {:verifier.code 0} true;
    $i46 := $i24;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i34 := $i46;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i34, 1);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32($i88);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, $i20);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb41:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i88;
    goto $bb41_dummy;

  $bb38:
    assume $i69 == 1;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb25;

  $bb32:
    assume $i52 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i24);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i53, 16)), $mul.ref(12, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} print_err_status($p0, $i24, $i57);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i24);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i58, 16)), $mul.ref(12, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, $sub.i32(0, 71));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i63 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb25;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} dvb_dmx_swfilter($p40, $p42, $i45);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i46 := $i24;
    goto $bb31;

  $bb28:
    assume $i37 == 1;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb25;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} print_err_status($p0, $i24, $i30);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, $sub.i32(0, 71));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    goto $bb25;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb13;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} print_err_status($p0, $sub.i32(0, 1), $i13);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;
}



const em28xx_init_usb_xfer: ref;

axiom em28xx_init_usb_xfer == $sub.ref(0, 269256);

procedure em28xx_init_usb_xfer($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref) returns ($r: i32);



const print_err_status: ref;

axiom print_err_status == $sub.ref(0, 270288);

procedure print_err_status($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation print_err_status($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;

  $bb0:
    call {:si_unique_call 766} {:cexpr "print_err_status:arg:packet"} boogie_si_record_i32($i1);
    call {:si_unique_call 767} {:cexpr "print_err_status:arg:status"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, $sub.i32(0, 63));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p17 := .str.91;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 0);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i18 == 1);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i24 := $M.27;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume $i25 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} vslice_dummy_var_260 := printk.ref.ref.i32.i32.ref(.str.101, $p27, $i1, $i2, $p17);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i18 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i19 := $M.27;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i20 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 8984)), $mul.ref(320, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_259 := printk.ref.ref.i32.ref(.str.100, $p22, $i2, $p17);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p17 := .str.92;
    goto $bb31;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p17 := .str.95;
    goto $bb31;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, $sub.i32(0, 62));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, $sub.i32(0, 62));
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p17 := .str.99;
    goto $bb31;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p17 := .str.94;
    goto $bb31;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, $sub.i32(0, 75));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p17 := .str.97;
    goto $bb31;

  $bb19:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, $sub.i32(0, 75));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb23:
    assume $i13 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p17 := .str.96;
    goto $bb31;

  $bb17:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i2, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb27:
    assume $i15 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p17 := .str.98;
    goto $bb31;

  $bb25:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i2, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb29:
    assume $i16 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p17 := .str.93;
    goto $bb31;
}



const dvb_dmx_swfilter: ref;

axiom dvb_dmx_swfilter == $sub.ref(0, 271320);

procedure dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dvb_dmx_swfilter($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} {:cexpr "dvb_dmx_swfilter:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 272352);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i3 := ldv_undef_int();
    call {:si_unique_call 772} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i5 := $M.18;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.18 := $i6;
    call {:si_unique_call 773} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 273384);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 774} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 775} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const em28xx_write_reg_bits: ref;

axiom em28xx_write_reg_bits == $sub.ref(0, 274416);

procedure em28xx_write_reg_bits($p0: ref, $i1: i16, $i2: i8, $i3: i8) returns ($r: i32);



const em28xx_write_reg: ref;

axiom em28xx_write_reg == $sub.ref(0, 275448);

procedure em28xx_write_reg($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_write_reg($p0: ref, $i1: i16, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 777} {:cexpr "em28xx_write_reg:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 778} {:cexpr "em28xx_write_reg:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 779} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 780} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const em28xx_gpio_set: ref;

axiom em28xx_gpio_set == $sub.ref(0, 276480);

procedure em28xx_gpio_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_gpio_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 781} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 782} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 277512);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    return;
}



const i2c_master_send: ref;

axiom i2c_master_send == $sub.ref(0, 278544);

procedure i2c_master_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_master_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 784} {:cexpr "i2c_master_send:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 785} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 786} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 279576);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const down: ref;

axiom down == $sub.ref(0, 280608);

procedure down($p0: ref);
  free requires assertsPassed;



implementation down($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    return;
}



const up: ref;

axiom up == $sub.ref(0, 281640);

procedure up($p0: ref);
  free requires assertsPassed;



implementation up($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 282672);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 283704);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_setup_xc3028: ref;

axiom em28xx_setup_xc3028 == $sub.ref(0, 284736);

procedure em28xx_setup_xc3028($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation em28xx_setup_xc3028($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 285768);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 791} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 286800);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p1 := calloc(1, $i0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 795} __VERIFIER_assume($i4);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_initialize_em28xx_ops_1: ref;

axiom ldv_initialize_em28xx_ops_1 == $sub.ref(0, 287832);

procedure ldv_initialize_em28xx_ops_1();
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr;



implementation ldv_initialize_em28xx_ops_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p0 := ldv_init_zalloc(8952);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 288864);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.0, $M.11, $M.7, $M.33, $M.34, $M.35, $M.28, $M.1, $M.18, $M.27, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $CurrAddr, $M.26, $M.22, $M.23, $M.24, $M.25, $M.19, $M.20, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i75: i32;
  var $i76: i1;
  var $i78: i32;
  var $i79: i1;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i1;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;

  $bb0:
    call {:si_unique_call 797} $initialize();
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p0 := ldv_init_zalloc(1304);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_initialize();
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 802} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 804} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p38, $i40, $i41, $p42, $i44, $i45, $p46, $i48, $i49, $p50, $i52, $i53, $p54, $i56, $i57, $p58, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i75, $i76, $i78, $i79, $i81, $i82, $i84, $i85, $i87, $i88, $i90, $i91, $i93, $i94, $i95, $i96, $i98, $i99, $i100, $i101, $i103, $i104, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $p38, $i40, $i41, $p42, $i44, $i45, $p46, $i48, $i49, $p50, $i52, $i53, $p54, $i56, $i57, $p58, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i75, $i76, $i78, $i79, $i81, $i82, $i84, $i85, $i87, $i88, $i90, $i91, $i93, $i94, $i95, $i96, $i98, $i99, $i100, $i101, $i103, $i104, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_stop();
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb115_dummy;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i123 := $M.32;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb146:
    assume $i124 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} $i125 := __VERIFIER_nondet_int();
    call {:si_unique_call 875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i125);
    call {:si_unique_call 876} {:cexpr "tmp___3"} boogie_si_record_i32($i125);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_stop();
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb149:
    assume $i126 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i127 := $M.32;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb151:
    assume $i128 == 1;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_278 := em28xx_mt352_terratec_xs_init($p1);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i106 := $M.31;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i107 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} $i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i108);
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32($i108);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_stop();
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb121:
    assume $i110 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i116 := $M.31;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb134:
    assume $i117 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i118 := em28xx_dvb_register();
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.35 := $i118;
    call {:si_unique_call 867} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i118);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i119 := $M.35;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i121 := $M.35;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb139:
    assume $i122 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 871} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_initialize_em28xx_ops_1();
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i120 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.31 := 3;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} ldv_check_final_state();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb119:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb123;

  $bb124:
    assume $i111 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i112 := $M.31;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb126:
    assume $i113 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i114 := $M.30;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb128;

  $bb129:
    assume $i115 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} em28xx_dvb_unregister();
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.31 := 3;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i7 := $M.29;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb12:
    assume $i8 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    call {:si_unique_call 810} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_stop();
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb23:
    assume $i14 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i100 := $M.29;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 4);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i103 := $M.29;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 3);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb109:
    assume $i104 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vslice_dummy_var_277 := ldv_start_1();
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i101 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_276 := ldv_start_1();
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb21:
    assume $i13 == 1;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i95 := $M.29;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb103:
    assume $i96 == 1;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_275 := ldv_bind_1();
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i98 := $M.30;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.30 := $i99;
    call {:si_unique_call 854} {:cexpr "ref_cnt"} boogie_si_record_i32($i99);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i90 := $M.29;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb100:
    assume $i91 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_274 := ldv_release_1();
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i93 := $M.30;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.30 := $i94;
    call {:si_unique_call 851} {:cexpr "ref_cnt"} boogie_si_record_i32($i94);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb17:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i9, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i15 == 1);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i78 := $M.29;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 6);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i81 := $M.29;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 4);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i84 := $M.29;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 3);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i87 := $M.29;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 5);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb97:
    assume $i88 == 1;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_273 := ldv_disconnect_1();
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i85 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_272 := ldv_disconnect_1();
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i82 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_271 := ldv_disconnect_1();
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i79 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_270 := ldv_disconnect_1();
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb26:
    assume $i15 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i72 := $M.29;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 6);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i75 := $M.29;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 5);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb85:
    assume $i76 == 1;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_269 := ldv_stop_1();
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i73 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_268 := ldv_stop_1();
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb15:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i9, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i17 == 1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i60 := $M.29;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 6);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i66 := $M.29;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 4);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb76:
    assume $i67 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p68 := $M.28;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i69 := em28xx_dvb_resume($p68);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.34 := $i69;
    call {:si_unique_call 835} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i69);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i70 := $M.34;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i71 == 1;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb70:
    assume $i61 == 1;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p62 := $M.28;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i63 := em28xx_dvb_resume($p62);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.34 := $i63;
    call {:si_unique_call 832} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i63);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i64 := $M.34;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i65 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb30:
    assume $i17 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i36 := $M.29;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 6);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i40 := $M.29;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 4);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i44 := $M.29;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i48 := $M.29;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i52 := $M.29;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i56 := $M.29;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 5);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb67:
    assume $i57 == 1;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p58 := $M.28;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_267 := em28xx_dvb_fini($p58);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i53 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p54 := $M.28;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_266 := em28xx_dvb_fini($p54);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i49 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p50 := $M.28;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_265 := em28xx_dvb_fini($p50);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i45 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p46 := $M.28;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_264 := em28xx_dvb_fini($p46);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i41 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p42 := $M.28;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_263 := em28xx_dvb_fini($p42);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i37 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p38 := $M.28;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_262 := em28xx_dvb_fini($p38);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i18 == 1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i24 := $M.29;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 3);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i30 := $M.29;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 5);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume $i31 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p32 := $M.28;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i33 := em28xx_dvb_suspend($p32);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $M.33 := $i33;
    call {:si_unique_call 817} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i33);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i34 := $M.33;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i35 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb40:
    assume $i25 == 1;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p26 := $M.28;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i27 := em28xx_dvb_suspend($p26);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.33 := $i27;
    call {:si_unique_call 814} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i27);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i28 := $M.33;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i29 == 1;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb25;

  $bb34:
    assume $i19 == 1;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i20 := $M.29;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i21 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p22 := $M.28;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_261 := em28xx_dvb_init($p22);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb115_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 807} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 289896);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop_1: ref;

axiom ldv_stop_1 == $sub.ref(0, 290928);

procedure ldv_stop_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_stop_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_1: ref;

axiom ldv_disconnect_1 == $sub.ref(0, 291960);

procedure ldv_disconnect_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_1: ref;

axiom ldv_release_1 == $sub.ref(0, 292992);

procedure ldv_release_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 885} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 886} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_1: ref;

axiom ldv_bind_1 == $sub.ref(0, 294024);

procedure ldv_bind_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 887} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 888} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_1: ref;

axiom ldv_start_1 == $sub.ref(0, 295056);

procedure ldv_start_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 296088);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const em28xx_dvb_unregister: ref;

axiom em28xx_dvb_unregister == $sub.ref(0, 297120);

procedure em28xx_dvb_unregister();
  free requires assertsPassed;



implementation em28xx_dvb_unregister()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} em28xx_unregister_extension(dvb_ops);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    return;
}



const em28xx_dvb_register: ref;

axiom em28xx_dvb_register == $sub.ref(0, 298152);

procedure em28xx_dvb_register() returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_dvb_register() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i0 := em28xx_register_extension(dvb_ops);
    call {:si_unique_call 893} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 299184);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i0 := $M.18;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const em28xx_register_extension: ref;

axiom em28xx_register_extension == $sub.ref(0, 300216);

procedure em28xx_register_extension($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation em28xx_register_extension($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const em28xx_unregister_extension: ref;

axiom em28xx_unregister_extension == $sub.ref(0, 301248);

procedure em28xx_unregister_extension($p0: ref);
  free requires assertsPassed;



implementation em28xx_unregister_extension($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 302280);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 1} true;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 303312);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 304344);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 305376);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 306408);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 307440);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 308472);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 309504);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 310536);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 311568);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 312600);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 313632);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 314664);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 315696);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 899} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 900} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 901} __VERIFIER_assume($i4);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 316728);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 317760);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 318792);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 319824);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 320856);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 321888);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 322920);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 323952);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 324984);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 903} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 904} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 906} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 907} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 909} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 910} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} __VERIFIER_assume($i7);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 912} __VERIFIER_assume($i11);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 326016);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 327048);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 328080);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 329112);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 330144);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 331176);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 332208);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 333240);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 334272);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 1} true;
    call {:si_unique_call 913} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 914} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 915} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 335304);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 916} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 917} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 336336);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 337368);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 918} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 919} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 338400);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 339432);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 340464);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 920} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 921} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 922} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 923} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p6 := malloc($i5);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 925} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 341496);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 342528);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.18, $M.27, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.0, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 926} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.28 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 928} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 931} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 932} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 933} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.18 := 1;
    call {:si_unique_call 934} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.27 := 0;
    call {:si_unique_call 935} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.45 := $store.i16($M.45, adapter_nr, $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.45 := $store.i16($M.45, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.46 := $store.i16($M.46, drx_j_std_map, 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i8($M.52, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(3, 1)), 0);
    $M.53 := $store.i8($M.53, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(4, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(3, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(2, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(3, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(0, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(2, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(3, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(4, 1)), 0);
    $M.70 := $store.i16($M.70, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(2, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(2, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(4, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(0, 1)), 5000);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(2, 1)), 3);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(3, 1)), 1);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(4, 1)), 55);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(0, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(2, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i16($M.86, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(3, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(0, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(4, 1)), 0);
    $M.94 := $store.i16($M.94, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(0, 1)), 5380);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(2, 1)), 15);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(3, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(4, 1)), 55);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(2, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(3, 1)), 0);
    $M.101 := $store.i8($M.101, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(2, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(3, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(drx_j_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(4, 1)), 0);
    $M.106 := $store.ref($M.106, pinnacle_80e_dvb_config, drx_j_std_map);
    $M.107 := $store.i32($M.107, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 2);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref(pinnacle_80e_dvb_config, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.113 := $store.i8($M.113, em2874_lgdt3305_nogate_dev, 14);
    $M.114 := $store.i16($M.114, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(2, 1)), 3600);
    $M.115 := $store.i16($M.115, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(4, 1)), 3600);
    $M.116 := $store.i16($M.116, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i16($M.117, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i16($M.118, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(10, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(12, 1)), 3);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(16, 1)), 1);
    $M.121 := $store.i32($M.121, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(20, 1)), 1);
    $M.122 := $store.i32($M.122, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(24, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(28, 1)), 1);
    $M.124 := $store.i32($M.124, $add.ref($add.ref(em2874_lgdt3305_nogate_dev, $mul.ref(0, 36)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, kworld_ub435q_v3_config, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 3600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(18, 1)), 3600);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kworld_ub435q_v3_config, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.106 := $store.ref($M.106, kworld_ub435q_v2_config, kworld_a340_std_map);
    $M.107 := $store.i32($M.107, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 2);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref(kworld_ub435q_v2_config, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.113 := $store.i8($M.113, em2874_lgdt3305_dev, 14);
    $M.114 := $store.i16($M.114, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(2, 1)), 4000);
    $M.115 := $store.i16($M.115, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(4, 1)), 3250);
    $M.116 := $store.i16($M.116, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i16($M.117, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i16($M.118, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(10, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(12, 1)), 2);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(16, 1)), 1);
    $M.121 := $store.i32($M.121, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(20, 1)), 1);
    $M.122 := $store.i32($M.122, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(24, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(28, 1)), 1);
    $M.124 := $store.i32($M.124, $add.ref($add.ref(em2874_lgdt3305_dev, $mul.ref(0, 36)), $mul.ref(32, 1)), 0);
    $M.125 := $store.i8($M.125, terratec_htc_stick_drxk, 41);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(2, 1)), 1);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(6, 1)), 1);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(8, 1)), 6);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(12, 1)), 54);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(16, 1)), .str.80);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(terratec_htc_stick_drxk, $mul.ref(0, 32)), $mul.ref(24, 1)), 2);
    $M.125 := $store.i8($M.125, pctv_520e_drxk, 41);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(6, 1)), 1);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(8, 1)), 4);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(12, 1)), 58);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(16, 1)), .str.79);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(pctv_520e_drxk, $mul.ref(0, 32)), $mul.ref(24, 1)), 2);
    $M.125 := $store.i8($M.125, maxmedia_ub425_tc_drxk, 41);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(2, 1)), 1);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(12, 1)), 62);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(16, 1)), .str.78);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(maxmedia_ub425_tc_drxk, $mul.ref(0, 32)), $mul.ref(24, 1)), 2);
    $M.46 := $store.i16($M.46, mb86a20s_tda18271_config, 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i8($M.52, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(3, 1)), 0);
    $M.53 := $store.i8($M.53, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(4, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(3, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(2, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(3, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(0, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(2, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(3, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(4, 1)), 0);
    $M.70 := $store.i16($M.70, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(2, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(2, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(4, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(0, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(3, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(4, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(0, 1)), 4000);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(2, 1)), 19);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(3, 1)), 1);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(4, 1)), 55);
    $M.86 := $store.i16($M.86, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(3, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(0, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(4, 1)), 0);
    $M.94 := $store.i16($M.94, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(0, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(2, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(3, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(4, 1)), 0);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(2, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(3, 1)), 0);
    $M.101 := $store.i8($M.101, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(2, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(3, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(mb86a20s_tda18271_config, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(4, 1)), 0);
    $M.106 := $store.ref($M.106, c3tech_duo_tda18271_config, mb86a20s_tda18271_config);
    $M.107 := $store.i32($M.107, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 2);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(20, 1)), 3);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref(c3tech_duo_tda18271_config, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.125 := $store.i8($M.125, terratec_h5_drxk, 41);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(2, 1)), 1);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(16, 1)), .str.77);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(terratec_h5_drxk, $mul.ref(0, 32)), $mul.ref(24, 1)), 2);
    $M.125 := $store.i8($M.125, hauppauge_930c_drxk, 41);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(1, 1)), 1);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(2, 1)), 1);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.134 := $store.i32($M.134, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(12, 1)), 56);
    $M.135 := $store.ref($M.135, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(16, 1)), .str.74);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(hauppauge_930c_drxk, $mul.ref(0, 32)), $mul.ref(24, 1)), 2);
    $M.106 := $store.ref($M.106, em28xx_cxd2820r_tda18271_config, $0.ref);
    $M.107 := $store.i32($M.107, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 2);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 1);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref(em28xx_cxd2820r_tda18271_config, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.46 := $store.i16($M.46, kworld_a340_std_map, 0);
    $M.47 := $store.i8($M.47, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.49 := $store.i8($M.49, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i16($M.50, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.51 := $store.i8($M.51, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i8($M.52, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(3, 1)), 0);
    $M.53 := $store.i8($M.53, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(4, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(0, 1)), 0);
    $M.55 := $store.i8($M.55, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(3, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(2, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(3, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(4, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(3, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(4, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(0, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(2, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(3, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(4, 1)), 0);
    $M.70 := $store.i16($M.70, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(2, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i8($M.75, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(2, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(4, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(0, 1)), 3250);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(2, 1)), 3);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(3, 1)), 1);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(4, 1)), 55);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(0, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(2, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(3, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i16($M.86, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(3, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(0, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(2, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(3, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(4, 1)), 0);
    $M.94 := $store.i16($M.94, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(0, 1)), 4000);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(2, 1)), 7);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(3, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(4, 1)), 55);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(0, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(2, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(3, 1)), 0);
    $M.101 := $store.i8($M.101, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(78, 1)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(2, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(3, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(kworld_a340_std_map, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(4, 1)), 0);
    $M.106 := $store.ref($M.106, kworld_a340_config, kworld_a340_std_map);
    $M.107 := $store.i32($M.107, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.108 := $store.i32($M.108, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.112 := $store.i32($M.112, $add.ref($add.ref(kworld_a340_config, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.113 := $store.i8($M.113, em2870_lgdt3304_dev, 14);
    $M.114 := $store.i16($M.114, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(2, 1)), 4000);
    $M.115 := $store.i16($M.115, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(4, 1)), 3250);
    $M.116 := $store.i16($M.116, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i16($M.117, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i16($M.118, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(10, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(12, 1)), 3);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(16, 1)), 0);
    $M.121 := $store.i32($M.121, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(20, 1)), 1);
    $M.122 := $store.i32($M.122, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(24, 1)), 0);
    $M.123 := $store.i32($M.123, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(28, 1)), 1);
    $M.124 := $store.i32($M.124, $add.ref($add.ref(em2870_lgdt3304_dev, $mul.ref(0, 36)), $mul.ref(32, 1)), 1);
    $M.173 := $store.i8($M.173, em28xx_zl10353_no_i2c_gate_dev, 15);
    $M.174 := $store.i32($M.174, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(12, 1)), 1);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(20, 1)), 1);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(21, 1)), 0);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(em28xx_zl10353_no_i2c_gate_dev, $mul.ref(0, 24)), $mul.ref(22, 1)), 0);
    $M.173 := $store.i8($M.173, em28xx_zl10353_xc3028_no_i2c_gate, 15);
    $M.174 := $store.i32($M.174, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(8, 1)), 45600);
    $M.176 := $store.i32($M.176, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(12, 1)), 1);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(20, 1)), 1);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(21, 1)), 0);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(em28xx_zl10353_xc3028_no_i2c_gate, $mul.ref(0, 24)), $mul.ref(22, 1)), 0);
    $M.173 := $store.i8($M.173, em28xx_zl10353_with_xc3028, 15);
    $M.174 := $store.i32($M.174, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(4, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(8, 1)), 45600);
    $M.176 := $store.i32($M.176, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(12, 1)), 1);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(16, 1)), 1);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(20, 1)), 0);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(21, 1)), 0);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(em28xx_zl10353_with_xc3028, $mul.ref(0, 24)), $mul.ref(22, 1)), 0);
    call {:si_unique_call 936} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 343560);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 344592);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 345624);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 346656);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 347688);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 348720);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 349752);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 350784);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i8, arg3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i8, arg3: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 351816);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 352848);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i8) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i8) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 353880);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 354912);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i8, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i8, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 355944);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 356976);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 358008);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(em28xx_dvb_bus_ctrl, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(drxk_gate_ctrl, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 937} $i1 := drxk_gate_ctrl(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 938} $i2 := em28xx_dvb_bus_ctrl(arg, arg1);
    $r := $i2;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 359040);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 360072);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i8) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i8) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 361104);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 362136);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 363168);

procedure devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 364200);

procedure devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 365232);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(em28xx_dvb_urb_data_copy, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 939} $i3 := em28xx_dvb_urb_data_copy($p1, $p2);
    $r := $i3;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 366264);

procedure devirtbounce.22(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(em28xx_free_device, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 940} em28xx_free_device(arg);
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 367296);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 368328);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 369360);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.18, $M.27, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.0, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 941} __SMACK_static_init();
    call {:si_unique_call 942} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.29, $M.30, $M.31, $M.32, $M.0, $M.11, $M.7, $M.33, $M.34, $M.35, $M.28, $M.1, $M.18, $M.27, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $CurrAddr, $M.26, $M.22, $M.23, $M.24, $M.25, $M.19, $M.20;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation em28xx_dvb_urb_data_copy_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$i18: i32, in_$i20: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$i47: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$i46: i32, in_$i34: i32, in_$i88: i32, in_$i89: i1, in_$i24: i32) returns (out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$i47: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$i46: i32, out_$i34: i32, out_$i88: i32, out_$i89: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i46, out_$i34, out_$i88, out_$i89, out_$i24 := in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$i33, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i47, in_$p50, in_$i51, in_$i52, in_$i53, in_$p56, in_$i57, in_$i58, in_$p61, in_$i62, in_$i63, in_$i64, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$p85, in_$i86, in_$i87, in_$i46, in_$i34, in_$i88, in_$i89, in_$i24;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  $bb41:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i88;
    goto $bb41_dummy;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, in_$i20);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i34, 1);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_5455;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5454;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i46;
    goto $bb25;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    goto $bb25;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    goto $bb25;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    goto $bb25;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    goto $bb25;

  $bb23:
    assume out_$i33 == 1;
    goto corral_source_split_5452;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, $sub.i32(0, 71));
    goto corral_source_split_5450;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_5449;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5448;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} print_err_status(in_$p0, out_$i24, out_$i30);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5445;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_5444;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 0);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_5434;

  $bb19:
    assume out_$i25 == 1;
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(in_$i18, 0);
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume out_$i37 == 1;
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_5459;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5458;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb34:
    assume out_$i63 == 1;
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, $sub.i32(0, 71));
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i58, 16)), $mul.ref(12, 1));
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} print_err_status(in_$p0, out_$i24, out_$i57);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i53, 16)), $mul.ref(12, 1));
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5477;

  $bb32:
    assume out_$i52 == 1;
    goto corral_source_split_5476;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 0);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_5441;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i47, 16)), $mul.ref(12, 1));
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5439;

  $bb20:
    assume !(out_$i25 == 1);
    goto corral_source_split_5438;

  $bb38:
    assume out_$i69 == 1;
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i64, 16)), $mul.ref(8, 1));
    goto corral_source_split_5489;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5488;

  $bb33:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5474;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dvb_dmx_swfilter(out_$p72, out_$p81, out_$i87);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i24;
    goto $bb31;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i24;
    goto $bb31;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} dvb_dmx_swfilter(out_$p40, out_$p42, out_$i45);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5466;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_5465;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_5464;

  $bb29:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i86);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, out_$p85);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i82, 16)), $mul.ref(8, 1));
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p74, $mul.ref(out_$i80, 1));
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i32.i64(out_$i79);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i75, 16)), $mul.ref(0, 1));
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 2360)), $mul.ref(440, 1));
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_5496;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8984)), $mul.ref(16, 1));
    goto corral_source_split_5495;

  $bb39:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i46, out_$i34, out_$i88, out_$i89, out_$i24 := em28xx_dvb_urb_data_copy_loop_$bb17(in_$p0, in_$p1, in_$i18, in_$i20, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i47, out_$p50, out_$i51, out_$i52, out_$i53, out_$p56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p85, out_$i86, out_$i87, out_$i46, out_$i34, out_$i88, out_$i89, out_$i24);
    return;

  exit:
    return;
}



procedure em28xx_dvb_urb_data_copy_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$i18: i32, in_$i20: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$i47: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$p78: ref, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$i46: i32, in_$i34: i32, in_$i88: i32, in_$i89: i1, in_$i24: i32) returns (out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$i47: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$p78: ref, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$i46: i32, out_$i34: i32, out_$i88: i32, out_$i89: i1, out_$i24: i32);



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i75: i32, in_$i76: i1, in_$i78: i32, in_$i79: i1, in_$i81: i32, in_$i82: i1, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i75: i32, out_$i76: i1, out_$i78: i32, out_$i79: i1, out_$i81: i32, out_$i82: i1, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i40, in_$i41, in_$p42, in_$i44, in_$i45, in_$p46, in_$i48, in_$i49, in_$p50, in_$i52, in_$i53, in_$p54, in_$i56, in_$i57, in_$p58, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i75, in_$i76, in_$i78, in_$i79, in_$i81, in_$i82, in_$i84, in_$i85, in_$i87, in_$i88, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$i96, in_$i98, in_$i99, in_$i100, in_$i101, in_$i103, in_$i104, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 807} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb115_dummy;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb13:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5671;

  SeqInstr_99:
    goto corral_source_split_5670;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} out_vslice_dummy_var_261 := em28xx_dvb_init(out_$p22);
    goto SeqInstr_98;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$p22 := $M.28;
    goto corral_source_split_5669;

  $bb36:
    assume out_$i21 == 1;
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$i20 := $M.29;
    goto corral_source_split_5665;

  $bb34:
    assume out_$i19 == 1;
    goto corral_source_split_5664;

  $bb32:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb28:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb15:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i9, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} out_$i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i9);
    call {:si_unique_call 810} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i9);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i8 == 1;
    goto corral_source_split_5630;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i7 := $M.29;
    goto corral_source_split_5627;

  $bb10:
    assume out_$i6 == 1;
    goto corral_source_split_5626;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5694;

  $bb48:
    assume out_$i35 == 1;
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_5691;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    out_$i34 := $M.33;
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $M.33 := out_$i33;
    call {:si_unique_call 817} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5689;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_$i33 := em28xx_dvb_suspend(out_$p32);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$p32 := $M.28;
    goto corral_source_split_5687;

  $bb46:
    assume out_$i31 == 1;
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 5);
    goto corral_source_split_5684;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i30 := $M.29;
    goto corral_source_split_5683;

  $bb41:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 815} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5681;

  $bb42:
    assume out_$i29 == 1;
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i28 := $M.33;
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.33 := out_$i27;
    call {:si_unique_call 814} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} out_$i27 := em28xx_dvb_suspend(out_$p26);
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$p26 := $M.28;
    goto corral_source_split_5674;

  $bb40:
    assume out_$i25 == 1;
    goto corral_source_split_5673;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 3);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i24 := $M.29;
    goto corral_source_split_5661;

  $bb33:
    assume !(out_$i18 == 1);
    goto corral_source_split_5660;

  $bb68:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 830} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5739;

  SeqInstr_117:
    goto corral_source_split_5738;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} out_vslice_dummy_var_267 := em28xx_dvb_fini(out_$p58);
    goto SeqInstr_116;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$p58 := $M.28;
    goto corral_source_split_5737;

  $bb67:
    assume out_$i57 == 1;
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 5);
    goto corral_source_split_5734;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i56 := $M.29;
    goto corral_source_split_5733;

  $bb65:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5731;

  SeqInstr_114:
    goto corral_source_split_5730;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_vslice_dummy_var_266 := em28xx_dvb_fini(out_$p54);
    goto SeqInstr_113;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$p54 := $M.28;
    goto corral_source_split_5729;

  $bb64:
    assume out_$i53 == 1;
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 2);
    goto corral_source_split_5726;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i52 := $M.29;
    goto corral_source_split_5725;

  $bb62:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5723;

  SeqInstr_111:
    goto corral_source_split_5722;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_vslice_dummy_var_265 := em28xx_dvb_fini(out_$p50);
    goto SeqInstr_110;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p50 := $M.28;
    goto corral_source_split_5721;

  $bb61:
    assume out_$i49 == 1;
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 3);
    goto corral_source_split_5718;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i48 := $M.29;
    goto corral_source_split_5717;

  $bb59:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 824} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5715;

  SeqInstr_108:
    goto corral_source_split_5714;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} out_vslice_dummy_var_264 := em28xx_dvb_fini(out_$p46);
    goto SeqInstr_107;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$p46 := $M.28;
    goto corral_source_split_5713;

  $bb58:
    assume out_$i45 == 1;
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 1);
    goto corral_source_split_5710;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i44 := $M.29;
    goto corral_source_split_5709;

  $bb56:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 822} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5707;

  SeqInstr_105:
    goto corral_source_split_5706;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} out_vslice_dummy_var_263 := em28xx_dvb_fini(out_$p42);
    goto SeqInstr_104;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$p42 := $M.28;
    goto corral_source_split_5705;

  $bb55:
    assume out_$i41 == 1;
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 4);
    goto corral_source_split_5702;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i40 := $M.29;
    goto corral_source_split_5701;

  $bb53:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5699;

  SeqInstr_102:
    goto corral_source_split_5698;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_vslice_dummy_var_262 := em28xx_dvb_fini(out_$p38);
    goto SeqInstr_101;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$p38 := $M.28;
    goto corral_source_split_5697;

  $bb52:
    assume out_$i37 == 1;
    goto corral_source_split_5696;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 6);
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i36 := $M.29;
    goto corral_source_split_5653;

  $bb30:
    assume out_$i17 == 1;
    goto corral_source_split_5652;

  $bb29:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb77:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5762;

  $bb78:
    assume out_$i71 == 1;
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    out_$i70 := $M.34;
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.34 := out_$i69;
    call {:si_unique_call 835} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_5757;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} out_$i69 := em28xx_dvb_resume(out_$p68);
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    out_$p68 := $M.28;
    goto corral_source_split_5755;

  $bb76:
    assume out_$i67 == 1;
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 4);
    goto corral_source_split_5752;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i66 := $M.29;
    goto corral_source_split_5751;

  $bb71:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5749;

  $bb72:
    assume out_$i65 == 1;
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i64 := $M.34;
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.34 := out_$i63;
    call {:si_unique_call 832} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_$i63 := em28xx_dvb_resume(out_$p62);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    out_$p62 := $M.28;
    goto corral_source_split_5742;

  $bb70:
    assume out_$i61 == 1;
    goto corral_source_split_5741;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 6);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i60 := $M.29;
    goto corral_source_split_5657;

  $bb31:
    assume !(out_$i17 == 1);
    goto corral_source_split_5656;

  $bb86:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5773;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_vslice_dummy_var_269 := ldv_stop_1();
    goto corral_source_split_5772;

  $bb85:
    assume out_$i76 == 1;
    goto corral_source_split_5771;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 5);
    goto corral_source_split_5769;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i75 := $M.29;
    goto corral_source_split_5768;

  $bb83:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_vslice_dummy_var_268 := ldv_stop_1();
    goto corral_source_split_5765;

  $bb82:
    assume out_$i73 == 1;
    goto corral_source_split_5764;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 6);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    out_$i72 := $M.29;
    goto corral_source_split_5645;

  $bb26:
    assume out_$i15 == 1;
    goto corral_source_split_5644;

  $bb17:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i9, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb16:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i9, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb98:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_vslice_dummy_var_273 := ldv_disconnect_1();
    goto corral_source_split_5797;

  $bb97:
    assume out_$i88 == 1;
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 5);
    goto corral_source_split_5794;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i87 := $M.29;
    goto corral_source_split_5793;

  $bb95:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_vslice_dummy_var_272 := ldv_disconnect_1();
    goto corral_source_split_5790;

  $bb94:
    assume out_$i85 == 1;
    goto corral_source_split_5789;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 3);
    goto corral_source_split_5787;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i84 := $M.29;
    goto corral_source_split_5786;

  $bb92:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_vslice_dummy_var_271 := ldv_disconnect_1();
    goto corral_source_split_5783;

  $bb91:
    assume out_$i82 == 1;
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 4);
    goto corral_source_split_5780;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i81 := $M.29;
    goto corral_source_split_5779;

  $bb89:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5777;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} out_vslice_dummy_var_270 := ldv_disconnect_1();
    goto corral_source_split_5776;

  $bb88:
    assume out_$i79 == 1;
    goto corral_source_split_5775;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 6);
    goto corral_source_split_5650;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    out_$i78 := $M.29;
    goto corral_source_split_5649;

  $bb27:
    assume !(out_$i15 == 1);
    goto corral_source_split_5648;

  $bb101:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.30 := out_$i94;
    call {:si_unique_call 851} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, 1);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$i93 := $M.30;
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_vslice_dummy_var_274 := ldv_release_1();
    goto corral_source_split_5801;

  $bb100:
    assume out_$i91 == 1;
    goto corral_source_split_5800;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 2);
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$i90 := $M.29;
    goto corral_source_split_5633;

  $bb19:
    assume out_$i12 == 1;
    goto corral_source_split_5632;

  $bb18:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i9, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb104:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.30 := out_$i99;
    call {:si_unique_call 854} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, 1);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i98 := $M.30;
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 853} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_vslice_dummy_var_275 := ldv_bind_1();
    goto corral_source_split_5808;

  $bb103:
    assume out_$i96 == 1;
    goto corral_source_split_5807;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 1);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i95 := $M.29;
    goto corral_source_split_5637;

  $bb21:
    assume out_$i13 == 1;
    goto corral_source_split_5636;

  $bb20:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb110:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.29 := 5;
    call {:si_unique_call 858} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(5);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_vslice_dummy_var_277 := ldv_start_1();
    goto corral_source_split_5822;

  $bb109:
    assume out_$i104 == 1;
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 3);
    goto corral_source_split_5819;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i103 := $M.29;
    goto corral_source_split_5818;

  $bb107:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $M.29 := 6;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(6);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} out_vslice_dummy_var_276 := ldv_start_1();
    goto corral_source_split_5815;

  $bb106:
    assume out_$i101 == 1;
    goto corral_source_split_5814;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 4);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$i100 := $M.29;
    goto corral_source_split_5641;

  $bb23:
    assume out_$i14 == 1;
    goto corral_source_split_5640;

  $bb22:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_stop();
    goto corral_source_split_5825;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb25;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb25;

  $bb117:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb128;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb128;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i114 := $M.30;
    goto corral_source_split_5838;

  $bb126:
    assume out_$i113 == 1;
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i112 := $M.31;
    goto corral_source_split_5834;

  $bb124:
    assume out_$i111 == 1;
    goto corral_source_split_5833;

  $bb119:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i108, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_5827:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} out_$i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i108);
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i108);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume out_$i107 == 1;
    goto corral_source_split_5827;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$i106 := $M.31;
    goto corral_source_split_5619;

  $bb5:
    assume out_$i4 == 1;
    goto corral_source_split_5618;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb135:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb140:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_initialize_em28xx_ops_1();
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 871} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5860;

  $bb139:
    assume out_$i122 == 1;
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 0);
    goto corral_source_split_5857;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i121 := $M.35;
    goto corral_source_split_5856;

  $bb137:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i119 := $M.35;
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.35 := out_$i118;
    call {:si_unique_call 867} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$i118 := em28xx_dvb_register();
    goto corral_source_split_5848;

  $bb134:
    assume out_$i117 == 1;
    goto corral_source_split_5847;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 1);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i116 := $M.31;
    goto corral_source_split_5830;

  $bb121:
    assume out_$i110 == 1;
    goto corral_source_split_5829;

  $bb120:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i108, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_stop();
    goto corral_source_split_5865;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(out_$i110 == 1);
    goto $bb123;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb123;

  $bb147:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb152:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_vslice_dummy_var_278 := em28xx_mt352_terratec_xs_init(in_$p1);
    goto corral_source_split_5874;

  $bb151:
    assume out_$i128 == 1;
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 1);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$i127 := $M.32;
    goto corral_source_split_5870;

  $bb149:
    assume out_$i126 == 1;
    goto corral_source_split_5869;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_5867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} out_$i125 := __VERIFIER_nondet_int();
    call {:si_unique_call 875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i125);
    call {:si_unique_call 876} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i125);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i124 == 1;
    goto corral_source_split_5867;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i123 := $M.32;
    goto corral_source_split_5623;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_5622;

  $bb6:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_stop();
    goto corral_source_split_5877;

  $bb150:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_stop();
    goto corral_source_split_5879;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb9;

  $bb115_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i40, out_$i41, out_$p42, out_$i44, out_$i45, out_$p46, out_$i48, out_$i49, out_$p50, out_$i52, out_$i53, out_$p54, out_$i56, out_$i57, out_$p58, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i75: i32, in_$i76: i1, in_$i78: i32, in_$i79: i1, in_$i81: i32, in_$i82: i1, in_$i84: i32, in_$i85: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i1, in_$i103: i32, in_$i104: i1, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i75: i32, out_$i76: i1, out_$i78: i32, out_$i79: i1, out_$i81: i32, out_$i82: i1, out_$i84: i32, out_$i85: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i1, out_$i103: i32, out_$i104: i1, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32);
  modifies $M.29, $M.0, $M.11, $M.7, $M.26, $M.22, $M.23, $M.24, $M.25, $M.19, $M.20, $M.18, $CurrAddr, assertsPassed, $M.33, $M.34, $M.30, $M.28, $M.32, $M.31, $M.35, $M.1;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


